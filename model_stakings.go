/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Stakings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stakings{}

// Stakings The staking info.
type Stakings struct {
	// The unique id of the stake.
	Id string `json:"id"`
	// The unique wallet id.
	WalletId string `json:"wallet_id"`
	// The staker wallet address.
	Address string `json:"address"`
	// The staking amount details.
	Amounts []AmountDetailsInner `json:"amounts"`
	// The initiator of the stake.
	Initiator *string `json:"initiator,omitempty"`
	// The unlock time.
	UnlockTime *int64 `json:"unlock_time,omitempty"`
	// The unlock block height.
	UnlockBlockHeight *int64 `json:"unlock_block_height,omitempty"`
	// The unique pool id.
	PoolId string `json:"pool_id"`
	// The pos chain of the stake.
	PosChain *string `json:"pos_chain,omitempty"`
	// The rewards info of the stake.
	RewardsInfo map[string]interface{} `json:"rewards_info,omitempty"`
	// The time when the stake was created.
	CreatedTime int64 `json:"created_time"`
	// The time when the stake was last updated.
	UpdatedTime int64 `json:"updated_time"`
	ValidatorInfo StakingsValidatorInfo `json:"validator_info"`
}

type _Stakings Stakings

// NewStakings instantiates a new Stakings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakings(id string, walletId string, address string, amounts []AmountDetailsInner, poolId string, createdTime int64, updatedTime int64, validatorInfo StakingsValidatorInfo) *Stakings {
	this := Stakings{}
	this.Id = id
	this.WalletId = walletId
	this.Address = address
	this.Amounts = amounts
	this.PoolId = poolId
	this.CreatedTime = createdTime
	this.UpdatedTime = updatedTime
	this.ValidatorInfo = validatorInfo
	return &this
}

// NewStakingsWithDefaults instantiates a new Stakings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingsWithDefaults() *Stakings {
	this := Stakings{}
	return &this
}

// GetId returns the Id field value
func (o *Stakings) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Stakings) SetId(v string) {
	o.Id = v
}

// GetWalletId returns the WalletId field value
func (o *Stakings) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Stakings) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddress returns the Address field value
func (o *Stakings) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Stakings) SetAddress(v string) {
	o.Address = v
}

// GetAmounts returns the Amounts field value
func (o *Stakings) GetAmounts() []AmountDetailsInner {
	if o == nil {
		var ret []AmountDetailsInner
		return ret
	}

	return o.Amounts
}

// GetAmountsOk returns a tuple with the Amounts field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetAmountsOk() ([]AmountDetailsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amounts, true
}

// SetAmounts sets field value
func (o *Stakings) SetAmounts(v []AmountDetailsInner) {
	o.Amounts = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *Stakings) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakings) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *Stakings) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *Stakings) SetInitiator(v string) {
	o.Initiator = &v
}

// GetUnlockTime returns the UnlockTime field value if set, zero value otherwise.
func (o *Stakings) GetUnlockTime() int64 {
	if o == nil || IsNil(o.UnlockTime) {
		var ret int64
		return ret
	}
	return *o.UnlockTime
}

// GetUnlockTimeOk returns a tuple with the UnlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakings) GetUnlockTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UnlockTime) {
		return nil, false
	}
	return o.UnlockTime, true
}

// HasUnlockTime returns a boolean if a field has been set.
func (o *Stakings) HasUnlockTime() bool {
	if o != nil && !IsNil(o.UnlockTime) {
		return true
	}

	return false
}

// SetUnlockTime gets a reference to the given int64 and assigns it to the UnlockTime field.
func (o *Stakings) SetUnlockTime(v int64) {
	o.UnlockTime = &v
}

// GetUnlockBlockHeight returns the UnlockBlockHeight field value if set, zero value otherwise.
func (o *Stakings) GetUnlockBlockHeight() int64 {
	if o == nil || IsNil(o.UnlockBlockHeight) {
		var ret int64
		return ret
	}
	return *o.UnlockBlockHeight
}

// GetUnlockBlockHeightOk returns a tuple with the UnlockBlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakings) GetUnlockBlockHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.UnlockBlockHeight) {
		return nil, false
	}
	return o.UnlockBlockHeight, true
}

// HasUnlockBlockHeight returns a boolean if a field has been set.
func (o *Stakings) HasUnlockBlockHeight() bool {
	if o != nil && !IsNil(o.UnlockBlockHeight) {
		return true
	}

	return false
}

// SetUnlockBlockHeight gets a reference to the given int64 and assigns it to the UnlockBlockHeight field.
func (o *Stakings) SetUnlockBlockHeight(v int64) {
	o.UnlockBlockHeight = &v
}

// GetPoolId returns the PoolId field value
func (o *Stakings) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *Stakings) SetPoolId(v string) {
	o.PoolId = v
}

// GetPosChain returns the PosChain field value if set, zero value otherwise.
func (o *Stakings) GetPosChain() string {
	if o == nil || IsNil(o.PosChain) {
		var ret string
		return ret
	}
	return *o.PosChain
}

// GetPosChainOk returns a tuple with the PosChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakings) GetPosChainOk() (*string, bool) {
	if o == nil || IsNil(o.PosChain) {
		return nil, false
	}
	return o.PosChain, true
}

// HasPosChain returns a boolean if a field has been set.
func (o *Stakings) HasPosChain() bool {
	if o != nil && !IsNil(o.PosChain) {
		return true
	}

	return false
}

// SetPosChain gets a reference to the given string and assigns it to the PosChain field.
func (o *Stakings) SetPosChain(v string) {
	o.PosChain = &v
}

// GetRewardsInfo returns the RewardsInfo field value if set, zero value otherwise.
func (o *Stakings) GetRewardsInfo() map[string]interface{} {
	if o == nil || IsNil(o.RewardsInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.RewardsInfo
}

// GetRewardsInfoOk returns a tuple with the RewardsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakings) GetRewardsInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RewardsInfo) {
		return map[string]interface{}{}, false
	}
	return o.RewardsInfo, true
}

// HasRewardsInfo returns a boolean if a field has been set.
func (o *Stakings) HasRewardsInfo() bool {
	if o != nil && !IsNil(o.RewardsInfo) {
		return true
	}

	return false
}

// SetRewardsInfo gets a reference to the given map[string]interface{} and assigns it to the RewardsInfo field.
func (o *Stakings) SetRewardsInfo(v map[string]interface{}) {
	o.RewardsInfo = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *Stakings) GetCreatedTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetCreatedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *Stakings) SetCreatedTime(v int64) {
	o.CreatedTime = v
}

// GetUpdatedTime returns the UpdatedTime field value
func (o *Stakings) GetUpdatedTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetUpdatedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTime, true
}

// SetUpdatedTime sets field value
func (o *Stakings) SetUpdatedTime(v int64) {
	o.UpdatedTime = v
}

// GetValidatorInfo returns the ValidatorInfo field value
func (o *Stakings) GetValidatorInfo() StakingsValidatorInfo {
	if o == nil {
		var ret StakingsValidatorInfo
		return ret
	}

	return o.ValidatorInfo
}

// GetValidatorInfoOk returns a tuple with the ValidatorInfo field value
// and a boolean to check if the value has been set.
func (o *Stakings) GetValidatorInfoOk() (*StakingsValidatorInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorInfo, true
}

// SetValidatorInfo sets field value
func (o *Stakings) SetValidatorInfo(v StakingsValidatorInfo) {
	o.ValidatorInfo = v
}

func (o Stakings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stakings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address"] = o.Address
	toSerialize["amounts"] = o.Amounts
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.UnlockTime) {
		toSerialize["unlock_time"] = o.UnlockTime
	}
	if !IsNil(o.UnlockBlockHeight) {
		toSerialize["unlock_block_height"] = o.UnlockBlockHeight
	}
	toSerialize["pool_id"] = o.PoolId
	if !IsNil(o.PosChain) {
		toSerialize["pos_chain"] = o.PosChain
	}
	if !IsNil(o.RewardsInfo) {
		toSerialize["rewards_info"] = o.RewardsInfo
	}
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["updated_time"] = o.UpdatedTime
	toSerialize["validator_info"] = o.ValidatorInfo
	return toSerialize, nil
}

func (o *Stakings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"wallet_id",
		"address",
		"amounts",
		"pool_id",
		"created_time",
		"updated_time",
		"validator_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakings := _Stakings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStakings)

	if err != nil {
		return err
	}

	*o = Stakings(varStakings)

	return err
}

type NullableStakings struct {
	value *Stakings
	isSet bool
}

func (v NullableStakings) Get() *Stakings {
	return v.value
}

func (v *NullableStakings) Set(val *Stakings) {
	v.value = val
	v.isSet = true
}

func (v NullableStakings) IsSet() bool {
	return v.isSet
}

func (v *NullableStakings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakings(val *Stakings) *NullableStakings {
	return &NullableStakings{value: val, isSet: true}
}

func (v NullableStakings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


