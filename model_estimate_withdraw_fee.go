/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimateWithdrawFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimateWithdrawFee{}

// EstimateWithdrawFee struct for EstimateWithdrawFee
type EstimateWithdrawFee struct {
	ActivityType *ActivityType `json:"activity_type,omitempty"`
	// The id of the related staking.
	StakingId string `json:"staking_id"`
	// The amount to stake
	Amount *string `json:"amount,omitempty"`
	Fee TransactionTransferFee `json:"fee"`
}

type _EstimateWithdrawFee EstimateWithdrawFee

// NewEstimateWithdrawFee instantiates a new EstimateWithdrawFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateWithdrawFee(stakingId string, fee TransactionTransferFee) *EstimateWithdrawFee {
	this := EstimateWithdrawFee{}
	this.StakingId = stakingId
	this.Fee = fee
	return &this
}

// NewEstimateWithdrawFeeWithDefaults instantiates a new EstimateWithdrawFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateWithdrawFeeWithDefaults() *EstimateWithdrawFee {
	this := EstimateWithdrawFee{}
	return &this
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *EstimateWithdrawFee) GetActivityType() ActivityType {
	if o == nil || IsNil(o.ActivityType) {
		var ret ActivityType
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateWithdrawFee) GetActivityTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *EstimateWithdrawFee) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given ActivityType and assigns it to the ActivityType field.
func (o *EstimateWithdrawFee) SetActivityType(v ActivityType) {
	o.ActivityType = &v
}

// GetStakingId returns the StakingId field value
func (o *EstimateWithdrawFee) GetStakingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakingId
}

// GetStakingIdOk returns a tuple with the StakingId field value
// and a boolean to check if the value has been set.
func (o *EstimateWithdrawFee) GetStakingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakingId, true
}

// SetStakingId sets field value
func (o *EstimateWithdrawFee) SetStakingId(v string) {
	o.StakingId = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *EstimateWithdrawFee) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateWithdrawFee) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *EstimateWithdrawFee) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *EstimateWithdrawFee) SetAmount(v string) {
	o.Amount = &v
}

// GetFee returns the Fee field value
func (o *EstimateWithdrawFee) GetFee() TransactionTransferFee {
	if o == nil {
		var ret TransactionTransferFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *EstimateWithdrawFee) GetFeeOk() (*TransactionTransferFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *EstimateWithdrawFee) SetFee(v TransactionTransferFee) {
	o.Fee = v
}

func (o EstimateWithdrawFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimateWithdrawFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityType) {
		toSerialize["activity_type"] = o.ActivityType
	}
	toSerialize["staking_id"] = o.StakingId
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["fee"] = o.Fee
	return toSerialize, nil
}

func (o *EstimateWithdrawFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"staking_id",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimateWithdrawFee := _EstimateWithdrawFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimateWithdrawFee)

	if err != nil {
		return err
	}

	*o = EstimateWithdrawFee(varEstimateWithdrawFee)

	return err
}

type NullableEstimateWithdrawFee struct {
	value *EstimateWithdrawFee
	isSet bool
}

func (v NullableEstimateWithdrawFee) Get() *EstimateWithdrawFee {
	return v.value
}

func (v *NullableEstimateWithdrawFee) Set(val *EstimateWithdrawFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateWithdrawFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateWithdrawFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateWithdrawFee(val *EstimateWithdrawFee) *NullableEstimateWithdrawFee {
	return &NullableEstimateWithdrawFee{value: val, isSet: true}
}

func (v NullableEstimateWithdrawFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateWithdrawFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


