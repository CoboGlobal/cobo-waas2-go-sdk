/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionAddressDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionAddressDestination{}

// TransactionAddressDestination The information about the transaction destination.
type TransactionAddressDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
	TokenId string `json:"token_id"`
	// (This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.
	AssetId *string `json:"asset_id,omitempty"`
	AccountOutput *TransactionAddressDestinationAccountOutput `json:"account_output,omitempty"`
	UtxoOutputs *TransactionAddressDestinationUtxoOutputs `json:"utxo_outputs,omitempty"`
}

type _TransactionAddressDestination TransactionAddressDestination

// NewTransactionAddressDestination instantiates a new TransactionAddressDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAddressDestination(destinationType TransactionDestinationType, tokenId string) *TransactionAddressDestination {
	this := TransactionAddressDestination{}
	this.DestinationType = destinationType
	this.TokenId = tokenId
	return &this
}

// NewTransactionAddressDestinationWithDefaults instantiates a new TransactionAddressDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAddressDestinationWithDefaults() *TransactionAddressDestination {
	this := TransactionAddressDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionAddressDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionAddressDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionAddressDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetTokenId returns the TokenId field value
func (o *TransactionAddressDestination) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TransactionAddressDestination) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TransactionAddressDestination) SetTokenId(v string) {
	o.TokenId = v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *TransactionAddressDestination) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAddressDestination) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *TransactionAddressDestination) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *TransactionAddressDestination) SetAssetId(v string) {
	o.AssetId = &v
}

// GetAccountOutput returns the AccountOutput field value if set, zero value otherwise.
func (o *TransactionAddressDestination) GetAccountOutput() TransactionAddressDestinationAccountOutput {
	if o == nil || IsNil(o.AccountOutput) {
		var ret TransactionAddressDestinationAccountOutput
		return ret
	}
	return *o.AccountOutput
}

// GetAccountOutputOk returns a tuple with the AccountOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAddressDestination) GetAccountOutputOk() (*TransactionAddressDestinationAccountOutput, bool) {
	if o == nil || IsNil(o.AccountOutput) {
		return nil, false
	}
	return o.AccountOutput, true
}

// HasAccountOutput returns a boolean if a field has been set.
func (o *TransactionAddressDestination) HasAccountOutput() bool {
	if o != nil && !IsNil(o.AccountOutput) {
		return true
	}

	return false
}

// SetAccountOutput gets a reference to the given TransactionAddressDestinationAccountOutput and assigns it to the AccountOutput field.
func (o *TransactionAddressDestination) SetAccountOutput(v TransactionAddressDestinationAccountOutput) {
	o.AccountOutput = &v
}

// GetUtxoOutputs returns the UtxoOutputs field value if set, zero value otherwise.
func (o *TransactionAddressDestination) GetUtxoOutputs() TransactionAddressDestinationUtxoOutputs {
	if o == nil || IsNil(o.UtxoOutputs) {
		var ret TransactionAddressDestinationUtxoOutputs
		return ret
	}
	return *o.UtxoOutputs
}

// GetUtxoOutputsOk returns a tuple with the UtxoOutputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAddressDestination) GetUtxoOutputsOk() (*TransactionAddressDestinationUtxoOutputs, bool) {
	if o == nil || IsNil(o.UtxoOutputs) {
		return nil, false
	}
	return o.UtxoOutputs, true
}

// HasUtxoOutputs returns a boolean if a field has been set.
func (o *TransactionAddressDestination) HasUtxoOutputs() bool {
	if o != nil && !IsNil(o.UtxoOutputs) {
		return true
	}

	return false
}

// SetUtxoOutputs gets a reference to the given TransactionAddressDestinationUtxoOutputs and assigns it to the UtxoOutputs field.
func (o *TransactionAddressDestination) SetUtxoOutputs(v TransactionAddressDestinationUtxoOutputs) {
	o.UtxoOutputs = &v
}

func (o TransactionAddressDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionAddressDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	if !IsNil(o.AccountOutput) {
		toSerialize["account_output"] = o.AccountOutput
	}
	if !IsNil(o.UtxoOutputs) {
		toSerialize["utxo_outputs"] = o.UtxoOutputs
	}
	return toSerialize, nil
}

func (o *TransactionAddressDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionAddressDestination := _TransactionAddressDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionAddressDestination)

	if err != nil {
		return err
	}

	*o = TransactionAddressDestination(varTransactionAddressDestination)

	return err
}

type NullableTransactionAddressDestination struct {
	value *TransactionAddressDestination
	isSet bool
}

func (v NullableTransactionAddressDestination) Get() *TransactionAddressDestination {
	return v.value
}

func (v *NullableTransactionAddressDestination) Set(val *TransactionAddressDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAddressDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAddressDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAddressDestination(val *TransactionAddressDestination) *NullableTransactionAddressDestination {
	return &NullableTransactionAddressDestination{value: val, isSet: true}
}

func (v NullableTransactionAddressDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAddressDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


