/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EigenLayerNativeStakeExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EigenLayerNativeStakeExtra{}

// EigenLayerNativeStakeExtra struct for EigenLayerNativeStakeExtra
type EigenLayerNativeStakeExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The fee recipient address, if not provided the staker address will be used.
	FeeRecipient *float32 `json:"fee_recipient,omitempty"`
}

type _EigenLayerNativeStakeExtra EigenLayerNativeStakeExtra

// NewEigenLayerNativeStakeExtra instantiates a new EigenLayerNativeStakeExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEigenLayerNativeStakeExtra(poolType StakingPoolType) *EigenLayerNativeStakeExtra {
	this := EigenLayerNativeStakeExtra{}
	this.PoolType = poolType
	return &this
}

// NewEigenLayerNativeStakeExtraWithDefaults instantiates a new EigenLayerNativeStakeExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEigenLayerNativeStakeExtraWithDefaults() *EigenLayerNativeStakeExtra {
	this := EigenLayerNativeStakeExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *EigenLayerNativeStakeExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *EigenLayerNativeStakeExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *EigenLayerNativeStakeExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetFeeRecipient returns the FeeRecipient field value if set, zero value otherwise.
func (o *EigenLayerNativeStakeExtra) GetFeeRecipient() float32 {
	if o == nil || IsNil(o.FeeRecipient) {
		var ret float32
		return ret
	}
	return *o.FeeRecipient
}

// GetFeeRecipientOk returns a tuple with the FeeRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EigenLayerNativeStakeExtra) GetFeeRecipientOk() (*float32, bool) {
	if o == nil || IsNil(o.FeeRecipient) {
		return nil, false
	}
	return o.FeeRecipient, true
}

// HasFeeRecipient returns a boolean if a field has been set.
func (o *EigenLayerNativeStakeExtra) HasFeeRecipient() bool {
	if o != nil && !IsNil(o.FeeRecipient) {
		return true
	}

	return false
}

// SetFeeRecipient gets a reference to the given float32 and assigns it to the FeeRecipient field.
func (o *EigenLayerNativeStakeExtra) SetFeeRecipient(v float32) {
	o.FeeRecipient = &v
}

func (o EigenLayerNativeStakeExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EigenLayerNativeStakeExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	if !IsNil(o.FeeRecipient) {
		toSerialize["fee_recipient"] = o.FeeRecipient
	}
	return toSerialize, nil
}

func (o *EigenLayerNativeStakeExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEigenLayerNativeStakeExtra := _EigenLayerNativeStakeExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEigenLayerNativeStakeExtra)

	if err != nil {
		return err
	}

	*o = EigenLayerNativeStakeExtra(varEigenLayerNativeStakeExtra)

	return err
}

type NullableEigenLayerNativeStakeExtra struct {
	value *EigenLayerNativeStakeExtra
	isSet bool
}

func (v NullableEigenLayerNativeStakeExtra) Get() *EigenLayerNativeStakeExtra {
	return v.value
}

func (v *NullableEigenLayerNativeStakeExtra) Set(val *EigenLayerNativeStakeExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableEigenLayerNativeStakeExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableEigenLayerNativeStakeExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEigenLayerNativeStakeExtra(val *EigenLayerNativeStakeExtra) *NullableEigenLayerNativeStakeExtra {
	return &NullableEigenLayerNativeStakeExtra{value: val, isSet: true}
}

func (v NullableEigenLayerNativeStakeExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEigenLayerNativeStakeExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


