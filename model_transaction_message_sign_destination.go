/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionMessageSignDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionMessageSignDestination{}

// TransactionMessageSignDestination The information about the message as the transaction destination.
type TransactionMessageSignDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	// The raw data to be signed that are encoded in Base64.
	Message *string `json:"message,omitempty"`
	// The structured data to be signed that are encoded in JSON.
	StructuredData *string `json:"structured_data,omitempty"`
}

type _TransactionMessageSignDestination TransactionMessageSignDestination

// NewTransactionMessageSignDestination instantiates a new TransactionMessageSignDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionMessageSignDestination(destinationType TransactionDestinationType) *TransactionMessageSignDestination {
	this := TransactionMessageSignDestination{}
	this.DestinationType = destinationType
	return &this
}

// NewTransactionMessageSignDestinationWithDefaults instantiates a new TransactionMessageSignDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionMessageSignDestinationWithDefaults() *TransactionMessageSignDestination {
	this := TransactionMessageSignDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionMessageSignDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionMessageSignDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionMessageSignDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TransactionMessageSignDestination) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMessageSignDestination) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TransactionMessageSignDestination) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TransactionMessageSignDestination) SetMessage(v string) {
	o.Message = &v
}

// GetStructuredData returns the StructuredData field value if set, zero value otherwise.
func (o *TransactionMessageSignDestination) GetStructuredData() string {
	if o == nil || IsNil(o.StructuredData) {
		var ret string
		return ret
	}
	return *o.StructuredData
}

// GetStructuredDataOk returns a tuple with the StructuredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMessageSignDestination) GetStructuredDataOk() (*string, bool) {
	if o == nil || IsNil(o.StructuredData) {
		return nil, false
	}
	return o.StructuredData, true
}

// HasStructuredData returns a boolean if a field has been set.
func (o *TransactionMessageSignDestination) HasStructuredData() bool {
	if o != nil && !IsNil(o.StructuredData) {
		return true
	}

	return false
}

// SetStructuredData gets a reference to the given string and assigns it to the StructuredData field.
func (o *TransactionMessageSignDestination) SetStructuredData(v string) {
	o.StructuredData = &v
}

func (o TransactionMessageSignDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionMessageSignDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.StructuredData) {
		toSerialize["structured_data"] = o.StructuredData
	}
	return toSerialize, nil
}

func (o *TransactionMessageSignDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionMessageSignDestination := _TransactionMessageSignDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionMessageSignDestination)

	if err != nil {
		return err
	}

	*o = TransactionMessageSignDestination(varTransactionMessageSignDestination)

	return err
}

type NullableTransactionMessageSignDestination struct {
	value *TransactionMessageSignDestination
	isSet bool
}

func (v NullableTransactionMessageSignDestination) Get() *TransactionMessageSignDestination {
	return v.value
}

func (v *NullableTransactionMessageSignDestination) Set(val *TransactionMessageSignDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionMessageSignDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionMessageSignDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionMessageSignDestination(val *TransactionMessageSignDestination) *NullableTransactionMessageSignDestination {
	return &NullableTransactionMessageSignDestination{value: val, isSet: true}
}

func (v NullableTransactionMessageSignDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionMessageSignDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


