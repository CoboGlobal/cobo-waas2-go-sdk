/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmEip1559TransactionFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmEip1559TransactionFee{}

// EvmEip1559TransactionFee The transaction fee is calculated by multiplying the sum of the base fee price and the maximum priority fee by the gas units used by the transaction. This can be expressed as: Transaction fee = (base fee price + maximum priority fee) * gas units used. The gas units used must be smaller than the gas limit. 
type EvmEip1559TransactionFee struct {
	// The maximum priority fee, in gwei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
	MaxPriorityFee string `json:"max_priority_fee"`
	// The base fee price of the chain, in gwei.
	BaseFee string `json:"base_fee"`
	// The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
	GasLimit string `json:"gas_limit"`
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId string `json:"token_id"`
}

type _EvmEip1559TransactionFee EvmEip1559TransactionFee

// NewEvmEip1559TransactionFee instantiates a new EvmEip1559TransactionFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmEip1559TransactionFee(maxPriorityFee string, baseFee string, gasLimit string, feeType FeeType, tokenId string) *EvmEip1559TransactionFee {
	this := EvmEip1559TransactionFee{}
	this.MaxPriorityFee = maxPriorityFee
	this.BaseFee = baseFee
	this.GasLimit = gasLimit
	this.FeeType = feeType
	this.TokenId = tokenId
	return &this
}

// NewEvmEip1559TransactionFeeWithDefaults instantiates a new EvmEip1559TransactionFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmEip1559TransactionFeeWithDefaults() *EvmEip1559TransactionFee {
	this := EvmEip1559TransactionFee{}
	var gasLimit string = "21000"
	this.GasLimit = gasLimit
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetMaxPriorityFee returns the MaxPriorityFee field value
func (o *EvmEip1559TransactionFee) GetMaxPriorityFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxPriorityFee
}

// GetMaxPriorityFeeOk returns a tuple with the MaxPriorityFee field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetMaxPriorityFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPriorityFee, true
}

// SetMaxPriorityFee sets field value
func (o *EvmEip1559TransactionFee) SetMaxPriorityFee(v string) {
	o.MaxPriorityFee = v
}

// GetBaseFee returns the BaseFee field value
func (o *EvmEip1559TransactionFee) GetBaseFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseFee
}

// GetBaseFeeOk returns a tuple with the BaseFee field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetBaseFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseFee, true
}

// SetBaseFee sets field value
func (o *EvmEip1559TransactionFee) SetBaseFee(v string) {
	o.BaseFee = v
}

// GetGasLimit returns the GasLimit field value
func (o *EvmEip1559TransactionFee) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *EvmEip1559TransactionFee) SetGasLimit(v string) {
	o.GasLimit = v
}

// GetFeeType returns the FeeType field value
func (o *EvmEip1559TransactionFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *EvmEip1559TransactionFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value
func (o *EvmEip1559TransactionFee) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *EvmEip1559TransactionFee) SetTokenId(v string) {
	o.TokenId = v
}

func (o EvmEip1559TransactionFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmEip1559TransactionFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max_priority_fee"] = o.MaxPriorityFee
	toSerialize["base_fee"] = o.BaseFee
	toSerialize["gas_limit"] = o.GasLimit
	toSerialize["fee_type"] = o.FeeType
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *EvmEip1559TransactionFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_priority_fee",
		"base_fee",
		"gas_limit",
		"fee_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmEip1559TransactionFee := _EvmEip1559TransactionFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmEip1559TransactionFee)

	if err != nil {
		return err
	}

	*o = EvmEip1559TransactionFee(varEvmEip1559TransactionFee)

	return err
}

type NullableEvmEip1559TransactionFee struct {
	value *EvmEip1559TransactionFee
	isSet bool
}

func (v NullableEvmEip1559TransactionFee) Get() *EvmEip1559TransactionFee {
	return v.value
}

func (v *NullableEvmEip1559TransactionFee) Set(val *EvmEip1559TransactionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmEip1559TransactionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmEip1559TransactionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmEip1559TransactionFee(val *EvmEip1559TransactionFee) *NullableEvmEip1559TransactionFee {
	return &NullableEvmEip1559TransactionFee{value: val, isSet: true}
}

func (v NullableEvmEip1559TransactionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmEip1559TransactionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


