/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmEip1559TransactionFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmEip1559TransactionFee{}

// EvmEip1559TransactionFee The transaction fee when using the EIP 1559 method. The estimated fee is calculated by multiplying the max fee by the gas limit: (max fee * gas limit). 
type EvmEip1559TransactionFee struct {
	// The token ID of the transaction fee. Unique in all chains scope.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// The max priority fee, in gwei. The max priority fee represents the highest amount of miner tips you are willing to pay for your transaction.
	MaxPriorityFee string `json:"max_priority_fee"`
	// The base fee of chain.
	BaseFee string `json:"base_fee"`
	// The gas limit, which represents the max number of gas units you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. Different operations require varying quantities of gas units.
	GasLimit *string `json:"gas_limit,omitempty"`
	FeeType FeeType `json:"fee_type"`
}

type _EvmEip1559TransactionFee EvmEip1559TransactionFee

// NewEvmEip1559TransactionFee instantiates a new EvmEip1559TransactionFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmEip1559TransactionFee(maxPriorityFee string, baseFee string, feeType FeeType) *EvmEip1559TransactionFee {
	this := EvmEip1559TransactionFee{}
	this.MaxPriorityFee = maxPriorityFee
	this.BaseFee = baseFee
	var gasLimit string = "21000"
	this.GasLimit = &gasLimit
	this.FeeType = feeType
	return &this
}

// NewEvmEip1559TransactionFeeWithDefaults instantiates a new EvmEip1559TransactionFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmEip1559TransactionFeeWithDefaults() *EvmEip1559TransactionFee {
	this := EvmEip1559TransactionFee{}
	var gasLimit string = "21000"
	this.GasLimit = &gasLimit
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *EvmEip1559TransactionFee) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *EvmEip1559TransactionFee) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *EvmEip1559TransactionFee) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetMaxPriorityFee returns the MaxPriorityFee field value
func (o *EvmEip1559TransactionFee) GetMaxPriorityFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxPriorityFee
}

// GetMaxPriorityFeeOk returns a tuple with the MaxPriorityFee field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetMaxPriorityFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPriorityFee, true
}

// SetMaxPriorityFee sets field value
func (o *EvmEip1559TransactionFee) SetMaxPriorityFee(v string) {
	o.MaxPriorityFee = v
}

// GetBaseFee returns the BaseFee field value
func (o *EvmEip1559TransactionFee) GetBaseFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseFee
}

// GetBaseFeeOk returns a tuple with the BaseFee field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetBaseFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseFee, true
}

// SetBaseFee sets field value
func (o *EvmEip1559TransactionFee) SetBaseFee(v string) {
	o.BaseFee = v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *EvmEip1559TransactionFee) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit) {
		var ret string
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetGasLimitOk() (*string, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *EvmEip1559TransactionFee) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given string and assigns it to the GasLimit field.
func (o *EvmEip1559TransactionFee) SetGasLimit(v string) {
	o.GasLimit = &v
}

// GetFeeType returns the FeeType field value
func (o *EvmEip1559TransactionFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559TransactionFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *EvmEip1559TransactionFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

func (o EvmEip1559TransactionFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmEip1559TransactionFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	toSerialize["max_priority_fee"] = o.MaxPriorityFee
	toSerialize["base_fee"] = o.BaseFee
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	toSerialize["fee_type"] = o.FeeType
	return toSerialize, nil
}

func (o *EvmEip1559TransactionFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_priority_fee",
		"base_fee",
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmEip1559TransactionFee := _EvmEip1559TransactionFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmEip1559TransactionFee)

	if err != nil {
		return err
	}

	*o = EvmEip1559TransactionFee(varEvmEip1559TransactionFee)

	return err
}

type NullableEvmEip1559TransactionFee struct {
	value *EvmEip1559TransactionFee
	isSet bool
}

func (v NullableEvmEip1559TransactionFee) Get() *EvmEip1559TransactionFee {
	return v.value
}

func (v *NullableEvmEip1559TransactionFee) Set(val *EvmEip1559TransactionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmEip1559TransactionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmEip1559TransactionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmEip1559TransactionFee(val *EvmEip1559TransactionFee) *NullableEvmEip1559TransactionFee {
	return &NullableEvmEip1559TransactionFee{value: val, isSet: true}
}

func (v NullableEvmEip1559TransactionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmEip1559TransactionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


