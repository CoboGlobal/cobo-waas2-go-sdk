/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateStakeActivity201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStakeActivity201Response{}

// CreateStakeActivity201Response struct for CreateStakeActivity201Response
type CreateStakeActivity201Response struct {
	// The id of the activity
	ActivityId string `json:"activity_id"`
	// The id of the related staking
	StakingId *string `json:"staking_id,omitempty"`
}

type _CreateStakeActivity201Response CreateStakeActivity201Response

// NewCreateStakeActivity201Response instantiates a new CreateStakeActivity201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStakeActivity201Response(activityId string) *CreateStakeActivity201Response {
	this := CreateStakeActivity201Response{}
	this.ActivityId = activityId
	return &this
}

// NewCreateStakeActivity201ResponseWithDefaults instantiates a new CreateStakeActivity201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStakeActivity201ResponseWithDefaults() *CreateStakeActivity201Response {
	this := CreateStakeActivity201Response{}
	return &this
}

// GetActivityId returns the ActivityId field value
func (o *CreateStakeActivity201Response) GetActivityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value
// and a boolean to check if the value has been set.
func (o *CreateStakeActivity201Response) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityId, true
}

// SetActivityId sets field value
func (o *CreateStakeActivity201Response) SetActivityId(v string) {
	o.ActivityId = v
}

// GetStakingId returns the StakingId field value if set, zero value otherwise.
func (o *CreateStakeActivity201Response) GetStakingId() string {
	if o == nil || IsNil(o.StakingId) {
		var ret string
		return ret
	}
	return *o.StakingId
}

// GetStakingIdOk returns a tuple with the StakingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStakeActivity201Response) GetStakingIdOk() (*string, bool) {
	if o == nil || IsNil(o.StakingId) {
		return nil, false
	}
	return o.StakingId, true
}

// HasStakingId returns a boolean if a field has been set.
func (o *CreateStakeActivity201Response) HasStakingId() bool {
	if o != nil && !IsNil(o.StakingId) {
		return true
	}

	return false
}

// SetStakingId gets a reference to the given string and assigns it to the StakingId field.
func (o *CreateStakeActivity201Response) SetStakingId(v string) {
	o.StakingId = &v
}

func (o CreateStakeActivity201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStakeActivity201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activity_id"] = o.ActivityId
	if !IsNil(o.StakingId) {
		toSerialize["staking_id"] = o.StakingId
	}
	return toSerialize, nil
}

func (o *CreateStakeActivity201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activity_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateStakeActivity201Response := _CreateStakeActivity201Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateStakeActivity201Response)

	if err != nil {
		return err
	}

	*o = CreateStakeActivity201Response(varCreateStakeActivity201Response)

	return err
}

type NullableCreateStakeActivity201Response struct {
	value *CreateStakeActivity201Response
	isSet bool
}

func (v NullableCreateStakeActivity201Response) Get() *CreateStakeActivity201Response {
	return v.value
}

func (v *NullableCreateStakeActivity201Response) Set(val *CreateStakeActivity201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStakeActivity201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStakeActivity201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStakeActivity201Response(val *CreateStakeActivity201Response) *NullableCreateStakeActivity201Response {
	return &NullableCreateStakeActivity201Response{value: val, isSet: true}
}

func (v NullableCreateStakeActivity201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStakeActivity201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


