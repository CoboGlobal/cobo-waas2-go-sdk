/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TransactionSourceType The transaction source. Possible values include:   - `Address`: An external address.   - `CustodialWallet`: A Custodial Wallet.   - `MPCWallet`: An MPC Wallet.   - `SafeWallet`: A Safe{Wallet}.   - `ExchangeWallet`: An Exchange Wallet.   - `FeeStation`: A Fee Station. 
type TransactionSourceType string

// List of TransactionSourceType
const (
	TRANSACTIONSOURCETYPE_ADDRESS TransactionSourceType = "Address"
	TRANSACTIONSOURCETYPE_CUSTODIAL_WALLET TransactionSourceType = "CustodialWallet"
	TRANSACTIONSOURCETYPE_MPC_WALLET TransactionSourceType = "MPCWallet"
	TRANSACTIONSOURCETYPE_SAFE_WALLET TransactionSourceType = "SafeWallet"
	TRANSACTIONSOURCETYPE_EXCHANGE_WALLET TransactionSourceType = "ExchangeWallet"
	TRANSACTIONSOURCETYPE_FEE_STATION TransactionSourceType = "FeeStation"
)

// All allowed values of TransactionSourceType enum
var AllowedTransactionSourceTypeEnumValues = []TransactionSourceType{
	"Address",
	"CustodialWallet",
	"MPCWallet",
	"SafeWallet",
	"ExchangeWallet",
	"FeeStation",
}

func (v *TransactionSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	*v = TransactionSourceType(value)
	return nil
}

// NewTransactionSourceTypeFromValue returns a pointer to a valid TransactionSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionSourceTypeFromValue(v string) (*TransactionSourceType, error) {
	ev := TransactionSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionSourceType: valid values are %v", v, AllowedTransactionSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionSourceType) IsValid() bool {
	for _, existing := range AllowedTransactionSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionSourceType value
func (v TransactionSourceType) Ptr() *TransactionSourceType {
	return &v
}

type NullableTransactionSourceType struct {
	value *TransactionSourceType
	isSet bool
}

func (v NullableTransactionSourceType) Get() *TransactionSourceType {
	return v.value
}

func (v *NullableTransactionSourceType) Set(val *TransactionSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSourceType(val *TransactionSourceType) *NullableTransactionSourceType {
	return &NullableTransactionSourceType{value: val, isSet: true}
}

func (v NullableTransactionSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

