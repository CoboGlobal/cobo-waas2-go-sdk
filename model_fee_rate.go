/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// FeeRate - struct for FeeRate
type FeeRate struct {
	EvmEip1559FeePrice *EvmEip1559FeePrice
	EvmLegacyFeePrice *EvmLegacyFeePrice
	FixedFee *FixedFee
	UtxoFeePrice *UtxoFeePrice
}

// EvmEip1559FeePriceAsFeeRate is a convenience function that returns EvmEip1559FeePrice wrapped in FeeRate
func EvmEip1559FeePriceAsFeeRate(v *EvmEip1559FeePrice) FeeRate {
	return FeeRate{
		EvmEip1559FeePrice: v,
	}
}

// EvmLegacyFeePriceAsFeeRate is a convenience function that returns EvmLegacyFeePrice wrapped in FeeRate
func EvmLegacyFeePriceAsFeeRate(v *EvmLegacyFeePrice) FeeRate {
	return FeeRate{
		EvmLegacyFeePrice: v,
	}
}

// FixedFeeAsFeeRate is a convenience function that returns FixedFee wrapped in FeeRate
func FixedFeeAsFeeRate(v *FixedFee) FeeRate {
	return FeeRate{
		FixedFee: v,
	}
}

// UtxoFeePriceAsFeeRate is a convenience function that returns UtxoFeePrice wrapped in FeeRate
func UtxoFeePriceAsFeeRate(v *UtxoFeePrice) FeeRate {
	return FeeRate{
		UtxoFeePrice: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FeeRate) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EVM_EIP_1559'
	if jsonDict["fee_type"] == "EVM_EIP_1559" {
		// try to unmarshal JSON data into EvmEip1559FeePrice
		err = json.Unmarshal(data, &dst.EvmEip1559FeePrice)
		if err == nil {
			return nil // data stored in dst.EvmEip1559FeePrice, return on the first match
		} else {
			dst.EvmEip1559FeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmEip1559FeePrice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EVM_Legacy'
	if jsonDict["fee_type"] == "EVM_Legacy" {
		// try to unmarshal JSON data into EvmLegacyFeePrice
		err = json.Unmarshal(data, &dst.EvmLegacyFeePrice)
		if err == nil {
			return nil // data stored in dst.EvmLegacyFeePrice, return on the first match
		} else {
			dst.EvmLegacyFeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmLegacyFeePrice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Fixed'
	if jsonDict["fee_type"] == "Fixed" {
		// try to unmarshal JSON data into FixedFee
		err = json.Unmarshal(data, &dst.FixedFee)
		if err == nil {
			return nil // data stored in dst.FixedFee, return on the first match
		} else {
			dst.FixedFee = nil
			return fmt.Errorf("failed to unmarshal FeeRate as FixedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UTXO'
	if jsonDict["fee_type"] == "UTXO" {
		// try to unmarshal JSON data into UtxoFeePrice
		err = json.Unmarshal(data, &dst.UtxoFeePrice)
		if err == nil {
			return nil // data stored in dst.UtxoFeePrice, return on the first match
		} else {
			dst.UtxoFeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as UtxoFeePrice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmEip1559FeePrice'
	if jsonDict["fee_type"] == "EvmEip1559FeePrice" {
		// try to unmarshal JSON data into EvmEip1559FeePrice
		err = json.Unmarshal(data, &dst.EvmEip1559FeePrice)
		if err == nil {
			return nil // data stored in dst.EvmEip1559FeePrice, return on the first match
		} else {
			dst.EvmEip1559FeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmEip1559FeePrice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmLegacyFeePrice'
	if jsonDict["fee_type"] == "EvmLegacyFeePrice" {
		// try to unmarshal JSON data into EvmLegacyFeePrice
		err = json.Unmarshal(data, &dst.EvmLegacyFeePrice)
		if err == nil {
			return nil // data stored in dst.EvmLegacyFeePrice, return on the first match
		} else {
			dst.EvmLegacyFeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmLegacyFeePrice: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FixedFee'
	if jsonDict["fee_type"] == "FixedFee" {
		// try to unmarshal JSON data into FixedFee
		err = json.Unmarshal(data, &dst.FixedFee)
		if err == nil {
			return nil // data stored in dst.FixedFee, return on the first match
		} else {
			dst.FixedFee = nil
			return fmt.Errorf("failed to unmarshal FeeRate as FixedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UtxoFeePrice'
	if jsonDict["fee_type"] == "UtxoFeePrice" {
		// try to unmarshal JSON data into UtxoFeePrice
		err = json.Unmarshal(data, &dst.UtxoFeePrice)
		if err == nil {
			return nil // data stored in dst.UtxoFeePrice, return on the first match
		} else {
			dst.UtxoFeePrice = nil
			return fmt.Errorf("failed to unmarshal FeeRate as UtxoFeePrice: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FeeRate) MarshalJSON() ([]byte, error) {
	if src.EvmEip1559FeePrice != nil {
		return json.Marshal(&src.EvmEip1559FeePrice)
	}

	if src.EvmLegacyFeePrice != nil {
		return json.Marshal(&src.EvmLegacyFeePrice)
	}

	if src.FixedFee != nil {
		return json.Marshal(&src.FixedFee)
	}

	if src.UtxoFeePrice != nil {
		return json.Marshal(&src.UtxoFeePrice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FeeRate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EvmEip1559FeePrice != nil {
		return obj.EvmEip1559FeePrice
	}

	if obj.EvmLegacyFeePrice != nil {
		return obj.EvmLegacyFeePrice
	}

	if obj.FixedFee != nil {
		return obj.FixedFee
	}

	if obj.UtxoFeePrice != nil {
		return obj.UtxoFeePrice
	}

	// all schemas are nil
	return nil
}

type NullableFeeRate struct {
	value *FeeRate
	isSet bool
}

func (v NullableFeeRate) Get() *FeeRate {
	return v.value
}

func (v *NullableFeeRate) Set(val *FeeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRate(val *FeeRate) *NullableFeeRate {
	return &NullableFeeRate{value: val, isSet: true}
}

func (v NullableFeeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


