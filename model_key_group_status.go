/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// KeyGroupStatus the model 'KeyGroupStatus'
type KeyGroupStatus string

// List of KeyGroupStatus
const (
	KEYGROUPSTATUS_NEW KeyGroupStatus = "New"
	KEYGROUPSTATUS_VALID KeyGroupStatus = "Valid"
	KEYGROUPSTATUS_UNAVAILABLE KeyGroupStatus = "Unavailable"
)

// All allowed values of KeyGroupStatus enum
var AllowedKeyGroupStatusEnumValues = []KeyGroupStatus{
	"New",
	"Valid",
	"Unavailable",
}

func (v *KeyGroupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	*v = KeyGroupStatus(value)
	return nil
}

// NewKeyGroupStatusFromValue returns a pointer to a valid KeyGroupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyGroupStatusFromValue(v string) (*KeyGroupStatus, error) {
	ev := KeyGroupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyGroupStatus: valid values are %v", v, AllowedKeyGroupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyGroupStatus) IsValid() bool {
	for _, existing := range AllowedKeyGroupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyGroupStatus value
func (v KeyGroupStatus) Ptr() *KeyGroupStatus {
	return &v
}

type NullableKeyGroupStatus struct {
	value *KeyGroupStatus
	isSet bool
}

func (v NullableKeyGroupStatus) Get() *KeyGroupStatus {
	return v.value
}

func (v *NullableKeyGroupStatus) Set(val *KeyGroupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyGroupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyGroupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyGroupStatus(val *KeyGroupStatus) *NullableKeyGroupStatus {
	return &NullableKeyGroupStatus{value: val, isSet: true}
}

func (v NullableKeyGroupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyGroupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

