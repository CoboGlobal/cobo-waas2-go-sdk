/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the MaxSendValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxSendValue{}

// MaxSendValue max send value and fee.
type MaxSendValue struct {
	// token name.
	Token *string `json:"token,omitempty"`
	// coin decimal precision.
	TokenDecimal *int32 `json:"token_decimal,omitempty"`
	// fee token name.
	FeeToken *string `json:"fee_token,omitempty"`
	// fee coin decimal precision.
	FeeDecimal *int32 `json:"fee_decimal,omitempty"`
	// the maximum sendable value for the given address or current wallet.
	MaxSendValue *string `json:"max_send_value,omitempty"`
	// transaction fees per byte for UTXO model.
	FeePerByte *string `json:"fee_per_byte,omitempty"`
	// transaction fee for UTXO model
	FeeValue *string `json:"fee_value,omitempty"`
	// gas price for account model
	GasPrice *string `json:"gas_price,omitempty"`
	// gas limit for account model
	GasLimit *int32 `json:"gas_limit,omitempty"`
}

// NewMaxSendValue instantiates a new MaxSendValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxSendValue() *MaxSendValue {
	this := MaxSendValue{}
	return &this
}

// NewMaxSendValueWithDefaults instantiates a new MaxSendValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxSendValueWithDefaults() *MaxSendValue {
	this := MaxSendValue{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *MaxSendValue) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *MaxSendValue) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *MaxSendValue) SetToken(v string) {
	o.Token = &v
}

// GetTokenDecimal returns the TokenDecimal field value if set, zero value otherwise.
func (o *MaxSendValue) GetTokenDecimal() int32 {
	if o == nil || IsNil(o.TokenDecimal) {
		var ret int32
		return ret
	}
	return *o.TokenDecimal
}

// GetTokenDecimalOk returns a tuple with the TokenDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetTokenDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenDecimal) {
		return nil, false
	}
	return o.TokenDecimal, true
}

// HasTokenDecimal returns a boolean if a field has been set.
func (o *MaxSendValue) HasTokenDecimal() bool {
	if o != nil && !IsNil(o.TokenDecimal) {
		return true
	}

	return false
}

// SetTokenDecimal gets a reference to the given int32 and assigns it to the TokenDecimal field.
func (o *MaxSendValue) SetTokenDecimal(v int32) {
	o.TokenDecimal = &v
}

// GetFeeToken returns the FeeToken field value if set, zero value otherwise.
func (o *MaxSendValue) GetFeeToken() string {
	if o == nil || IsNil(o.FeeToken) {
		var ret string
		return ret
	}
	return *o.FeeToken
}

// GetFeeTokenOk returns a tuple with the FeeToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetFeeTokenOk() (*string, bool) {
	if o == nil || IsNil(o.FeeToken) {
		return nil, false
	}
	return o.FeeToken, true
}

// HasFeeToken returns a boolean if a field has been set.
func (o *MaxSendValue) HasFeeToken() bool {
	if o != nil && !IsNil(o.FeeToken) {
		return true
	}

	return false
}

// SetFeeToken gets a reference to the given string and assigns it to the FeeToken field.
func (o *MaxSendValue) SetFeeToken(v string) {
	o.FeeToken = &v
}

// GetFeeDecimal returns the FeeDecimal field value if set, zero value otherwise.
func (o *MaxSendValue) GetFeeDecimal() int32 {
	if o == nil || IsNil(o.FeeDecimal) {
		var ret int32
		return ret
	}
	return *o.FeeDecimal
}

// GetFeeDecimalOk returns a tuple with the FeeDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetFeeDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.FeeDecimal) {
		return nil, false
	}
	return o.FeeDecimal, true
}

// HasFeeDecimal returns a boolean if a field has been set.
func (o *MaxSendValue) HasFeeDecimal() bool {
	if o != nil && !IsNil(o.FeeDecimal) {
		return true
	}

	return false
}

// SetFeeDecimal gets a reference to the given int32 and assigns it to the FeeDecimal field.
func (o *MaxSendValue) SetFeeDecimal(v int32) {
	o.FeeDecimal = &v
}

// GetMaxSendValue returns the MaxSendValue field value if set, zero value otherwise.
func (o *MaxSendValue) GetMaxSendValue() string {
	if o == nil || IsNil(o.MaxSendValue) {
		var ret string
		return ret
	}
	return *o.MaxSendValue
}

// GetMaxSendValueOk returns a tuple with the MaxSendValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetMaxSendValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSendValue) {
		return nil, false
	}
	return o.MaxSendValue, true
}

// HasMaxSendValue returns a boolean if a field has been set.
func (o *MaxSendValue) HasMaxSendValue() bool {
	if o != nil && !IsNil(o.MaxSendValue) {
		return true
	}

	return false
}

// SetMaxSendValue gets a reference to the given string and assigns it to the MaxSendValue field.
func (o *MaxSendValue) SetMaxSendValue(v string) {
	o.MaxSendValue = &v
}

// GetFeePerByte returns the FeePerByte field value if set, zero value otherwise.
func (o *MaxSendValue) GetFeePerByte() string {
	if o == nil || IsNil(o.FeePerByte) {
		var ret string
		return ret
	}
	return *o.FeePerByte
}

// GetFeePerByteOk returns a tuple with the FeePerByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetFeePerByteOk() (*string, bool) {
	if o == nil || IsNil(o.FeePerByte) {
		return nil, false
	}
	return o.FeePerByte, true
}

// HasFeePerByte returns a boolean if a field has been set.
func (o *MaxSendValue) HasFeePerByte() bool {
	if o != nil && !IsNil(o.FeePerByte) {
		return true
	}

	return false
}

// SetFeePerByte gets a reference to the given string and assigns it to the FeePerByte field.
func (o *MaxSendValue) SetFeePerByte(v string) {
	o.FeePerByte = &v
}

// GetFeeValue returns the FeeValue field value if set, zero value otherwise.
func (o *MaxSendValue) GetFeeValue() string {
	if o == nil || IsNil(o.FeeValue) {
		var ret string
		return ret
	}
	return *o.FeeValue
}

// GetFeeValueOk returns a tuple with the FeeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetFeeValueOk() (*string, bool) {
	if o == nil || IsNil(o.FeeValue) {
		return nil, false
	}
	return o.FeeValue, true
}

// HasFeeValue returns a boolean if a field has been set.
func (o *MaxSendValue) HasFeeValue() bool {
	if o != nil && !IsNil(o.FeeValue) {
		return true
	}

	return false
}

// SetFeeValue gets a reference to the given string and assigns it to the FeeValue field.
func (o *MaxSendValue) SetFeeValue(v string) {
	o.FeeValue = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *MaxSendValue) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *MaxSendValue) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *MaxSendValue) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *MaxSendValue) GetGasLimit() int32 {
	if o == nil || IsNil(o.GasLimit) {
		var ret int32
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxSendValue) GetGasLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *MaxSendValue) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given int32 and assigns it to the GasLimit field.
func (o *MaxSendValue) SetGasLimit(v int32) {
	o.GasLimit = &v
}

func (o MaxSendValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxSendValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TokenDecimal) {
		toSerialize["token_decimal"] = o.TokenDecimal
	}
	if !IsNil(o.FeeToken) {
		toSerialize["fee_token"] = o.FeeToken
	}
	if !IsNil(o.FeeDecimal) {
		toSerialize["fee_decimal"] = o.FeeDecimal
	}
	if !IsNil(o.MaxSendValue) {
		toSerialize["max_send_value"] = o.MaxSendValue
	}
	if !IsNil(o.FeePerByte) {
		toSerialize["fee_per_byte"] = o.FeePerByte
	}
	if !IsNil(o.FeeValue) {
		toSerialize["fee_value"] = o.FeeValue
	}
	if !IsNil(o.GasPrice) {
		toSerialize["gas_price"] = o.GasPrice
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	return toSerialize, nil
}

type NullableMaxSendValue struct {
	value *MaxSendValue
	isSet bool
}

func (v NullableMaxSendValue) Get() *MaxSendValue {
	return v.value
}

func (v *NullableMaxSendValue) Set(val *MaxSendValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxSendValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxSendValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxSendValue(val *MaxSendValue) *NullableMaxSendValue {
	return &NullableMaxSendValue{value: val, isSet: true}
}

func (v NullableMaxSendValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxSendValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


