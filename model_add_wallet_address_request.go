/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddWalletAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddWalletAddressRequest{}

// AddWalletAddressRequest struct for AddWalletAddressRequest
type AddWalletAddressRequest struct {
	// ID of the token. Unique in all chains scope.
	TokenId string `json:"token_id"`
	// The number of addresses that need to be created
	Count int32 `json:"count"`
	Encoding *AddressEncoding `json:"encoding,omitempty"`
}

type _AddWalletAddressRequest AddWalletAddressRequest

// NewAddWalletAddressRequest instantiates a new AddWalletAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddWalletAddressRequest(tokenId string, count int32) *AddWalletAddressRequest {
	this := AddWalletAddressRequest{}
	this.TokenId = tokenId
	this.Count = count
	return &this
}

// NewAddWalletAddressRequestWithDefaults instantiates a new AddWalletAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWalletAddressRequestWithDefaults() *AddWalletAddressRequest {
	this := AddWalletAddressRequest{}
	var count int32 = 1
	this.Count = count
	return &this
}

// GetTokenId returns the TokenId field value
func (o *AddWalletAddressRequest) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *AddWalletAddressRequest) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *AddWalletAddressRequest) SetTokenId(v string) {
	o.TokenId = v
}

// GetCount returns the Count field value
func (o *AddWalletAddressRequest) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AddWalletAddressRequest) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AddWalletAddressRequest) SetCount(v int32) {
	o.Count = v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *AddWalletAddressRequest) GetEncoding() AddressEncoding {
	if o == nil || IsNil(o.Encoding) {
		var ret AddressEncoding
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWalletAddressRequest) GetEncodingOk() (*AddressEncoding, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *AddWalletAddressRequest) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given AddressEncoding and assigns it to the Encoding field.
func (o *AddWalletAddressRequest) SetEncoding(v AddressEncoding) {
	o.Encoding = &v
}

func (o AddWalletAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddWalletAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["count"] = o.Count
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	return toSerialize, nil
}

func (o *AddWalletAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddWalletAddressRequest := _AddWalletAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddWalletAddressRequest)

	if err != nil {
		return err
	}

	*o = AddWalletAddressRequest(varAddWalletAddressRequest)

	return err
}

type NullableAddWalletAddressRequest struct {
	value *AddWalletAddressRequest
	isSet bool
}

func (v NullableAddWalletAddressRequest) Get() *AddWalletAddressRequest {
	return v.value
}

func (v *NullableAddWalletAddressRequest) Set(val *AddWalletAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWalletAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWalletAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWalletAddressRequest(val *AddWalletAddressRequest) *NullableAddWalletAddressRequest {
	return &NullableAddWalletAddressRequest{value: val, isSet: true}
}

func (v NullableAddWalletAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWalletAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


