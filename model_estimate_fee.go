/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// EstimateFee - struct for EstimateFee
type EstimateFee struct {
	ContractCall *ContractCall
	Transfer *Transfer
}

// ContractCallAsEstimateFee is a convenience function that returns ContractCall wrapped in EstimateFee
func ContractCallAsEstimateFee(v *ContractCall) EstimateFee {
	return EstimateFee{
		ContractCall: v,
	}
}

// TransferAsEstimateFee is a convenience function that returns Transfer wrapped in EstimateFee
func TransferAsEstimateFee(v *Transfer) EstimateFee {
	return EstimateFee{
		Transfer: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EstimateFee) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Call'
	if jsonDict["request_type"] == "Call" {
		// try to unmarshal JSON data into ContractCall
		err = json.Unmarshal(data, &dst.ContractCall)
		if err == nil {
			return nil // data stored in dst.ContractCall, return on the first match
		} else {
			dst.ContractCall = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as ContractCall: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Transfer'
	if jsonDict["request_type"] == "Transfer" {
		// try to unmarshal JSON data into Transfer
		err = json.Unmarshal(data, &dst.Transfer)
		if err == nil {
			return nil // data stored in dst.Transfer, return on the first match
		} else {
			dst.Transfer = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as Transfer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ContractCall'
	if jsonDict["request_type"] == "ContractCall" {
		// try to unmarshal JSON data into ContractCall
		err = json.Unmarshal(data, &dst.ContractCall)
		if err == nil {
			return nil // data stored in dst.ContractCall, return on the first match
		} else {
			dst.ContractCall = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as ContractCall: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EstimateFee) MarshalJSON() ([]byte, error) {
	if src.ContractCall != nil {
		return json.Marshal(&src.ContractCall)
	}

	if src.Transfer != nil {
		return json.Marshal(&src.Transfer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EstimateFee) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ContractCall != nil {
		return obj.ContractCall
	}

	if obj.Transfer != nil {
		return obj.Transfer
	}

	// all schemas are nil
	return nil
}

type NullableEstimateFee struct {
	value *EstimateFee
	isSet bool
}

func (v NullableEstimateFee) Get() *EstimateFee {
	return v.value
}

func (v *NullableEstimateFee) Set(val *EstimateFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateFee(val *EstimateFee) *NullableEstimateFee {
	return &NullableEstimateFee{value: val, isSet: true}
}

func (v NullableEstimateFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


