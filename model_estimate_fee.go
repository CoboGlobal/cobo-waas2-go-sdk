/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// EstimateFee - struct for EstimateFee
type EstimateFee struct {
	EstimateFeeContractCall *EstimateFeeContractCall
	EstimateFeeTransfer *EstimateFeeTransfer
}

// EstimateFeeContractCallAsEstimateFee is a convenience function that returns EstimateFeeContractCall wrapped in EstimateFee
func EstimateFeeContractCallAsEstimateFee(v *EstimateFeeContractCall) EstimateFee {
	return EstimateFee{
		EstimateFeeContractCall: v,
	}
}

// EstimateFeeTransferAsEstimateFee is a convenience function that returns EstimateFeeTransfer wrapped in EstimateFee
func EstimateFeeTransferAsEstimateFee(v *EstimateFeeTransfer) EstimateFee {
	return EstimateFee{
		EstimateFeeTransfer: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EstimateFee) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Call'
	if jsonDict["request_type"] == "Call" {
		// try to unmarshal JSON data into EstimateFeeContractCall
		err = json.Unmarshal(data, &dst.EstimateFeeContractCall)
		if err == nil {
			return nil // data stored in dst.EstimateFeeContractCall, return on the first match
		} else {
			dst.EstimateFeeContractCall = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as EstimateFeeContractCall: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Transfer'
	if jsonDict["request_type"] == "Transfer" {
		// try to unmarshal JSON data into EstimateFeeTransfer
		err = json.Unmarshal(data, &dst.EstimateFeeTransfer)
		if err == nil {
			return nil // data stored in dst.EstimateFeeTransfer, return on the first match
		} else {
			dst.EstimateFeeTransfer = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as EstimateFeeTransfer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateFeeContractCall'
	if jsonDict["request_type"] == "EstimateFeeContractCall" {
		// try to unmarshal JSON data into EstimateFeeContractCall
		err = json.Unmarshal(data, &dst.EstimateFeeContractCall)
		if err == nil {
			return nil // data stored in dst.EstimateFeeContractCall, return on the first match
		} else {
			dst.EstimateFeeContractCall = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as EstimateFeeContractCall: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateFeeTransfer'
	if jsonDict["request_type"] == "EstimateFeeTransfer" {
		// try to unmarshal JSON data into EstimateFeeTransfer
		err = json.Unmarshal(data, &dst.EstimateFeeTransfer)
		if err == nil {
			return nil // data stored in dst.EstimateFeeTransfer, return on the first match
		} else {
			dst.EstimateFeeTransfer = nil
			return fmt.Errorf("failed to unmarshal EstimateFee as EstimateFeeTransfer: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EstimateFee) MarshalJSON() ([]byte, error) {
	if src.EstimateFeeContractCall != nil {
		return json.Marshal(&src.EstimateFeeContractCall)
	}

	if src.EstimateFeeTransfer != nil {
		return json.Marshal(&src.EstimateFeeTransfer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EstimateFee) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EstimateFeeContractCall != nil {
		return obj.EstimateFeeContractCall
	}

	if obj.EstimateFeeTransfer != nil {
		return obj.EstimateFeeTransfer
	}

	// all schemas are nil
	return nil
}

type NullableEstimateFee struct {
	value *EstimateFee
	isSet bool
}

func (v NullableEstimateFee) Get() *EstimateFee {
	return v.value
}

func (v *NullableEstimateFee) Set(val *EstimateFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateFee(val *EstimateFee) *NullableEstimateFee {
	return &NullableEstimateFee{value: val, isSet: true}
}

func (v NullableEstimateFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


