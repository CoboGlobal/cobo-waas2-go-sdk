openapi: 3.0.3
info:
  contact:
    email: support@cobo.com
    name: Cobo WaaS
    url: https://www.cobo.com/waas
  description: |
    Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of
    crypto wallet technologies with powerful and flexible access controls.

    # Wallet technologies
    - Custodial Wallet
    - MPC Wallet
    - Smart Contract Wallet (Based on Safe{Wallet})
    - Exchange Wallet

    # Risk Control technologies
    - Workflow
    - Access Control List (ACL)

    # Risk Control targets
    - Wallet Management
      - User/team and their permission management
      - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc.
    - Blockchain Interaction
      - Crypto transfer
      - Smart Contract Invocation

    # Important
    HTTPS only. RESTful, resource oriented

    # Get Started
    Set up your APIs or get authorization

    # Authentication and Authorization
    CoboAuth

    # Request and Response
    application/json

    # Error Handling

    ### Common error codes
    | Error Code | Description |
    | -- | -- |

    ### API-specific error codes
    For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.

    # Rate and Usage Limiting

    # Idempotent Request

    # Pagination
    # Support
    [Developer Hub](https://cobo.com/developers)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://cobo.com/waas/tos/
  title: Cobo Wallet as a Service 2.0
  version: 1.0.0
servers:
- description: Production environment
  url: https://api.cobo.com/v3
- description: Development environment
  url: https://api.dev.cobo.com/v3
security:
- CoboAuth: []
tags:
- description: Operations related to all wallets.
  name: Wallets
- description: Operations related to mpc wallet.
  name: Wallets - MPC Wallet
- description: Operations related to exchange wallet.
  name: Wallets - Exchange Wallet
- description: Operations related to all transactions.
  name: Transactions
- description: Operations related to webhooks.
  name: Developers - Webhooks
paths:
  /wallets/chains:
    get:
      description: Retrieve a list of chain metadata.
      operationId: get_chains
      parameters:
      - description: Unique id of the chain
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_chains_200_response'
          description: Successfully listed chains
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the metadata of chain
      tags:
      - Wallets
  /wallets/assets:
    get:
      description: Retrieve a list of asset metadata.
      operationId: get_assets
      parameters:
      - description: Unique id of the asset
        example: USDT
        explode: true
        in: query
        name: asset_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_assets_200_response'
          description: Successfully listed assets
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the metadata of assets
      tags:
      - Wallets
  /wallets/tokens:
    get:
      description: Retrieve a list of token metadata.
      operationId: get_tokens
      parameters:
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: Successfully listed tokens
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the metadata of tokens
      tags:
      - Wallets
  /wallets/supported_chains:
    get:
      description: Retrieve a list of supported chain.
      operationId: get_supported_chains
      parameters:
      - description: Wallet subtype to query
        explode: true
        in: query
        name: wallet_subtype
        required: true
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_chains_200_response'
          description: Successfully listed chains
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the supported chains by wallet subtype
      tags:
      - Wallets
  /wallets/supported_tokens:
    get:
      description: Retrieve a list of supported token.
      operationId: get_supported_tokens
      parameters:
      - description: Wallet subtype to query
        explode: true
        in: query
        name: wallet_subtype
        required: true
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: Unique id of the chain
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: Successfully listed tokens
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the supported tokens by wallet subtype and chain id if specified
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens:
    get:
      description: Retrieve a list of token balance in wallet.
      operationId: get_wallet_token_balances
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_wallet_token_balances_200_response'
          description: Successfully listed tokens
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the token balance in the wallets(to be specific)
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address_id}/tokens:
    get:
      description: Retrieve a list of token balance by address in wallet.
      operationId: get_wallet_address_token_balances
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the address
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: address_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_wallet_token_balances_200_response'
          description: Successfully listed tokens
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the token balance by address in the wallets(to be specific)
      tags:
      - Wallets
  /wallets:
    get:
      description: Retrieve a list of wallets.
      operationId: list_wallets
      parameters:
      - description: Wallet type to query
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: Wallet subtype to query
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_wallets_200_response'
          description: Successfully listed wallets
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List all wallets
      tags:
      - Wallets
    post:
      description: |
        ..More detailed explanation on creating a new wallet..

        Error codes this API may return:
        | Error Code | Description |
        | -- | -- |
        | `2003` | 必选参数缺失 |
        | `2006` | 参数格式或者值非法 |
      operationId: create_wallet
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successfully created wallet
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: Create new wallet
      tags:
      - Wallets
  /wallets/{wallet_id}:
    delete:
      description: Delete a specific wallet by ID
      operationId: delete_wallet_by_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Resource successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Delete a wallet by ID
      tags:
      - Wallets
    get:
      description: Retrieve wallet information by ID
      operationId: get_wallet_by_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successful get a wallet info
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Get wallet information by ID
      tags:
      - Wallets
    put:
      description: Update wallet info by ID
      operationId: update_wallet_by_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateWalletBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successfully updated address
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Update wallet by ID
      tags:
      - Wallets
  /wallets/{wallet_id}/spendables:
    get:
      description: Retrieve a list of spendable utxo.
      operationId: get_spendable_list
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: address
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: address_str
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UTXO'
                type: array
          description: Successfully listed utxo
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the spendable utxo
      tags:
      - Wallets
  /wallets/{wallet_id}/max_sendable_value:
    get:
      description: Retrieve the maximum sendable vaule and the corresponding transaction
        fee for a given address.
      operationId: get_max_send_value
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: address
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: to_address
        required: true
        schema:
          type: string
        style: form
      - description: address
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: from_address
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxSendValue'
          description: Successful operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Get max sendable Vaule
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses:
    get:
      description: Retrieve a list of addresses.
      operationId: list_addresses
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List wallet addresses by wallet ID
      tags:
      - Wallets
    post:
      description: Add address to a wallet.
      operationId: add_wallet_address
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AddressInfo'
                type: array
          description: Successfully created address for a wallet
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Add address to a wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address_id}:
    get:
      description: Retrieve wallet information by ID
      operationId: get_wallet_address_by_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the address
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: address_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressInfo'
          description: Successfully listed addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Get address information by ID
      tags:
      - Wallets
  /wallets/address/validity:
    get:
      description: Check if the given address valid.
      operationId: get_address_validity
      parameters:
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The address string
        example: 0x0000000000000000000000000000000000000000
        explode: true
        in: query
        name: address_str
        required: true
        schema:
          description: Then blockchain address
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_address_validity_200_response'
          description: Successfully get address validity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Get the given address validity for token
      tags:
      - Wallets
  /wallets/mpc/cobo_key_holders:
    get:
      description: Retrieve a list of key holders.
      operationId: list_cobo_key_holder
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyHolder'
                type: array
          description: Successfully listed mpc tss groups
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: List all cobo key holders
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/projects:
    get:
      description: Retrieve a list of mpc project.
      operationId: list_mpc_project
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MPCProject'
                type: array
          description: Successfully listed mpc projects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List all mpc projects
      tags:
      - Wallets - MPC Wallet
    post:
      description: create a mpc project
      operationId: create_mpc_project
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: mpc project successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Create a mpc project
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/projects/{project_id}:
    get:
      description: get a mpc vault
      operationId: get_mpc_project
      parameters:
      - description: Unique id of the mpc project
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed mpc vaults
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: get a mpc project
      tags:
      - Wallets - MPC Wallet
    put:
      description: update a mpc vault
      operationId: update_mpc_project
      parameters:
      - description: Unique id of the mpc project
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed mpc vaults
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: update a mpc project
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults:
    get:
      description: Retrieve a list of mpc vault.
      operationId: list_mpc_vault
      parameters:
      - description: Unique id of the mpc project
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MPCVault'
                type: array
          description: Successfully listed mpc vaults
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List all mpc vaults
      tags:
      - Wallets - MPC Wallet
    post:
      description: create a mpc vault
      operationId: create_mpc_vault
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: mpc vault successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Create a mpc vault
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults/{vault_id}:
    get:
      description: get a mpc vault
      operationId: get_mpc_vault
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully get mpc vault
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: get a mpc vault
      tags:
      - Wallets - MPC Wallet
    put:
      description: modify a mpc vault
      operationId: modify_mpc_vault
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully modify mpc vault
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: Modify a mpc vault
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults/{vault_id}/key_groups:
    get:
      description: Retrieve a list of mpc key groups.
      operationId: list_key_group
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The type of key group.
        explode: true
        in: query
        name: key_group_type
        required: false
        schema:
          $ref: '#/components/schemas/KeyGroupType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyGroup'
                type: array
          description: Successfully listed mpc tss groups
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List all mpc key groups
      tags:
      - Wallets - MPC Wallet
    post:
      description: create a mpc key group.
      operationId: create_key_group
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createKeyGroupBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: mpc vault successfully created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: create a mpc key group
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults/{vault_id}/key_groups/{key_group_id}:
    delete:
      description: delete a mpc key group.
      operationId: delete_key_group
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the tss group
        example: "880311524363903326"
        explode: false
        in: path
        name: key_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: Successfully deleted mpc tss group
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: delete a mpc key group
      tags:
      - Wallets - MPC Wallet
    get:
      description: get a mpc key group.
      operationId: get_key_group
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the tss group
        example: "880311524363903326"
        explode: false
        in: path
        name: key_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: Successfully get mpc tss group
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: get a mpc key group
      tags:
      - Wallets - MPC Wallet
    put:
      description: update a mpc key group.
      operationId: update_key_group
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the tss group
        example: "880311524363903326"
        explode: false
        in: path
        name: key_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The action of update key group
        explode: true
        in: query
        name: update_key_group_action
        required: true
        schema:
          description: the action of tss request.
          enum:
          - UpgradeToMainKeyGroup
          example: UpgradeToMainKeyGroup
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: Successfully modify mpc tss group
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: update a mpc key group
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults/{vault_id}/tss_requests:
    get:
      description: Detailed description on retrieving list of tss request information
      operationId: list_tss_request
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The target key group id of tss request.
        example: "880311524363903326"
        explode: true
        in: query
        name: target_key_group_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: get mpc tss request successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: List tss request information of a vault
      tags:
      - Wallets - MPC Wallet
    post:
      description: Create a tss request to generate key secrets for a tss group
      operationId: create_tss_request
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: mpc vault successfully created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: Create a tss request to generate key secrets for a tss group
      tags:
      - Wallets - MPC Wallet
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}:
    get:
      description: get a tss request.
      operationId: get_tss_request
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the tss request
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: get mpc tss request successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown Internal Error
      security:
      - CoboAuth: []
      summary: get a tss request
      tags:
      - Wallets - MPC Wallet
    put:
      description: cancel tss request.
      operationId: cancel_tss_request
      parameters:
      - description: Unique id of the mpc vault
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the tss request
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The action of tss request.
        explode: true
        in: query
        name: tss_request_action
        required: true
        schema:
          description: the action of tss request.
          enum:
          - cancel
          example: cancel
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: modify mpc tss request successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: cancel tss request
      tags:
      - Wallets - MPC Wallet
  /wallets/exchanges/{exchange_id}/supported_assets:
    get:
      description: Retrieve a list of supported asset.
      operationId: get_exchange_supported_assets
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_assets_200_response'
          description: Successfully listed assets
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the supported assets by exchange id
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets/supported_chains:
    get:
      description: Retrieve a list of supported chains.
      operationId: get_exchange_supported_chains
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: Unique id of the asset
        example: USDT
        explode: true
        in: query
        name: asset_id
        required: true
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChainInfo'
                type: array
          description: Successfully listed chains
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the supported chains by exchange id and asset id
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{wallet_id}/assets:
    get:
      description: Retrieve a list of asset balance in exchange wallet.
      operationId: get_exchange_wallet_asset_balances
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the wallet
        example: SPOT
        explode: true
        in: query
        name: sub_wallet_id
        required: true
        schema:
          type: string
        style: form
      - description: Unique id of the asset
        example: USDT
        explode: true
        in: query
        name: asset_id
        required: false
        schema:
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_exchange_wallet_asset_balances_200_response'
          description: Successfully listed tokens
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List the asset balance in exchange wallet
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/settings:
    get:
      description: Retrieve a list of exchanges.
      operationId: list_exchanges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_exchanges_200_response_inner'
                type: array
          description: Successfully list of exchange sub account ids
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List of exchanges
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/exchanges/subaccounts:
    get:
      description: Retrieve a list of exchange sub accounts.
      operationId: list_sub_accounts_by_wallet_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: List exchange sub accounts by wallet id
      tags:
      - Wallets - Exchange Wallet
    post:
      description: Link exchange sub accounts.
      operationId: link_sub_accounts_by_wallet_id
      parameters:
      - description: Unique id of the wallet
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link_sub_accounts_by_wallet_id_request'
        description: Request body for linking subaccounts
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Link exchange sub accounts by wallet id
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/subaccounts:
    get:
      description: Retrieve a list of exchange sub accounts.
      operationId: list_sub_accounts_by_apikey
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: The API Key for the exchange
        example: d8f062da-39f4-4a11-8b9d-12595854237f
        explode: true
        in: query
        name: apikey
        required: false
        schema:
          type: string
        style: form
      - description: The API Secret for the exchange.
        example: 75B4F636193162488A3728B4A5797708
        explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      - description: The API passphrase for the exchange wallet.
        example: A3DBHJV
        explode: true
        in: query
        name: passphrase
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: List exchange sub accounts by apikey
      tags:
      - Wallets - Exchange Wallet
  /transactions/fee_price:
    get:
      description: Retrieve the fee price data.
      operationId: get_chain_fee_price
      parameters:
      - description: Unique id of the chain
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: Unique id of the token
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainFeePrice'
          description: Successful get chain fee info
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: "Get the fee price data for chain and/or token(Hold, TBD after normalize\
        \ fee settings)"
      tags:
      - Transactions
  /transactions/estimate_fee:
    post:
      description: Estimate the transaction fee.
      operationId: estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFee'
          description: Successful get a transaction detail
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Estimate the fee for transaction
      tags:
      - Transactions
  /transactions/transfer:
    post:
      description: Create a transaction to transfer funds from one account to another.
      operationId: create_transfer_transaction
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Create a transfer transaction
      tags:
      - Transactions
  /transactions/call:
    post:
      description: Create a transaction to call a smart contract.
      operationId: create_smart_contract_call_transaction
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Create a smart contract call transaction
      tags:
      - Transactions
  /transactions/sign:
    post:
      description: Create a transaction to sign message.
      operationId: create_sign_message_transaction
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
      security:
      - CoboAuth: []
      summary: Create a sign message transaction
      tags:
      - Transactions
  /transactions:
    get:
      description: Retrieve a list of transactions.
      operationId: list_transactions
      parameters:
      - description: Request ID
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: Field of sort by
        example: timestamp
        explode: true
        in: query
        name: sort_by
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Direction to sort by
        example: ASC
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ""
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_200_response'
          description: Successfully listed transactions
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too Many Request
      security:
      - CoboAuth: []
      summary: List all transactions
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: Detailed description on retrieving transaction information by id
      operationId: get_transaction_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
          description: Successful get a transaction detail
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Get transaction information by ID
      tags:
      - Transactions
    put:
      description: Update information of a transaction.
      operationId: update_transaciton_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionDetails'
        description: The request body to update a address
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
          description: Successful get a transaction detail
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Update transaction by ID
      tags:
      - Transactions
  /transactions/{transaction_id}/drop:
    post:
      description: Drop a transaction.
      operationId: drop_transaction_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Drop a transaction by ID
      tags:
      - Transactions
  /transactions/{transaction_id}/resend:
    post:
      description: Resend a transaction.
      operationId: resend_transaction_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Resend a transaction by ID
      tags:
      - Transactions
  /transactions/{transaction_id}/speedup:
    post:
      description: Speed up a transaction.
      operationId: speedup_transaction_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Speed up a transaction by ID
      tags:
      - Transactions
  /transactions/{transaction_id}/double_check/retry:
    post:
      description: Retry a transaction double-check.
      operationId: retry_transaction_double_check_by_id
      parameters:
      - description: Unique id of the transaction
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: Successful create a smart contract call request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      security:
      - CoboAuth: []
      summary: Retry up a transaction double-check by ID
      tags:
      - Transactions
  /webhooks/events/definitions:
    get:
      description: |
        This operation is used to retrieve a list of all supported event definitions in the current system.

        These event definitions include different event types that trigger webhooks, enabling custom notifications and integration features within the system. A successful call to this endpoint will return a detailed list of event definitions.
      operationId: list_webhook_event_definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
                type: array
          description: Get webhook event definitions successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
      summary: List all supported event definitions.
      tags:
      - Developers - Webhooks
  /webhooks/events:
    get:
      description: "This operation retrieves a list of events that have been triggered\
        \ within the system. \nThe retrieved list of events can be useful for monitoring\
        \ system activities, setting up event-driven workflows, and integrating with\
        \ external systems to respond to specific events.\n"
      operationId: list_events
      parameters:
      - description: The status of event.
        example: Success
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventStatus'
        style: form
      - description: |
          The type of event.
          Get event types by calling `List all supported event definitions`.
        example: asset_wallet.outbound.created
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: size of page to return (pagination)
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: before
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Cursor string received from previous request
        example: "123"
        explode: true
        in: query
        name: after
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_events_200_response'
          description: Successfully listed of webhook events.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
      summary: List triggered events.
      tags:
      - Developers - Webhooks
  /webhooks/events/{event_id}:
    get:
      description: |
        This operation is used to retrieve a webhook event information by its ID.
        Get event IDs by calling `List triggered events`.
      operationId: get_webhook_event
      parameters:
      - description: "Unique id of the webhook event, get event IDs by calling `List\
          \ triggered events`."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
          description: Get webhook event info successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      summary: Retrieve webhook event information by event ID.
      tags:
      - Developers - Webhooks
  /webhooks/events/{event_id}/logs:
    get:
      description: |
        This operation is used to retrieve a list of webhook event logs by event ID.
        Get event IDs by calling `List triggered events`.
      operationId: get_webhook_event_logs
      parameters:
      - description: "Unique id of the webhook event, get event IDs by calling `List\
          \ triggered events`."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
                type: array
          description: Get webhook event logs successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      summary: List webhook event logs by event ID.
      tags:
      - Developers - Webhooks
  /webhooks/events/{event_id}/retry:
    post:
      description: |
        This operation is used to retry a webhook event by its ID.
        Events in `Retrying` or `Failed` status can be retried.
        Get event IDs by calling `List triggered events`.
      operationId: retry_webhook_event
      parameters:
      - description: "Unique id of the webhook event, get event IDs by calling `List\
          \ triggered events`."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_webhook_event_201_response'
          description: Retry a failed event successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized Error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Resource Not Found
      summary: Retry webhook event by event ID.
      tags:
      - Developers - Webhooks
components:
  parameters:
    sortByParam:
      description: Field of sort by
      example: timestamp
      explode: true
      in: query
      name: sort_by
      required: false
      schema:
        default: ""
        type: string
      style: form
    directionParam:
      description: Direction to sort by
      example: ASC
      explode: true
      in: query
      name: direction
      required: false
      schema:
        default: ""
        enum:
        - ASC
        - DESC
        type: string
      style: form
    limitParam:
      description: size of page to return (pagination)
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        format: int32
        type: integer
      style: form
    beforeParam:
      description: Cursor string received from previous request
      example: "123"
      explode: true
      in: query
      name: before
      required: false
      schema:
        default: ""
        type: string
      style: form
    afterParam:
      description: Cursor string received from previous request
      example: "123"
      explode: true
      in: query
      name: after
      required: false
      schema:
        default: ""
        type: string
      style: form
    optionalAssetIdParam:
      description: Unique id of the asset
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: false
      schema:
        type: string
      style: form
    requiredAssetIdParam:
      description: Unique id of the asset
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: true
      schema:
        type: string
      style: form
    optionalChainIdParam:
      description: Unique id of the chain
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: false
      schema:
        type: string
      style: form
    optionalTokenIdParam:
      description: Unique id of the token
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: false
      schema:
        type: string
      style: form
    requiredTokenIdParam:
      description: Unique id of the token
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: true
      schema:
        type: string
      style: form
    requiredWalletSubtypeParam:
      description: Wallet subtype to query
      explode: true
      in: query
      name: wallet_subtype
      required: true
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    optionalWalletTypeParam:
      description: Wallet type to query
      explode: true
      in: query
      name: wallet_type
      required: false
      schema:
        $ref: '#/components/schemas/WalletType'
      style: form
    optionalWalletSubtypeParam:
      description: Wallet subtype to query
      explode: true
      in: query
      name: wallet_subtype
      required: false
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    walletIdParam:
      description: Unique id of the wallet
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    addressIdParam:
      description: Unique id of the address
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: address_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    requiredAddressStrParam:
      description: The address string
      example: 0x0000000000000000000000000000000000000000
      explode: true
      in: query
      name: address_str
      required: true
      schema:
        description: Then blockchain address
        type: string
      style: form
    requiredSubWalletIdParam:
      description: Unique id of the wallet
      example: SPOT
      explode: true
      in: query
      name: sub_wallet_id
      required: true
      schema:
        type: string
      style: form
    addressStrParam:
      description: address
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: address_str
      required: false
      schema:
        type: string
      style: form
    toAddressStrParam:
      description: address
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: true
      schema:
        type: string
      style: form
    fromAddressStrParam:
      description: address
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: from_address
      required: false
      schema:
        type: string
      style: form
    keyGroupIdParam:
      description: Unique id of the tss group
      example: "880311524363903326"
      explode: false
      in: path
      name: key_group_id
      required: true
      schema:
        type: string
      style: simple
    optionalKeyGroupTypeParam:
      description: The type of key group.
      explode: true
      in: query
      name: key_group_type
      required: false
      schema:
        $ref: '#/components/schemas/KeyGroupType'
      style: form
    projectIdParam:
      description: Unique id of the mpc project
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: project_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalTargetKeyGroupIDParam:
      description: The target key group id of tss request.
      example: "880311524363903326"
      explode: true
      in: query
      name: target_key_group_id
      required: false
      schema:
        type: string
      style: form
    requiredTssRequestActionParam:
      description: The action of tss request.
      explode: true
      in: query
      name: tss_request_action
      required: true
      schema:
        description: the action of tss request.
        enum:
        - cancel
        example: cancel
        type: string
      style: form
    tssRequestIdParam:
      description: Unique id of the tss request
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: tss_request_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    requiredUpdateKeyGroupActionParam:
      description: The action of update key group
      explode: true
      in: query
      name: update_key_group_action
      required: true
      schema:
        description: the action of tss request.
        enum:
        - UpgradeToMainKeyGroup
        example: UpgradeToMainKeyGroup
        type: string
      style: form
    vaultIdParam:
      description: Unique id of the mpc vault
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: vault_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalVaultIdQueryParam:
      description: Unique id of the mpc vault
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: vault_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalVaultNameParam:
      description: Unique id of the mpc vault
      example: my vault name
      explode: true
      in: query
      name: vault_name
      required: false
      schema:
        type: string
      style: form
    exchangeIdParam:
      description: Exchange ID to query
      explode: false
      in: path
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: simple
    optionalExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: false
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    requiredExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    optionalApikeyParam:
      description: The API Key for the exchange
      example: d8f062da-39f4-4a11-8b9d-12595854237f
      explode: true
      in: query
      name: apikey
      required: false
      schema:
        type: string
      style: form
    optionalSecretParam:
      description: The API Secret for the exchange.
      example: 75B4F636193162488A3728B4A5797708
      explode: true
      in: query
      name: secret
      required: false
      schema:
        type: string
      style: form
    optionalPassphraseParam:
      description: The API passphrase for the exchange wallet.
      example: A3DBHJV
      explode: true
      in: query
      name: passphrase
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdParam:
      description: Request ID
      example: web_send_by_user_327_1610444045047
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    transactionIdParam:
      description: Unique id of the transaction
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: transaction_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhookEventIdParam:
      description: "Unique id of the webhook event, get event IDs by calling `List\
        \ triggered events`."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
  requestBodies:
    createWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWallet'
      description: The request body to create a wallet
    UpdateWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_wallet_by_id_request'
      description: The request body to update a wallet
    createAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/add_wallet_address_request'
      description: The request body to add address for a wallet
    createKeyGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_group_request'
      description: The request body to create a mpc key group
    createMpcProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_project_request'
      description: The request body to create a mpc project
    createTssRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_tss_request_request'
      description: The request body to create a tss request
    createMpcVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_vault_request'
      description: The request body to create a mpc vault
    updateProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_project_request'
      description: The request body to update a mpc project
    updateVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/modify_mpc_vault_request'
      description: The request body to update a mpc vault
    createTransferBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
      description: The request body to create a transfer transaction
    createSmartContractCallBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SmartContractCall'
      description: The request body to create a smart contract transaction
    createMessageSignBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignMessage'
      description: The request body to create a message sign transaction
    estimateFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFee'
      description: The request body to estimate fee of transfer or call transaction
    feeRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionFee'
      description: The request body of fee to initiate transaction
  responses:
    badRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad Request
    unauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized Error
    forbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden
    notFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Resource Not Found
    tooManyRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Too Many Request
    serviceUnavailableError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unknown Internal Error
    getChainsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_chains_200_response'
      description: Successfully listed chains
    getAssetsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_assets_200_response'
      description: Successfully listed assets
    getTokensResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_tokens_200_response'
      description: Successfully listed tokens
    getTokenBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_wallet_token_balances_200_response'
      description: Successfully listed tokens
    getAssetBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_exchange_wallet_asset_balances_200_response'
      description: Successfully listed tokens
    getWalletsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_wallets_200_response'
      description: Successfully listed wallets
    getWalletByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successful get a wallet info
    createWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successfully created wallet
    updateWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successfully updated address
    spendableListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/UTXO'
            type: array
      description: Successfully listed utxo
    maxSendValueResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxSendValue'
      description: Successful operation
    getAddressesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_addresses_200_response'
      description: Successfully listed addresses
    getAddressByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressInfo'
      description: Successfully listed addresses
    createAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: Successfully created address for a wallet
    updateAddressResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressInfo'
      description: Successfully updated address
    getAddressValidityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_address_validity_200_response'
      description: Successfully get address validity
    createKeyGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: mpc vault successfully created
    createMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: mpc project successfully created
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: mpc vault successfully created
    getCoboKeyHoldersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyHolder'
            type: array
      description: Successfully listed mpc tss groups
    getKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully get mpc tss group
    getKeyGroupsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyGroup'
            type: array
      description: Successfully listed mpc tss groups
    getMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully listed mpc vaults
    getMpcProjectsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/MPCProject'
            type: array
      description: Successfully listed mpc projects
    getTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: get mpc tss request successfully
    getMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully get mpc vault
    getMpcVaultsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/MPCVault'
            type: array
      description: Successfully listed mpc vaults
    deleteKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully deleted mpc tss group
    putKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully modify mpc tss group
    putTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: modify mpc tss request successfully
    putVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully modify mpc vault
    getSubAccountIdsResponse:
      content:
        application/json:
          schema:
            description: Sub account id list
            example:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            items:
              type: string
            type: array
      description: Successfully list of exchange sub account ids
    getChainFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainFeePrice'
      description: Successful get chain fee info
    getTransactionsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_transactions_200_response'
      description: Successfully listed transactions
    getTransactionByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetails'
      description: Successful get a transaction detail
    estimateFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionFee'
      description: Successful get a transaction detail
    createTransactionRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_transfer_transaction_201_response'
      description: Successful create a smart contract call request
  schemas:
    Pagination:
      description: The meta data for pagination.
      example:
        before: as19
        after: 20sa
      properties:
        before:
          example: as19
          type: string
        after:
          example: 20sa
          type: string
      type: object
    ErrorResponse:
      description: The data for error response.
      example:
        error_id: 0b6ddf19083c4bd1a9ca01bec44b24dd
        success: false
        error_description: API params is missing or null
        error_code: 1000
      properties:
        success:
          default: false
          description: Indicates if the API operation was successful. Always false
            for errors.
          type: boolean
        error_code:
          description: A machine-readable error code.`
          example: 1000
          type: integer
        error_description:
          description: A human-readable error description for users.
          example: API params is missing or null
          type: string
        error_id:
          description: "A unique ID for the error log, mainly used for debugging."
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
          type: string
      required:
      - error_code
      - error_description
      - error_id
      - success
      type: object
    AssetInfo:
      description: The data for asset information.
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        display_code: USDT
        description: Tether USDT
        asset_id: USDT
      properties:
        asset_id:
          description: ID of the asset. Unique in all assets scope.
          example: USDT
          pattern: "^[A-Z0-9]+$"
          type: string
        display_code:
          description: Display code for the asset.
          example: USDT
          pattern: "^[A-Z0-9]+$"
          type: string
        description:
          description: The description of the asset.
          example: Tether USDT
          type: string
        icon_url:
          description: URL of the asset
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
      required:
      - asset_id
      type: object
    TokenInfo:
      description: The data for token information.
      example:
        icon_url: https://static.waas.co/images/coins/ETH.png
        symbol: USDT
        token_id: ETH_USDT
        chain_id: ETH
        description: Tether USDT
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
      properties:
        token_id:
          description: ID of the token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        chain_id:
          description: The blockchain on which the token operates.
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        symbol:
          description: Symbol for the token.
          example: USDT
          pattern: "^[A-Za-z0-9]+$"
          type: string
        description:
          description: The description of the token.
          example: Tether USDT
          type: string
        icon_url:
          description: URL of the icon image.
          example: https://static.waas.co/images/coins/ETH.png
          type: string
        token_address:
          description: "Address for token, if applicable."
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
        asset_id:
          description: ID of the asset. Used to group token balance when needed.
          example: USDT
          pattern: "^[A-Z0-9]+$"
          type: string
      required:
      - chain_id
      - token_id
      type: object
    ChainInfo:
      description: The data for chain information.
      example:
        icon_url: https://static.waas.co/images/coins/ETH.png
        symbol: USDT
        chain_id: ETH
        explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
        explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        chain_id:
          description: The blockchain on which the token operates.
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        symbol:
          description: Symbol for the chain.
          example: USDT
          pattern: "^[A-Za-z0-9]+$"
          type: string
        icon_url:
          description: URL of the icon image.
          example: https://static.waas.co/images/coins/ETH.png
          type: string
        explorer_tx_url:
          description: URL of the explorer transaction.
          example: "https://etherscan.io/tx/{txn_id}"
          type: string
        explorer_address_url:
          description: URL of the explorer address.
          example: "https://etherscan.io/address/{address}"
          type: string
      required:
      - chain_id
      type: object
    WalletType:
      enum:
      - Custodial
      - MPC
      - SmartContract
      - Exchange
      example: Custodial
      type: string
    WalletSubtype:
      enum:
      - Asset
      - Web3
      - Main
      - Sub
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      example: Asset
      type: string
    SmartContractWalletType:
      default: SafeWallet
      description: What kind of smart contract does this wallet use
      enum:
      - SafeWallet
      example: SafeWallet
      type: string
    SmartContractWalletOperationType:
      default: CoboSafe
      description: The way use to interact with the smart contract wallet.
      enum:
      - CoboSafe
      example: CoboSafe
      type: string
    ExchangeId:
      description: The exchange identifier.
      enum:
      - binance
      - okx
      - deribit
      - bybit
      - gate
      example: binance
      type: string
    TokenBalance:
      description: The data for token balance information.
      example:
        token_id: ETH_USDT
        balance:
          total: "100.0"
          pending: "10.5"
          staked: "3.5"
          available: "80.5"
          frozen: "2.5"
          locked: "3.0"
      properties:
        token_id:
          description: ID of the token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance_balance'
      required:
      - balance
      - token_id
      type: object
    AssetBalance:
      description: The data for token balance information.
      example:
        balance: "{}"
        asset_id: USDT
      properties:
        asset_id:
          description: ID of the asset. Unique in all assets scope.
          example: USDT
          pattern: "^[A-Z0-9]+$"
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
      required:
      - asset_id
      - balance
      type: object
    SafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - properties:
            chain_id:
              description: The chain the wallet is on.
              example: ETH
              type: string
            label:
              description: The label of the wallet.
              example: My Wallet
              type: string
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: The address of the smart contract wallet.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          owners:
            description: The owners of the smart contract wallet. This MUST be provided
              when user want to create a new safe wallet.
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: The threshold of required confirmations for the smart contract
              wallet. This MUST be provided when user want to create a new safe wallet.
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: The address of the cobo safe module.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SafeWallet_allOf_initiator'
        required:
        - smart_contract_wallet_type
        type: object
    CustodialWalletInfo:
      description: The data for wallet information.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_subtype: Asset
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name: Example Wallet
        wallet_type: Custodial
      properties:
        wallet_id:
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          example: Example Wallet
          type: string
        org_id:
          description: The owning custody organization id of the custodial wallet.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - name
      - org_id
      - wallet_id
      - wallet_subtype
      - wallet_type
      type: object
    MPCWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          vault_id:
            description: The owning mpc vault id of the mpc wallet.
            type: string
        required:
        - vault_id
        type: object
    SmartContractWalletInfo:
      discriminator:
        mapping:
          Safe: '#/components/schemas/SafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          apikey:
            description: The API Key for the exchange.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          parent_wallet_id:
            description: The parent wallet id for this wallet if presented.
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            format: uuid
            type: string
          sub_accounts:
            items:
              $ref: '#/components/schemas/ExchangeWalletInfo_allOf_sub_accounts'
            type: array
        required:
        - apikey
        - exchange_id
        type: object
    WalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/SmartContractWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    BaseCreateWallet:
      properties:
        name:
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - name
      type: object
    CreatedWallet:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWallet'
          MPC: '#/components/schemas/CreateMpcWallet'
          SmartContract: '#/components/schemas/CreateSmartContractWallet'
          Exchange: '#/components/schemas/CreateExchangeWallet'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CreateCustodialWallet'
      - $ref: '#/components/schemas/CreateExchangeWallet'
      - $ref: '#/components/schemas/CreateMpcWallet'
      - $ref: '#/components/schemas/CreateSmartContractWallet'
    UTXO:
      description: utxo information.
      example:
        amount: "100000"
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        is_coinbase: false
        vout_n: 0
        tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        confirmed_number: 66716
      properties:
        tx_hash:
          description: Transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          type: string
        vout_n:
          description: Output index of the UTXO.
          example: 0
          type: integer
        address:
          description: Address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        amount:
          description: "UTXO amount in decimal places (e.g. one bitcoin is divisible\
            \ to eight decimal places, and 100000000 represents 1 BTC)."
          example: "100000"
          type: string
        is_coinbase:
          description: Whether the UTXO is a coinbase transaction.
          example: false
          type: boolean
        confirmed_number:
          description: Number of confirmations for the UTXO.
          example: 66716
          type: integer
      type: object
    MaxSendValue:
      description: max send value and fee.
      example:
        gas_price: "43638776316"
        token_decimal: 18
        fee_value: "0"
        fee_token: ETH
        gas_limit: 21000
        fee_per_byte: "0"
        max_send_value: "841165119243622"
        fee_decimal: 18
        token: ETH
      properties:
        token:
          description: token name.
          example: ETH
          type: string
        token_decimal:
          description: coin decimal precision.
          example: 18
          type: integer
        fee_token:
          description: fee token name.
          example: ETH
          type: string
        fee_decimal:
          description: fee coin decimal precision.
          example: 18
          type: integer
        max_send_value:
          description: the maximum sendable value for the given address or current
            wallet.
          example: "841165119243622"
          type: string
        fee_per_byte:
          description: transaction fees per byte for UTXO model.
          example: "0"
          type: string
        fee_value:
          description: transaction fee for UTXO model
          example: "0"
          type: string
        gas_price:
          description: gas price for account model
          example: "43638776316"
          type: string
        gas_limit:
          description: gas limit for account model
          example: 21000
          type: integer
      type: object
    AddressInfo:
      description: The data for address information.
      example:
        is_internal: false
        token_id: ETH_USDT
        address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        memo: "82840924"
        address_str: 0x0000000000000000000000000000000000000000
      properties:
        address_id:
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address_str:
          description: Then blockchain address
          example: 0x0000000000000000000000000000000000000000
          type: string
        token_id:
          description: ID of the token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        memo:
          description: From address memo
          example: "82840924"
          type: string
        is_internal:
          default: false
          description: "Ture if the address is in same fund pool, False otherwise"
          example: false
          type: boolean
      required:
      - address_id
      - address_str
      - token_id
      type: object
    AddressEncoding:
      description: Encoding only apply to BTC-Liked chain
      enum:
      - ENCODING_P2PKH
      - ENCODING_P2SH_P2WPKH
      - ENCODING_BECH32
      - ENCODING_P2PKH_UNCOMPRESSED
      - ENCODING_P2SH_P2MS
      - ENCODING_P2SH_P2WSH_P2MS
      - ENCODING_P2TR
      example: ENCODING_P2PKH
      type: string
    CreateCustodialWallet:
      allOf:
      - $ref: '#/components/schemas/BaseCreateWallet'
      - properties:
          wallet_type:
            enum:
            - Custodial
            type: string
          wallet_subtype:
            enum:
            - Asset
            - Web3
            type: string
        required:
        - wallet_subtype
        - wallet_type
        type: object
      example:
        wallet_subtype: Asset
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
    CreateMpcWallet:
      allOf:
      - $ref: '#/components/schemas/BaseCreateWallet'
      - properties:
          wallet_type:
            enum:
            - MPC
            type: string
          wallet_subtype:
            enum:
            - Org-Controlled
            - User-Controlled
            type: string
          vault_id:
            description: The owning mpc vault id of the mpc wallet.
            type: string
        required:
        - vault_id
        - wallet_subtype
        - wallet_type
        type: object
    CreateSmartContractWallet:
      discriminator:
        mapping:
          Safe: '#/components/schemas/CreateSafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateSafeWallet'
    CreateSafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/BaseCreateWallet'
        - properties:
            wallet_type:
              enum:
              - SmartContract
              type: string
            wallet_subtype:
              enum:
              - "Safe{Wallet}"
              type: string
            label:
              description: The label of the wallet.
              example: ETH
              type: string
            chain_id:
              description: The chain id the wallet is on.
              example: ETH
              type: string
          required:
          - chain_id
          - wallet_subtype
          - wallet_type
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: "The address of the smart contract wallet. If this is not\
              \ provided, WaaS 2.0 will create a new safe wallet and setup cobo safe\
              \ module for user. In this case, threshold, owners is required."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          owners:
            description: The owners of the smart contract wallet. This MUST be provided
              when user want to create a new safe wallet.
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: The threshold of required confirmations for the smart contract
              wallet. This MUST be provided when user want to create a new safe wallet.
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: The address of the cobo safe module. Cobo safe module must
              has been created & enabled when import a existing safe wallet.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SafeWallet_allOf_initiator'
        required:
        - smart_contract_wallet_type
        type: object
    CreateExchangeWallet:
      allOf:
      - $ref: '#/components/schemas/BaseCreateWallet'
      - properties:
          wallet_type:
            enum:
            - Exchange
            type: string
          wallet_subtype:
            enum:
            - Main
            - Sub
            type: string
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          apikey:
            description: The API Key for the exchange.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          secret:
            description: The API Secret for the exchange.
            example: 75B4F636193162488A3728B4A5797708
            type: string
          passphrase:
            description: The passphrase for the exchange.
            example: sXASDKWKLLsWWEE
            type: string
          ga_code:
            description: The ga_code for the exchange.
            example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            type: string
          sub_account_ids:
            description: "The unique identifier associated with the exchange sub-account.\
              \ It can be an email address, username, or a custom account ID."
            example:
            - sub01@xx.com
            - sub02@xx.com
            items:
              type: string
            type: array
        required:
        - apikey
        - exchange_id
        - secret
        - wallet_subtype
        - wallet_type
        type: object
    CurveType:
      enum:
      - SECP256K1
      - ED25519
      example: ED25519
      type: string
    KeyGroup:
      description: The data for mpc key group information.
      example:
        tss_group_ids:
        - group_id: mMedDioOKhTlhGyQRzMv
          curve: ED25519
        - group_id: mMedDioOKhTlhGyQRzMv
          curve: ED25519
        threshold: 6
        id: "880311524363903326"
        node_count: 0
        type: MainKeyGroup
        key_holders:
        - name: key holder name
          tss_node_id: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          online: true
          type: MOBILE
          status: Valid
        - name: key holder name
          tss_node_id: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          online: true
          type: MOBILE
          status: Valid
        status: Valid
      properties:
        id:
          description: Unique id of the key group
          example: "880311524363903326"
          type: string
        type:
          $ref: '#/components/schemas/KeyGroupType'
        tss_group_ids:
          items:
            $ref: '#/components/schemas/TSSGroupId'
          type: array
        key_holders:
          items:
            $ref: '#/components/schemas/KeyHolder'
          type: array
        node_count:
          type: integer
        threshold:
          type: integer
        status:
          $ref: '#/components/schemas/KeyGroupStatus'
      type: object
    KeyGroupStatus:
      enum:
      - New
      - Valid
      - Unavailable
      example: Valid
      type: string
    KeyGroupType:
      enum:
      - MainKeyGroup
      - SigningKeyGroup
      - RecoveryKeyGroup
      example: MainKeyGroup
      type: string
    KeyHolder:
      description: The data for mpc wallet key holder information.
      example:
        name: key holder name
        tss_node_id: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        online: true
        type: MOBILE
        status: Valid
      properties:
        name:
          example: key holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          description: The IDs of the tss node.
          example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          type: string
        online:
          description: Indicates if the tss node online
          type: boolean
        status:
          $ref: '#/components/schemas/KeyHolderStatus'
      type: object
    KeyHolderStatus:
      enum:
      - Valid
      - NotConfigured
      - NotActivated
      - Changed
      example: Valid
      type: string
    KeyHolderType:
      enum:
      - COBO
      - MOBILE
      - API
      example: MOBILE
      type: string
    MPCVault:
      description: The data for mpc vault information.
      example:
        root_pubkeys:
        - curve: ED25519
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        - curve: ED25519
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        create_timestamp: 0.8008281904610115
        name: my mpc vault
        id: YPdbyVaVGqXXjkUsohHw
        type: OrgControlled
      properties:
        id:
          description: Unique id of the vault
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        name:
          example: my mpc vault
          type: string
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          items:
            $ref: '#/components/schemas/RootPubkey'
          type: array
        create_timestamp:
          description: The create time the vault.
          type: number
      type: object
    MPCVaultType:
      enum:
      - OrgControlled
      - UserControlled
      example: OrgControlled
      type: string
    MPCProject:
      description: The data for mpc project information.
      example:
        create_timestamp: 1
        org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
        name: my mpc project
        threshold: 6
        id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        node_count: 0
      properties:
        id:
          description: Unique id of the project
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        org_id:
          description: Unique id of org
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          type: string
        name:
          example: my mpc project
          type: string
        node_count:
          description: The count of tss node of the project
          type: integer
        threshold:
          description: The threshold number of project required for signature
          type: integer
        create_timestamp:
          description: The create time the vault.
          type: integer
      type: object
    RootPubkey:
      description: The data for root pubkey information.
      example:
        curve: ED25519
        pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        pubkey:
          description: the root pubkey of the mpc vault.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSGroupId:
      description: The data for tss group id information.
      example:
        group_id: mMedDioOKhTlhGyQRzMv
        curve: ED25519
      properties:
        group_id:
          description: the group id of the tss group.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSRequest:
      description: The data for mpc tss request information.
      example:
        id: YPdbyVaVGqXXjkUsohHw
        type: KeyGen
        status: Success
      properties:
        id:
          description: Unique id of the tss request.
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
      type: object
    TSSRequestStatus:
      enum:
      - PendingKeyHolderConfirmation
      - KeyHolderConfirmationFailed
      - KeyGenerating
      - KeyGeneratingFailed
      - Success
      example: Success
      type: string
    TSSRequestType:
      description: "The type of tss request, keygen is key generation"
      enum:
      - KeyGen
      - KeyGenFromKeyGroup
      - Recovery
      example: KeyGen
      type: string
    FeeType:
      default: EVM_EIP_1559
      description: The fee type used
      enum:
      - Fixed
      - EVM_EIP_1559
      - EVM_Legacy
      - UTXO
      example: EVM_EIP_1559
      type: string
    FeeAmount:
      description: The estimated fee amount in fee_coin.
      properties:
        fee_amount:
          description: The estimated fee amount in fee_coin.
          example: "0.1"
          type: string
      type: object
    FeeData:
      description: The estimated fee amount in fee_coin.
      properties:
        gas_limit:
          default: 21000
          description: The Limit of gas.
          type: integer
        fee_amount:
          description: The estimated fee amount in fee_coin.
          example: "0.1"
          type: string
      type: object
    EvmEip1559FeeBasePrice:
      description: The base eip1559 fee price for estimate fees or transfer.
      properties:
        fee_token_id:
          description: ID of the fee token. Unique in all chains scope.
          example: ETH
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        max_fee:
          description: "The highest Gas price paid for the transfer, unit GWei."
          example: "1"
          type: string
        max_priority_fee:
          description: "The maximum Gas price paid to miners, the higher it is, the\
            \ faster it is likely to be packaged into the block, unit GWei."
          type: integer
        base_fee:
          description: The Base Fee of chain.
          type: integer
      required:
      - base_fee
      - max_fee
      - max_priority_fee
      type: object
    EvmLegacyFeeBasePrice:
      description: The legacy fee price for estimate fees or transfer.
      properties:
        fee_token_id:
          description: ID of the fee token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        gas_price:
          description: "The Price of Gas, unit GWei."
          example: "1"
          type: string
      required:
      - gas_price
      type: object
    UtxoFeeBasePrice:
      description: The legacy fee price for estimate fees or transfer.
      properties:
        fee_token_id:
          description: ID of the fee token. Unique in all chains scope.
          example: ETH
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        fee_rate:
          description: "The fee rate, unit sat/vB."
          example: "50"
          type: string
      required:
      - fee_rate
      type: object
    EvmEip1559FeePrice:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      description: The base eip1559 fee data for estimate fees or transfer.
      example:
        base_fee: 6
        max_priority_fee: 0
        fee_type: EVM_EIP_1559
        fee_token_id: ETH
        max_fee: "1"
      required:
      - fee_type
      type: object
    EvmLegacyFeePrice:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      description: The legacy fee data for estimate fees or transfer.
      required:
      - fee_type
      type: object
    UtxoFeePrice:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      description: The legacy fee data for estimate fees or transfer.
      required:
      - fee_type
      type: object
    FixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          fee_token_id:
            description: ID of the fee token. Unique in all chains scope.
            example: ETH_USDT
            pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
            type: string
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The estimated fee amount in fee_coin.
      required:
      - fee_type
      type: object
    EvmEip1559Fee:
      description: The eip1559 fee data for estimate fees or transfer.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
        standard:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
        fast:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
      required:
      - fee_type
      - standard
      type: object
    EvmLegacyFee:
      description: The legacy fee data for estimate fees or transfer.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
        standard:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
        fast:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
      required:
      - fee_type
      - standard
      type: object
    UtxoFee:
      description: The UTXO fee for transfer.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          $ref: '#/components/schemas/UtxoFee_slow'
        standard:
          $ref: '#/components/schemas/UtxoFee_slow'
        fast:
          $ref: '#/components/schemas/UtxoFee_slow'
      required:
      - fee_type
      - standard
      type: object
    ChainFeePrice:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeePrice'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeePrice'
          UTXO: '#/components/schemas/UtxoFeePrice'
          Fixed: '#/components/schemas/FixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559FeePrice'
      - $ref: '#/components/schemas/EvmLegacyFeePrice'
      - $ref: '#/components/schemas/UtxoFeePrice'
      - $ref: '#/components/schemas/FixedFee'
    EstimationFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/FixedFee'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EvmLegacyFee'
          UTXO: '#/components/schemas/UtxoFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559Fee'
      - $ref: '#/components/schemas/EvmLegacyFee'
      - $ref: '#/components/schemas/UtxoFee'
      - $ref: '#/components/schemas/FixedFee'
    EvmEip1559TransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: The fee data for transaction.
      example:
        base_fee: 6
        fee_amount: "0.1"
        gas_limit: 1
        max_priority_fee: 0
        fee_type: EVM_EIP_1559
        fee_token_id: ETH
        max_fee: "1"
      required:
      - fee_type
      type: object
    EvmLegacyTransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: The fee data for transaction.
      required:
      - fee_type
      type: object
    UtxoTransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
      description: The fee data for transaction.
      required:
      - fee_type
      type: object
    TransactionFee:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559TransactionFee'
          EVM_Legacy: '#/components/schemas/EvmLegacyTransactionFee'
          UTXO: '#/components/schemas/UtxoTransactionFee'
          Fixed: '#/components/schemas/FixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559TransactionFee'
      - $ref: '#/components/schemas/EvmLegacyTransactionFee'
      - $ref: '#/components/schemas/UtxoTransactionFee'
      - $ref: '#/components/schemas/FixedFee'
    Network:
      description: The data for network information.
      example:
        icon_url: https://static.waas.co/images/coins/ETH.png
        name: ETH
      properties:
        name:
          description: The network name.
          example: ETH
          type: string
        icon_url:
          description: URL of the icon image.
          example: https://static.waas.co/images/coins/ETH.png
          type: string
      required:
      - name
      type: object
    Transaction:
      description: The data for transaction information.
      example:
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        from_type: CustodialAssetWallet
        created_time: 1610445878970
        updated_time: 1610445878970
        sub_status: PendingDoubleCheck
        from_info: "MPC Wallet #1"
        txid: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        description: withdrawal to exchange trading account
        cobo_id: "20231213122855000000000000000000"
        to_address:
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        type: Deposit
        network:
          icon_url: https://static.waas.co/images/coins/ETH.png
          name: ETH
        to_type: CustodialAssetWallet
        delegate: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
        to_info: "DeFi Wallet #1"
        tokens:
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          amount: "1.5"
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          amount: "1.5"
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        from_address:
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        status: Submitted
      properties:
        transaction_id:
          description: Unique transaction ID
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        wallet_id:
          description: Wallet ID
          example: 624ce4e5-e985-4394-a196-fd7752aff96e
          type: string
        request_id:
          description: Request ID
          example: web_send_by_user_327_1610444045047
          type: string
        cobo_id:
          description: Cobo ID
          example: "20231213122855000000000000000000"
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        from_type:
          $ref: '#/components/schemas/TransactionAddressType'
        from_address:
          items:
            $ref: '#/components/schemas/TransactionAddress'
          type: array
        from_info:
          description: From wallet info
          example: "MPC Wallet #1"
          type: string
        to_type:
          $ref: '#/components/schemas/TransactionAddressType'
        to_address:
          items:
            $ref: '#/components/schemas/TransactionAddress'
          type: array
        to_info:
          description: To wallet info
          example: "DeFi Wallet #1"
          type: string
        network:
          $ref: '#/components/schemas/Network'
        txid:
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        tokens:
          items:
            $ref: '#/components/schemas/TransactionToken'
          type: array
        category:
          items:
            $ref: '#/components/schemas/TransactionCategory'
          type: array
        description:
          example: withdrawal to exchange trading account
          type: string
        created_time:
          description: Transaction creation time
          example: 1610445878970
          type: number
        updated_time:
          description: Transaction update time
          example: 1610445878970
          type: number
        delegate:
          description: Transaction delegate address
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
      type: object
    TransactionAddress:
      description: The data for transaction address information.
      example:
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
        label: "Address #1"
      properties:
        address:
          description: Address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: Address memo
          example: "82840924"
          type: string
        label:
          description: Address label
          example: "Address #1"
          type: string
      type: object
    TransactionAddressType:
      description: Enumeration representing the address type of a transaction.
      enum:
      - CustodialAssetWallet
      - CustodialWeb3Wallet
      - MPCClientControlledWallet
      - MPCUserControlledWallet
      - SmartContractWallet
      - ExchangeAccount
      - GasStation
      - CoboPortal
      - ExternalAddress
      example: CustodialAssetWallet
      type: string
    TransactionApprover:
      description: The approver data for transaction.
      example:
        name: "Approver #1"
        status: Pending
      properties:
        name:
          description: The approver name of the transaction.
          example: "Approver #1"
          type: string
        status:
          description: The approval status.
          enum:
          - Pending
          - Approved
          - Rejected
          example: Pending
          type: string
      type: object
    TransactionToken:
      allOf:
      - $ref: '#/components/schemas/TokenInfo'
      - description: The data for transaction asset information.
        properties:
          amount:
            description: |
              Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
            example: "1.5"
            format: float
            type: string
        type: object
      example:
        icon_url: https://static.waas.co/images/coins/ETH.png
        symbol: USDT
        amount: "1.5"
        token_id: ETH_USDT
        chain_id: ETH
        description: Tether USDT
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
    TransactionCategory:
      description: Transaction category
      example: Payment
      type: string
    TransactionDetails:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          initiator:
            description: Transaction initiator
            example: "API Prod Key #1"
            type: string
          approvers:
            items:
              $ref: '#/components/schemas/TransactionApprover'
            type: array
          signers:
            items:
              $ref: '#/components/schemas/TransactionSigner'
            type: array
          nonce:
            description: Transaction nonce
            example: 9
            type: integer
          replaced_by:
            description: Replace by transaction hash
            example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            type: string
          fee:
            $ref: '#/components/schemas/TransactionFee'
          fueled_by:
            description: Fueled by address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          confirmed_num:
            description: Transaction confirmed number
            example: 12
            type: number
          confirming_threshold:
            description: "Number of confirmations required for a transaction, such\
              \ as 15 for ETH chain."
            example: 15
            format: int32
            type: integer
          token_approval:
            $ref: '#/components/schemas/TransactionTokeApproval'
          message:
            description: Transaction raw message
            example: this to certify that am owner this wallet address
            type: string
          algorithm:
            description: Transaction message signing algorithm
            type: string
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
      example:
        updated_time: 1610445878970
        confirmed_num: 12
        initiator: "API Prod Key #1"
        fee:
          base_fee: 6
          fee_amount: "0.1"
          gas_limit: 1
          max_priority_fee: 0
          fee_type: EVM_EIP_1559
          fee_token_id: ETH
          max_fee: "1"
        description: withdrawal to exchange trading account
        approvers:
        - name: "Approver #1"
          status: Pending
        - name: "Approver #1"
          status: Pending
        confirming_threshold: 15
        type: Deposit
        fueled_by: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        network:
          icon_url: https://static.waas.co/images/coins/ETH.png
          name: ETH
        to_type: CustodialAssetWallet
        delegate: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        to_info: "DeFi Wallet #1"
        tokens:
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          amount: "1.5"
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          amount: "1.5"
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        from_address:
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        algorithm: algorithm
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        from_type: CustodialAssetWallet
        created_time: 1610445878970
        sub_status: PendingDoubleCheck
        from_info: "MPC Wallet #1"
        txid: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        cobo_id: "20231213122855000000000000000000"
        to_address:
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
          label: "Address #1"
        token_approval:
          icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          amount: 1.5
          token_id: ETH_USDT
          chain_id: ETH
          spender: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        message: this to certify that am owner this wallet address
        nonce: 9
        replaced_by: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        signers:
        - failed_reason: Rejected by signer Cobo TSS
          signer: Cobo TSS
          status: Signed
        - failed_reason: Rejected by signer Cobo TSS
          signer: Cobo TSS
          status: Signed
        wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
        timeline:
        - finished_time: 1610445878970
          finished: true
          status: Submitted
        - finished_time: 1610445878970
          finished: true
          status: Submitted
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        status: Submitted
    TransactionInitiatorType:
      description: Enumeration representing the initiator type of a transaction.
      enum:
      - API
      - Web
      - External
      example: API
      type: string
    TransactionSigner:
      description: The signer data for transaction.
      example:
        failed_reason: Rejected by signer Cobo TSS
        signer: Cobo TSS
        status: Signed
      properties:
        signer:
          description: The signer name of the transaction.
          example: Cobo TSS
          type: string
        status:
          description: The signing status.
          enum:
          - Pending
          - Signed
          - Timeout
          - Rejected
          example: Signed
          type: string
        failed_reason:
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
          type: string
      type: object
    TransactionStatus:
      description: Enumeration representing the status of a transaction.
      enum:
      - Submitted
      - PendingScreening
      - PendingAuthorization
      - Queued
      - PendingSignature
      - Broadcasting
      - Confirming
      - Completed
      - Failed
      - Rejected
      example: Submitted
      type: string
    TransactionSubStatus:
      description: Enumeration representing the sub-status of a transaction.
      enum:
      - RejectedKYT
      - RejectedTravelRule
      - PendingDoubleCheck
      - PendingSpenderCheck
      - PendingRiskControlCheck
      - PendingApproverCheck
      - RejectedCoboCheck
      - RejectedWhiteList
      - RejectedDoubleCheck
      - RejectedSpenderAuth
      - RejectedRiskControlCheck
      - RejectedApproverAuth
      - PendingWaitSigner
      - FailedBySigner
      - FailedBroadcasting
      example: PendingDoubleCheck
      type: string
    TransactionTimeline:
      description: The data for transaction timeline information.
      example:
        finished_time: 1610445878970
        finished: true
        status: Submitted
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          description: Whether the timeline status finished
          example: true
          type: boolean
        finished_time:
          description: Timeline status finished time
          example: 1610445878970
          type: number
      type: object
    TransactionTokeApproval:
      allOf:
      - $ref: '#/components/schemas/TokenInfo'
      - description: The data for transaction token approval information.
        properties:
          amount:
            description: |
              Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
            example: 1.5
            format: float
            type: number
          spender:
            description: Spender address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        type: object
      example:
        icon_url: https://static.waas.co/images/coins/ETH.png
        symbol: USDT
        amount: 1.5
        token_id: ETH_USDT
        chain_id: ETH
        spender: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        description: Tether USDT
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
    TransactionType:
      description: Enumeration representing the type of a transaction.
      enum:
      - Deposit
      - Withdrawal
      - TokenApproval
      - ContractCall
      - ExchangeTransfer
      - AutoFueling
      - RawMessage
      example: Deposit
      type: string
    MpcSigningGroup:
      description: The data for mpc signing key group.
      example:
        used_node_ids:
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        used_key_group_id:
          description: Unique id of the using key group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        used_node_ids:
          items:
            description: "The IDs of the tss node participating in the signing. If\
              \ it is empty, all nodes in the signing key group will participate in\
              \ the signature."
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      type: object
    BaseTransferSource:
      description: The base data for transfer source.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: Asset
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: Unique id of the wallet to transfer from.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      type: object
    AddressTransferSource:
      allOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - properties:
          address_str:
            description: From address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        required:
        - address_str
        type: object
    MpcTransferSource:
      allOf:
      - properties:
          mpc_used_key_group:
            $ref: '#/components/schemas/MpcSigningGroup'
        type: object
      - $ref: '#/components/schemas/AddressTransferSource'
    SafeTransferSource:
      allOf:
      - $ref: '#/components/schemas/AddressTransferSource'
      - properties:
          delegate:
            $ref: '#/components/schemas/SafeTransferSource_allOf_delegate'
        required:
        - delegate
        type: object
    ExchangeTransferSource:
      allOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - properties:
          sub_wallet_id:
            description: Exchange trading account or any sub wallet info for transfer.
            example: Asset
            type: string
        required:
        - sub_wallet_id
        type: object
    TransferSource:
      discriminator:
        mapping:
          Asset: '#/components/schemas/BaseTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          Safe{Wallet}: '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - $ref: '#/components/schemas/MpcTransferSource'
      - $ref: '#/components/schemas/SafeTransferSource'
      - $ref: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      description: The data for address destination.
      example:
        destination_type: Address
        memo: "82840924"
        address_str: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        address_str:
          description: Destination address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: Destination address memo
          example: "82840924"
          type: string
      required:
      - address_str
      - destination_type
      type: object
    ExchangeTransferDestination:
      description: The data for exchange destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          description: Unique id of the wallet to transfer to.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        sub_wallet_id:
          description: Exchange trading account or any sub wallet info for transfer.
          example: Asset
          type: string
      required:
      - destination_type
      - sub_wallet_id
      - wallet_id
      type: object
    TransferDestinationType:
      enum:
      - Address
      - Exchange
      example: Address
      type: string
    TransferDestination:
      discriminator:
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          Exchange: '#/components/schemas/ExchangeTransferDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/AddressTransferDestination'
      - $ref: '#/components/schemas/ExchangeTransferDestination'
    Transfer:
      description: The base data for transfer transaction.
      example:
        amount: "1.5"
        request_type: Transfer
        token_id: ETH_USDT
        fee:
          base_fee: 6
          fee_amount: "0.1"
          gas_limit: 1
          max_priority_fee: 0
          fee_type: EVM_EIP_1559
          fee_token_id: ETH
          max_fee: "1"
        destination:
          destination_type: Address
          memo: "82840924"
          address_str: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        description: Transfer from wallet
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          enum:
          - Transfer
          - Call
          - Sign
          example: Transfer
          type: string
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: ID of the token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        amount:
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: "1.5"
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          description: The category names for transfer.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description for transfer.
          example: Transfer from wallet
          type: string
        fee:
          $ref: '#/components/schemas/TransactionFee'
      required:
      - amount
      - destination
      - request_id
      - request_type
      - source
      - token_id
      type: object
    SmartContractCall:
      description: The data for create smart contract call transaction.
      example:
        from_address_str: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        request_type: "{}"
        chain_id: ETH
        calldata: !!binary |-
          VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
        mpc_used_key_group:
          used_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fee:
          base_fee: 6
          fee_amount: "0.1"
          gas_limit: 1
          max_priority_fee: 0
          fee_type: EVM_EIP_1559
          fee_token_id: ETH
          max_fee: "1"
        to_address_str: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        value: "1.5"
        from_wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        from_wallet_id:
          description: Unique id of the wallet to transfer from.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        from_address_str:
          description: From address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        chain_id:
          description: The blockchain on which the token operates.
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        to_address_str:
          description: To address
          example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
          type: string
        value:
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: "1.5"
          type: string
        calldata:
          description: |
            calldata for this transaction. Commonly used as part of contract interaction.
          example: !!binary |-
            VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
          format: byte
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
        fee:
          $ref: '#/components/schemas/TransactionFee'
      required:
      - calldata
      - chain_id
      - from_address_str
      - from_wallet_id
      - request_id
      - request_type
      - to_address_str
      type: object
    SignMessage:
      description: The data for create a message-signing transaction.
      example:
        from_address_str: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        request_type: "{}"
        chain_id: ETH
        mpc_used_key_group:
          used_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        structured_data: |
          {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
        message: YWFhYQ==
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        from_wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        from_wallet_id:
          description: Unique id of the wallet to sign message.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        from_address_str:
          description: signing address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        chain_id:
          description: The blockchain on which the token operates.
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        message:
          description: "Raw data to be signed, Base 64 encoded"
          example: YWFhYQ==
          type: string
        structured_data:
          description: "Structured data to be signed, JSON encoded"
          example: |
            {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      required:
      - chain_id
      - request_id
      - request_type
      - signing_address
      - signing_wallet_id
      type: object
    EstimateFee:
      discriminator:
        mapping:
          Transfer: '#/components/schemas/Transfer'
          Call: '#/components/schemas/SmartContractCall'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/Transfer'
      - $ref: '#/components/schemas/SmartContractCall'
    WebhookEvent:
      description: The data for webhook event.
      example:
        next_retry_timestamp: 1701396866000
        retries_left: 3
        data:
          wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
          address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          amount: "1000000000000000000"
        created_timestamp: 1701396866000
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        type: asset_wallet.outbound.created
        url: https://example.com/webhook
        status: Success
      properties:
        id:
          description: The unique identifier of the event.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        url:
          description: The URL of the webhook endpoint.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        created_timestamp:
          description: "The timestamp at which the object was created, represented\
            \ as an integer value, typically in milliseconds since the epoch."
          example: 1701396866000
          type: integer
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          description: The data of the webhook event in json format.
          example:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            amount: "1000000000000000000"
          type: object
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry for this event. This field
            is only present when the event status is set to `Retrying`. The timestamp is
            represented as an integer value, typically in milliseconds since the epoch.
          example: 1701396866000
          type: integer
        retries_left:
          description: The number of retries left. This field is only present when
            the event status is `Retrying`.
          example: 3
          type: integer
      required:
      - created_timestamp
      - data
      - id
      - status
      - type
      - url
      type: object
    WebhookEventType:
      description: The list of supported events.
      enum:
      - asset_wallet.outbound.created
      - asset_wallet.outbound.pending_authorization
      - asset_wallet.outbound.rejected
      - asset_wallet.outbound.queued
      - asset_wallet.outbound.pending_confirm
      - asset_wallet.outbound.confirmations.updated
      - asset_wallet.outbound.confirmed
      - asset_wallet.outbound.failed
      - asset_wallet.inbound.pending_confirm
      - asset_wallet.inbound.confirmed
      - asset_wallet.inbound.confirmations.updated
      - web3_wallet.outbound.created
      - web3_wallet.outbound.pending_authorization
      - web3_wallet.outbound.rejected
      - web3_wallet.outbound.queued
      - web3_wallet.outbound.pending_confirm
      - web3_wallet.outbound.confirmations.updated
      - web3_wallet.outbound.confirmed
      - web3_wallet.outbound.failed
      - web3_wallet.inbound.pending_confirm
      - web3_wallet.inbound.confirmed
      - web3_wallet.inbound.confirmations.updated
      - safe_wallet.outbound.created
      - safe_wallet.outbound.pending_authorization
      - safe_wallet.outbound.rejected
      - safe_wallet.outbound.queued
      - safe_wallet.outbound.pending_signature
      - safe_wallet.outbound.pending_confirm
      - safe_wallet.outbound.confirmations.updated
      - safe_wallet.outbound.confirmed
      - safe_wallet.outbound.failed
      - safe_wallet.inbound.pending_confirm
      - safe_wallet.inbound.confirmed
      - safe_wallet.inbound.confirmations.updated
      - exchange_wallet.inbound.pending_confirm
      - exchange_wallet.inbound.confirmed
      - exchange_wallet.outbound.created
      - exchange_wallet.outbound.pending_authorization
      - exchange_wallet.outbound.rejected
      - exchange_wallet.outbound.pending_confirm
      - exchange_wallet.outbound.confirmed
      - exchange_wallet.outbound.failed
      - exchange_wallet.sub_transfer.created
      - exchange_wallet.sub_transfer.pending_authorization
      - exchange_wallet.sub_transfer.rejected
      - exchange_wallet.sub_transfer.pending_confirm
      - exchange_wallet.sub_transfer.confirmed
      - exchange_wallet.sub_transfer.failed
      - organization_controlled_wallet.outbound.created
      - organization_controlled_wallet.outbound.pending_authorization
      - organization_controlled_wallet.outbound.rejected
      - organization_controlled_wallet.outbound.queued
      - organization_controlled_wallet.outbound.pending_signature
      - organization_controlled_wallet.outbound.pending_confirm
      - organization_controlled_wallet.outbound.confirmations.updated
      - organization_controlled_wallet.outbound.confirmed
      - organization_controlled_wallet.outbound.failed
      - organization_controlled_wallet.inbound.pending_confirm
      - organization_controlled_wallet.inbound.confirmed
      - organization_controlled_wallet.inbound.confirmations.updated
      - user_controlled_wallet.outbound.created
      - user_controlled_wallet.outbound.pending_authorization
      - user_controlled_wallet.outbound.rejected
      - user_controlled_wallet.outbound.queued
      - user_controlled_wallet.outbound.pending_signature
      - user_controlled_wallet.outbound.pending_confirm
      - user_controlled_wallet.outbound.confirmations.updated
      - user_controlled_wallet.outbound.confirmed
      - user_controlled_wallet.outbound.failed
      - user_controlled_wallet.inbound.pending_confirm
      - user_controlled_wallet.inbound.confirmed
      - user_controlled_wallet.inbound.confirmations.updated
      example: asset_wallet.outbound.created
      type: string
    WebhookEventStatus:
      description: |-
        Possible values for the webhook event status:
        - `Success`: The event has been delivered, meaning that the webhook endpoint has received the event and responded successfully. - `Retrying`: The event has been delivered, but the webhook endpoint has not responded successfully. The event will be retried. - `Failed`: The event has been delivered, but the webhook endpoint has responded with an error. The event will not be retried.
      enum:
      - Success
      - Retrying
      - Failed
      example: Success
      type: string
    WebhookEventLog:
      description: The data for webhook event log.
      example:
        request_body:
          next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            amount: "1000000000000000000"
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: asset_wallet.outbound.created
          url: https://example.com/webhook
          status: Success
        success: true
        request_headers: "{\"Content-Type\": \"application/json\"}"
        response_body: "{}"
        created_timestamp: 1701396866000
        response_time: 100
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        failure_reason: The webhook endpoint is not reachable.
        response_status_code: 200
      properties:
        id:
          description: The unique identifier of the log.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        created_timestamp:
          description: "The timestamp at which the object was created, represented\
            \ as an integer value, typically in milliseconds since the epoch."
          example: 1701396866000
          type: integer
        request_headers:
          description: The request headers of the webhook event.
          example: "{\"Content-Type\": \"application/json\"}"
          type: object
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          description: The response body of the webhook event.
          type: object
        response_status_code:
          description: The response status code of the webhook event.
          example: 200
          type: integer
        response_time:
          description: The response time of the webhook event in milliseconds.
          example: 100
          type: integer
        success:
          description: The success status of the webhook event.
          example: true
          type: boolean
        failure_reason:
          description: The reason of the webhook event failure.
          example: The webhook endpoint is not reachable.
          type: string
      required:
      - created_timestamp
      - id
      - request_body
      - request_headers
      - status
      - success
      type: object
    get_chains_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          chain_id: ETH
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          chain_id: ETH
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        data:
          items:
            $ref: '#/components/schemas/ChainInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_assets_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_tokens_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
        - icon_url: https://static.waas.co/images/coins/ETH.png
          symbol: USDT
          token_id: ETH_USDT
          chain_id: ETH
          description: Tether USDT
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_wallet_token_balances_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - token_id: ETH_USDT
          balance:
            total: "100.0"
            pending: "10.5"
            staked: "3.5"
            available: "80.5"
            frozen: "2.5"
            locked: "3.0"
        - token_id: ETH_USDT
          balance:
            total: "100.0"
            pending: "10.5"
            staked: "3.5"
            available: "80.5"
            frozen: "2.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_wallets_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
      properties:
        data:
          items:
            $ref: '#/components/schemas/WalletInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    update_wallet_by_id_request:
      properties:
        name:
          example: Example Wallet
          type: string
        apikey:
          description: The API Key for the exchange.
          example: d8f062da-39f4-4a11-8b9d-12595854237f
          type: string
        secret:
          description: The API Secret for the exchange.
          example: 75B4F636193162488A3728B4A5797708
          type: string
        passphrase:
          description: The passphrase for the exchange.
          example: sXASDKWKLLsWWEE
          type: string
        ga_code:
          description: The ga_code for the exchange.
          example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
          type: string
        sub_account_ids:
          description: "The unique identifier associated with the exchange sub-account.\
            \ It can be an email address, username, or a custom account ID."
          example:
          - sub01@xx.com
          - sub02@xx.com
          items:
            type: string
          type: array
      type: object
    list_addresses_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - is_internal: false
          token_id: ETH_USDT
          address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          memo: "82840924"
          address_str: 0x0000000000000000000000000000000000000000
        - is_internal: false
          token_id: ETH_USDT
          address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          memo: "82840924"
          address_str: 0x0000000000000000000000000000000000000000
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    add_wallet_address_request:
      properties:
        token_id:
          description: ID of the token. Unique in all chains scope.
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        count:
          default: 1
          description: The number of addresses that need to be created
          example: 1
          maximum: 50
          minimum: 1
          type: integer
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
      required:
      - count
      - token_id
      type: object
    get_address_validity_200_response:
      example:
        validity: true
      properties:
        validity:
          description: The validity of the address.
          example: true
          type: boolean
      type: object
    create_mpc_project_request:
      properties:
        name:
          description: The name of the mpc project.
          example: My mpc project name
          type: string
        node_count:
          description: Number of tss nodes in the key group
          type: integer
        threshold:
          description: The threshold number of tss node required for signature
          type: integer
      required:
      - node_count
      - threshold
      - type
      type: object
    update_mpc_project_request:
      properties:
        name:
          description: The name of the mpc project.
          example: My mpc new project name
          type: string
      required:
      - name
      type: object
    create_mpc_vault_request:
      properties:
        project_id:
          description: The id of the mpc project.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The name of the mpc vault.
          example: My mpc vault
          type: string
        vault_type:
          $ref: '#/components/schemas/MPCVaultType'
      required:
      - name
      - vault_type
      type: object
    modify_mpc_vault_request:
      properties:
        name:
          description: The new name of vault
          example: my mpc vault name
          type: string
      required:
      - name
      type: object
    create_key_group_request_key_holders_inner:
      description: "When creating MainKeyGroup and SigningKeyGroup, the cobo key holder\
        \ will be added automatically"
      properties:
        name:
          example: key holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          description: The ID of the tss node.
          example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          type: string
      type: object
    create_key_group_request:
      properties:
        group_type:
          $ref: '#/components/schemas/KeyGroupType'
        node_count:
          description: The count of tss node of the key group
          type: integer
        threshold:
          description: The threshold number of tss node required for signature
          type: integer
        key_holders:
          items:
            $ref: '#/components/schemas/create_key_group_request_key_holders_inner'
          type: array
      required:
      - group_type
      - key_holders
      - node_count
      - threshold
      type: object
    create_tss_request_request_detail_params:
      description: "for KeyGen request, this parameters can be null"
      properties:
        used_node_ids:
          items:
            description: The IDs of the tss node participating in the reshare tss
              request
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      type: object
    create_tss_request_request:
      properties:
        type:
          $ref: '#/components/schemas/TSSRequestType'
        target_key_group_id:
          type: string
        used_key_group_id:
          type: string
        detail_params:
          $ref: '#/components/schemas/create_tss_request_request_detail_params'
      required:
      - target_key_group_id
      - type
      type: object
    get_exchange_wallet_asset_balances_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - balance: "{}"
          asset_id: USDT
        - balance: "{}"
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_exchanges_200_response_inner:
      description: Settings details for the exchange
      example:
        exchange_id: binance
        subtitle: Sub Account & Trading Account
        supported_sub_wallet_ids:
        - SPOT
        - FUTURE
      properties:
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        subtitle:
          description: Introduction of the supported features of this exchange.
          example: Sub Account & Trading Account
          type: string
        supported_sub_wallet_ids:
          description: The trading accounts(sub_wallet_ids) supported for this exchange.
          example:
          - SPOT
          - FUTURE
          items:
            type: string
          type: array
      required:
      - exchange_id
      - supported_sub_wallet_ids
      type: object
    link_sub_accounts_by_wallet_id_request:
      properties:
        wallet_id:
          description: The ID of main account wallet.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        sub_account_ids:
          description: The ID list of sub accounts.
          example:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          items:
            type: string
          type: array
      type: object
    create_transfer_transaction_201_response:
      example:
        transaction_id: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Submitted
      properties:
        request_id:
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction id of of the request.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
      type: object
    list_transactions_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          from_type: CustodialAssetWallet
          created_time: 1610445878970
          updated_time: 1610445878970
          sub_status: PendingDoubleCheck
          from_info: "MPC Wallet #1"
          txid: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          description: withdrawal to exchange trading account
          cobo_id: "20231213122855000000000000000000"
          to_address:
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          type: Deposit
          network:
            icon_url: https://static.waas.co/images/coins/ETH.png
            name: ETH
          to_type: CustodialAssetWallet
          delegate: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
          to_info: "DeFi Wallet #1"
          tokens:
          - icon_url: https://static.waas.co/images/coins/ETH.png
            symbol: USDT
            amount: "1.5"
            token_id: ETH_USDT
            chain_id: ETH
            description: Tether USDT
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
          - icon_url: https://static.waas.co/images/coins/ETH.png
            symbol: USDT
            amount: "1.5"
            token_id: ETH_USDT
            chain_id: ETH
            description: Tether USDT
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          from_address:
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          status: Submitted
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          from_type: CustodialAssetWallet
          created_time: 1610445878970
          updated_time: 1610445878970
          sub_status: PendingDoubleCheck
          from_info: "MPC Wallet #1"
          txid: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          description: withdrawal to exchange trading account
          cobo_id: "20231213122855000000000000000000"
          to_address:
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          type: Deposit
          network:
            icon_url: https://static.waas.co/images/coins/ETH.png
            name: ETH
          to_type: CustodialAssetWallet
          delegate: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
          to_info: "DeFi Wallet #1"
          tokens:
          - icon_url: https://static.waas.co/images/coins/ETH.png
            symbol: USDT
            amount: "1.5"
            token_id: ETH_USDT
            chain_id: ETH
            description: Tether USDT
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
          - icon_url: https://static.waas.co/images/coins/ETH.png
            symbol: USDT
            amount: "1.5"
            token_id: ETH_USDT
            chain_id: ETH
            description: Tether USDT
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          from_address:
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          - address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
            label: "Address #1"
          status: Submitted
      properties:
        data:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_webhook_event_definitions_200_response_inner:
      example:
        event_type: wallet.created
        description: Occurred when a wallet is created
      properties:
        event_type:
          example: wallet.created
          type: string
        description:
          example: Occurred when a wallet is created
          type: string
      type: object
    list_events_200_response:
      example:
        pagination:
          before: as19
          after: 20sa
        data:
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            amount: "1000000000000000000"
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: asset_wallet.outbound.created
          url: https://example.com/webhook
          status: Success
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            amount: "1000000000000000000"
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: asset_wallet.outbound.created
          url: https://example.com/webhook
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    retry_webhook_event_201_response:
      example:
        retried: true
      properties:
        retried:
          example: true
          type: boolean
      type: object
    TokenBalance_balance:
      description: The data for balance information.
      example:
        total: "100.0"
        pending: "10.5"
        staked: "3.5"
        available: "80.5"
        frozen: "2.5"
        locked: "3.0"
      properties:
        total:
          description: "The total balance, sum of the following fields."
          example: "100.0"
          type: string
        available:
          description: The balance free to use.
          example: "80.5"
          type: string
        pending:
          default: "0"
          description: The pending balance not confirmed.
          example: "10.5"
          type: string
        staked:
          default: "0"
          description: The staked balance.
          example: "3.5"
          type: string
        frozen:
          default: "0"
          description: The frozen balance.
          example: "2.5"
          type: string
        locked:
          default: "0"
          description: The locked balance.
          example: "3.0"
          type: string
      required:
      - available
      - total
      type: object
    SafeWallet_allOf_initiator:
      properties:
        wallet_id:
          description: The wallet id of the initiator. This is required when user
            want to create a new safe wallet.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: The wallet type of the initiator. This is required when user
            want to create a new safe wallet.
          example: MPC
          type: string
        wallet_address:
          description: The wallet address of the initiator. This is required when
            user want to create a new safe wallet.
          example: 0x1234567890123456789012345678901234567890
          type: string
      type: object
    ExchangeWalletInfo_allOf_sub_accounts:
      properties:
        wallet_id:
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        account_id:
          description: "The unique identifier associated with the exchange sub-account.\
            \ It can be an email address, username, or a custom account ID."
          example: sub01@xx.com
          type: string
      required:
      - account_id
      - wallet_id
      type: object
    EvmEip1559Fee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
    EvmLegacyFee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
    UtxoFee_slow:
      allOf:
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
    SafeTransferSource_allOf_delegate:
      properties:
        wallet_id:
          description: The wallet id of the delegate. This is required when user initiate
            a transfer.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: The wallet type of the delegate. This is required when user
            initiate a transfer.
          example: MPC
          type: string
        wallet_address:
          description: The wallet address of the delegate. This is required when user
            initiate a transfer.
          example: 0x1234567890123456789012345678901234567890
          type: string
      type: object
  securitySchemes:
    CoboAuth:
      description: This field contains the API key.
      in: header
      name: BIZ-API-KEY
      type: apiKey
