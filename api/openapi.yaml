openapi: 3.0.3
info:
  contact:
    email: help@cobo.com
    name: Cobo WaaS
    url: https://www.cobo.com/waas
  description: |
    The Cobo Wallet-as-a-Service (WaaS) 2.0 API is the latest version of Cobo’s WaaS API offering. It enables you to access Cobo’s full suite of crypto wallet technologies with powerful and flexible access controls. By encapsulating complex security protocols and streamlining blockchain interactions, this API allows you to concentrate on your core business activities without worrying about the safety of your assets. The WaaS 2.0 API presents the following key features:

    - A unified API for Cobo’s [all four wallet types](https://manuals.cobo.com/en/portal/introduction#an-all-in-one-wallet-platform)
    - Support for 80+ chains and 3000+ tokens
    - A comprehensive selection of webhook events
    - Flexible usage models for MPC Wallets, including [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction) and [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction)
    - Programmatic control of smart contract wallets such as Safe{Wallet} with fine-grained access controls
    - Seamlessly transfer funds across multiple exchanges, including Binance, OKX, Bybit, Deribit, and more

    For more information about the WaaS 2.0 API, see [Introduction to WaaS 2.0](/v2/guides/overview/introduction).
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://cobo.com/waas/tos/
  title: Cobo Wallet as a Service 2.0
  version: 1.0.0
servers:
- description: Development environment
  url: https://api.dev.cobo.com/v2
- description: Production environment
  url: https://api.cobo.com/v2
security:
- CoboAuth: []
tags:
- description: Operations related to all wallets.
  name: Wallets
- description: Operations related to mpc wallet.
  name: Wallets - MPC Wallets
- description: Operations related to exchange wallet.
  name: Wallets - Exchange Wallet
- description: Operations related to smart contract wallet.
  name: Wallets - Smart Contract Wallets
- description: Operations related to all transactions.
  name: Transactions
- description: Operations related to webhooks.
  name: Developers - Webhooks
- description: Operations related to staking.
  name: Stakings
- description: Operations related to OAuth.
  name: OAuth
- description: Operations related to developers.
  name: Developers
- description: Operations related to address books.
  name: AddressBooks
- description: Operations related to swap.
  name: Swaps
paths:
  /wallets/chains:
    get:
      description: "This operation retrieves all chains supported by a specific wallet\
        \ type or subtype. \n\nIt provides details such as the chain ID, chain symbol,\
        \ and other relevant information. If you do not specify a wallet type, this\
        \ operation returns a combination of chains supported by each wallet type.\
        \ You can filter the result by chain IDs. The chain metadata is publicly available\
        \ without any permission restrictions.\n\nCobo Portal currently supports over\
        \ 80 blockchains and more than 3,000 tokens. In addition to this operation,\
        \ you can also view the full list of supported chains [here](https://www.cobo.com/chains).\
        \ We regularly update the list with new additions. If you want to request\
        \ support for a specific chain or token, please [contact us](https://www.cobo.com/contact).\n"
      operationId: list_supported_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_chains_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List supported chains
      tags:
      - Wallets
  /wallets/chains/{chain_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified chain.
      operationId: get_chain_by_id
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: false
        in: path
        name: chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get chain information
      tags:
      - Wallets
  /wallets/tokens:
    get:
      description: "This operation retrieves all tokens supported by a specific wallet\
        \ type or subtype. \n\nIt provides details such as token ID, token symbol,\
        \ and other relevant information. If you do not specify a wallet type, this\
        \ operation returns a combination of tokens supported by each wallet type.\
        \ You can filter the result by token IDs or chain IDs. The token metadata\
        \ is publicly available without any permission restrictions.\n\nCobo Portal\
        \ currently supports over 80 blockchains and more than 3,000 tokens. In addition\
        \ to this operation, you can also view the full list of supported tokens [here](https://www.cobo.com/tokens).\
        \ We regularly update the list with new additions. If you want to request\
        \ support for a specific chain or token, please [contact us](https://www.cobo.com/contact).\n"
      operationId: list_supported_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_tokens_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List supported tokens
      tags:
      - Wallets
  /wallets/tokens/{token_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified token.
      operationId: get_token_by_id
      parameters:
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedTokenInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get token information
      tags:
      - Wallets
  /wallets/enabled_chains:
    get:
      description: "This operation retrieves all the chains that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type or subtype. If\
        \ you do not specify a wallet type, this operation returns a combination of\
        \ chains that can be used by your organization for each wallet type.\n"
      operationId: list_enabled_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_chains_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List enabled chains
      tags:
      - Wallets
  /wallets/enabled_tokens:
    get:
      description: "This operation retrieves all the tokens that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type, subtype, and\
        \ chain IDs. If you do not specify a wallet type, this operation returns a\
        \ combination of tokens that can be used by your organization for each wallet\
        \ type.\n"
      operationId: list_enabled_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_tokens_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List enabled tokens
      tags:
      - Wallets
  /wallets:
    get:
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type and subtype. For MPC Wallets, you can also filter by project ID and vault ID.
      operationId: list_wallets
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_wallets_200_response'
          description: Successfully listed wallets
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all wallets
      tags:
      - Wallets
    post:
      description: |
        This operation creates a wallet with the provided information.

        <Note>This operation is not applicable to Smart Contract Wallets.</Note>
      operationId: create_wallet
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedWalletInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:create
        - mpc_organization_controlled_wallet:create
        - mpc_user_controlled_wallet:create
      summary: Create wallet
      tags:
      - Wallets
  /wallets/{wallet_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified wallet.
      operationId: get_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successful get a wallet info
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get wallet information
      tags:
      - Wallets
    put:
      description: |
        This operation updates the information of a specified wallet.

        For Exchange Wallets, you can update the API key, API secret, and other information about your exchange accounts with this operation. For other wallet types, you can only update the wallet name.
      operationId: update_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successfully updated address
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:edit
        - mpc_organization_controlled_wallet:edit
        - mpc_user_controlled_wallet:edit
      summary: Update wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/delete:
    post:
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      operationId: delete_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_wallet_by_id_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Delete wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos:
    get:
      description: |
        The operation retrieves a list of unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: list_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: false
        schema:
          description: The wallet address.
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_utxos_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos/lock:
    post:
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: lock_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_utxos_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:withdraw
        - mpc_user_controlled_wallet:withdraw
      summary: Lock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos/unlock:
    post:
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: unlock_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_utxos_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:withdraw
        - mpc_user_controlled_wallet:withdraw
      summary: Unlock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/max_transferable_value:
    get:
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: get_max_transferable_value
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The fee rate in sats/vByte or gas price in wei.
        example: "10"
        explode: true
        in: query
        name: fee_rate
        required: true
        schema:
          type: string
        style: form
      - description: The recipient's address.
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: to_address
        required: true
        schema:
          type: string
        style: form
      - description: "The sender's address. For EVM addresses in MPC Wallets, this\
          \ parameter is required."
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: from_address
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxTransferableValue'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get maximum transferable value
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses:
    get:
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      operationId: list_addresses
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma. For addresses\
          \ requiring a memo, append the memo after the address using the '|' separator\
          \ (e.g., \"address|memo\")."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List wallet addresses
      tags:
      - Wallets
    post:
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: create_address
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AddressInfo'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:add
        - mpc_organization_controlled_wallet:add
        - mpc_user_controlled_wallet:add
      summary: Create addresses in wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address}/tokens:
    get:
      description: "The operation retrieves a list of token balances for a specified\
        \ address within a wallet. \n\n<Note>This operation is applicable to MPC Wallets\
        \ and Smart Contract Wallets only.</Note>\n"
      operationId: list_token_balances_for_address
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: simple
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_balances_for_address_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List token balances by address
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens:
    get:
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is not applicable to Exchange Wallets.</Note>
      operationId: list_token_balances_for_wallet
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_balances_for_address_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List token balances by wallet
      tags:
      - Wallets
  /wallets/check_address_validity:
    get:
      description: |
        This operation verifies if a given address is valid for a specific chain.
      operationId: check_address_validity
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check_address_validity_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Check address validity
      tags:
      - Wallets
  /wallets/check_addresses_validity:
    get:
      description: |
        This operation verifies if given addresses are valid for a specific chain.
      operationId: check_addresses_validity
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma. You can specify\
          \ a maximum of 100 addresses."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_addresses_validity_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Check addresses validity
      tags:
      - Wallets
  /wallets/check_address_chains_validity:
    get:
      description: |
        This operation verifies if a given address is valid for a list of chains.
      operationId: check_address_chains_validity
      parameters:
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: true
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_address_chains_validity_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Check address validity across chains
      tags:
      - Wallets
  /wallets/mpc/cobo_key_share_holders:
    get:
      description: "This operation retrieves a list of all Cobo key share holders\
        \ and their information. \n\n<Info>When using this operation, `type` will\
        \ only return `Cobo` and will never return `Mobile` or `API`.</Info>\n"
      operationId: list_cobo_key_holders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyShareHolder'
                type: array
          description: Successfully listed MPC Wallets' key share holder information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all Cobo key share holders
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects:
    get:
      description: |
        This operation retrieves a list of all projects.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: list_mpc_projects
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_mpc_projects_200_response'
          description: Successfully listed all projects.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all projects
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a project.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: create_mpc_project
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully created project.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_user_controlled_project:manage
      summary: Create project
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects/{project_id}:
    get:
      description: |
        This operation retrieves detailed information about a project.
        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: get_mpc_project_by_id
      parameters:
      - description: "The project ID, which you can retrieve by calling [List all\
          \ projects](/v2/api-references/wallets--mpc-wallets/list-all-projects)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get project information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a project's name.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: update_mpc_project_by_id
      parameters:
      - description: "The project ID, which you can retrieve by calling [List all\
          \ projects](/v2/api-references/wallets--mpc-wallets/list-all-projects)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_user_controlled_project:manage
      summary: Update project name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults:
    get:
      description: |
        This operation retrieves a list of all vaults. You can filter the result by project ID.

        **Notes for query parameters**:
        1. `project_id` is required when `vault_type` is set to `User-Controlled`.
        2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: list_mpc_vaults
      parameters:
      - description: |
          The vault type. Possible values include:
          - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

          - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
        explode: true
        in: query
        name: vault_type
        required: true
        schema:
          $ref: '#/components/schemas/MPCVaultType'
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_mpc_vaults_200_response'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all vaults
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: create_mpc_vault
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully created the vault.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_vault:manage
        - mpc_user_controlled_vault:manage
      summary: Create vault
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}:
    get:
      description: |
        This operation retrieves detailed information about a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: get_mpc_vault_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully retrieved vault information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get vault information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a vault's name.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: update_mpc_vault_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully modify mpc vault
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_vault:manage
        - mpc_user_controlled_vault:manage
      summary: Update vault name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups:
    get:
      description: |
        This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type.
      operationId: list_key_share_holder_groups
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          The key share holder group type. Possible values include:
          - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

          - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

          - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

          **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
        explode: true
        in: query
        name: key_share_holder_group_type
        required: false
        schema:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_key_share_holder_groups_200_response'
          description: Successfully listed key share holder groups.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all key share holder groups
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note>
      operationId: create_key_share_holder_group
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createKeyShareHolderGroupBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: mpc vault successfully created
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Create key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified key share holder group.
      operationId: get_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: Successfully get mpc tss group
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get key share holder group information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      operationId: update_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateGroupBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: Successfully modify mpc tss group
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Update key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete:
    post:
      description: This operation deletes a specified key share holder group.
      operationId: delete_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_key_share_holder_group_by_id_201_response'
          description: Successfully deleted the specified key share holder group.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Delete key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests:
    get:
      description: |
        This operation retrieves a list of TSS requests and their details.
      operationId: list_tss_requests
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The key share holder group ID of the TSS request, which you\
          \ can retrieve by calling [List all key share holder groups](/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
        example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
        explode: true
        in: query
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_tss_requests_200_response'
          description: Successfully retrieved TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List TSS requests
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery.
      operationId: create_tss_request
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: mpc vault successfully created
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Create TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}:
    get:
      description: |
        This operation retrieves detailed information about a TSS request.
      operationId: get_tss_request_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The TSS request ID, which you can retrieve by calling [List\
          \ TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
        example: "20240711114129000132315000003970"
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully retrieved TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Get TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel:
    post:
      description: |
        This operation cancels a TSS request.
      operationId: cancel_tss_request_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The TSS request ID, which you can retrieve by calling [List\
          \ TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
        example: "20240711114129000132315000003970"
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully modified the TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Cancel TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/exchanges:
    get:
      description: "This operation retrieves the information about the exchanges supported\
        \ by Cobo's Exchange Wallets, including exchange IDs and trading account types."
      operationId: list_exchanges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_exchanges_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List supported exchanges
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets:
    get:
      description: This operation retrieves all the assets supported by a specified
        exchange.
      operationId: list_supported_assets_for_exchange
      parameters:
      - description: |
          The ID of the exchange. Possible values include:
            - `binance`: Binance.
            - `okx`: OKX.
            - `deribit`: Deribit.
            - `bybit`: Bybit.
            - `gate`: Gate.io
            - `bitget`: Bitget
            - `bitmart`: BitMart
            - `bitfinex`: Bitfinex
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_assets_for_exchange_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List supported assets
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets/{asset_id}/chains:
    get:
      description: "This operation retrieves all the chains supported by a specified\
        \ exchange for a given asset. \n\nYou can use this operation to confirm whether\
        \ you can transfer an asset from or to your Exchange Wallet when using a specific\
        \ chain.\n"
      operationId: list_supported_chains_for_exchange
      parameters:
      - description: |
          The ID of the exchange. Possible values include:
            - `binance`: Binance.
            - `okx`: OKX.
            - `deribit`: Deribit.
            - `bybit`: Bybit.
            - `gate`: Gate.io
            - `bitget`: Bitget
            - `bitmart`: BitMart
            - `bitfinex`: Bitfinex
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "(This concept applies to Exchange Wallets only) The asset ID.\
          \ An asset ID is the unique identifier of the asset held within your linked\
          \ exchange account. You can get the ID of the assets supported by an exchanges\
          \ by calling [List supported assets](/v2/api-references/wallets--exchange-wallet/list-supported-assets)."
        example: USDT
        explode: false
        in: path
        name: asset_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChainInfo'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List supported chains
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/exchanges/assets:
    get:
      description: |
        This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID.
      operationId: list_asset_balances_for_exchange_wallet
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of trading account types, separated by comma. You can\
          \ get the the supported trading account types of an exchange by calling\
          \ [List supported exchanges](/v2/api-references/wallets--exchange-wallet/list-supported-exchanges)."
        example: "Trading,Funding"
        explode: true
        in: query
        name: trading_account_types
        required: false
        schema:
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) A list of asset\
          \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
          \ held within your linked exchange account."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_asset_balances_for_exchange_wallet_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List asset balances
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/smart_contracts/delegates:
    post:
      description: |
        This operation retrieves all available Delegates of a Safe\{Wallet\} for a given transfer or contract call request.
      operationId: list_safe_wallet_delegates
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/safeWalletDelegatesRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CoboSafeDelegate'
                type: array
          description: Delegates successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List Delegates
      tags:
      - Wallets - Smart Contract Wallets
  /transactions/check_loop_transfers:
    get:
      description: "This operation verifies if the transactions from a given source\
        \ wallet to a list of given destinations can be executed as Cobo Loop transfers.\
        \ \n\nFor more information about Cobo Loop, see [Cobo Loop's product manuals](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop).\n"
      operationId: check_loop_transfers
      parameters:
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet ID of the transaction source.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: source_wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: "A list of destination addresses, separated by comma."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: destination_addresses
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_loop_transfers_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Check Cobo Loop transfers
      tags:
      - Transactions
  /transactions/estimate_fee:
    post:
      description: |
        This operation estimates the transaction fee of a token transfer or a contract call based on the fee model that the chain uses, considering factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, token ID (only applicable to token transfers), and chain ID (only applicable to contract calls).

        The response can contain different properties based on the transaction fee model used by the chain. For the legacy, EIP-1559, and UTXO fee models, Cobo also supports three different transaction speed levels: slow, recommended, and fast. For more information about estimating transaction fees, refer to [Estimate transaction fee](/v2/guides/transactions/estimate-fees).
      operationId: estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedFee'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Estimate transaction fee
      tags:
      - Transactions
  /transactions/transfer:
    post:
      description: |
        The operation transfers your assets from a wallet created on Cobo Portal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>If you make transfers from Custodial Wallets, do not set the fee-related properties. Otherwise, the transaction will fail.</Note>

        <Note>You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. You should use the <code>utxo_outputs</code> property to specify the destination addresses.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      operationId: create_transfer_transaction
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:withdraw
        - mpc_organization_controlled_wallet:withdraw
        - mpc_user_controlled_wallet:withdraw
      summary: Transfer token
      tags:
      - Transactions
  /transactions/contract_call:
    post:
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>Currently, this operation only applies to the transactions from MPC Wallets or Smart Contract Wallets on the blockchains that have a similar architecture to Ethereum.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      operationId: create_contract_call_transaction
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:contract_call
        - mpc_user_controlled_wallet:contract_call
      summary: Call smart contract
      tags:
      - Transactions
  /transactions/message_sign:
    post:
      description: "This operation creates a transaction to sign the provided message\
        \ using cryptographic techniques.\n\nIn some scenarios, you want to sign a\
        \ message for identity authentication or transaction approval. You need to\
        \ provide details such as the source address, destination address, and the\
        \ message to be signed. A transaction request for tracking is returned upon\
        \ successful operation.\n\nYou can get the signature result by calling [Get\
        \ transaction information](/v2/api-references/transactions/get-transaction-information).\
        \ \n\n<Note>This operation only applies to transactions from MPC Wallets.</Note>\n"
      operationId: create_message_sign_transaction
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:message_sign
        - mpc_user_controlled_wallet:message_sign
      summary: Sign message
      tags:
      - Transactions
  /transactions:
    get:
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      operationId: list_transactions
      parameters:
      - description: The request ID that is used to track a transaction request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
          \ to track a transaction."
        example: "20231213122855000000000000000000,20231213122955000000000000000000"
        explode: true
        in: query
        name: cobo_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction hashes, separated by comma."
        example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        explode: true
        in: query
        name: transaction_hashes
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction types, separated by comma. Possible values\
          \ include: \n  - `Deposit`: A deposit transaction.\n  - `Withdrawal`: A\
          \ withdrawal transaction.\n  - `ContractCall`: A transaction that interacts\
          \ with a smart contract.\n  - `MessageSign`: A transaction that signs a\
          \ message. \n  - `ExternalSafeTx`: A transaction to a Smart Contract Wallet\
          \ (Safe{Wallet}) that requires one or multiple signatures to be executed.\n\
          \  - `Stake`: A transaction that creates a staking request.\n  - `UnStake`:\
          \ A transaction that creates a unstaking request.\n"
        example: "Deposit,Withdrawal"
        explode: true
        in: query
        name: types
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction statuses, separated by comma. Possible\
          \ values include: \n  - `Submitted`: The transaction is submitted.\n  -\
          \ `PendingScreening`: The transaction is pending screening by Risk Control.\
          \ \n  - `PendingAuthorization`: The transaction is pending approvals.\n\
          \  - `PendingSignature`: The transaction is pending signature. \n  - `Broadcasting`:\
          \ The transaction is being broadcast.\n  - `Confirming`: The transaction\
          \ is waiting for the required number of confirmations.\n  - `Completed`:\
          \ The transaction is completed.\n  - `Failed`: The transaction failed.\n\
          \  - `Rejected`: The transaction is rejected.\n  - `Pending`: The transaction\
          \ is waiting to be included in the next block of the blockchain.\n"
        example: "Completed,Failed"
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          type: string
        style: form
      - description: "A list of wallet IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868"
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          description: "A list of wallet IDs, separated by comma."
          type: string
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) A list of asset\
          \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
          \ held within your linked exchange account."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The time when the transaction was created, in Unix timestamp\
          \ format, measured in milliseconds. You can use this parameter to filter\
          \ transactions created on or after the specified time."
        example: 1635744000000
        explode: true
        in: query
        name: min_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The time when the transaction was created, in Unix timestamp\
          \ format, measured in milliseconds. You can use this parameter to filter\
          \ transactions created on or before the specified time."
        example: 1635744000000
        explode: true
        in: query
        name: max_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_200_response'
          description: The information about the transactions.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: List all transactions
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      operationId: get_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetail'
          description: The information about a transaction.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get transaction information
      tags:
      - Transactions
  /transactions/{transaction_id}/resend:
    post:
      description: |
        This operation resends a specified transaction. Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is `failed`.

        A transaction request for tracking is returned upon successful operation.
        <Note>This operation only applies to transactions from MPC Wallets in the SOL token.</Note>
      operationId: resend_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Resend transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/cancel:
    post:
      description: "This operation cancels a specified transaction. A transaction\
        \ can be cancelled if its status is either of the following:\n- `Submitted`\n\
        - `PendingScreening`\n- `PendingAuthorization`\n- `PendingSignature` \n\n\
        A transaction request for tracking is returned upon successful operation.\n\
        <Note>This operation only applies to transactions from MPC Wallets and Smart\
        \ Contract Wallets.</Note>\n"
      operationId: cancel_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Cancel transaction
      tags:
      - Transactions
  /transactions/broadcast:
    post:
      description: "<Note>This operation is only applicable to the staking scenarios.</Note>\n\
        This operation broadcasts a list of signed transactions. \n\nIf you set `auto_broadcast`\
        \ to `false` when [creating a staking activity](/v2/api-references/staking/create-stake-activity),\
        \ the transaction will not be submitted to the blockchain automatically after\
        \ being signed. In such cases, you can call this operation to broadcast the\
        \ transaction to the blockchain.\n\nA transaction can only be broadcast if\
        \ its status is `Broadcasting`.\n"
      operationId: broadcast_signed_transactions
      requestBody:
        $ref: '#/components/requestBodies/broadcastTransactionsBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/broadcast_signed_transactions_201_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Broadcast signed transactions
      tags:
      - Transactions
  /transactions/{transaction_id}/drop:
    post:
      description: "This operation drops a specified transaction. \n\nDropping a transaction\
        \ will trigger a Replace-By-Fee (RBF) transaction which is a new version of\
        \ the original transaction. It must have a higher transaction fee to incentivize\
        \ miners to prioritize its confirmation over the original one. A transaction\
        \ can be dropped if its status is `Broadcasting`.\n\n<ul>\n<li>For EVM chains,\
        \ this RBF transaction has a transfer amount of `0` and the sending address\
        \ is the same as the receiving address.</li>\n<li>For UTXO chains, this RBF\
        \ transaction has a transfer amount of `0` and the destination address is\
        \ the same as the change address in the original transaction.</li>\n</ul>\n\
        \nYou can use the `address` or `included_utxos` properties in the request\
        \ body to specify the address or UTXOs that will cover the transaction fee.\
        \ Generally, the transaction fee is paid by the original transaction's source.\
        \ If that source's balance is insufficient, the specified address or UTXOs\
        \ can be used to cover the fee.\n\nA transaction request for tracking is returned\
        \ upon successful operation.\n\nWhen a transaction is being dropped, any subsequent\
        \ drop or speed up operations will still apply to the original transaction.\
        \ For example, if a user creates Transaction A and later performs a drop operation\
        \ on Transaction A using Transaction B, followed by a speed up operation on\
        \ Transaction B using Transaction C, the speed up operation will still apply\
        \ to Transaction A, not Transaction B.\n\n<Note>This operation only applies\
        \ to transactions from MPC Wallets and Smart Contract Wallets. It does not\
        \ apply to transactions on the following chains: VET, TRON, TVET, SOL, and\
        \ TON.</Note>\n\n<Info>If you drop a transaction from a Smart Contract Wallet,\
        \ two RBF transactions will be triggered, one for the transaction from the\
        \ Smart Contract Wallet, and the other for the transaction from the Delegate.</Info>\n"
      operationId: drop_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Drop transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/speedup:
    post:
      description: "This operation accelerates a specified transaction. \n\nSpeeding\
        \ up a transaction will trigger a Replace-By-Fee (RBF) transaction which is\
        \ a new version of the original transaction. It shares the same inputs but\
        \ must have a higher transaction fee to incentivize miners to prioritize its\
        \ confirmation over the previous one. A transaction can be accelerated if\
        \ its status is `Broadcasting`.\n\nYou can use the `address` or `included_utxos`\
        \ properties in the request body to specify the address or UTXOs that will\
        \ cover the transaction fee. Generally, the transaction fee is paid by the\
        \ original transaction's source. If that source's balance is insufficient,\
        \ the specified address or UTXOs can be used to cover the fee.\n\nA transaction\
        \ request for tracking is returned upon successful operation.\n\n<Note>This\
        \ operation only applies to transactions from MPC Wallets and Smart Contract\
        \ Wallets. It does not apply to transactions on the following chains: VET,\
        \ TRON, TVET, SOL, and TON.</Note>\n\n<Info>If you speed up a transaction\
        \ from a Smart Contract Wallet, two RBF transactions will be triggered, one\
        \ for the transaction from the Smart Contract Wallet, and the other for the\
        \ transaction from the Delegate.</Info>\n"
      operationId: speedup_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Speed up transaction
      tags:
      - Transactions
  /oauth/token:
    get:
      description: "<Note>This operation is only applicable to Cobo Portal App developers.\
        \ To call this operation, you need to use the Cobo OAuth authentication method\
        \ that requires an app key.</Note>\nThis operation allows Cobo Portal Apps\
        \ to get an Org Access Token and a Refresh Token with a specified client ID,\
        \ organization ID, and grant type. \n\nAccess tokens allow the app to signal\
        \ to the WaaS service that it has received permission to access specific resources\
        \ of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction).\
        \ Once the app has been granted permission by the organization's admin, it\
        \ can use this operation to obtain both an Org Access Token and a Refresh\
        \ Token.\n\nFor security purposes, Org Access Tokens expire after a certain\
        \ period. Once they expire, the app needs to call [Refresh token](/v2/api-references/oauth/refresh-org-access-token)\
        \ to get a new Org Access Token and a new Refresh Token. \n"
      operationId: get_token
      parameters:
      - description: "The client ID, a unique identifier to distinguish Cobo Portal\
          \ Apps. You can get the client ID by retrieving the manifest file after\
          \ publishing the app."
        example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
        explode: true
        in: query
        name: client_id
        required: true
        schema:
          type: string
        style: form
      - description: "Organization ID, a unique identifier to distinguish different\
          \ organizations. You can get the organization ID from the callback message\
          \ sent to the URL that was configured in the manifest file."
        example: e3986401-4aec-480a-973d-e775a4518413
        explode: true
        in: query
        name: org_id
        required: true
        schema:
          type: string
        style: form
      - description: The OAuth grant type. Set the value as `org_implicit`.
        example: org_implicit
        explode: true
        in: query
        name: grant_type
        required: true
        schema:
          type: string
        style: form
      responses:
        "2XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_2XX_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get Org Access Token
      tags:
      - OAuth
    post:
      description: "<Note>This operation is only applicable to Cobo Portal Apps developers.\
        \ To call this operation, you need to use the Cobo OAuth authentication method\
        \ that requires an app key.</Note>\nThis operation allows Cobo Portal Apps\
        \ to obtain a new Org Access Token with a specified client ID, grant type\
        \ and a Refresh Token. \n\nFor security purposes, Org Access Tokens expire\
        \ after a certain period. Once they expire, the app needs to call this operation\
        \ to get a new Org Access Token and a new Refresh Token. \n"
      operationId: refresh_token
      requestBody:
        $ref: '#/components/requestBodies/tokenEndpointBody'
      responses:
        "2XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refresh_token_2XX_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Refresh Org Access Token
      tags:
      - OAuth
  /webhooks/endpoints:
    get:
      description: This operation retrieves the information of all webhook endpoints
        registered under your organization. You can filter the result by endpoint
        status and the subscribed event type.
      operationId: list_webhook_endpoints
      parameters:
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        style: form
      - explode: true
        in: query
        name: event_type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_endpoints_200_response'
          description: Successfully listed of webhook endpoints
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List webhook endpoints
      tags:
      - Developers - Webhooks
    post:
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook_url:edit
      summary: Register webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}:
    get:
      description: This operation retrieves the information of a specified webhook
        endpoint.
      operationId: get_webhook_endpoint_by_id
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get webhook endpoint information
      tags:
      - Developers - Webhooks
    put:
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint_by_id
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: Update webhook endpoint successfully.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook_url:edit
      summary: Update webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/events/definitions:
    get:
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get webhook event types
      tags:
      - Developers - Webhooks
  /webhooks/events/trigger:
    post:
      description: |
        This operation tests the functionality of your webhook endpoint by triggering a test webhook event. The test event will be sent to all the endpoints you have registered on Cobo Portal.

        You only need to provide the event type. By default, the payload contains dummy data with no impact on your real business transactions or activities. You can optionally provide the `override_data` property to customize the payload.
      operationId: trigger_test_webhook_event
      requestBody:
        $ref: '#/components/requestBodies/triggerTestEventBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trigger_test_webhook_event_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Trigger test event
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events:
    get:
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note>
      operationId: list_webhook_events
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - example: Success
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventStatus'
        style: form
      - example: wallets.transaction.updated
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_events_200_response'
          description: A list of webhook events has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List all webhook events
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}:
    get:
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event_by_id
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
          description: The webhook event information is successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Retrieve event information
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/logs:
    get:
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: list_webhook_event_logs
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_event_logs_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List webhook event logs
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/retry:
    post:
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event_by_id
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook:resend
      summary: Retry event
      tags:
      - Developers - Webhooks
  /stakings/pools:
    get:
      description: |
        This operation retrieves a list of staking pools currently supported.
      operationId: list_staking_pools
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_staking_pools_200_response'
          description: A list of staking pools has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List staking pools
      tags:
      - Stakings
  /stakings/pools/{pool_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified staking pool.
      operationId: get_staking_pool_by_id
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](/v2/api-references/stakings/list-staking-pools) to retrieve a list\
          \ of staking pools."
        example: babylon_btc
        explode: false
        in: path
        name: pool_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolDetails'
          description: A staking pool has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get staking pool details
      tags:
      - Stakings
  /stakings/estimate_fee:
    post:
      description: "<Note>This operation is deprecated. Please use the [updated version](/v2/api-references/stakings/estimate-staking-fees-1)\
        \ instead.</Note> \nThis operation calculates the fee required for a staking\
        \ activity based on factors such as network congestion and transaction complexity.\n\
        \nFor some protocols, you can use the `fee.fee_rate` property in the request\
        \ body to specify the fee rate you are willing to pay.\n\nThe `fee.max_fee_amount`\
        \ property in the request body will be ignored.\n\n<Note>For the Babylon protocol,\
        \ you can only select UTXO as the fee model.</Note>\n"
      operationId: get_staking_estimation_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_staking_estimation_fee_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      summary: Estimate staking fees
      tags:
      - Stakings
  /stakings/estimate_fee_v2:
    post:
      description: |
        This operation calculates the fee required for a staking activity based on factors such as network congestion and transaction complexity.

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      operationId: get_staking_estimation_fee_v2
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthStakeEstimatedFee'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      summary: Estimate staking fees
      tags:
      - Stakings
  /stakings/activities/stake:
    post:
      description: "This operation creates a staking request.\n\nFor some protocols,\
        \ you can use the `fee` property in the request body to specify the maximum\
        \ fee you are willing to pay. The transaction will fail if the actual fee\
        \ exceeds the specified maximum fee. \n\n<Note>For the Babylon protocol, you\
        \ can only select UTXO as the fee model.</Note>\n"
      operationId: create_stake_activity
      requestBody:
        $ref: '#/components/requestBodies/createStakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create stake activity
      tags:
      - Stakings
  /stakings:
    get:
      description: "This operation retrieves a list of staking positions. \n"
      operationId: list_stakings
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](/v2/api-references/stakings/list-staking-pools) to retrieve a list\
          \ of staking pools."
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: |
          The statuses of the staking amounts, separated by comma. Possible values include:

          - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
          - `Active`: The amount has been staked.
          - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
          - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
          - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
          - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
          - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
          - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
          - `Closed`: The staking position is closed.
        example: "Active,StakeInProgress,"
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          type: string
        style: form
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: wallet_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_stakings_200_response'
          description: A list of staking positions has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List staking positions
      tags:
      - Stakings
  /stakings/{staking_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified staking position.
      operationId: get_staking_by_id
      parameters:
      - description: "The ID of the staking position. You can retrieve a list of staking\
          \ positions by calling [List staking positions](/v2/api-references/stakings/list-staking-positions)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: staking_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stakings'
          description: A staking position has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get staking position details
      tags:
      - Stakings
  /stakings/activities/unstake:
    post:
      description: "This operation creates an unstaking request. Your staked tokens\
        \ will be automatically unlocked once the specified locking period ends. If\
        \ you want to withdraw your tokens beforehand, you can unstake them with this\
        \ operation.\n\nFor some protocols, you can use the `fee` property in the\
        \ request body to specify the maximum fee you are willing to pay. The transaction\
        \ will fail if the actual fee exceeds the specified maximum fee. \n\n<Note>For\
        \ the Babylon protocol, you can only select UTXO as the fee model.</Note>\n"
      operationId: create_unstake_activity
      requestBody:
        $ref: '#/components/requestBodies/createUnstakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create unstake activity
      tags:
      - Stakings
  /stakings/activities/withdraw:
    post:
      description: "This operation creates a withdrawal request. \n\nFor some protocols,\
        \ you can use the `fee` property in the request body to specify the maximum\
        \ fee you are willing to pay. The transaction will fail if the actual fee\
        \ exceeds the specified maximum fee. \n\n<Note>For the Babylon protocol, you\
        \ can only select UTXO as the fee model.</Note>\n"
      operationId: create_withdraw_activity
      requestBody:
        $ref: '#/components/requestBodies/createWithdrawActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create withdraw activity
      tags:
      - Stakings
  /stakings/activities/claim:
    post:
      description: "This operation creates a claim request.\n\n<Note>Currently, only\
        \ the Ethereum Beacon protocol supports this operation.</Note>\n\nFor some\
        \ protocols, you can use the `fee` property in the request body to specify\
        \ the maximum fee you are willing to pay. The transaction will fail if the\
        \ actual fee exceeds the specified maximum fee. \n"
      operationId: create_claim_activity
      requestBody:
        $ref: '#/components/requestBodies/createClaimActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create claim activity
      tags:
      - Stakings
  /stakings/activities:
    get:
      description: |
        This operation retrieves a list of staking activities.
      operationId: list_staking_activities
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](/v2/api-references/stakings/list-staking-pools) to retrieve a list\
          \ of staking pools."
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: The position ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: staking_id
        required: false
        schema:
          type: string
        style: form
      - example: Stake
        explode: true
        in: query
        name: activity_type
        required: false
        schema:
          $ref: '#/components/schemas/ActivityType'
        style: form
      - example: Success
        explode: true
        in: query
        name: activity_status
        required: false
        schema:
          $ref: '#/components/schemas/ActivityStatus'
        style: form
      - description: "The start time of the query. All staking activities updated\
          \ after the specified time will be retrieved. The time is in Unix timestamp\
          \ format, measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: min_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The end time of the query. All staking activities updated before\
          \ the specified time will be retrieved. The time is in Unix timestamp format,\
          \ measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: max_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The activity initiator, which is your API key by default. You\
          \ can also specify the initiator when creating the activity."
        example: steve@example.com
        explode: true
        in: query
        name: initiator
        required: false
        schema:
          type: string
        style: form
      - description: The request ID that is used to track a transaction request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_staking_activities_200_response'
          description: A list of staking activities have been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List staking activities
      tags:
      - Stakings
  /stakings/activities/{activity_id}:
    get:
      description: |
        This operation retrieves the details of a specified staking activity.
      operationId: get_staking_activity_by_id
      parameters:
      - description: The activity ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: activity_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: A staking activity has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get staking activity details
      tags:
      - Stakings
  /developers/api_key_info:
    get:
      description: This operation retrieves the details of the API key that you are
        using.
      operationId: get_api_key_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_api_key_info_200_response'
          description: The API key information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      summary: Get API key information
      tags:
      - Developers
  /developers/callback_messages:
    get:
      description: |
        This operation retrieves all the callback messages.
      operationId: list_callback_messages
      parameters:
      - description: The IDs of the callback messages. Comma separated.
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: callback_message_ids
        required: false
        schema:
          type: string
        style: form
      - description: The request_ids. Comma separated.
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: request_ids
        required: false
        schema:
          type: string
        style: form
      - description: The IDs of the transactions. Comma separated.
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: The wallet ids of the transactions. Comma separated.
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479, f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          type: string
        style: form
      - description: "The callback status. Possible values are `Approved`, `Denied`\
          \ and `Failed`."
        example: Approved
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - Denied
          - Approved
          - Failed
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_callback_messages_200_response'
          description: The information about callback messages.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CookieAuth: []
      summary: List all callback messages
      tags:
      - Developers
  /developers/callback_messages/{message_id}/retry:
    post:
      description: |
        This operation retry a failed callback message.
      operationId: retry_callback_message
      parameters:
      - description: The ID of the callback message.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CookieAuth: []
      summary: Retry callback message
      tags:
      - Developers
  /address_books:
    get:
      description: |
        This operation retrieves a list of addresses from your address book.
      operationId: list_address_books
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: false
        schema:
          description: The wallet address.
          type: string
        style: form
      - description: The address label.
        example: test
        explode: true
        in: query
        name: label
        required: false
        schema:
          description: The address label.
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_books_200_response'
          description: The information about an address book entry.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List address book entries
      tags:
      - AddressBooks
  /swaps/summary:
    get:
      description: |
        This operation retrieves a summary of swap activities.
      operationId: get_swap_summary
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapSummary'
          description: The summary information of swap activities.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Retrieve Swap Summary
      tags:
      - Swaps
  /swaps/activities:
    get:
      description: |
        This operation retrieves a list of swap activities.
      operationId: list_swap_activities
      parameters:
      - example: Success
        explode: true
        in: query
        name: status
        required: false
        schema:
          description: |
            The status of the swap activity. Possible values include:
            - `Success`: The activity is successfully completed.
            - `Processing`: The activity is being processed.
            - `Failed`: The activity has failed.
          enum:
          - Success
          - Processing
          - Failed
          example: Success
          type: string
        style: form
      - description: "The start time of the query. All staking activities updated\
          \ after the specified time will be retrieved. The time is in Unix timestamp\
          \ format, measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: min_updated_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The end time of the query. All staking activities updated before\
          \ the specified time will be retrieved. The time is in Unix timestamp format,\
          \ measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: max_updated_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The activity initiator, which is your API key by default. You\
          \ can also specify the initiator when creating the activity."
        example: steve@example.com
        explode: true
        in: query
        name: initiator
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The field used for sorting.
        example: timestamp
        explode: true
        in: query
        name: sort_by
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: |
          The sort direction. Possible values include:
            - `ASC`: Sort the results in ascending order.
            - `DESC`: Sort the results in descending order.
        example: ASC
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ""
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_swap_activities_200_response'
          description: A list of staking activities have been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List Swap Activities
      tags:
      - Swaps
  /swaps/activities/{activity_id}:
    get:
      description: |
        This operation retrieves the details of a swap activity.
      operationId: get_swap_activity
      parameters:
      - description: The unique id of the activity.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: activity_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapActivity'
          description: The swap activity details have been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Get Swap Activity Details
      tags:
      - Swaps
  /swaps/enabled_pairs:
    get:
      description: |
        This operation retrieves all supported token pairs for swaps in a specified wallet.
      operationId: list_enable_token_pairs
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.

          - If you set `before` to `infinity`, the last page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          - If you set both `after` and `before`, an error will occur.

          - If you leave both `before` and `after` empty, the first page of data is returned.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_enable_token_pairs_200_response'
          description: The supported token pairs have been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List Supported Token Pairs
      tags:
      - Swaps
  /swaps/quote:
    post:
      description: |
        This operation retrieves a quote for swapping between two tokens. Either pay_amount or receive_amount must be provided.
      operationId: create_quote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_quote_request'
        description: The request body for creating a swap activity.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_quote_201_response'
          description: The swap quote has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create Quote
      tags:
      - Swaps
  /swaps/swap:
    post:
      description: |
        This operation to create a swap activity.
      operationId: create_swap_activity
      requestBody:
        $ref: '#/components/requestBodies/createSwapActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapActivity'
          description: The swap activity details have been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create Swap Activity
      tags:
      - Swaps
components:
  parameters:
    sortByParam:
      description: The field used for sorting.
      example: timestamp
      explode: true
      in: query
      name: sort_by
      required: false
      schema:
        default: ""
        type: string
      style: form
    directionParam:
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      example: ASC
      explode: true
      in: query
      name: direction
      required: false
      schema:
        default: ""
        enum:
        - ASC
        - DESC
        type: string
      style: form
    limitParam:
      description: "The maximum number of objects to return. For most operations,\
        \ the value range is [1, 50]."
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        format: int32
        type: integer
      style: form
    beforeParam:
      description: |
        An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.

        - If you set `before` to `infinity`, the last page of data is returned.
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
      explode: true
      in: query
      name: before
      required: false
      schema:
        type: string
      style: form
    afterParam:
      description: |
        An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
      explode: true
      in: query
      name: after
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdParam:
      description: (This concept applies to Exchange Wallets only) The asset ID. An
        asset ID is the unique identifier of the asset held within your linked exchange
        account.
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdListParam:
      description: "(This concept applies to Exchange Wallets only) A list of asset\
        \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
        \ held within your linked exchange account."
      example: "USDT,USDC"
      explode: true
      in: query
      name: asset_ids
      required: false
      schema:
        description: "A list of asset IDs, separated by comma."
        type: string
      style: form
    requiredAssetIdParam:
      description: (This concept applies to Exchange Wallets only) The asset ID. An
        asset ID is the unique identifier of the asset held within your linked exchange
        account.
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: true
      schema:
        type: string
      style: form
    chainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
      example: ETH
      explode: false
      in: path
      name: chain_id
      required: true
      schema:
        type: string
      style: simple
    requiredChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: true
      schema:
        type: string
      style: form
    optionalChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: false
      schema:
        type: string
      style: form
    optionalChainIdListParam:
      description: "A list of chain IDs, separated by comma. The chain ID is the unique\
        \ identifier of a blockchain. You can retrieve the IDs of all the chains you\
        \ can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
      example: "BTC,ETH"
      explode: true
      in: query
      name: chain_ids
      required: false
      schema:
        description: "A list of chain IDs, separated by comma."
        type: string
      style: form
    requiredChainIdListParam:
      description: "A list of chain IDs, separated by comma. The chain ID is the unique\
        \ identifier of a blockchain. You can retrieve the IDs of all the chains you\
        \ can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains)."
      example: "BTC,ETH"
      explode: true
      in: query
      name: chain_ids
      required: true
      schema:
        description: "A list of chain IDs, separated by comma."
        type: string
      style: form
    tokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List enabled\
        \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
      example: ETH_USDT
      explode: false
      in: path
      name: token_id
      required: true
      schema:
        type: string
      style: simple
    optionalTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List enabled\
        \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: false
      schema:
        type: string
      style: form
    optionalTokenListIdParam:
      description: "A list of token IDs, separated by comma. The token ID is the unique\
        \ identifier of a token. You can retrieve the IDs of all the tokens you can\
        \ use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
      example: "ETH_USDT,ETH_USDC"
      explode: true
      in: query
      name: token_ids
      required: false
      schema:
        description: "A list of token IDs, separated by comma."
        type: string
      style: form
    requiredTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List enabled\
        \ tokens](/v2/api-references/wallets/list-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: true
      schema:
        type: string
      style: form
    requiredFeeRateParam:
      description: The fee rate in sats/vByte or gas price in wei.
      example: "10"
      explode: true
      in: query
      name: fee_rate
      required: true
      schema:
        type: string
      style: form
    requiredWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: true
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    optionalWalletTypeParam:
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      explode: true
      in: query
      name: wallet_type
      required: false
      schema:
        $ref: '#/components/schemas/WalletType'
      style: form
    optionalWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: false
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    walletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalWalletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    requiredWalletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: form
    optionalWalletListIdParam:
      description: "A list of wallet IDs, separated by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868"
      explode: true
      in: query
      name: wallet_ids
      required: false
      schema:
        description: "A list of wallet IDs, separated by comma."
        type: string
      style: form
    addressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: false
      in: path
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: simple
    requiredAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: form
    requiredAddressListParam:
      description: "A list of wallet addresses, separated by comma. You can specify\
        \ a maximum of 100 addresses."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: addresses
      required: true
      schema:
        type: string
      style: form
    optionalAddressListParam:
      description: "A list of wallet addresses, separated by comma. For addresses\
        \ requiring a memo, append the memo after the address using the '|' separator\
        \ (e.g., \"address|memo\")."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: addresses
      required: false
      schema:
        type: string
      style: form
    requiredTradingAccountTypeParam:
      description: The trading account type.
      example: SPOT
      explode: true
      in: query
      name: trading_account_type
      required: true
      schema:
        type: string
      style: form
    optionalTradingAccountTypeListParam:
      description: "A list of trading account types, separated by comma. You can get\
        \ the the supported trading account types of an exchange by calling [List\
        \ supported exchanges](/v2/api-references/wallets--exchange-wallet/list-supported-exchanges)."
      example: "Trading,Funding"
      explode: true
      in: query
      name: trading_account_types
      required: false
      schema:
        type: string
      style: form
    optionalAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: false
      schema:
        description: The wallet address.
        type: string
      style: form
    requiredToAddressParam:
      description: The recipient's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: true
      schema:
        type: string
      style: form
    optionalToAddressParam:
      description: The recipient's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: false
      schema:
        type: string
      style: form
    optionalFromAddressParam:
      description: "The sender's address. For EVM addresses in MPC Wallets, this parameter\
        \ is required."
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: from_address
      required: false
      schema:
        type: string
      style: form
    optionalUtxoTxHashParam:
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
      explode: true
      in: query
      name: tx_hash
      required: false
      schema:
        description: The transaction hash of the UTXO.
        type: string
      style: form
    requiredSourceWalletIdParam:
      description: The wallet ID of the transaction source.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: source_wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: form
    requiredDestinationAddressesParam:
      description: "A list of destination addresses, separated by comma."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: destination_addresses
      required: true
      schema:
        type: string
      style: form
    keyShareHolderGroupIdParam:
      description: The key share holder group ID.
      example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
      explode: false
      in: path
      name: key_share_holder_group_id
      required: true
      schema:
        type: string
      style: simple
    optionalKeyShareHolderGroupTypeParam:
      description: |
        The key share holder group type. Possible values include:
        - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

        - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

        - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

        **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
      explode: true
      in: query
      name: key_share_holder_group_type
      required: false
      schema:
        $ref: '#/components/schemas/KeyShareHolderGroupType'
      style: form
    projectIdParam:
      description: "The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: project_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalProjectIdQueryParam:
      description: |
        The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: project_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalProjectIdListQueryParam:
      description: "A list of MPC project IDs, separated by comma."
      example: "a3d8eae2-1740-4b5e-92f2-88c2b1e44c6b,b51f63a3-8a8e-4a34-ae9e-6f3e6b1fdf99"
      explode: true
      in: query
      name: project_ids
      required: false
      schema:
        type: string
      style: form
    requiredKeyShareHolderGroupIdParam:
      description: "The key share holder group ID of the TSS request, which you can\
        \ retrieve by calling [List all key share holder groups](/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
      example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
      explode: true
      in: query
      name: key_share_holder_group_id
      required: true
      schema:
        type: string
      style: form
    tssRequestIdParam:
      description: "The TSS request ID, which you can retrieve by calling [List TSS\
        \ requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
      example: "20240711114129000132315000003970"
      explode: false
      in: path
      name: tss_request_id
      required: true
      schema:
        type: string
      style: simple
    vaultIdParam:
      description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: vault_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalVaultIdQueryParam:
      description: "The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: vault_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalVaultIdListQueryParam:
      description: "A list of vault IDs, separated by comma."
      example: "f5c3f9e8-1d8a-44b2-9284-94bf76b7b017,ab2e3f55-472e-4a98-86d1-446d2f9e839e"
      explode: true
      in: query
      name: vault_ids
      required: false
      schema:
        type: string
      style: form
    optionalVaultNameParam:
      description: Unique id of the mpc vault
      example: my vault name
      explode: true
      in: query
      name: vault_name
      required: false
      schema:
        type: string
      style: form
    exchangeIdParam:
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      explode: false
      in: path
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: simple
    optionalExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: false
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    requiredExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    optionalApikeyParam:
      description: The API Key for the exchange
      example: d8f062da-39f4-4a11-8b9d-12595854237f
      explode: true
      in: query
      name: apikey
      required: false
      schema:
        type: string
      style: form
    optionalSecretParam:
      description: The API Secret for the exchange.
      example: 75B4F636193162488A3728B4A5797708
      explode: true
      in: query
      name: secret
      required: false
      schema:
        type: string
      style: form
    optionalPassphraseParam:
      description: The API passphrase for the exchange wallet.
      example: A3DBHJV
      explode: true
      in: query
      name: passphrase
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdParam:
      description: The request ID that is used to track a transaction request. The
        request ID is provided by you and must be unique within your organization.
      example: web_send_by_user_327_1610444045047
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    optionalCoboIdParam:
      description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
        \ to track a transaction."
      example: "20231213122855000000000000000000,20231213122955000000000000000000"
      explode: true
      in: query
      name: cobo_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionTypeParam:
      description: The type of a transaction
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/TransactionType'
      style: form
    optionalTransactionTypeListParam:
      description: "A list of transaction types, separated by comma. Possible values\
        \ include: \n  - `Deposit`: A deposit transaction.\n  - `Withdrawal`: A withdrawal\
        \ transaction.\n  - `ContractCall`: A transaction that interacts with a smart\
        \ contract.\n  - `MessageSign`: A transaction that signs a message. \n  -\
        \ `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet})\
        \ that requires one or multiple signatures to be executed.\n  - `Stake`: A\
        \ transaction that creates a staking request.\n  - `UnStake`: A transaction\
        \ that creates a unstaking request.\n"
      example: "Deposit,Withdrawal"
      explode: true
      in: query
      name: types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionStatusParam:
      description: The status of a transaction
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/TransactionStatus'
      style: form
    optionalTransactionStatusListParam:
      description: "A list of transaction statuses, separated by comma. Possible values\
        \ include: \n  - `Submitted`: The transaction is submitted.\n  - `PendingScreening`:\
        \ The transaction is pending screening by Risk Control. \n  - `PendingAuthorization`:\
        \ The transaction is pending approvals.\n  - `PendingSignature`: The transaction\
        \ is pending signature. \n  - `Broadcasting`: The transaction is being broadcast.\n\
        \  - `Confirming`: The transaction is waiting for the required number of confirmations.\n\
        \  - `Completed`: The transaction is completed.\n  - `Failed`: The transaction\
        \ failed.\n  - `Rejected`: The transaction is rejected.\n  - `Pending`: The\
        \ transaction is waiting to be included in the next block of the blockchain.\n"
      example: "Completed,Failed"
      explode: true
      in: query
      name: statuses
      required: false
      schema:
        type: string
      style: form
    optionalMinCreatedTimestampParam:
      description: "The time when the transaction was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter transactions\
        \ created on or after the specified time."
      example: 1635744000000
      explode: true
      in: query
      name: min_created_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalMaxCreatedTimestampParam:
      description: "The time when the transaction was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter transactions\
        \ created on or before the specified time."
      example: 1635744000000
      explode: true
      in: query
      name: max_created_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalTransactionSourceTypeListParam:
      description: |
        A list of transaction source types, separated by comma. Possible values include:
          - `Asset`: Custodial Wallets (Asset Wallets).
          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
          - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
          - `Main`: Exchange Wallets (Main Account).
          - `Sub`: Exchange Wallets (Sub Account).
          - `DepositFromAddress`: An address which can include both Cobo's wallet addresses and external addresses.
          - `DepositFromWallet`: An Exchange Wallet.
          - `DepositFromLoop`: A transfer sender through the [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) network.
      example: "Asset,DepositFromAddress"
      explode: true
      in: query
      name: source_types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionSourceAddressListParam:
      description: "A list of wallet IDs of the transaction sources, separated by\
        \ comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
      explode: true
      in: query
      name: source_wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionSourceWalletIdListParam:
      description: "A list of addresses of the transaction source, separated by comma."
      explode: true
      in: query
      name: source_addresses
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationTypeListParam:
      description: "A list of transaction destination types, separated by comma. Possible\
        \ values include:\n  - `Address`: An external address. \n  - `ContractCall`:\
        \ A transaction that interacts with a smart contract.\n  - `MessageSign`:\
        \ A transaction that signs a message. \n  - `CustodialWallet`: A Custodial\
        \ Wallet.\n  - `MPCWallet`: An MPC Wallet.\n  - `SafeWallet`: A Smart Contract\
        \ Wallets (Safe{Wallet}).\n  - `ExchangeWallet`: An Exchange Wallet.\n"
      example: "ContractCall,MessageSign"
      explode: true
      in: query
      name: destination_types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationAddressListParam:
      description: "A list of wallet IDs of the transaction destinations, separated\
        \ by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
      explode: true
      in: query
      name: destination_wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationWalletIdListParam:
      description: |
        A list of addresses of the transaction destination, separated by comma. If the address includes a memo, use `|` to append the memo to the address. For example, if the address is `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku` and the memo is `82840924`, you need to provide `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku|82840924` as the property value.
      explode: true
      in: query
      name: destination_addresses
      required: false
      schema:
        type: string
      style: form
    transactionIdParam:
      description: The transaction ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: transaction_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhookEventIdParam:
      description: "The event ID. You can obtain a list of event IDs by calling [List\
        \ all events](/v2/api-references/developers--webhooks/list-all-events)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    endpointIdParam:
      description: "The webhook endpoint ID. You can retrieve a list of webhook endpoint\
        \ IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: endpoint_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    activityIdRequiredParam:
      description: The activity ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: activity_id
      required: true
      schema:
        type: string
      style: simple
    poolIdRequiredParam:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. You can call [List staking pools](/v2/api-references/stakings/list-staking-pools)\
        \ to retrieve a list of staking pools."
      example: babylon_btc
      explode: false
      in: path
      name: pool_id
      required: true
      schema:
        type: string
      style: simple
    poolIdOptionalParam:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. You can call [List staking pools](/v2/api-references/stakings/list-staking-pools)\
        \ to retrieve a list of staking pools."
      example: babylon_btc
      explode: true
      in: query
      name: pool_id
      required: false
      schema:
        type: string
      style: form
    stakingIdRequiredParam:
      description: "The ID of the staking position. You can retrieve a list of staking\
        \ positions by calling [List staking positions](/v2/api-references/stakings/list-staking-positions)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: staking_id
      required: true
      schema:
        type: string
      style: simple
    stakingIdOptionalParam:
      description: The position ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: staking_id
      required: false
      schema:
        type: string
      style: form
    activityTypeOptionalParam:
      example: Stake
      explode: true
      in: query
      name: activity_type
      required: false
      schema:
        $ref: '#/components/schemas/ActivityType'
      style: form
    activityStatusOptionalParam:
      example: Success
      explode: true
      in: query
      name: activity_status
      required: false
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      style: form
    activityInitiatorOptionalParam:
      description: "The activity initiator, which is your API key by default. You\
        \ can also specify the initiator when creating the activity."
      example: steve@example.com
      explode: true
      in: query
      name: initiator
      required: false
      schema:
        type: string
      style: form
    maxModifiedTimestampOptionalParam:
      description: "The end time of the query. All staking activities updated before\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: max_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    minModifiedTimestampOptionalParam:
      description: "The start time of the query. All staking activities updated after\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: min_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    ClientIdRequiredParam:
      description: "The client ID, a unique identifier to distinguish Cobo Portal\
        \ Apps. You can get the client ID by retrieving the manifest file after publishing\
        \ the app."
      example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
      explode: true
      in: query
      name: client_id
      required: true
      schema:
        type: string
      style: form
    OrgIdRequiredParam:
      description: "Organization ID, a unique identifier to distinguish different\
        \ organizations. You can get the organization ID from the callback message\
        \ sent to the URL that was configured in the manifest file."
      example: e3986401-4aec-480a-973d-e775a4518413
      explode: true
      in: query
      name: org_id
      required: true
      schema:
        type: string
      style: form
    GrantTypeRequiredParam:
      description: The OAuth grant type. Set the value as `org_implicit`.
      example: org_implicit
      explode: true
      in: query
      name: grant_type
      required: true
      schema:
        type: string
      style: form
    optionalAddressBookLabelParam:
      description: The address label.
      example: test
      explode: true
      in: query
      name: label
      required: false
      schema:
        description: The address label.
        type: string
      style: form
    apilogIdParam:
      description: The API log ID.
      example: e39864014aec480a973de775a4518413
      explode: false
      in: path
      name: log_id
      required: true
      schema:
        type: string
      style: simple
    optionalApiEndTimestampParam:
      description: "The time when the API request was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter API logs\
        \ of requests created on or before the specified time."
      example: 1640918000000
      explode: true
      in: query
      name: end_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalApiStartTimestampParam:
      description: "The time when the API request was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter API logs\
        \ of requests created on or after the specified time."
      example: 1640918000000
      explode: true
      in: query
      name: start_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalApiStatusCodeParam:
      description: "The HTTP status code returned by the API request. For more details,\
        \ refer to [Error codes and status codes](/v2/api-references/error-codes)."
      example: "400,401"
      explode: true
      in: query
      name: status_code
      required: false
      schema:
        type: string
      style: form
    optionalApiMethodParam:
      description: |
        The HTTP method used for the API request. Possible values include:
          - `GET`: The GET method.
          - `POST`: The POST method.
          - `PUT`: The PUT method.
          - `DELETE`: The DELETE method.
      example: GET
      explode: true
      in: query
      name: method
      required: false
      schema:
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        type: string
      style: form
    optionalApiKeyParam:
      description: "The API key used to call the API. For more details, refer to [API\
        \ key](/v2/guides/overview/cobo-auth#api-key)."
      example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
      explode: true
      in: query
      name: api_key
      required: false
      schema:
        type: string
      style: form
    optionalApiEndpointParam:
      description: The endpoint of the API request.
      example: /v2/wallets/asset
      explode: true
      in: query
      name: api_endpoint
      required: false
      schema:
        type: string
      style: form
    optionalApiIpAddressParam:
      description: The client's IP address that made the API request.
      example: 127.0.0.1
      explode: true
      in: query
      name: ip_address
      required: false
      schema:
        type: string
      style: form
    optionalApiLogStatusParam:
      description: The API request status. Possible values are `Success` and `Failed`.
      example: Success
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - Success
        - Failed
        type: string
      style: form
    optionalApiLogClientIdParam:
      description: The client ID of the Cobo Portal App that made the API request.
      example: 9535384b-33cf-4ef7-88fa-74136f9748db1
      explode: true
      in: query
      name: client_id
      required: false
      schema:
        type: string
      style: form
    optionalCallbackMessageIdsParam:
      description: The IDs of the callback messages. Comma separated.
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: callback_message_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionIdsParam:
      description: The IDs of the transactions. Comma separated.
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: transaction_ids
      required: false
      schema:
        type: string
      style: form
    optionalWalletIdsParam:
      description: The wallet ids of the transactions. Comma separated.
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479, f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdsParam:
      description: The request_ids. Comma separated.
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: request_ids
      required: false
      schema:
        type: string
      style: form
    optionalCallbackStatusParam:
      description: "The callback status. Possible values are `Approved`, `Denied`\
        \ and `Failed`."
      example: Approved
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - Denied
        - Approved
        - Failed
        type: string
      style: form
    callbackMessageIdParam:
      description: The ID of the callback message.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: message_id
      required: true
      schema:
        type: string
      style: simple
    activityIdParam:
      description: The unique id of the activity.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: activity_id
      required: true
      schema:
        type: string
      style: simple
    initiatorOptionalParam:
      description: "The activity initiator, which is your API key by default. You\
        \ can also specify the initiator when creating the activity."
      example: steve@example.com
      explode: true
      in: query
      name: initiator
      required: false
      schema:
        type: string
      style: form
    payAmountRequiredParam:
      description: The amount of pay token to swap.
      example: "1.5"
      explode: true
      in: query
      name: pay_amount
      required: true
      schema:
        type: string
      style: form
    payAmountOptionalParam:
      description: The amount of pay token to swap.
      example: "1.5"
      explode: true
      in: query
      name: pay_amount
      required: false
      schema:
        type: string
      style: form
    receiveAmountRequiredParam:
      description: The amount of token to receive.
      example: "2000"
      explode: true
      in: query
      name: receive_amount
      required: true
      schema:
        type: string
      style: form
    receiveAmountOptionalParam:
      description: The amount of token to receive.
      example: "2000"
      explode: true
      in: query
      name: receive_amount
      required: false
      schema:
        type: string
      style: form
    payTokenIdRequiredParam:
      description: Unique id of the token to pay.
      example: ETH
      explode: true
      in: query
      name: pay_token_id
      required: true
      schema:
        type: string
      style: form
    receiveTokenIdRequiredParam:
      description: Unique id of the token to receive.
      example: USDT
      explode: true
      in: query
      name: receive_token_id
      required: true
      schema:
        type: string
      style: form
    swapActivityStatusOptionalParam:
      example: Success
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: |
          The status of the swap activity. Possible values include:
          - `Success`: The activity is successfully completed.
          - `Processing`: The activity is being processed.
          - `Failed`: The activity has failed.
        enum:
        - Success
        - Processing
        - Failed
        example: Success
        type: string
      style: form
    swapActivityMinUpdatedTimestampOptionalParam:
      description: "The start time of the query. All staking activities updated after\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: min_updated_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    swapActivityMaxUpdatedTimestampOptionalParam:
      description: "The end time of the query. All staking activities updated before\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: max_updated_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
  requestBodies:
    createWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWalletParams'
      description: The request body to create a wallet
    updateWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWalletParams'
      description: The request body.
    createAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_address_request'
      description: The request body to generates addresses within a specified wallet.
    lockUtxosBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_utxos_request'
      description: The request body of the Lock/Unlock UTXOs operation.
    safeWalletDelegatesRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SafeWalletDelegates'
      description: "The request body to query the Delegates of a Safe{Wallet}."
    createKeyShareHolderGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_share_holder_group_request'
      description: The request body to create a key share holder group.
    createMpcProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_project_request'
      description: The request body to create a project.
    createTssRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_tss_request_request'
      description: The request body to create a TSS request.
    createMpcVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_vault_request'
      description: The request body to create a vault.
    updateProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_project_by_id_request'
      description: The request body to update a project's name.
    updateVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_vault_by_id_request'
      description: The request body to update a vault's name.
    updateGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_key_share_holder_group_by_id_request'
    createTransferBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferParams'
      description: The request body to create a transfer transaction
    createSmartContractCallBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCallParams'
      description: The request body for making a contract call.
    createMessageSignBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageSignParams'
      description: The request body to create a message signing transaction
    estimateFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFeeParams'
      description: The request body to estimate the transaction fee of a token transfer
        or a contract call.
    feeRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
      description: The request body to drop or to speed up transactions
    resendTransactionBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
      description: The request body to resend transactions
    broadcastTransactionsBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/broadcast_signed_transactions_request'
      description: The request body to broadcast a list of signed transactions.
    createStakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_request'
      description: The request body to create a staking request.
    createWithdrawActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_withdraw_activity_request'
      description: The request body to create a withdraw activity.
    createUnstakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_unstake_activity_request'
      description: The request body to create a unstaking request.
    createClaimActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_claim_activity_request'
      description: The request body to create a staking request.
    estimateStakeActivityFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_staking_estimation_fee_request'
      description: The request body to get the estimated fee of a staking activity.
    createWebhookEndpointBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_webhook_endpoint_request'
      description: The request body to register a webhook endpoint.
    updateWebhookBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_webhook_endpoint_by_id_request'
      description: The request body to update a webhook endpoint.
    triggerTestEventBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/trigger_test_webhook_event_request'
      description: 'The request body used to trigger a test webhook event. '
    tokenEndpointBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_token_request'
      description: The request body for refreshing an Org Access Token.
      required: true
    createSwapActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_swap_activity_request'
      description: The request body for creating a swap activity.
      required: true
  responses:
    badRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad request. Your request contains malformed syntax or invalid
        parameters.
    unauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized. Please provide valid credentials.
    forbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden. You do not have the permission to access the requested
        resource.
    notFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Requested resources not found.
    tooManyRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Too many requests.
    internalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Internal server error.
    serviceUnavailableError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unknown internal error.
    getChainsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_chains_200_response'
      description: The request was successful.
    getChainByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
      description: The request was successful.
    getAssetsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_assets_for_exchange_200_response'
      description: The request was successful.
    getTokensResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_tokens_200_response'
      description: The request was successful.
    getTokenByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
      description: The request was successful.
    getTokenBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_token_balances_for_address_200_response'
      description: The request was successful.
    getAssetBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_asset_balances_for_exchange_wallet_200_response'
      description: The request was successful.
    getWalletsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_wallets_200_response'
      description: Successfully listed wallets
    getWalletByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successful get a wallet info
    createWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWalletInfo'
      description: The request was successful.
    updateWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successfully updated address
    deleteWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_wallet_by_id_201_response'
      description: The request was successful.
    listUtxoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_utxos_200_response'
      description: The request was successful.
    lockUtxoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_utxos_201_response'
      description: The request was successful.
    maxTransferableValueResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
      description: The request was successful.
    getAddressesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_addresses_200_response'
      description: Successfully listed addresses
    getAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: Successfully listed address information
    createAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: The request was successful.
    checkAddressValidityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/check_address_validity_200_response'
      description: The request was successful.
    checkAddressesValidityResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_addresses_validity_200_response_inner'
            type: array
      description: The request was successful.
    checkAddressChainsValidityResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_address_chains_validity_200_response_inner'
            type: array
      description: The request was successful.
    checkLoopTransfersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_loop_transfers_200_response_inner'
            type: array
      description: The request was successful.
    createKeyShareHolderGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: mpc vault successfully created
    createMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully created project.
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully created the vault.
    getCoboKeyHoldersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyShareHolder'
            type: array
      description: Successfully listed MPC Wallets' key share holder information.
    getKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: Successfully get mpc tss group
    getKeyShareHolderGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_key_share_holder_groups_200_response'
      description: Successfully listed key share holder groups.
    getMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully listed all vaults.
    getMpcProjectsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_mpc_projects_200_response'
      description: Successfully listed all projects.
    getTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully retrieved TSS request.
    getMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully retrieved vault information.
    getMpcVaultsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_mpc_vaults_200_response'
      description: Successfully listed all vaults.
    deleteKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_key_share_holder_group_by_id_201_response'
      description: Successfully deleted the specified key share holder group.
    putKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: Successfully modify mpc tss group
    putTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully modified the TSS request.
    putVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully modify mpc vault
    getExchangeSettingsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_exchanges_200_response_inner'
            type: array
      description: The request was successful.
    getChainsByAssetIdResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ChainInfo'
            type: array
      description: The request was successful.
    getSafeWalletDelegatesResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/CoboSafeDelegate'
            type: array
      description: Delegates successfully retrieved.
    getChainFeeResponse:
      content:
        application/json:
          schema:
            description: "The fee rate for the specified chain or token. \n\nThe `max_priority_fee`\
              \ in the EIP-1559 fee model and the `max_fee_amount` properties in the\
              \ fixed fee model represent the recommended values from the chain.\n"
            items:
              $ref: '#/components/schemas/FeeRate'
            type: array
      description: The request was successful.
    getTransactionsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_transactions_200_response'
      description: The information about the transactions.
    getTransactionByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetail'
      description: The information about a transaction.
    estimateFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
      description: The request was successful.
    transactionFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRequestFee'
      description: Successful get a transaction detail
    createTransactionRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_transfer_transaction_201_response'
      description: The request was successful.
    broadcastTransactionsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/broadcast_signed_transactions_201_response_inner'
            type: array
      description: The request was successful.
    createWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: The request was successful.
    getWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: The request was successful.
    listWebhookEndpointsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_endpoints_200_response'
      description: Successfully listed of webhook endpoints
    updateWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: Update webhook endpoint successfully.
    listWebhookEventsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_events_200_response'
      description: A list of webhook events has been successfully retrieved.
    getWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
      description: The webhook event information is successfully retrieved.
    getWebhookEventDefinitionsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
            type: array
      description: The request was successful.
    retryWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
      description: The request was successful.
    getWebhookEventLogsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_event_logs_200_response'
      description: The request was successful.
    triggerTestWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/trigger_test_webhook_event_201_response'
      description: The request was successful.
    listStakingPoolsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_staking_pools_200_response'
      description: A list of staking pools has been successfully retrieved.
    createActivityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_201_response'
      description: Successfully created a staking activity.
    stakingsDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
      description: A staking position has been successfully retrieved.
    poolDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
      description: A staking pool has been successfully retrieved.
    listStakingsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_stakings_200_response'
      description: A list of staking positions has been successfully retrieved.
    listActivitiesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_staking_activities_200_response'
      description: A list of staking activities have been successfully retrieved.
    estimateStakingFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_staking_estimation_fee_201_response'
      description: The request was successful.
    estimateStakingFeeV2Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EthStakeEstimatedFee'
      description: The request was successful.
    getTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_token_2XX_response'
      description: The request was successful.
    refreshTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_token_2XX_response'
      description: The request was successful.
    oauthErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_token_4XX_response'
      description: Unauthorized. Please provide valid credentials.
    listAddressBooksResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_address_books_200_response'
      description: The information about an address book entry.
    listApiLogsResponse:
      content:
        application/json:
          schema:
            properties:
              data:
                items:
                  $ref: '#/components/schemas/ApiLogSummary'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
            - data
            - pagination
            type: object
      description: The information about API logs.
    getApiLogDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiLogDetails'
      description: The information about an API log.
    getApiKeyInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_api_key_info_200_response'
      description: The API key information.
    listCallbackMessagesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_callback_messages_200_response'
      description: The information about callback messages.
    retryCallbackMessageResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
      description: The request was successful.
    getSwapSummaryResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapSummary'
      description: The summary information of swap activities.
    getSwapActivityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapActivity'
      description: The swap activity details have been successfully retrieved.
    listSwapActivitiesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_swap_activities_200_response'
      description: A list of staking activities have been successfully retrieved.
    listSwapTokenPairsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_enable_token_pairs_200_response'
      description: The supported token pairs have been successfully retrieved.
    getSwapQuoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_quote_201_response'
      description: The swap quote has been successfully retrieved.
  schemas:
    Pagination:
      description: The pagination information of the returned data.
      example:
        before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        total_count: 10000
        after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
      properties:
        before:
          description: "An object ID that serves as a starting point for retrieving\
            \ data in reverse chronological order for the next request. \n\nIf this\
            \ property is empty, it means that you have reached the start of the data\
            \ records.\n"
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          type: string
        after:
          description: |
            An object ID that acts as a starting point for retrieving data in chronological order for the next request.

            If this property is empty, it means that you have reached the end of the data records.
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
          type: string
        total_count:
          description: "The total number of records that match the query criteria,\
            \ unaffected by the pagination parameters (`before` , `after`, and `limit`)."
          example: 10000
          type: integer
      required:
      - after
      - before
      - total_count
      type: object
    ErrorResponse:
      description: The response of a failed request.
      example:
        error_message: error_message
        error_id: 0b6ddf19083c4bd1a9ca01bec44b24dd
        error_code: 0
      properties:
        error_code:
          description: "The error code. Refer to [Error codes and status codes](/v2/api-references/error-codes)\
            \ for more details."
          type: integer
        error_message:
          description: The error description.
          type: string
        error_id:
          description: The error log ID. You can provide the error ID when submitting
            a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
          type: string
      required:
      - error_code
      - error_id
      - error_message
      type: object
    AssetInfo:
      description: The asset information.
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        display_code: USDT
        description: Tether USDT
        asset_id: USDT
      properties:
        asset_id:
          description: The asset ID. An asset ID is the unique identifier of the asset
            held within your linked exchange account.
          example: USDT
          type: string
        display_code:
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
          type: string
        description:
          description: The description of the asset.
          example: Tether USDT
          type: string
        icon_url:
          description: The URL of the asset icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
      required:
      - asset_id
      type: object
    TokenAssetModelType:
      description: |
        The asset model type. Possible values include:

        - `Account`: The account model. This model tracks the balances of user accounts, similar to the traditional banking system.

        - `UTXO`: The UTXO model. This model tracks individual outputs of a transaction rather than account balances. Each transaction consists of inputs (previous UTXOs) and outputs (new UTXOs).
      enum:
      - Account
      - UTXO
      example: Account
      type: string
    TokenInfo:
      description: The token information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        chain_id:
          description: The ID of the chain on which the token operates.
          example: ETH
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        symbol:
          description: "The token symbol, which is the abbreviated name of a token."
          example: USDT
          type: string
        name:
          description: "The token name, which is the full name of a token."
          example: Tether USDT
          type: string
        decimal:
          description: The token decimal.
          example: 18
          type: integer
        icon_url:
          description: The URL of the token icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
        token_address:
          description: "The token address, if applicable."
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
        fee_token_id:
          description: The fee token ID. A fee token is the token with which you pay
            transaction fees.
          example: ETH
          type: string
        can_deposit:
          description: Whether deposits are enabled for this token.
          example: true
          type: boolean
        can_withdraw:
          description: Whether withdrawals are enabled for this token.
          example: true
          type: boolean
        dust_threshold:
          description: |
            The minimum withdrawal amount for Custodial Wallets. If your withdrawal amount is smaller than this threshold, the withdrawal request will receive an error.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfers do not have this limitation.
          example: "0.00000546"
          type: string
        custodial_minimum_deposit_threshold:
          description: |
            The minimum deposit amount for Custodial Wallets. If the amount you deposit to a Custodial Wallet is smaller than this threshold, the deposit will not show up on Cobo Portal or trigger any webhook events.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop)transfers do not have this limitation.
          example: "0.0001"
          type: string
        asset_model_type:
          $ref: '#/components/schemas/TokenAssetModelType'
      required:
      - chain_id
      - token_id
      type: object
    ExtendedTokenInfo:
      allOf:
      - properties:
          can_deposit:
            default: false
            description: |
              Whether the token can be deposited.

              - `true`: The token can be deposited.

              - `false`: The token cannot be deposited.
            example: false
            type: boolean
          can_withdraw:
            default: false
            description: |
              Whether the token can be withdrawn.

              - `true`: The token can be withdrawn.

              - `false`: The token cannot be withdrawn.
            example: false
            type: boolean
        type: object
      - $ref: '#/components/schemas/TokenInfo'
      description: "The token information, including whether the token can be deposited\
        \ or withdrawn."
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        asset_model_type: Account
        symbol: USDT
        chain_id: ETH
        custodial_minimum_deposit_threshold: "0.0001"
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
        dust_threshold: "0.00000546"
        can_deposit: true
        fee_token_id: ETH
        token_id: ETH_USDT
        name: Tether USDT
        can_withdraw: true
        decimal: 18
      type: object
    ChainInfo:
      description: The chain information.
      example:
        icon_url: https://d.cobo.com/public/logos/ETH.png
        symbol: ETH
        chain_id: ETH
        require_memo: false
        confirming_threshold: 15
        explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
        explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        symbol:
          description: "The chain symbol, which is the abbreviated name of a chain."
          example: ETH
          type: string
        icon_url:
          description: The URL of the chain icon.
          example: https://d.cobo.com/public/logos/ETH.png
          type: string
        explorer_tx_url:
          description: The transaction URL pattern on the blockchain explorer. You
            can use it to concatenate the transaction URLs.
          example: "https://etherscan.io/tx/{txn_id}"
          type: string
        explorer_address_url:
          description: The address URL pattern on the blockchain explorer. You can
            use it to concatenate the address URLs.
          example: "https://etherscan.io/address/{address}"
          type: string
        require_memo:
          description: Whether the chain requires a memo.
          example: false
          type: boolean
        confirming_threshold:
          description: "The number of confirmations required for an on-chain transaction,\
            \ such as 64 for Ethereum."
          example: 15
          format: int32
          type: integer
      required:
      - chain_id
      type: object
    WalletType:
      description: |
        The wallet type. Possible values include:

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      enum:
      - Custodial
      - MPC
      - SmartContract
      - Exchange
      example: Custodial
      type: string
    WalletSubtype:
      description: |
        The wallet sub-type. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3 Wallets).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).

        Each wallet sub-type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Asset
      - Web3
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      - Main
      - Sub
      example: Asset
      type: string
    SmartContractWalletType:
      default: "Safe{Wallet}"
      description: The Smart Contract Wallet type.
      enum:
      - "Safe{Wallet}"
      example: "Safe{Wallet}"
      type: string
    SmartContractWalletOperationType:
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
      enum:
      - CoboSafe
      example: CoboSafe
      type: string
    SmartContractInitiator:
      description: The information about the initiator.
      properties:
        wallet_id:
          description: The initiator's wallet ID.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        address:
          description: 'The initiator''s wallet address. '
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - address
      - wallet_id
      title: Initiator Wallets
      type: object
    ExchangeId:
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      enum:
      - binance
      - okx
      - deribit
      - bybit
      - gate
      - bitget
      - bitmart
      - bitfinex
      example: binance
      type: string
    TokenBalance:
      description: The balance information.
      example:
        token_id: BTC
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance_balance'
      required:
      - balance
      - token_id
      type: object
    AssetBalance:
      description: The data for asset balance information.
      properties:
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
      required:
      - asset_id
      - balance
      type: object
    SubWalletAssetBalance:
      description: The information about the asset balance of a trading account.
      example:
        trading_account_type: Spot
        balance: "{}"
        asset_id: USDT
      properties:
        trading_account_type:
          description: The trading account type.
          example: Spot
          type: string
        asset_id:
          description: The asset ID. An asset ID is the unique identifier of the asset
            held within your linked exchange account.
          example: USDT
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
      required:
      - asset_id
      - balance
      type: object
    SafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - properties:
            chain_id:
              description: The ID of the chain on which the wallet operates.
              example: ETH
              type: string
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: The Smart Contract Wallet address.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: The signers of the Smart Contract Wallet.
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: 'The minimum number of confirmations required for the Smart
              Contract Wallet. '
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: The address of Cobo Safe.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SmartContractInitiator'
        required:
        - smart_contract_wallet_type
        title: Safe Wallets
        type: object
    CustodialWalletInfo:
      description: The basic information of a wallet.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_subtype: Asset
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name: Example Wallet
        wallet_type: Custodial
      properties:
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
        org_id:
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - name
      - org_id
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    MPCWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          project_id:
            description: The project ID.
            example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
            type: string
          project_name:
            description: The project name.
            example: Project name
            type: string
          vault_id:
            description: The ID of the owning vault.
            type: string
          vault_name:
            description: The vault name.
            example: Vault name
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    SmartContractWalletInfo:
      discriminator:
        mapping:
          Safe{Wallet}: '#/components/schemas/SafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/SafeWallet'
      title: Smart Contract Wallets
    ExchangeWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          main_wallet_id:
            description: The wallet ID of the Main Account associated with the Sub
              Account. This property is returned only if you are creating or querying
              an Exchange Wallet (Sub Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            format: uuid
            type: string
        required:
        - apikey
        - exchange_id
        type: object
      title: Exchange Wallets
    WalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/SmartContractWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    UTXO:
      description: The UTXO information.
      example:
        is_locked: false
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_id: BTC
        is_coinbase: false
        vout_n: 0
        tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        value: "0.5"
        confirmed_number: 66716
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
        address:
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token."
          example: BTC
          type: string
        value:
          description: The value of the UTXO.
          example: "0.5"
          type: string
        is_coinbase:
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
          type: boolean
        is_locked:
          description: Whether the UTXO is locked.
          example: false
          type: boolean
        confirmed_number:
          description: The number of confirmations for the UTXO.
          example: 66716
          type: integer
      type: object
    MaxTransferableValue:
      description: "The maximum amount you can transfer from the wallet or the specified\
        \ wallet address, along with the corresponding transaction fee."
      example:
        token_id: ETH
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        max_transferable_value: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH
          type: string
        max_transferable_value:
          description: The maximum amount you can transfer from the wallet or the
            specified wallet address.
          example: "3.0"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      type: object
    AddressInfo:
      description: The address information.
      example:
        path: m/44/0/2/0/0
        address: 0x0000000000000000000000000000000000000000
        chain_id: ETH
        x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
        memo: "82840924"
        taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
        taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
        encoding: ENCODING_P2PKH
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
      properties:
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        memo:
          description: The memo code.
          example: "82840924"
          type: string
        path:
          description: "The derivation path of the address. This property applies\
            \ to MPC Wallets only. To learn the meaning of each level in the path,\
            \ see [Path levels](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels)."
          example: m/44/0/2/0/0
          type: string
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          description: The public key of the address. This property applies to MPC
            Wallets only.
          example: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
          type: string
        x_only_pubkey:
          description: The 32-byte x-only public key in hexadecimal format after tweaking.
          example: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          type: string
        root_pubkey:
          description: The root public key of the address. This property applies to
            MPC Wallets only.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        taproot_script_tree_hash:
          description: The information about the new address.
          example: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          type: string
        taproot_internal_address:
          description: The Taproot address before tweaking.
          example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          type: string
      required:
      - address
      - chain_id
      type: object
    AddressEncoding:
      description: The address encoding formats. This property only applies to blockchains
        that have a similar architecture to Bitcoin.
      enum:
      - ENCODING_P2PKH
      - ENCODING_P2SH_P2WPKH
      - ENCODING_BECH32
      - ENCODING_P2PKH_UNCOMPRESSED
      - ENCODING_P2SH_P2MS
      - ENCODING_P2SH_P2WSH_P2MS
      - ENCODING_P2TR
      example: ENCODING_P2PKH
      type: string
    CreateCustodialWalletParams:
      description: The information of Custodial Wallets.
      example:
        wallet_subtype: Asset
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
      properties:
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
      required:
      - name
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    CreateMpcWalletParams:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - properties:
          vault_id:
            description: "The ID of the owning vault. You can call [List all vaults](/v2/api-references/wallets--mpc-wallets/list-all-vaults)\
              \ to retrieve all vault IDs under your organization."
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    CreateSmartContractWalletParams:
      discriminator:
        mapping:
          Safe{Wallet}: '#/components/schemas/CreateSafeWalletParams'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateSafeWalletParams'
      title: Smart Contract Wallets
    CreateSafeWalletParams:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - properties:
            chain_id:
              description: The ID of the chain that the wallet operates on.
              example: ETH
              type: string
          required:
          - chain_id
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: "The address of the Smart Contract Wallet. If this is not\
              \ provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe\
              \ for you. In that case, the `threshold` and `signers` properties are\
              \ required."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: "The signers of the Smart Contract Wallet. This property\
              \ is required when creating a new Safe{Wallet}."
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: "The minimum number of confirmations required for the Smart\
              \ Contract Wallet. This property is required when creating a new Safe{Wallet}."
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: "The address of Cobo Safe. If you are importing an existing\
              \ Safe{Wallet}, Cobo Safe must have been created and enabled."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SmartContractInitiator'
        required:
        - smart_contract_wallet_type
        type: object
    CreateExchangeWalletParams:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - properties:
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          secret:
            description: The API secret of your exchange account.
            example: 75B4F636193162488A3728B4A5797708
            type: string
          passphrase:
            description: The passphrase of your exchange account.
            example: sXASDKWKLLsWWEE
            type: string
          memo:
            description: The memo you use when applying for the API key of your exchange
              account.
            example: xxx@cobo.com
            type: string
          account_identify:
            description: |
              The identifier of your exchange account.
              - For Binance, this is email address of your exchange account.
              - For OKX, this is the user name of your exchange account.
            example: xxx@cobo.com
            type: string
          ga_code:
            description: The GA code for the exchange.
            example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            type: string
          main_wallet_id:
            description: The ID of the Exchange Wallet (Main Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
        required:
        - apikey
        - exchange_id
        - secret
        type: object
      title: Exchange Wallets
    CreateWalletParams:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWalletParams'
          MPC: '#/components/schemas/CreateMpcWalletParams'
          Exchange: '#/components/schemas/CreateExchangeWalletParams'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - $ref: '#/components/schemas/CreateMpcWalletParams'
      - $ref: '#/components/schemas/CreateExchangeWalletParams'
    CreatedWalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    UpdateCustodialWalletParams:
      description: The information of Custodial Wallets.
      example:
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - wallet_type
      title: Custodial Wallets
      type: object
    UpdateMpcWalletParams:
      description: The information of MPC Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - wallet_type
      title: MPC Wallets
      type: object
    UpdateSmartContractWalletParams:
      description: The information of Smart Contract Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - wallet_type
      title: Smart Contract Wallets
      type: object
    UpdateExchangeWalletParams:
      description: The information of Exchange Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
      required:
      - wallet_type
      title: Exchange Wallets
      type: object
    UpdateWalletParams:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/UpdateCustodialWalletParams'
          MPC: '#/components/schemas/UpdateMpcWalletParams'
          SmartContract: '#/components/schemas/UpdateSmartContractWalletParams'
          Exchange: '#/components/schemas/UpdateExchangeWalletParams'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/UpdateCustodialWalletParams'
      - $ref: '#/components/schemas/UpdateMpcWalletParams'
      - $ref: '#/components/schemas/UpdateSmartContractWalletParams'
      - $ref: '#/components/schemas/UpdateExchangeWalletParams'
    SafeWalletDelegatesContractCall:
      example:
        address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
        request_type: Transfer
        calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        value: "1.5"
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
      required:
      - request_type
      title: Contract Call by Delegates
      type: object
    SafeWalletDelegatesTransfer:
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        token_id:
          description: The token ID.
          example: ETH
          type: string
        amount:
          description: "The transfer amount. For example, if you trade 1.5 ETH, then\
            \ the value is `1.5`."
          example: "0.1"
          type: string
        address:
          description: The address of the recipient.
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - request_type
      - token_id
      title: Transfer by Delegates
      type: object
    SafeWalletDelegates:
      discriminator:
        mapping:
          ContractCall: '#/components/schemas/SafeWalletDelegatesContractCall'
          Transfer: '#/components/schemas/SafeWalletDelegatesTransfer'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/SafeWalletDelegatesContractCall'
      - $ref: '#/components/schemas/SafeWalletDelegatesTransfer'
    OrgInfo:
      description: |
        [organization](https://manuals.cobo.com/en/portal/organization/introduction).
      properties:
        org_id:
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        name:
          description: The organization name.
          example: Org name
          type: string
        created_timestamp:
          description: "The organization's creation time in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      required:
      - org_id
      type: object
    CurveType:
      description: |
        The elliptic curve type of the [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key). Possible values include:

        - `SECP256K1`: The secp256k1 elliptic curve.

        - `ED25519`: The Ed25519 elliptic curve.
      enum:
      - SECP256K1
      - ED25519
      example: SECP256K1
      type: string
    KeyShareHolderGroup:
      description: The data for key share holder group information.
      example:
        key_share_holders:
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
        key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
        tss_key_share_groups:
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
        threshold: 2
        created_timestamp: 1718619403933
        type: MainGroup
        participants: 3
        status: Valid
      properties:
        key_share_holder_group_id:
          description: The key share holder group ID.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        tss_key_share_groups:
          items:
            $ref: '#/components/schemas/TSSGroups'
          type: array
        key_share_holders:
          items:
            $ref: '#/components/schemas/KeyShareHolder'
          type: array
        participants:
          description: The number of key share holders in this key share holder group.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to approve each operation
            in this key share holder group.
          example: 2
          type: integer
        status:
          $ref: '#/components/schemas/KeyShareHolderGroupStatus'
        created_timestamp:
          description: "The key share holder group's creation time in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    KeyShareHolderGroupStatus:
      description: |
        The status of the key share holder group. Possible values include:
        - `New`: The key share holder group has been newly created. The status will become `Valid` after you call [Create TSS request](/v2/api-references/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) and specifying this key share holder group as the target key share holder group.

        - `Valid`: The key share holder group is valid.

        - `Unavailable`: The key share holder group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone.
      enum:
      - New
      - Valid
      - Unavailable
      example: Valid
      type: string
    KeyShareHolderGroupType:
      description: |
        The type of key share holder group. Possible values include:

        - `MainGroup`: A [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `SigningGroup`: A [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `RecoveryGroup`: A [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        **Note:** For `MainGroup` and `SigningGroup`, a Cobo key share holder will be added automatically.
      enum:
      - MainGroup
      - SigningGroup
      - RecoveryGroup
      example: MainGroup
      type: string
    CreateKeyShareHolder:
      description: "When creating MainKeyGroup and SigningKeyGroup, the Cobo key share\
        \ holder will be added automatically."
      properties:
        name:
          description: Key share holder's name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          description: "Key share holder's TSS Node ID. You can obtain the TSS Node\
            \ ID using either mobile co-signer or API co-signer. See the \"Primary\
            \ Purposes\" row on the table in [Create a Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group)."
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        signer:
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
          example: true
          type: boolean
      type: object
    KeyShareHolder:
      description: The data for MPC Wallets' key share holder information.
      example:
        account_id: auth0|cobo|839305394802991371
        name: Key share holder name
        tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        online: true
        type: API
        signer: true
        status: Valid
      properties:
        name:
          description: The key share holder name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          description: The key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        online:
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
          type: boolean
        signer:
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
          example: true
          type: boolean
        status:
          $ref: '#/components/schemas/KeyShareHolderStatus'
        account_id:
          description: The key share holder's Cobo Portal account ID.
          example: auth0|cobo|839305394802991371
          type: string
      type: object
    KeyShareHolderStatus:
      description: |
        The status of key share holder's TSS Node. Possible values include:
        - `Valid`: The TSS Node is configured and activated.

        - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](/v2/api-references/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted.
      enum:
      - Valid
      - NotConfigured
      - NotActivated
      - Changed
      example: Valid
      type: string
    KeyShareHolderType:
      description: |
        The key share holder's TSS Node type. Possible values include:

        - `Cobo`: The TSS Node is generated and held by Cobo.

        - `Mobile`: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `API`: The TSS Node is generated and held by an [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment).
      enum:
      - Cobo
      - Mobile
      - API
      example: API
      type: string
    MPCVault:
      description: The data for vault information.
      example:
        root_pubkeys:
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        name: Vault name
        created_timestamp: 1718619403933
        type: Org-Controlled
        vault_id: YPdbyVaVGqXXjkUsohHw
      properties:
        vault_id:
          description: The vault ID.
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        project_id:
          description: The project ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The vault name.
          example: Vault name
          type: string
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          items:
            $ref: '#/components/schemas/RootPubkey'
          type: array
        created_timestamp:
          description: "The vault's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    MPCVaultType:
      description: |
        The vault type. Possible values include:
        - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

        - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
      enum:
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    MPCProject:
      description: The data for project information.
      example:
        project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
        name: Project name
        threshold: 2
        created_timestamp: 1718619403933
        participants: 3
      properties:
        project_id:
          description: The project ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        org_id:
          description: "The [organization](https://manuals.cobo.com/en/portal/organization/introduction)\
            \ ID."
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          type: string
        name:
          description: The project name.
          example: Project name
          type: string
        participants:
          description: The number of key share holders in the project.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to sign an operation
            in the project.
          example: 2
          type: integer
        created_timestamp:
          description: "The project's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    RootPubkey:
      description: The data for MPC Root Extended Public Key information.
      example:
        curve: SECP256K1
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        root_pubkey:
          description: "The vault's [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key)."
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSGroups:
      description: The data for the TSS key share group ID.
      example:
        curve: SECP256K1
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
      properties:
        tss_key_share_group_id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
        root_pubkey:
          description: "The vault's [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key)."
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
      type: object
    TSSRequest:
      description: The information about the TSS request.
      example:
        description: This is a request to create key shares using the Recovery Group
          for a key share holder in the Main Group if their key share has been lost
          (e.g. by losing their phone).
        created_timestamp: 1701396866000
        tss_request_id: "20240711114129000132315000003970"
        type: Recovery
        source_key_share_holder_group:
          key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          tss_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
        status: Success
      properties:
        tss_request_id:
          description: The TSS request ID.
          example: "20240711114129000132315000003970"
          type: string
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        target_key_share_holder_group_id:
          description: The target key share holder group ID.
          example: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          type: string
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
        description:
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          type: string
        created_timestamp:
          description: "The TSS request's creation time in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
      type: object
    TSSRequestStatus:
      description: "The TSS request status. Possible values include:\n- `PendingKeyHolderConfirmation`:\
        \ The action done to the TSS request is currently pending enough key share\
        \ holders to approve.\n\n- `KeyHolderConfirmationFailed`: Key share holders\
        \ failed to approve the the action to be done to the TSS request.\n\n- `KeyGenerating`:\
        \ The key share is currently being generated for the action to be done to\
        \ the TSS request.\n\n- `MPCProcessing`: The TSS request approval is waiting\
        \ to be started. \n  - For [MPC Wallets (User-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction),\
        \ you need to use the Client App and call the UCW SDK to start the TSS request\
        \ approval process.\n  - For [MPC Wallets (Organization-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction):\n\
        \    - If you are using the [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group),\
        \ this status indicates that the TSS Node will soon request the callback server\
        \ to start the [risk controls](https://manuals.cobo.com/en/portal/risk-controls/introduction)\
        \ check. No further action is required from you at this stage.\n    - If you\
        \ are using the [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group),\
        \ key share holders need to use their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction)\
        \ to approve the TSS request and participate in the signing process.\n\n-\
        \ `KeyGeneratingFailed`: The key share generation process has failed for the\
        \ action to be done to the TSS request.\n\n- `Success`: The action done to\
        \ the TSS request has been completed successfully. If you see this status\
        \ while running [Cancel TSS request](/v2/api-references/wallets--mpc-wallets/cancel-tss-request),\
        \ this mean the specified TSS request has been successfully canceled.\n"
      enum:
      - PendingKeyHolderConfirmation
      - KeyHolderConfirmationFailed
      - KeyGenerating
      - MPCProcessing
      - KeyGeneratingFailed
      - Success
      example: Success
      type: string
    TSSRequestType:
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key) and key shares for your [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created the Main Group with [Create key share holder group](/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group). You only need to do this once per [organization](https://manuals.cobo.com/en/portal/organization/introduction).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create key shares for your [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) or [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created these key share holder groups with [Create key share holder group](/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group).

        - `Recovery`: This is a request to create key shares using the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) for a key share holder in the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if their key share has been lost (e.g. by losing their phone).
      enum:
      - KeyGen
      - KeyGenFromKeyGroup
      - Recovery
      example: Recovery
      type: string
    UpdateGroupAction:
      description: |
        The available actions of key share holder group update. Possible values include:
        - `UpgradeToMainGroup`: This upgrades an active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). The original Main Group will be permanently deleted.
      enum:
      - UpgradeToMainGroup
      example: UpgradeToMainGroup
      type: string
    SourceGroup:
      description: |
        The source key share holder group.

        **Note:** `source_key_share_holder_group` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the `target_key_share_holder_group`.
      example:
        key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        tss_node_ids:
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
      properties:
        key_share_holder_group_id:
          description: The source key share holder group ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        tss_node_ids:
          description: "The TSS Node IDs participating in creating a new key share\
            \ holder group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`.\
            \ \n\n**Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ such as the 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\"\
            \ format), for `tss_node_ids`, you only need to fill in 1 Cobo TSS Node\
            \ ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers\
            \ specified in `threshold`. To obtain the Cobo TSS Node ID, run [List\
            \ all Cobo key share holders](/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders).\n"
          items:
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      required:
      - key_share_holder_group_id
      type: object
    FeeType:
      default: EVM_EIP_1559
      description: "The fee model. Possible values include:\n- `Fixed`: The fixed\
        \ fee model. \n- `EVM_EIP_1559`: The EIP-1559 fee model.\n- `EVM_Legacy`:\
        \ The legacy fee model.\n- `UTXO`: The fee model used in UTXO-based blockchains,\
        \ such as Bitcoin.\n\nEach fee model requires a different set of properties.\
        \ Switch between the above tabs for details.\n\nTo learn more about the fee\
        \ models, refer to [Fee models](/v2/guides/transactions/estimate-fees#fee-models).\n"
      enum:
      - Fixed
      - EVM_EIP_1559
      - EVM_Legacy
      - UTXO
      example: EVM_EIP_1559
      type: string
    FeeAmount:
      description: The transaction fee.
      properties:
        fee_amount:
          description: The transaction fee that you need to pay for the transaction.
          example: "0.1"
          type: string
      type: object
    MaxFeeAmount:
      description: The maximum transaction fee.
      properties:
        max_fee_amount:
          description: The maximum fee that you are willing to pay for the transaction.
            The transaction will fail if the transaction fee exceeds the maximum fee.
          example: "0.1"
          type: string
      type: object
    FeeGasLimit:
      properties:
        gas_limit:
          description: The gas limit. It represents the maximum number of gas units
            that you are willing to pay for the execution of a transaction or Ethereum
            Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          example: "21000"
          type: string
      type: object
    EvmEip1559FeeBasePrice:
      description: The transaction gas price based on the EIP-1559 fee model.
      properties:
        max_fee_per_gas:
          description: "The maximum gas fee per gas unit used on the chain, in wei."
          example: "9000000000000"
          type: string
        max_priority_fee_per_gas:
          description: "The maximum priority fee per gas unit used, in wei. The maximum\
            \ priority fee represents the highest amount of miner tips that you are\
            \ willing to pay for your transaction."
          example: "1000000000000"
          type: string
      type: object
    EvmLegacyFeeBasePrice:
      description: The transaction gas price based on the legacy fee model.
      properties:
        gas_price:
          description: "The gas price, in wei. The gas price represents the amount\
            \ of ETH that must be paid to validators for processing transactions per\
            \ gas unit used."
          example: "100000000"
          type: string
      type: object
    UtxoFeeBasePrice:
      description: The transaction fee rate for UTXO-based chains (such as Bitcoin).
      properties:
        fee_rate:
          description: The fee rate in sat/vByte. The fee rate represents the satoshis
            you are willing to pay for each byte of data that your transaction will
            consume on the blockchain.
          example: "50"
          type: string
      type: object
    EvmEip1559FeeRate:
      description: The transaction fee rate based on the EIP-1559 fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
        recommended:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
        fast:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
      required:
      - fee_type
      - recommended
      - token_id
      title: EIP-1559 Fee Rate
      type: object
    EvmLegacyFeeRate:
      description: The transaction fee rate based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
        recommended:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
        fast:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
      required:
      - fee_type
      - recommended
      - token_id
      title: Legacy Fee Rate
      type: object
    UtxoFeeRate:
      description: The transaction fee rate for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: BTC
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
        recommended:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
        fast:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
      required:
      - fee_type
      - recommended
      - token_id
      title: UTXO Fee Rate
      type: object
    FixedFeeRate:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The transaction fee that you need to pay based on the fixed fee
        model for some blockchains. The fee can vary between different chains.
      required:
      - fee_type
      - token_id
      title: Fixed
      type: object
    FeeRate:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/FixedFeeRate:'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeeRate:'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeeRate:'
          UTXO: '#/components/schemas/UtxoFeeRate:'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/FixedFeeRate'
      - $ref: '#/components/schemas/EvmEip1559FeeRate'
      - $ref: '#/components/schemas/EvmLegacyFeeRate'
      - $ref: '#/components/schemas/UtxoFeeRate'
    EstimatedFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
          is_loop:
            description: |
              Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction was executed as a Cobo Loop transfer.
              - `false`: The transaction was not executed as a Cobo Loop transfer.
            example: false
            type: boolean
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The estimated transaction fee based on the fixed fee model.
      example:
        is_loop: false
        fee_amount: "0.1"
        token_id: TRON
        fee_type: EVM_EIP_1559
      required:
      - fee_amount
      - fee_type
      - token_id
      title: Fixed (Estimated)
      type: object
    EstimatedEvmEip1559Fee:
      description: The estimated transaction fee based on the EIP-1559 fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: EIP-1559 (Estimated)
      type: object
    EstimatedEvmLegacyFee:
      description: The estimated transaction fee based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: Legacy (Estimated)
      type: object
    EstimatedUtxoFee:
      description: The estimated transaction fee for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: BTC
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: UTXO (Estimated)
      type: object
    EstimatedFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/EstimatedFixedFee'
          EVM_EIP_1559: '#/components/schemas/EstimatedEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EstimatedEvmLegacyFee'
          UTXO: '#/components/schemas/EstimatedUtxoFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EstimatedFixedFee'
      - $ref: '#/components/schemas/EstimatedEvmEip1559Fee'
      - $ref: '#/components/schemas/EstimatedEvmLegacyFee'
      - $ref: '#/components/schemas/EstimatedUtxoFee'
    TransactionRequestFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
        type: object
      - $ref: '#/components/schemas/MaxFeeAmount'
      description: |
        The preset properties to limit transaction fee.

        In the fixed fee model, the transaction fee is a fixed amount within a certain amount of period regardless of the transaction size or network congestion, which can vary between different chains. For more information about the fixed fee model, refer to [Fee models](/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      example:
        max_fee_amount: "0.1"
        token_id: TRON
        fee_type: EVM_EIP_1559
      required:
      - fee_type
      - token_id
      title: Fixed (Preset)
      type: object
    TransactionRequestEvmEip1559Fee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          gas_limit:
            description: The gas limit. It represents the maximum number of gas units
              that you are willing to pay for the execution of a transaction or Ethereum
              Virtual Machine (EVM) operation. The gas unit cost of each operation
              varies.
            example: "21000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      description: "The preset properties to limit transaction fee.\n\nIn the EIP-1559\
        \ fee model, the transaction fee is calculated by multiplying the gas price\
        \ and the gas units used by the transaction. This can be expressed as: Transaction\
        \ fee = gas price * gas units used. For more information about the EIP-1559\
        \ fee model, refer to [Fee models](/v2/guides/transactions/estimate-fees#fee-models).\n\
        \nYou can specify the maximum gas fee per gas unit, maximum priority fee per\
        \ gas unit, and the gas limit to limit the gas price, priority fee per gas\
        \ unit, gas units used in the transaction. \n\nSwitch between the tabs to\
        \ display the properties for different transaction fee models.\n"
      required:
      - fee_type
      - max_fee_per_gas
      - max_priority_fee_per_gas
      - token_id
      title: EIP-1559 (Preset)
      type: object
    TransactionRequestEvmLegacyFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          gas_limit:
            description: The gas limit. It represents the maximum number of gas units
              that you are willing to pay for the execution of a transaction or Ethereum
              Virtual Machine (EVM) operation. The gas unit cost of each operation
              varies.
            example: "21000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      description: |
        The preset properties to limit transaction fee.

        In the legacy fee model, the transaction fee is calculated by multiplying the gas price by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). For more information about the legacy fee model, refer to [Fee models](/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the gas limit to limit the gas units used in the transaction.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      - gas_price
      - token_id
      title: Legacy (Preset)
      type: object
    TransactionRequestUtxoFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          max_fee_amount:
            description: The maximum fee that you are willing to pay for the transaction.
              The transaction will fail if the transaction fee exceeds the maximum
              fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      description: |
        The preset properties to limit transaction fee.

        In the UTXO fee model, the transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. For more information about the UTXO fee model, see [Fee models](/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_rate
      - fee_type
      - token_id
      title: UTXO (Preset)
      type: object
    TransactionRequestFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/TransactionRequestFixedFee'
          EVM_EIP_1559: '#/components/schemas/TransactionRequestEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionRequestEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionRequestUtxoFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/TransactionRequestFixedFee'
      - $ref: '#/components/schemas/TransactionRequestEvmEip1559Fee'
      - $ref: '#/components/schemas/TransactionRequestEvmLegacyFee'
      - $ref: '#/components/schemas/TransactionRequestUtxoFee'
    Transaction:
      description: The information about a transaction.
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Address
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        raw_tx_info:
          selected_utxos:
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
      properties:
        transaction_id:
          description: The transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        cobo_id:
          description: "The Cobo ID, which can be used to track a transaction."
          example: "20231213122855000000000000000000"
          type: string
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
          type: string
        wallet_id:
          description: "For deposit transactions, this property represents the wallet\
            \ ID of the transaction destination. For transactions of other types,\
            \ this property represents the wallet ID of the transaction source."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          description: (This property is applicable to approval failures and signature
            failures only) The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        source:
          $ref: '#/components/schemas/Transaction_source'
        destination:
          $ref: '#/components/schemas/Transaction_destination'
        result:
          $ref: '#/components/schemas/TransactionResult'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          description: The transaction initiator.
          example: "API Prod Key #1"
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          description: The number of confirmations this transaction has received.
          example: 12
          format: int32
          type: integer
        confirming_threshold:
          description: The minimum number of confirmations required to deem a transaction
            secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
          format: int32
          type: integer
        transaction_hash:
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        block_info:
          $ref: '#/components/schemas/TransactionBlockInfo'
        raw_tx_info:
          $ref: '#/components/schemas/TransactionRawTxInfo'
        replacement:
          $ref: '#/components/schemas/Transaction_replacement'
        category:
          description: A custom transaction category for you to identify your transfers
            more easily.
          items:
            $ref: '#/components/schemas/TransactionCategory'
          type: array
        description:
          description: The description for your transaction.
          example: withdrawal to exchange trading account
          type: string
        is_loop:
          description: |
            Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
            - `true`: The transaction was executed as a Cobo Loop transfer.
            - `false`: The transaction was not executed as a Cobo Loop transfer.
          example: false
          type: boolean
        created_timestamp:
          description: "The time when the transaction was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the transaction was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - created_time
      - destination
      - initiator_type
      - source
      - status
      - transaction_id
      - transaction_type
      - updated_time
      - wallet_id
      type: object
    TransactionDetail:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Address
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        timeline:
        - finished_timestamp: 1610445878970
          finished: true
          status: Submitted
        - finished_timestamp: 1610445878970
          finished: true
          status: Submitted
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        raw_tx_info:
          selected_utxos:
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
    TransactionApprover:
      description: The approver data for transaction.
      properties:
        name:
          description: The approver name of the transaction.
          example: "Approver #1"
          type: string
        status:
          description: The approval status.
          enum:
          - Pending
          - Approved
          - Rejected
          example: Pending
          type: string
      type: object
    TransactionTokenAmount:
      description: The data for transaction asset information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        amount:
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          example: "1.5"
          format: float
          type: string
      required:
      - amount
      - asset_id
      type: object
    TransactionCategory:
      description: A custom transaction category for you to identify your transfers
        more easily.
      example: Payment
      type: string
    TransactionDetails:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          initiator:
            description: Transaction initiator
            example: "API Prod Key #1"
            type: string
          approvers:
            items:
              $ref: '#/components/schemas/TransactionApprover'
            type: array
          signers:
            items:
              $ref: '#/components/schemas/TransactionSigner'
            type: array
          nonce:
            description: Transaction nonce
            example: 9
            type: integer
          replaced_by:
            description: Replace by transaction hash
            example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            type: string
          fee:
            $ref: '#/components/schemas/TransactionRequestFee'
          fueled_by:
            description: Fueled by address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          confirmed_num:
            description: Transaction confirmed number
            example: 12
            type: integer
          confirming_threshold:
            description: "Number of confirmations required for a transaction, such\
              \ as 15 for ETH chain."
            example: 15
            format: int32
            type: integer
          token_approval:
            $ref: '#/components/schemas/TransactionTokeApproval'
          message:
            description: Transaction raw message
            example: this to certify that am owner this wallet address
            type: string
          algorithm:
            description: Transaction message signing algorithm
            type: string
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
    TransactionInitiatorType:
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
      enum:
      - API
      - Web
      - App
      - External
      example: API
      type: string
    TransactionSigner:
      description: The signer data for transaction.
      properties:
        signer:
          description: The signer name of the transaction.
          example: Cobo TSS
          type: string
        status:
          description: The signing status.
          enum:
          - Pending
          - Signed
          - Timeout
          - Rejected
          example: Signed
          type: string
        failed_reason:
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
          type: string
      type: object
    TransactionStatus:
      description: "The transaction status. Possible values include: \n  - `Submitted`:\
        \ The transaction is submitted.\n  - `PendingScreening`: The transaction is\
        \ pending screening by Risk Control. \n  - `PendingAuthorization`: The transaction\
        \ is pending approvals.\n  - `PendingSignature`: The transaction is pending\
        \ signature. \n  - `Broadcasting`: The transaction is being broadcast.\n \
        \ - `Confirming`: The transaction is waiting for the required number of confirmations.\n\
        \  - `Completed`: The transaction is completed.\n  - `Failed`: The transaction\
        \ failed.\n  - `Rejected`: The transaction is rejected.\n  - `Pending`: The\
        \ transaction is waiting to be included in the next block of the blockchain.\n"
      enum:
      - Submitted
      - PendingScreening
      - PendingAuthorization
      - PendingSignature
      - Broadcasting
      - Confirming
      - Completed
      - Failed
      - Rejected
      - Pending
      example: Submitted
      type: string
    TransactionSubStatus:
      description: "The transaction sub-status. Possible values include: \n  - `PendingDoubleCheck`:\
        \ The transaction is pending a double check. \n  - `RejectedDoubleCheck`:\
        \ The transaction is rejected because it failed a double check.\n  - `PendingSpenderCheck`:\
        \ The transaction is pending a spender check.\n  - `RejectedSpenderAuth`:\
        \ The transaction is rejected by the spender.\n  - `PendingTravelRuleCheck`:\
        \ The transaction is undergoing a Travel Rule check.\n  - `PendingTravelRuleInfo`:\
        \ The transaction is awaiting users to provide information related to the\
        \ Travel Rule.\n  - `RejectedTravelRule`: The transaction is rejected because\
        \ it failed to comply with the Travel Rule.\n  - `RejectedTravelRuleDueToCompliance`:\
        \ The transaction is rejected because it failed the cross-check of the Travel\
        \ Rule. \n  - `RejectedTravelRuleDueToUnsupportedToken`: The transaction is\
        \ rejected because the token is not supported by the Travel Rule.\n  - `PendingRiskControlCheck`:\
        \ The transaction is pending for a Risk Control check.\n  - `PendingApproverCheck`:\
        \ The transaction is pending approval from the approver.\n  - `RejectedApproverAuth`:\
        \ The transaction is rejected by the approver.\n  - `RejectedbyMobileCosigner`:\
        \ The transaction is rejected by a mobile cosigner.\n  - `RejectedCoboCheck`:\
        \ The transaction is rejected because it failed the internal check by Cobo.\n\
        \  - `RejectedWhiteList`: The transaction is rejected because the sender or\
        \ receiver is not included in a whitelist.\n  - `PendingWaitSigner`: The transaction\
        \ is pending signature.\n  - `PendingApprovalStart`: The transaction approval\
        \ is waiting to be started.      \n    - For [MPC Wallets (User-Controlled\
        \ Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction),\
        \ you need to use the Client App and call the UCW SDK to start the transaction\
        \ approval process.\n    - For [MPC Wallets (Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction)):\n\
        \      - If you are using the [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups),\
        \ this status indicates that the TSS Node will soon request the callback server\
        \ to start the [risk controls](https://manuals.cobo.com/en/portal/risk-controls/introduction)\
        \ check. No further action is required from you at this stage.\n      - If\
        \ you are using the [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups),\
        \ key share holders need to use their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction)\
        \ to approve the transaction and participate in the signing process.\n  -\
        \ `FailedBySigner`: The transaction failed during the signing process.\n \
        \ - `SignatureVerificationSuccess`: The transaction's signature has been successfully\
        \ verified.\n  - `SignatureVerificationFailed`: The transaction's signature\
        \ failed verification.\n  - `FailedBroadcasting`: The transaction failed to\
        \ be broadcast to the blockchain network.\n  - `CanceledBySpender`: The transaction\
        \ is canceled by a Spender.\n  - `CanceledByAPI`: The transaction is canceled\
        \ by a [Cancel transaction](/v2/api-references/transactions/cancel-transaction)\
        \ operation.\n  - `Queue`: The transaction is queued to be processed by Cobo\
        \ Portal.\n  - `Reverting`: The transaction is being reverted due to failure\
        \ on the blockchain.\n  - `OnchainRejection`: The transaction is rejected\
        \ from being added to the blockchain.\n  - `FailedOnChain`: The transaction\
        \ failed on the blockchain.\n  - `PendingBlockConfirmations`: The transaction\
        \ is awaiting the required number of confirmations.\n  - `ReplacedByNewTransaction`:\
        \ The transaction has been replaced by a new transaction.\n"
      enum:
      - RejectedKYT
      - PendingDoubleCheck
      - PendingSpenderCheck
      - PendingRiskControlCheck
      - PendingApproverCheck
      - RejectedCoboCheck
      - RejectedWhiteList
      - RejectedDoubleCheck
      - RejectedSpenderAuth
      - RejectedRiskControlCheck
      - RejectedApproverAuth
      - RejectedbyMobileCosigner
      - PendingWaitSigner
      - PendingApprovalStart
      - FailedBySigner
      - FailedBroadcasting
      - FailedOnChain
      - Reverting
      - Queue
      - PendingBlockConfirmations
      - ReplacedByNewTransaction
      - CanceledBySpender
      - CanceledByAPI
      - OnchainRejection
      - RejectedTravelRule
      - RejectedTravelRuleDueToCompliance
      - PendingTravelRuleInfo
      - PendingTravelRuleCheck
      - RejectedTravelRuleDueToUnsupportedToken
      - SignatureVerificationSuccess
      - SignatureVerificationFailed
      example: PendingDoubleCheck
      type: string
    TransactionTimeline:
      description: "The information about transaction timeline, which lists all statuses\
        \ that the transaction passes through with timestamps indicating when each\
        \ status is completed."
      example:
        finished_timestamp: 1610445878970
        finished: true
        status: Submitted
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          description: |
            Whether the transaction status is completed:
              - `true`: The transaction status is completed.
              - `false`: The transaction is currently in the status.
          example: true
          type: boolean
        finished_timestamp:
          description: "The time when the transaction status is completed in Unix\
            \ timestamp format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      type: object
    TransactionTokeApproval:
      allOf:
      - $ref: '#/components/schemas/TokenInfo'
      - description: The data for transaction token approval information.
        properties:
          amount:
            description: |
              Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
            example: 1.5
            format: float
            type: number
          spender:
            description: Spender address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        type: object
    TransactionType:
      description: "The transaction type. Possible values include: \n  - `Deposit`:\
        \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n  -\
        \ `ContractCall`: A transaction that interacts with a smart contract.\n  -\
        \ `MessageSign`: A transaction that signs a message. \n  - `ExternalSafeTx`:\
        \ A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one\
        \ or multiple signatures to be executed.\n  - `Stake`: A transaction that\
        \ creates a staking request.\n  - `UnStake`: A transaction that creates a\
        \ unstaking request.\n"
      enum:
      - Deposit
      - Withdrawal
      - ContractCall
      - MessageSign
      - ExternalSafeTx
      - Stake
      - UnStake
      example: Deposit
      type: string
    MpcSigningGroup:
      description: The information about the Signing Group of an MPC Wallet.
      properties:
        used_key_share_holder_group_id:
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        used_tss_node_ids:
          description: The ID of the TSS Nodes that are required to participate in
            the signature.
          items:
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      type: object
    TransactionSourceType:
      description: |
        The transaction source. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Asset
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      - Main
      - Sub
      - DepositFromAddress
      - DepositFromWallet
      - DepositFromLoop
      example: DepositFromAddress
      type: string
    TransactionCustodialAssetWalletSource:
      description: |
        Information about the transaction source type `Asset`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: DepositFromAddress
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Custodial Wallet (Asset)
      type: object
    TransactionCustodialWeb3WalletSource:
      description: |
        Information about the transaction source type `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
      required:
      - source_type
      - wallet_id
      title: Custodial Wallet (Web3)
      type: object
    TransactionMPCWalletSource:
      description: |
        Information about the transaction source type `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        signer_key_share_holder_group_id:
          description: The ID of the key share holder group that is selected to sign
            the transaction.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          type: string
      required:
      - source_type
      - wallet_id
      title: MPC Wallet
      type: object
    TransactionSmartContractSafeWalletSource:
      description: |
        Information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0x1234567890123456789012345678901234567890
          type: string
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
      required:
      - address
      - source_type
      - wallet_id
      title: Smart Contract Wallet
      type: object
    TransactionExchangeWalletSource:
      description: |
        Information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
          type: string
      required:
      - exchange_id
      - source_type
      - wallet_id
      title: Exchange Wallet
      type: object
    TransactionDepositFromAddressSource:
      description: |
        Information about the transaction source type `DepositFromAddress`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        addresses:
          description: A list of addresses.
          items:
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          type: array
      required:
      - addresses
      - source_type
      title: Deposit from Address
      type: object
    TransactionDepositFromWalletSource:
      description: |
        Information about the transaction source type `DepositFromWallet`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
          type: string
      required:
      - source_type
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: Deposit from Wallet
      type: object
    TransactionDepositFromLoopSource:
      description: |
        Information about the transaction source type `DepositFromLoop`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
      required:
      - source_type
      title: Deposit from Cobo Loop
      type: object
    TransactionFeeStationWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The Wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Fee Station
      type: object
    TransactionDestinationType:
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Address
      - ExchangeWallet
      - EVM_Contract
      - EVM_EIP_191_Signature
      - EVM_EIP_712_Signature
      - Raw_Message_Signature
      - DepositToAddress
      - DepositToWallet
      example: Address
      type: string
    TransactionDepositToAddressDestination:
      description: |
        Information about the transaction destination type `DepositToAddress`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      - destination_type
      - wallet_id
      - wallet_type
      title: Deposit to Address
      type: object
    TransactionDepositToWalletDestination:
      description: |
        Information about the transaction destination type `DepositToWallet`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: Deposit to Wallet
      type: object
    TransactionEvmContractMethod:
      description: The information about a method in a smart contract.
      properties:
        name:
          description: The method name.
          example: transfer
          type: string
        sig:
          description: "The signature of the method, which includes the method name\
            \ and parameter types."
          example: "transfer(address,uint256)"
          type: string
        type:
          description: The method type.
          example: Function
          type: string
        payable:
          description: |
            Whether the method is payable, which means it can receive tokens along with the transaction.
            - `true`: The method is payable.
            - `false`: The method is not payable.
          example: true
          type: boolean
        selector:
          description: "The method selector, a four-byte identifier derived from the\
            \ method's signature, used to invoke the method in a transaction."
          example: 0xa9059cbb
          type: string
      type: object
    TransactionEvmCalldataInfo:
      properties:
        chain_id:
          description: The ID of the chain on which the smart contract is deployed.
          example: ETH
          type: string
        address:
          description: The address of the smart contract.
          example: 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84
          type: string
        name:
          description: The name of the smart contract.
          example: AppProxyUpgradeable
          type: string
        impl_address:
          description: The address of the implementation smart contract. This property
            is applicable only when the specified smart contract is a proxy contract.
          example: 0x17144556fd3424edc8fc8a4c940b2d04936d17eb
          type: string
        impl_name:
          description: The name of the implementation smart contract. This property
            is applicable only when the specified smart contract is a proxy contract.
          example: Lido
          type: string
        proxy:
          description: |
            Whether the specified smart contract address is a proxy contract.
            - `true`: The specified smart contract address is a proxy contract.
            - `false`: The specified smart contract address is not a proxy contract.
          example: true
          type: boolean
        method:
          $ref: '#/components/schemas/TransactionEvmContractMethod'
        params:
          description: |
            The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter:
            - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`.
            - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`.
            - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values.
          example: "[[\"exactInput\", \"tuple\", [[\"dstReceiver\", \"address\", \"\
            0xbbff75515f6e924441c3d80af4714edf19911111\"], [\"wrappedToken\", \"address\"\
            , \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"], [\"router\", \"uint256\"\
            , \"452312848583266388373324160887510303453432363010492966520592108215996663949\"\
            ], [\"amount\", \"uint256\", \"10000000000000000\"], [\"minReturnAmount\"\
            , \"uint256\", \"369987456553029\"], [\"fee\", \"uint256\", \"30000000000000\"\
            ], [\"path\", \"address[]\", [[\"[0]\", \"address\", \"0x0000000000000000000000000000000000000000\"\
            ], [\"[1]\", \"address\", \"0x1ae21d57afc033a556ef63daa216046321b3d391\"\
            ]]], [\"pool\", \"address[]\", [[\"[0]\", \"address\", \"0x725522665fa5e1fa2912fed453dc0044deda5cfd\"\
            ]]], [\"signature\", \"bytes\", \"0x\"], [\"channel\", \"string\", \"\
            android\"]]], [\"deadline\", \"uint256\", \"1729582030\"]]"
          type: string
      type: object
    TransactionEvmContractDestination:
      description: |
        Information about the transaction destination type `EVM_Contract`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
        calldata_info:
          $ref: '#/components/schemas/TransactionEvmCalldataInfo'
      required:
      - address
      - calldata
      - destination_type
      title: EVM Contract
      type: object
    TransactionMessageSignEIP191Destination:
      description: |
        Information about the transaction destination type `EVM_EIP_191_Signature`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
      required:
      - destination_type
      - message
      title: EIP-191 Signature
      type: object
    TransactionMessageSignEIP712Destination:
      description: |
        Information about the transaction destination type `EVM_EIP_712_Signature`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        structured_data:
          additionalProperties: true
          description: "The structured data to be signed, formatted as a JSON object\
            \ according to the EIP-712 standard."
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          type: object
      required:
      - destination_type
      - structured_data
      title: EIP-712 Signature
      type: object
    TransactionRawMessageSignDestination:
      description: |
        The information about the destination `Raw_Message_Signature`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        msg_hash:
          description: "Message hash to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message
      title: Raw Message Signature
      type: object
    TransactionTransferToAddressDestination:
      description: |
        Information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        utxo_outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal: false
        force_external: false
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        account_output:
          $ref: '#/components/schemas/TransactionTransferToAddressDestination_account_output'
        utxo_outputs:
          items:
            $ref: '#/components/schemas/TransactionTransferToAddressDestination_utxo_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        force_internal:
          description: |
            Whether the transaction request must be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must be executed as a Cobo Loop transfer.
              - `false`: The transaction request may not be executed as a Cobo Loop transfer.
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.
          example: false
          type: boolean
      required:
      - destination_type
      title: Address
      type: object
    TransactionTransferToWalletDestination:
      description: |
        Information about the transaction destination type `ExchangeWallet`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - wallet_id
      title: Exchange Wallet
      type: object
    TransactionResultType:
      description: |
        The transaction result type. Possible values include:
          - `Signature`: An EVM EIP-191 or EVM EIP-712 signature.
      enum:
      - Signature
      example: Address
      type: string
    TransactionSignatureResult:
      description: The result of a message signing transaction.
      example:
        result_type: Address
        signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
      properties:
        result_type:
          $ref: '#/components/schemas/TransactionResultType'
        signature:
          description: The raw data of the signature.
          example: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          type: string
      required:
      - signature
      title: Signature
      type: object
    TransactionResult:
      discriminator:
        mapping:
          Signature: '#/components/schemas/TransactionSignatureResult'
        propertyName: result_type
      oneOf:
      - $ref: '#/components/schemas/TransactionSignatureResult'
    TransactionBlockInfo:
      description: The information about the transaction block.
      example:
        block_timestamp: 1717740319
        block_number: 123
        block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
      properties:
        block_number:
          description: The block number.
          example: 123
          format: int64
          type: integer
        block_timestamp:
          description: "The time when the block was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1717740319
          format: int64
          type: integer
        block_hash:
          description: The block hash.
          example: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          type: string
      type: object
    TransactionRawTxInfo:
      description: The raw transaction information.
      example:
        selected_utxos:
        - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          value: "0.5"
        - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          value: "0.5"
        raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        used_nonce: 9
      properties:
        used_nonce:
          description: The transaction nonce.
          example: 9
          type: integer
        selected_utxos:
          description: The selected UTXOs to be consumed in the transaction.
          items:
            $ref: '#/components/schemas/TransactionSelectedUtxo'
          type: array
        raw_tx:
          description: The raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
      type: object
    TransactionSelectedUtxo:
      description: The selected UTXO information.
      example:
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        vout_n: 0
        tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        value: "0.5"
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
        address:
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        value:
          description: The value of the UTXO.
          example: "0.5"
          type: string
      type: object
    TransactionUtxo:
      description: The UTXO information.
      example:
        vout_n: 0
        tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      type: object
    TransactionFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/MaxFeeAmount'
      description: "The transaction fee actually charged by the chain that uses the\
        \ fixed fee model. \n\nSwitch between the tabs to display the properties for\
        \ different transaction fee models.\n"
      required:
      - fee_type
      title: Fixed (Actually Charged)
      type: object
    TransactionEvmEip1559Fee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          effective_gas_price:
            description: "The gas price (gas fee per gas unit) on the chain, in wei.\
              \ The gas price represents the amount of ETH that must be paid to validators\
              \ for processing transactions."
            example: "100000000"
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The number of gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      description: "The transaction fee actually charged by the chain that uses the\
        \ EIP-1559 fee model. \n\nThe transaction fee is calculated by multiplying\
        \ the gas price by the used gas units. This can be expressed as: Transaction\
        \ fee = gas price * used gas units.\n\nSwitch between the tabs to display\
        \ the properties for different transaction fee models.\n"
      example:
        effective_gas_price: "100000000"
        max_priority_fee_per_gas: "1000000000000"
        gas_limit: "21000"
        token_id: ETH
        gas_used: "100000000"
        max_fee_per_gas: "9000000000000"
        fee_type: EVM_EIP_1559
        fee_used: "0.1"
      required:
      - fee_type
      title: EIP-1559 (Actually Charged)
      type: object
    TransactionEvmLegacyFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      description: "The transaction fee actually charged by the chain that uses the\
        \ legacy fee model. \n\nThe transaction fee is calculated by multiplying the\
        \ gas price by the used gas. This can be expressed as: Transaction fee = gas\
        \ price * used gas units.\n\nSwitch between the tabs to display the properties\
        \ for different transaction fee models.\n"
      required:
      - fee_type
      title: Legacy (Actually Charged)
      type: object
    TransactionUtxoFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          max_fee_amount:
            description: The maximum fee that you are willing to pay for the transaction.
              The transaction will fail if the transaction fee exceeds the maximum
              fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      description: |
        The transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.

        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      title: UTXO (Actually Charged)
      type: object
    TransactionFee:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
      - $ref: '#/components/schemas/TransactionEvmLegacyFee'
      - $ref: '#/components/schemas/TransactionUtxoFee'
      - $ref: '#/components/schemas/TransactionFixedFee'
    TransactionRbf:
      description: The information about the request to drop or to speed up transactions.
      example:
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        description: Speedup transaction
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          included_utxos:
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          excluded_utxos:
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          source_type: Asset
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        source:
          $ref: '#/components/schemas/TransactionRbf_source'
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description of the RBF transaction.
          example: Speedup transaction
          type: string
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - fee
      - request_id
      type: object
    TransactionResend:
      description: The information about the request to resend transactions.
      example:
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - request_id
      type: object
    ReplaceType:
      description: "The `replaced_by_type` property indicates the replacement type\
        \ of the transaction that this transaction was replaced by, and the `replaced_type`\
        \ property indicates the replacement type of the transaction that this transaction\
        \ replaced.\nPossible values include: \n  - `Drop`: To drop a transaction.\n\
        \  - `Resend`: To resend a transaction.\n  - `SpeedUp`: To speed up a transaction.\n"
      enum:
      - Drop
      - Resend
      - SpeedUp
      example: Resend
      type: string
    AutoFuelType:
      description: |
        The mode of transaction fee payment using Fee Station. Currently, Fee Station supports EVM-compatible and TRON transactions initiated from MPC Wallets (Organization-Controlled). For more details, refer to [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction).
        - `ProActiveAutoFuel`: Always use Fee Station to pay transaction fees.
        - `PassiveAutoFuel`: Use Fee Station only when the source address balance is insufficient to cover the transaction fees.

        Please note that the TRON chain does not support `PassiveAutoFuel` due to its fee delegation mechanism.
      enum:
      - PassiveAutoFuel
      - ProActiveAutoFuel
      example: PassiveAutoFuel
      type: string
    CustodialTransferSource:
      description: |
        The information about the transaction source types `Asset` and `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: Asset
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Transfer from Custodial Wallet
      type: object
    CustodialWeb3TransferSource:
      description: |
        The information about the transaction source types `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: |
            The wallet address.
            If you want to specify the UTXOs to be used, please provide the `included_utxos` property. If you specify both the `address` and `included_utxos` properties, the specified included UTXOs must belong to the address. It is recommended to specify no more than 100 included UTXOs to ensure optimal transaction processing.

            You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
      required:
      - source_type
      - wallet_id
      title: Transfer from Custodial Wallet (Web3)
      type: object
    MpcTransferSource:
      description: |
        The information about the transaction source types `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        included_utxos:
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        excluded_utxos:
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        source_type: Asset
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: |
            The wallet address.
            If you want to specify the UTXOs to be used, please provide the `included_utxos` property. If you specify both the `address` and `included_utxos` properties, the specified included UTXOs must belong to the address. It is recommended to specify no more than 100 included UTXOs to ensure optimal transaction processing.

            You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
      required:
      - source_type
      - wallet_id
      title: Transfer from MPC Wallet
      type: object
    SafeTransferSource:
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
      required:
      - address
      - delegate
      - source_type
      - wallet_id
      title: Transfer from Smart Contract Wallet
      type: object
    CoboSafeDelegateType:
      default: Org-Controlled
      description: |
        The wallet subtype of the Delegate. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
      enum:
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    CoboSafeDelegate:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MPCDelegate'
          User-Controlled: '#/components/schemas/MPCDelegate'
        propertyName: delegate_type
      oneOf:
      - $ref: '#/components/schemas/MPCDelegate'
    MPCDelegate:
      description: "The information about the MPC Wallet as the Delegate. You can\
        \ call the [List Delegates](/v2/api-references/wallets--smart-contract-wallets/list-delegates)\
        \ operation to retrieve the applicable Delegates."
      example:
        wallet_id: 123e4567-e89b-12d3-a456-426614174000
        address: 0x1234567890123456789012345678901234567890
        delegate_type: Org-Controlled
      properties:
        delegate_type:
          $ref: '#/components/schemas/CoboSafeDelegateType'
        wallet_id:
          description: "The wallet ID of the Delegate. This is required when initiating\
            \ a transfer or contract call from Smart Contract Wallets (Safe{Wallet})."
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        address:
          description: "The wallet address of the Delegate. This is required when\
            \ initiating a transfer or contract call from Smart Contract Wallets (Safe{Wallet})."
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - address
      - delegate_type
      - wallet_id
      title: MPC Wallet Delegate
      type: object
    ExchangeTransferSource:
      description: |
        The information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Assets in an Exchange Wallet (Sub Account) can only be transferred to another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
      required:
      - source_type
      - trading_account_type
      - wallet_id
      title: Transfer from Exchange Wallet
      type: object
    TransferSource:
      discriminator:
        mapping:
          Asset: '#/components/schemas/CustodialTransferSource'
          Web3: '#/components/schemas/CustodialWeb3TransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          Safe{Wallet}: '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/CustodialTransferSource'
      - $ref: '#/components/schemas/CustodialWeb3TransferSource'
      - $ref: '#/components/schemas/MpcTransferSource'
      - $ref: '#/components/schemas/SafeTransferSource'
      - $ref: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      description: |
        The information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Specify either the `account_output` property or the `utxo_outputs` property. You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. You should use the `utxo_outputs` property to specify the destination addresses.

        Switch between the tabs to display the properties for different transaction destinations.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        utxo_outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal: false
        force_external: false
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          $ref: '#/components/schemas/AddressTransferDestination_account_output'
        utxo_outputs:
          items:
            $ref: '#/components/schemas/AddressTransferDestination_utxo_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        force_internal:
          description: "Whether the transaction request must be executed as a [Cobo\
            \ Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop)\
            \ transfer.\n  - `true`: The transaction request must be executed as a\
            \ Cobo Loop transfer.\n  - `false`: The transaction request may not be\
            \ executed as a Cobo Loop transfer.\n  \nPlease do not set both `force_internal`\
            \ and `force_external` as `true`.\n"
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.

            Please do not set both `force_internal` and `force_external` as `true`.
          example: false
          type: boolean
      required:
      - destination_type
      title: Transfer to Address
      type: object
    ExchangeTransferDestination:
      description: |
        The information about the transaction destination type `ExchangeWallet`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        An Exchange Wallet (Sub Account) can only receive asset transfers from another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - trading_account_type
      - wallet_id
      title: Transfer to Exchange Wallet
      type: object
    TransferDestinationType:
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each destination type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Address
      - ExchangeWallet
      example: Address
      type: string
    TransferDestination:
      discriminator:
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/AddressTransferDestination'
      - $ref: '#/components/schemas/ExchangeTransferDestination'
    TransferParams:
      description: The information about a token transfer.
      example:
        token_id: ETH_USDT
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: Transfer from wallet
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID of the transferred token. You can retrieve the\
            \ IDs of all the tokens you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens).\
            \ For transfers from Exchange Wallets, this property value represents\
            \ the asset ID."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description of the transfer.
          example: Transfer from wallet
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - destination
      - request_id
      - request_type
      - source
      - token_id
      type: object
    EstimateFeeRequestType:
      description: |
        The request type. Possible values include:
          - `Transfer`: A request to transfer tokens.
          - `ContractCall`: A request to interact with a smart contract.
      enum:
      - Transfer
      - ContractCall
      example: Transfer
      type: string
    EstimateFeeParams:
      discriminator:
        mapping:
          Transfer: '#/components/schemas/EstimateTransferFeeParams:'
          ContractCall: '#/components/schemas/EstimateContractCallFeeParams:'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/EstimateTransferFeeParams'
      - $ref: '#/components/schemas/EstimateContractCallFeeParams'
    EstimateTransferFeeParams:
      description: The information about a token transfer.
      example:
        request_type: Transfer
        token_id: ETH_USDT
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        fee_type: EVM_EIP_1559
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
            It is recommended to use the same request ID as the transaction for which
            you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID of the transferred token. You can retrieve the\
            \ IDs of all the tokens you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
      required:
      - request_type
      - source
      - token_id
      title: Transfer
      type: object
    EstimateContractCallFeeParams:
      description: The information about a transaction that interacts with a smart
        contract
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
            It is recommended to use the same request ID as the transaction for which
            you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        chain_id:
          description: "The chain ID of the chain on which the smart contract is deployed.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
      required:
      - chain_id
      - destination
      - request_type
      - source
      title: Contract Call
      type: object
    BaseContractCallSource:
      description: |
        The information about the transaction source type `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/ContractCallSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
      required:
      - address
      - source_type
      - wallet_id
      type: object
    MpcContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        source_type: Org-Controlled
      title: Contract Call from MPC Wallet
    CustodialWeb3ContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      title: Contract Call from Custodial Web3 Wallet
    SafeContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      - properties:
          delegate:
            $ref: '#/components/schemas/CoboSafeDelegate'
        required:
        - delegate
        type: object
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Contract Call from Smart Contract Wallet
    ContractCallSourceType:
      description: |
        The type of the source. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each source type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      example: Org-Controlled
      type: string
    ContractCallSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          Safe{Wallet}: '#/components/schemas/SafeContractCallSource'
          Web3: '#/components/schemas/CustodialWeb3ContractCallSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcContractCallSource'
      - $ref: '#/components/schemas/SafeContractCallSource'
      - $ref: '#/components/schemas/CustodialWeb3ContractCallSource'
    ContractCallDestinationType:
      description: |
        The type of the contract format. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - EVM_Contract
      example: EVM_Contract
      type: string
    EvmContractCallDestination:
      description: "The information about the transaction destination. Refer to [Transaction\
        \ sources and destinations](/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      example:
        destination_type: EVM_Contract
        address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
        calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        value: "1.5"
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
      required:
      - address
      - calldata
      - destination_type
      title: EVM Contract
      type: object
    ContractCallDestination:
      discriminator:
        mapping:
          EVM_Contract: '#/components/schemas/EvmContractCallDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/EvmContractCallDestination'
    ContractCallParams:
      description: The information about a transaction that interacts with a smart
        contract
      example:
        chain_id: ETH
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        destination:
          destination_type: EVM_Contract
          address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          value: "1.5"
        description: Transaction to call a smart contract initiated from a wallet
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        description:
          description: The description of the contract call transaction.
          example: Transaction to call a smart contract initiated from a wallet
          type: string
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      title: Contract call
      type: object
    MpcMessageSignSource:
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        source_type: Org-Controlled
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      required:
      - address
      - source_type
      - wallet_id
      title: Message Signing from MPC Wallet
      type: object
    CustodialWeb3MessageSignSource:
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      required:
      - address
      - source_type
      - wallet_id
      title: Message Signing from Custodial Web3 Wallet
      type: object
    MessageSignSourceType:
      description: |
        The wallet subtype of the transaction source. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    MessageSignSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcMessageSignSource'
          User-Controlled: '#/components/schemas/MpcMessageSignSource'
          Web3: '#/components/schemas/CustodialWeb3MessageSignSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcMessageSignSource'
      - $ref: '#/components/schemas/CustodialWeb3MessageSignSource'
    EvmEIP191MessageSignDestination:
      description: "The information about the destination `EVM_EIP_191_Signature`.\
        \ Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      example:
        destination_type: EVM_EIP_191_Signature
        message: YWFhYQ==
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
      required:
      - destination_type
      - message
      title: EIP-191 Signature
      type: object
    EvmEIP712MessageSignDestination:
      description: "The information about the destination `EVM_EIP_712_Signature`.\
        \ Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        structured_data:
          additionalProperties: true
          description: "The structured data to be signed, formatted as a JSON object\
            \ according to the EIP-712 standard."
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          type: object
      required:
      - destination_type
      - structured_data
      title: EIP-712 Signature
      type: object
    RawMessageSignDestination:
      description: "The information about the destination `Raw_Message_Signature`.\
        \ Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        msg_hash:
          description: "Message hash to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - msg_hash
      title: Raw Message Signature
      type: object
    MessageSignDestinationType:
      description: |
        The type of the signature format. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each signature format type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - EVM_EIP_191_Signature
      - EVM_EIP_712_Signature
      example: EVM_EIP_191_Signature
      type: string
    MessageSignDestination:
      discriminator:
        mapping:
          EVM_EIP_191_Signature: '#/components/schemas/EvmEIP191MessageSignDestination'
          EVM_EIP_712_Signature: '#/components/schemas/EvmEIP712MessageSignDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/EvmEIP191MessageSignDestination'
      - $ref: '#/components/schemas/EvmEIP712MessageSignDestination'
    MessageSignParams:
      description: The information about a transaction that signs a message. You can
        provide the message either as raw data or as structured data.
      example:
        chain_id: ETH
        destination:
          destination_type: EVM_EIP_191_Signature
          message: YWFhYQ==
        description: Transaction to sign a message initiated from a wallet
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          source_type: Org-Controlled
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/MessageSignSource'
        destination:
          $ref: '#/components/schemas/MessageSignDestination'
        description:
          description: The description of the message signing transaction.
          example: Transaction to sign a message initiated from a wallet
          type: string
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      type: object
    WebhookEvent:
      description: The webhook event payload.
      example:
        next_retry_timestamp: 1701396866000
        retries_left: 3
        event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
          is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Address
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data_type: Transaction
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          raw_tx_info:
            selected_utxos:
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
        created_timestamp: 1701396866000
        type: wallets.transaction.created
        url: https://example.com/webhook
        status: Success
      properties:
        event_id:
          description: The event ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        created_timestamp:
          description: "The time when the event occurred, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/WebhookEventData'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          example: 1701396866000
          format: int64
          type: integer
        retries_left:
          description: The number of retries left. This field is only present if the
            event status is `Retrying`.
          example: 3
          type: integer
      required:
      - created_timestamp
      - data
      - id
      - type
      - url
      type: object
    WebhookEventDataType:
      description: The data type of the event.
      properties:
        data_type:
          description: |2-

            The data type of the event.
            - `Transaction`: The transaction event data.
            - `TSSRequest`: The TSS request event data.
          enum:
          - Transaction
          - TSSRequest
          example: Transaction
          type: string
      required:
      - data_type
      type: object
    WebhookEventData:
      discriminator:
        mapping:
          Transaction: '#/components/schemas/TransactionWebhookEventData'
          TSSRequest: '#/components/schemas/TSSRequestWebhookEventData'
        propertyName: data_type
      oneOf:
      - $ref: '#/components/schemas/TransactionWebhookEventData'
      - $ref: '#/components/schemas/TSSRequestWebhookEventData'
    TransactionWebhookEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/Transaction'
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Address
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        data_type: Transaction
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        raw_tx_info:
          selected_utxos:
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
      title: Transaction Event Data
    TSSRequestWebhookEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/TSSRequest'
      title: TSS Request Event Data
    WebhookEventType:
      description: "The event type. To learn the trigger condition of each event type,\
        \ refer to [Webhook event types and event data](/v2/guides/webhooks-callbacks/webhook-event-type)."
      enum:
      - wallets.transaction.created
      - wallets.transaction.updated
      - wallets.transaction.failed
      - wallets.transaction.succeeded
      - wallets.mpc.tss_request.created
      - wallets.mpc.tss_request.updated
      - wallets.mpc.tss_request.failed
      - wallets.mpc.tss_request.succeeded
      example: wallets.transaction.created
      type: string
    WebhookEventStatus:
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
      enum:
      - Success
      - Retrying
      - Failed
      example: Success
      type: string
    WebhookEventLog:
      description: The webhook event log.
      example:
        request_body:
          next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Address
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            raw_tx_info:
              selected_utxos:
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        success: true
        request_headers: "{\"Content-Type\": \"application/json\"}"
        response_body: response_body
        created_timestamp: 1701396866000
        response_time: 100
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        failure_reason: Connect Timeout
        response_status_code: 200
      properties:
        id:
          description: The event log ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        created_timestamp:
          description: "The time when the log was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        request_headers:
          description: The request headers of the webhook event.
          example: "{\"Content-Type\": \"application/json\"}"
          type: object
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          description: The response body of the webhook event.
          type: string
        response_status_code:
          description: The response status code of the webhook event.
          example: 200
          type: integer
        response_time:
          description: "The response time of the webhook event, in milliseconds."
          example: 100
          type: integer
        success:
          description: Whether the webhook event has been successfully delivered.
          example: true
          type: boolean
        failure_reason:
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
          type: string
      required:
      - created_timestamp
      - id
      - request_body
      - request_headers
      - status
      - success
      type: object
    WebhookEndpoint:
      description: The information about a webhook endpoint.
      example:
        subscribed_events:
        - wallets.transaction.created
        - wallets.transaction.created
        endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        description: My webhook endpoint
        created_timestamp: 1701396866000
        url: https://example.com/webhook
        status: STATUS_ACTIVE
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: "The time when the endpoint was registered, in Unix timestamp\
            \ format, measured in seconds."
          example: 1701396866000
          format: int64
          type: integer
        endpoint_id:
          description: The webhook endpoint ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - created_timestamp
      - id
      - status
      - subscribed_events
      - url
      type: object
    WebhookEndpointStatus:
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
      enum:
      - STATUS_ACTIVE
      - STATUS_INACTIVE
      - STATUS_PENDING_ACTIVE
      - STATUS_PENDING_INACTIVE
      - STATUS_PENDING_UPDATE
      - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      type: string
    StakingSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcStakeSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcStakeSource'
    MpcStakeSource:
      allOf:
      - $ref: '#/components/schemas/BaseStakeSource'
      title: Stake from MPC Wallets
    BaseStakeSource:
      description: The information about the staking source.
      properties:
        source_type:
          $ref: '#/components/schemas/StakeSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
      required:
      - address
      - source_type
      - wallet_id
      type: object
    StakeSourceType:
      description: |
        The staking source type. Possible values include:
          - `Org-Controlled`: An MPC Wallet (Organization-Controlled Wallet).
      enum:
      - Org-Controlled
      example: Org-Controlled
      type: string
    BaseStakeExtra:
      description: The base information about a staking protocol.
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
      required:
      - pool_type
      type: object
    BabylonStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Babylon protocol.
        properties:
          finality_provider_public_key:
            description: The public key of the finality provider.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            pattern: "^[0-9a-fA-F]{64}$"
            type: string
          stake_block_time:
            description: The number of blocks that need to be processed before the
              locked tokens are unlocked and become accessible.
            example: 2000
            format: int64
            type: integer
          auto_broadcast:
            description: |
              Whether to automatically broadcast the transaction. The default value is `true`.

              - `true`: Automatically broadcast the transaction.
              - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
            example: false
            type: boolean
        required:
        - finality_provider_public_key
        - stake_block_time
        type: object
      title: Babylon
    BabylonStakeEstimatedFee:
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        fee_amount:
          description: The amount of the estimated fee.
          example: "0.02"
          type: string
        token_id:
          description: The token ID of the staking fee.
          example: BTC
          type: string
      title: Babylon Staking Fee
      type: object
    CoreStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the CORE staking protocol.
        properties:
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
          change_address:
            description: "The change address on the Bitcoin chain. If not provided,\
              \ the source wallet's address will be used as the change address."
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator's EVM address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The EVM address to receive staking rewards.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
        required:
        - reward_address
        - timelock
        - validator_address
        type: object
      title: CORE
    EthStakeEstimatedFee:
      example:
        validator_pubkeys:
        - 0x1234567890987654321012345678909876543210
        fee:
          is_loop: false
          fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        core_btc_staking_address: bc1qcqj9k34vrvgmmvt85ym2ua79k2d22vcfxmuratakfm78chdqksnq5agezk
        pool_type: Babylon
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee:
          $ref: '#/components/schemas/EstimatedFee'
        validator_pubkeys:
          description: A list of public keys associated with the Ethereum validators
            for this staking operation.
          example:
          - 0x1234567890987654321012345678909876543210
          items:
            type: string
          type: array
        core_btc_staking_address:
          description: P2WSH address generated for this staking operation(If the estimated
            fee is for core BTC staking).
          example: bc1qcqj9k34vrvgmmvt85ym2ua79k2d22vcfxmuratakfm78chdqksnq5agezk
          type: string
      title: Ethereum Staking Fee
      type: object
    EthStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Ethereum Beacon Chain.
        properties:
          provider_name:
            description: The name of the provider.
            example: Stakefish
            type: string
        required:
        - provider_name
        type: object
      title: Ethereum Beacon Chain
    EthUnstakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: Additional information required for unstaking from the Ethereum
          Beacon Chain.
        properties:
          validator_pubkeys:
            description: A list of public keys identifying the validators to unstake
              from the Ethereum Beacon Chain.
            example:
            - 0x1234567890987654321012345678909876543210
            - 0x1234567890987654321012345678909876543210
            items:
              type: string
            type: array
        required:
        - validator_pubkeys
        type: object
      title: Ethereum Beacon Chain
    BabylonStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Babylon protocol.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Babylon Chain
            type: string
          unlock_timestamp:
            description: "The estimated time when the bitcoins will be unlocked, in\
              \ Unix timestamp format, measured in milliseconds."
            example: 1640995200000
            format: int64
            type: integer
          unlock_block_height:
            description: The block height at which the bitcoins will be unlocked.
            example: 871234
            format: int64
            type: integer
          stake_address:
            description: The address receiving the staked bitcoins.
            example: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            type: string
          unbond_address:
            description: The address receiving the unlocked bitcoins.
            example: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            type: string
        required:
        - pos_chain
        type: object
      example:
        unlock_block_height: 871234
        stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
        unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
        pos_chain: Babylon Chain
        unlock_timestamp: 1640995200000
        pool_type: Babylon
      title: Babylon
    EthStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Ethereum Beacon Chain.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Ethereum
            type: string
          beacon_validators:
            description: The list of validator information.
            items:
              $ref: '#/components/schemas/EthStakingExtra_allOf_beacon_validators'
            type: array
        required:
        - pos_chain
        type: object
      title: Ethereum Beacon Chain
    CoreStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about staking in the CORE staking protocol.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Ethereum
            type: string
          staker_address:
            description: The staker's Bitcoin address.
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator's EVM address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The EVM address to receive staking rewards.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
        required:
        - pos_chain
        - reward_address
        - staker_address
        - timelock
        - validator_address
        type: object
      title: CoreBTC
    EigenLayerLstStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of LST on Eigenlayer.
        properties:
          operator:
            description: The operator's address.
            example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            type: string
        required:
        - id
        type: object
    EigenLayerNativeStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of eigen layer native ETH.
        properties:
          fee_recipient:
            description: "The fee recipient address, if not provided the staker address\
              \ will be used."
            example: 30
            format: int32
            type: number
        type: object
    BabylonStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Babylon protocol.
        properties:
          finality_provider_public_key:
            description: The public key of the finality provider.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            pattern: "^[0-9a-fA-F]{64}$"
            type: string
          stake_block_time:
            description: The number of blocks that need to be processed before the
              locked tokens are unlocked and become accessible.
            example: 2000
            format: int64
            type: integer
          auto_broadcast:
            description: |
              Whether to automatically broadcast the transaction.

              - `true`: Automatically broadcast the transaction.
              - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
            example: false
            type: boolean
          param_version:
            description: The version of babylon global parameters.
            example: 2
            format: int64
            type: integer
          withdraw_from_type:
            $ref: '#/components/schemas/ActivityType'
        type: object
      example:
        param_version: 2
        finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        stake_block_time: 2000
        auto_broadcast: false
        withdraw_from_type: Stake
        pool_type: Babylon
      title: Babylon
    EthStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Ethereum Beacon Chain.
        properties:
          provider_name:
            description: The name of the provider.
            example: Stakefish
            type: string
          validator_pubkeys:
            description: A list of public keys identifying the validators to unstake
              from the Ethereum Beacon Chain.
            example:
            - 0x1234567890987654321012345678909876543210
            - 0x1234567890987654321012345678909876543210
            items:
              type: string
            type: array
        type: object
      title: Ethereum Beacon Chain
    CoreStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the CoreBTC staking protocol.
        properties:
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
          change_address:
            description: "The change bitcoin address. If not provided, the source\
              \ wallet's address will be used as the change address."
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator evm address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The reward evm address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
        type: object
      title: CoreBTC
    Activity:
      description: The staking activity.
      example:
        amount: "100.00"
        address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
        initiator: steve@example.com
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        created_timestamp: 1640995200000
        type: Stake
        pool_id: babylon_btc_signet
        initiator_type: API
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        token_id: BTC
        updated_timestamp: 1640995200000
        extra:
          param_version: 2
          finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          stake_block_time: 2000
          auto_broadcast: false
          withdraw_from_type: Stake
          pool_type: Babylon
        request_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        timeline:
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          action: Submitted
          status: success
          timestamp: 1640995200000
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          action: Submitted
          status: success
          timestamp: 1640995200000
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        transaction_ids:
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        status: Success
      properties:
        id:
          description: The activity ID.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        initiator:
          description: The initiator of the activity.
          example: steve@example.com
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          description: The staker's wallet ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker's wallet address.
          example: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          type: string
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          description: The token ID.
          example: BTC
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        request_ids:
          description: The request IDs of the corresponding transactions of the activity.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        amount:
          description: The staking amount.
          example: "100.00"
          type: string
        transaction_ids:
          description: The IDs of the corresponding transactions of the activity.
          items:
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            type: string
          type: array
        timeline:
          description: The timeline of the activity.
          items:
            $ref: '#/components/schemas/ActivityTimeline'
          type: array
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        extra:
          $ref: '#/components/schemas/Activity_extra'
        created_timestamp:
          description: The time when the activity was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_timestamp:
          description: The time when the activity was last updated.
          example: 1640995200000
          format: int64
          type: integer
      required:
      - amount
      - created_at
      - pool_id
      - stake_id
      - status
      - token_id
      - updated_at
      type: object
    ActivityAction:
      description: |
        The specific action taken within an activity. Possible values include:
        - `Submitted`: Submit the staking, unstaking, or withdrawal request.
        - `BTCConfirmation`: The Bitcoin chain confirms the request.
        - `BabylonConfirmation`: The Babylon protocol confirms the request.
        - `DepositETH`: Deposit ETH to the validator to start staking.
        - `ClaimRewards`: Claim the rewards from the validator.
        - `ActivateValidator`: Activate the validator to start staking.
        - `UnstakeETH`: Unstake ETH from the validator.
        - `ApproveUSDC`: Approve the USDC token to be used for staking.
        - `ConvertToUSDS`: Convert the USDC token to the USDS token.
        - `ApproveUSDS`: Approve the USDS token to be used for staking.
        - `DepositUSDS`: Deposit the USDS token to the validator.
        - `WithdrawUSDS`: Withdraw the USDS token from the validator.
        - `ConvertToUSDC`: Convert the USDS token to the USDC token.
      enum:
      - Submitted
      - BTCConfirmation
      - BabylonConfirmation
      - DepositETH
      - ClaimRewards
      - ActivateValidator
      - UnstakeETH
      - ApproveUSDC
      - ConvertToUSDS
      - ApproveUSDS
      - DepositUSDS
      - WithdrawUSDS
      - ConvertToUSDC
      example: Submitted
      type: string
    ActivityTimeline:
      description: The timeline of the staking activity.
      example:
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        action: Submitted
        status: success
        timestamp: 1640995200000
      properties:
        action:
          $ref: '#/components/schemas/ActivityAction'
        status:
          description: |
            The status of the action. Possible values include:
              - `Success`: The action is successfully completed.
              - `Processing`: The action is being processed.
              - `Failed`: The action has failed.
          example: success
          type: string
        timestamp:
          description: "The time when the action took place, in Unix timestamp format,\
            \ measured in milliseconds. \n- For the `Submitted` action, `timestamp`\
            \ represents the time the staking, unstaking, or withdrawal request was\
            \ created. \n- For the `BTCConfirmation` action, `timestamp` represents\
            \ the time when the request was confirmed on the Bitcoin chain, or when\
            \ the confirmation failed.\n- For the `BabylonConfirmation` action, `timestamp`\
            \ represents the time when the request was confirmed by the Babylon protocol,\
            \ or when the confirmation failed.\n"
          example: 1640995200000
          format: int64
          type: integer
        transaction_id:
          description: The ID of the corresponding transaction.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          type: string
      required:
      - action
      type: object
    ActivityInitiator:
      properties:
        app_initiator:
          description: "The initiator of the staking activity. If you do not specify\
            \ this property, the WaaS service will automatically designate the API\
            \ key as the initiator."
          example: steve@example.com
          type: string
      type: object
    CreateStakeActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        source:
          $ref: '#/components/schemas/StakingSource'
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        amount:
          description: The amount to stake.
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          $ref: '#/components/schemas/CreateStakeActivity_extra'
      required:
      - address
      - amount
      - fee
      - pool_id
      - wallet_id
      type: object
    CreateWithdrawActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: The amount to withdraw.
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      required:
      - fee
      - staking_id
      type: object
    CreateUnstakeActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: "The amount to unstake. For the Babylon protocol, this property\
            \ is ignored."
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          $ref: '#/components/schemas/CreateUnstakeActivity_extra'
      required:
      - staking_id
      type: object
    CreateClaimActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: "The ID of the staking position. You can retrieve a list of\
            \ staking positions by calling [List staking positions](/v2/api-references/stakings/list-staking-positions)."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      required:
      - staking_id
      type: object
    ActivityStatus:
      description: |
        The status of the staking activity. Possible values include:
        - `Success`: The activity is successfully completed.
        - `Processing`: The activity is being processed.
        - `Failed`: The activity has failed.
      enum:
      - Success
      - Processing
      - Failed
      example: Success
      type: string
    ActivityType:
      description: |
        The type of the staking activity. Possible values include:
        - `Stake`: Stake tokens.
        - `Unstake`: Unstake tokens. Unstaked tokens are still in the staking protocol.
        - `Withdraw`: Withdraw tokens from the staking protocol to your wallet.
        - `Claim`: Claim rewards from the staking protocol.
      enum:
      - Stake
      - Unstake
      - Withdraw
      - Claim
      example: Stake
      type: string
    AmountStatus:
      description: |
        The status of the staking amount. Possible values include:

        - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Active`: The amount has been staked.
        - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
        - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
        - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
        - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
        - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
        - `Closed`: The staking position is closed.
      enum:
      - StakeInProgress
      - Active
      - Rejected
      - LimitExceeded
      - Invalid
      - UnstakeInProgress
      - Withdrawable
      - WithdrawInProgress
      - Closed
      example: Active
      type: string
    AmountDetails:
      description: The details about the staking amount.
      items:
        $ref: '#/components/schemas/AmountDetails_inner'
      type: array
    BabylonValidator:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Babylon validator.
        properties:
          icon_url:
            description: The URL of the validator's icon.
            example: https://example.com/icon.png
            format: url
            type: string
          name:
            description: The validator's name.
            example: Cobo
            type: string
          priority:
            description: This property can be ignored.
            example: 0
            type: integer
          public_key:
            description: The public key of the validator.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            type: string
          commission_rate:
            description: The commission rate of the validator.
            example: 0.1
            format: float
            type: number
          supported_pos_chains:
            description: A list of supported Proof-of-Stake (PoS) chains.
            example:
            - Babylon
            - Cosmos
            - Ethereum
            items:
              enum:
              - Babylon
              - Cosmos
              - Ethereum
              type: string
            type: array
        required:
        - name
        type: object
      example:
        icon_url: https://example.com/icon.png
        public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        supported_pos_chains:
        - Babylon
        - Cosmos
        - Ethereum
        name: Cobo
        commission_rate: 0.1
        priority: 0
        pool_type: Babylon
    EigenlayerValidator:
      description: The EigenLayer validator info.
      properties:
        icon_url:
          description: The URL of the validator's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        name:
          description: The name of validator.
          example: Cobo
          type: string
        priority:
          description: The priority of validator.
          example: 0
          type: integer
        address:
          description: The address of validator.
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
          type: string
        commission_rate:
          description: The commission of validator.
          example: 0.1
          format: float
          type: number
      required:
      - address
      - icon_url
      - name
      type: object
    PoolDetails:
      allOf:
      - $ref: '#/components/schemas/PoolSummary'
      - description: The detailed information about the staking protocol.
        properties:
          pool_type:
            $ref: '#/components/schemas/StakingPoolType'
          min_amount:
            description: The minimum amount that can be staked in one staking request.
            example: "0.01"
            type: string
          max_amount:
            description: The maximum amount that can be staked in one staking request.
            example: "100.00"
            type: string
          min_stake_period:
            description: "The minimum staking period, in days."
            example: 30
            format: int32
            type: integer
          max_stake_period:
            description: "The maximum staking period, in days."
            example: 1000
            format: int32
            type: integer
          min_stake_blocks:
            description: The minimum block number. A block number indicates the number
              of blocks that need to be processed before the locked tokens are unlocked
              and become accessible.
            example: 100
            format: int64
            type: integer
          max_stake_blocks:
            description: The maximum block number. A block number indicates the number
              of blocks that need to be processed before the locked tokens are unlocked
              and become accessible.
            example: 1000
            format: int64
            type: integer
          validators_info:
            description: A list of available validators.
            items:
              $ref: '#/components/schemas/PoolDetails_allOf_validators_info'
            type: array
        required:
        - validators_info
        type: object
      example:
        validators_info:
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        chain_id: Bitcoin
        min_amount: "0.01"
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
        protocol: Babylon
        min_stake_blocks: 100
        supported_wallet_subtypes:
        - Org-Controlled
        token_id: BTC
        supported_wallet_types:
        - MPC
        max_amount: "100.00"
        max_stake_period: 1000
        id: babylon_btc
        pool_type: Babylon
        max_stake_blocks: 1000
        min_stake_period: 30
    PoolSummary:
      description: The basic information of the staking pool.
      example:
        protocol: Babylon
        supported_wallet_subtypes:
        - Org-Controlled
        chain_id: Bitcoin
        token_id: BTC
        supported_wallet_types:
        - MPC
        id: babylon_btc
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
      properties:
        id:
          description: The ID of the staking pool. A staking pool is a pairing of
            a staking protocol and a specific type of token.
          example: babylon_btc
          type: string
        chain_id:
          description: The chain ID.
          example: Bitcoin
          type: string
        protocol:
          description: The name of the protocol.
          example: Babylon
          type: string
        protocol_icon_url:
          description: The URL of the protocol's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        supported_wallet_types:
          description: |
            The wallet type. Possible values include:

            - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

            - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

            - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

            - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          example:
          - MPC
          items:
            $ref: '#/components/schemas/WalletType'
          type: array
        supported_wallet_subtypes:
          description: |
            The wallet subtype. Possible values include:
            - `Asset`: Custodial Wallets (Asset Wallets).
            - `Web3`: Custodial Wallets (Web3  Wallets).
            - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
            - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
            - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
            - `Main`: Exchange Wallets (Main Account).
            - `Sub`: Exchange Wallets (Sub Account).
          example:
          - Org-Controlled
          items:
            $ref: '#/components/schemas/WalletSubtype'
          type: array
        token_id:
          description: The token ID.
          example: BTC
          type: string
        est_apr:
          description: The estimated annual percentage rate (APR).
          example: 0.05
          format: float
          type: number
      required:
      - chain_id
      - est_apr
      - id
      - protocol
      - protocol_icon_url
      - supported_wallet_subtypes
      - supported_wallet_types
      - token_id
      type: object
    Stakings:
      description: The information about a staking position.
      example:
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
        amounts:
        - amount: "100.00"
          status: Active
        - amount: "100.00"
          status: Active
        token_id: BTC
        updated_timestamp: 1640995200000
        validator_info:
          icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        extra:
          unlock_block_height: 871234
          stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
          unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
          pos_chain: Babylon Chain
          unlock_timestamp: 1640995200000
          pool_type: Babylon
        created_timestamp: 1640995200000
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        pool_id: babylon_btc_signet
        rewards_info: {}
      properties:
        id:
          description: The ID of the staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        wallet_id:
          description: The staker's wallet ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker's wallet address.
          example: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          type: string
        amounts:
          description: The details about the staking amount.
          items:
            $ref: '#/components/schemas/AmountDetails_inner'
          type: array
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          description: The token ID.
          example: BTC
          type: string
        rewards_info:
          description: The information about the staking rewards.
          example: {}
          type: object
        created_timestamp:
          description: The time when the staking position was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_timestamp:
          description: The time when the staking position was last updated.
          example: 1640995200000
          format: int64
          type: integer
        validator_info:
          $ref: '#/components/schemas/BabylonValidator'
        extra:
          $ref: '#/components/schemas/Stakings_extra'
      required:
      - address
      - amounts
      - created_timestamp
      - id
      - pool_id
      - token_id
      - updated_timestamp
      - validator_info
      - wallet_id
      type: object
    StakingPoolType:
      description: The type of the staking pool.
      enum:
      - Babylon
      - ETHBeacon
      - CoreBTC
      - SkyFarm
      example: Babylon
      type: string
    StakingPoolId:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. Currently, only `babylon_btc_signet`\
        \ and `babylon_btc` are supported."
      enum:
      - babylon_btc_signet
      - babylon_btc
      - beacon_eth
      - beacon_eth_holesky
      - core_btc
      - core_xtn
      - sky_farm_eth_usdc
      example: babylon_btc_signet
      type: string
    BaseEstimateStakingFee:
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
      required:
      - activity_type
      type: object
    EstimateStakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateStakeActivity'
      title: Staking fee
    EstimateUnstakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateUnstakeActivity'
      title: Unstaking fee
    EstimateWithdrawFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateWithdrawActivity'
      title: Withdrawal fee
    EstimateClaimFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - properties:
          staking_id:
            description: "The ID of the staking position. You can retrieve a list\
              \ of staking positions by calling [List staking positions](/v2/api-references/stakings/list-staking-positions)."
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          fee:
            $ref: '#/components/schemas/TransactionRequestFee'
        type: object
      title: Claim fee
    AddressBook:
      description: The information of an address book entry.
      example:
        address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_name: Example Wallet
        memo: 9d4773eb
        wallet_type: Custodial
        label: test
        entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email: help@cobo.com
        chain_ids:
        - ETH
        - ETH
      properties:
        org_id:
          description: The organization ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        entry_id:
          description: The entry ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          type: string
        memo:
          description: The memo.
          example: 9d4773eb
          type: string
        wallet_name:
          description: The wallet name.
          example: Example Wallet
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        label:
          description: The address label.
          example: test
          type: string
        chain_ids:
          description: A list of chain IDs.
          items:
            example: ETH
            type: string
          type: array
        email:
          description: The email of the address owner.
          example: help@cobo.com
          type: string
      required:
      - address
      - entry_id
      - label
      - org_id
      type: object
    ApiLogSummary:
      description: The information about an API log.
      properties:
        log_id:
          description: "A unique identifier for the API log, used for tracking."
          example: 924c461fae1047c3befabb50fe1633f9
          type: string
        api_method:
          description: The HTTP method used for the API request.
          example: GET
          type: string
        api_endpoint:
          description: The endpoint of the API request.
          example: /v2/wallets/asset
          type: string
        request_timestamp:
          description: "The time when the API request was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        status_code:
          description: The HTTP status code returned by the API request.
          example: 200
          type: integer
      required:
      - api_endpoint
      - api_method
      - api_request_uuid
      - request_timestamp
      - status_code
      type: object
    ApiLogDetails:
      description: The information about an API log.
      properties:
        log_id:
          description: "A unique identifier for the API log, used for tracking."
          example: 924c461fae1047c3befabb50fe1633f9
          type: string
        api_method:
          description: The HTTP method used for the API request.
          example: GET
          type: string
        api_endpoint:
          description: The endpoint of the API request.
          example: /v2/wallets/asset
          type: string
        status_code:
          description: The HTTP status code returned by the API request.
          example: 200
          type: integer
        ip_address:
          description: The client's IP address that made the API request.
          example: 127.0.0.1
          type: string
        request_timestamp:
          description: "The time when the API request was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        api_key:
          description: "The API key used to call the API. For more details, refer\
            \ to [API key](/v2/guides/overview/cobo-auth#api-key)."
          example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
          type: string
        response_body:
          description: The response body of the API request.
          example: "{\"success\":true}"
          type: string
        query_params:
          description: The query parameters of the API request.
          example: "{\"asset\":\"eth\",\"amount\":100}"
          type: string
        request_body:
          description: The request body of the API request.
          example: "{\"asset\":\"eth\",\"amount\":100}"
          type: string
      required:
      - api_endpoint
      - api_key
      - api_method
      - ip_address
      - log_id
      - query_params
      - request_body
      - request_timestamp
      - response_body
      - status_code
      type: object
    RoleScopes:
      example:
        role_name: API_Spender
        scopes:
          wallet_subtypes:
          - Asset
          - Asset
          wallet_types:
          - Custodial
          - Custodial
          wallet_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          vault_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          project_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        role_name:
          description: The user role associated with this API key.
          example: API_Spender
          type: string
        scopes:
          $ref: '#/components/schemas/Scopes'
      required:
      - role_name
      - scopes
      type: object
    Scopes:
      description: The wallet scopes associated with this API key.
      example:
        wallet_subtypes:
        - Asset
        - Asset
        wallet_types:
        - Custodial
        - Custodial
        wallet_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        vault_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        project_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        wallet_types:
          description: |
            The list of wallet types that this API key can access. Possible values include:
              - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)
              - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)
              - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)
              - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          items:
            $ref: '#/components/schemas/WalletType'
          type: array
        wallet_subtypes:
          description: |
            The list of wallet sub-types that this API key can access. Possible values include:
              - `Asset`: Custodial Wallets (Asset Wallets).
              - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
              - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
              - `Safe{Wallet}`: Smart Contract Wallets (Safe).
              - `Main`: Exchange Wallets (Main Account).
              - `Sub`: Exchange Wallets (Sub Account).
          items:
            $ref: '#/components/schemas/WalletSubtype'
          type: array
        wallet_ids:
          description: The list of wallet IDs that this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        vault_ids:
          description: (Applicable to MPC Wallets only) The list of vault IDs that
            this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        project_ids:
          description: (Applicable to MPC Wallets only) The list of project IDs that
            this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
      type: object
    CallbackMessage:
      description: The information about a callback message.
      example:
        transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        result: ok
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        data:
          is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Address
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          raw_tx_info:
            selected_utxos:
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
        updated_timestamp: 1640918000000
        created_timestamp: 1640918000000
        id: 00000000-0000-0000-0000-000000000000
        request_id: "1734602498819"
        url: https://example.com/withdraw_callback
        status: Approved
      properties:
        id:
          description: The callback message ID.
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        created_timestamp:
          description: "The time when the callback message was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the callback message was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        request_id:
          description: The request ID of the transaction.
          example: "1734602498819"
          type: string
        transaction_id:
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        url:
          description: The callback endpoint URL.
          example: https://example.com/withdraw_callback
          type: string
        data:
          $ref: '#/components/schemas/Transaction'
        status:
          description: The callback message status.
          enum:
          - Denied
          - Approved
          - Failed
          example: Approved
          type: string
        result:
          description: The callback message result.
          enum:
          - ok
          - deny
          example: ok
          type: string
      required:
      - created_timestamp
      - data
      - id
      - request_id
      - status
      - transaction_id
      - updated_timestamp
      - url
      type: object
    SwapActivity:
      example:
        wallet_id: 123e4567-e89b-12d3-a456-426614174001
        fee_amount: "0.005"
        updated_timestamp: 1677587393000
        pay_amount: "1.5"
        initiator: John Doe
        activity_id: 123e4567-e89b-12d3-a456-426614174000
        pay_token_id: ETH
        receive_token_id: USDT
        receive_amount: "2000"
        created_timestamp: 1677587333000
        status: Success
        initiator_type: API
      properties:
        activity_id:
          description: The unique identifier of the swap activity.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        status:
          description: The status of the swap activity.
          example: Success
          type: string
        wallet_id:
          description: The unique identifier of the wallet.
          example: 123e4567-e89b-12d3-a456-426614174001
          format: uuid
          type: string
        pay_token_id:
          description: The token symbol to swap from.
          example: ETH
          type: string
        receive_token_id:
          description: The token symbol to swap to.
          example: USDT
          type: string
        pay_amount:
          description: The amount of tokens to bridge.
          example: "1.5"
          type: string
        receive_amount:
          description: The amount of tokens to receive.
          example: "2000"
          type: string
        fee_amount:
          description: The amount of fee.
          example: "0.005"
          type: string
        initiator:
          description: The initiator of the swap activity.
          example: John Doe
          nullable: true
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        created_timestamp:
          description: "The time when the swap activity was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587333000
          type: integer
        updated_timestamp:
          description: "The time when the swap activity was last updated, in Unix\
            \ timestamp format, measured in milliseconds."
          example: 1677587393000
          type: integer
      type: object
    SwapTokenPair:
      example:
        pay_token_id: ETH
        receive_token_id: USDT
      properties:
        pay_token_id:
          description: The source token symbol.
          example: ETH
          type: string
        receive_token_id:
          description: The target token symbol.
          example: USDT
          type: string
      type: object
    SwapSummary:
      example:
        activity_count: 100
        total_usd_value: "12345.67"
      properties:
        total_usd_value:
          description: "The total USD value of the swap activities, represented as\
            \ a string."
          example: "12345.67"
          type: string
        activity_count:
          description: The total number of swap activities.
          example: 100
          type: integer
      required:
      - activity_count
      - total_usd_value
      type: object
    list_supported_chains_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          confirming_threshold: 15
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          confirming_threshold: 15
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        data:
          items:
            $ref: '#/components/schemas/ChainInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_supported_tokens_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          asset_model_type: Account
          symbol: USDT
          chain_id: ETH
          custodial_minimum_deposit_threshold: "0.0001"
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          dust_threshold: "0.00000546"
          can_deposit: true
          fee_token_id: ETH
          token_id: ETH_USDT
          name: Tether USDT
          can_withdraw: true
          decimal: 18
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          asset_model_type: Account
          symbol: USDT
          chain_id: ETH
          custodial_minimum_deposit_threshold: "0.0001"
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          dust_threshold: "0.00000546"
          can_deposit: true
          fee_token_id: ETH
          token_id: ETH_USDT
          name: Tether USDT
          can_withdraw: true
          decimal: 18
      properties:
        data:
          items:
            $ref: '#/components/schemas/ExtendedTokenInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_wallets_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
      properties:
        data:
          items:
            $ref: '#/components/schemas/WalletInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    delete_wallet_by_id_201_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to delete the wallet has been successfully submitted.
            - `true`: The request to delete the wallet has been successfully submitted.
            - `false`: The request to delete the wallet has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    list_utxos_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
      properties:
        data:
          items:
            $ref: '#/components/schemas/UTXO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    lock_utxos_request_utxos_inner:
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        tx_hash:
          description: The transaction hash.
          example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      required:
      - token_id
      - tx_hash
      - vout_n
      type: object
    lock_utxos_request:
      properties:
        utxos:
          items:
            $ref: '#/components/schemas/lock_utxos_request_utxos_inner'
          type: array
      required:
      - utxos
      type: object
    lock_utxos_201_response:
      example:
        executed: true
      properties:
        executed:
          description: |
            Whether the locking or unlocking operation has been successfully executed.
            - `true`: The operation has been successfully executed.
            - `false`: The operation has not been executed.
          example: true
          type: boolean
      type: object
    list_addresses_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - path: m/44/0/2/0/0
          address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
          x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          memo: "82840924"
          taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          encoding: ENCODING_P2PKH
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
        - path: m/44/0/2/0/0
          address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
          x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          memo: "82840924"
          taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          encoding: ENCODING_P2PKH
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_address_request:
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        count:
          default: 1
          description: The number of addresses to create.
          example: 1
          maximum: 50
          minimum: 1
          type: integer
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
      required:
      - chain_id
      - count
      type: object
    list_token_balances_for_address_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    check_address_validity_200_response:
      example:
        validity: true
      properties:
        validity:
          description: |
            Whether the address is valid.
            - `true`: The address is valid.
            - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - validity
      type: object
    check_addresses_validity_200_response_inner:
      example:
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        validity: true
      properties:
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
        validity:
          description: |
            Whether the address is valid.
             - `true`: The address is valid.
             - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - address
      - validity
      type: object
    check_address_chains_validity_200_response_inner:
      example:
        chain_id: ETH
        validity: true
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain."
          example: ETH
          type: string
        validity:
          description: |
            Whether the address is valid for the specified chain.
             - `true`: The address is valid.
             - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - chain_id
      - validity
      type: object
    list_mpc_projects_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
          name: Project name
          threshold: 2
          created_timestamp: 1718619403933
          participants: 3
        - project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
          name: Project name
          threshold: 2
          created_timestamp: 1718619403933
          participants: 3
      properties:
        data:
          items:
            $ref: '#/components/schemas/MPCProject'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_mpc_project_request:
      properties:
        name:
          description: The project name.
          example: Project name
          type: string
        participants:
          description: "The number of key share holders in the project.\n\n**Notes:**\n\
            1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `participants` to 2 or 3. \n\n2. `threshold` must\
            \ be less than or equal to `participants`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation\
            \ in the project.\n\n**Notes:**\n1. Currently, the available [Threshold\
            \ Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `threshold` to 2 or 3. \n\n2. `threshold` must be\
            \ less than or equal to `participants`.\n"
          example: 2
          type: integer
      required:
      - name
      - participants
      - threshold
      type: object
    update_mpc_project_by_id_request:
      properties:
        name:
          description: The project's new name.
          example: New project name
          type: string
      required:
      - name
      type: object
    list_mpc_vaults_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - root_pubkeys:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          name: Vault name
          created_timestamp: 1718619403933
          type: Org-Controlled
          vault_id: YPdbyVaVGqXXjkUsohHw
        - root_pubkeys:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          name: Vault name
          created_timestamp: 1718619403933
          type: Org-Controlled
          vault_id: YPdbyVaVGqXXjkUsohHw
      properties:
        data:
          items:
            $ref: '#/components/schemas/MPCVault'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_mpc_vault_request:
      properties:
        project_id:
          description: |
            The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).

            **Notes:**
            1. If you set `vault_type` to `OrgControlled`, the value of `project_id` will be ignored.
            2. If you set `vault_type` to `UserControlled`, then `project_id` is required.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The vault name.
          example: My vault
          type: string
        vault_type:
          $ref: '#/components/schemas/MPCVaultType'
      required:
      - name
      - vault_type
      type: object
    update_mpc_vault_by_id_request:
      properties:
        name:
          description: The new name of the vault.
          example: The new name of the vault
          type: string
      required:
      - name
      type: object
    list_key_share_holder_groups_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - key_share_holders:
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          tss_key_share_groups:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          threshold: 2
          created_timestamp: 1718619403933
          type: MainGroup
          participants: 3
          status: Valid
        - key_share_holders:
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          tss_key_share_groups:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          threshold: 2
          created_timestamp: 1718619403933
          type: MainGroup
          participants: 3
          status: Valid
      properties:
        data:
          items:
            $ref: '#/components/schemas/KeyShareHolderGroup'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_key_share_holder_group_request:
      properties:
        key_share_holder_group_type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        participants:
          description: "The number of key share holders in this key share holder group.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `participants` to 2 or 3. \n\n2. `threshold` must\
            \ be less than or equal to `participants`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `threshold` to 2 or 3. \n\n2. `threshold` must be\
            \ less than or equal to `participants`.\n"
          example: 2
          type: integer
        key_share_holders:
          items:
            $ref: '#/components/schemas/CreateKeyShareHolder'
          type: array
      required:
      - key_share_holder_group_type
      - key_share_holders
      - participants
      - threshold
      type: object
    update_key_share_holder_group_by_id_request:
      properties:
        update_key_share_holder_group_action:
          $ref: '#/components/schemas/UpdateGroupAction'
      required:
      - update_key_share_holder_group_action
      type: object
    delete_key_share_holder_group_by_id_201_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to delete the key share holder group has been successfully submitted.
            - `true`: The request to delete the key share holder group has been successfully submitted.
            - `false`: The request to delete the key share holder group has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    list_tss_requests_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - description: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          created_timestamp: 1701396866000
          tss_request_id: "20240711114129000132315000003970"
          type: Recovery
          source_key_share_holder_group:
            key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          status: Success
        - description: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          created_timestamp: 1701396866000
          tss_request_id: "20240711114129000132315000003970"
          type: Recovery
          source_key_share_holder_group:
            key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/TSSRequest'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_tss_request_request:
      properties:
        type:
          $ref: '#/components/schemas/TSSRequestType'
        target_key_share_holder_group_id:
          description: The target key share holder group ID.
          example: a1bf161f-8b60-4f61-9c35-6434b8654437
          type: string
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        description:
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          type: string
      required:
      - target_key_share_holder_group_id
      - type
      type: object
    list_exchanges_200_response_inner:
      description: The information about the supported exchange.
      example:
        exchange_id: binance
        supported_trading_account_types:
        - Spot
        - Asset
      properties:
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        supported_trading_account_types:
          description: The supported trading account types of this exchange.
          example:
          - Spot
          - Asset
          items:
            type: string
          type: array
      required:
      - exchange_id
      - supported_trading_account_types
      type: object
    list_supported_assets_for_exchange_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_asset_balances_for_exchange_wallet_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - trading_account_type: Spot
          balance: "{}"
          asset_id: USDT
        - trading_account_type: Spot
          balance: "{}"
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/SubWalletAssetBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    check_loop_transfers_200_response_inner:
      example:
        is_loop: false
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      properties:
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
        is_loop:
          description: |
            Whether the transaction from the given source to the given destination address can be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.

            - `true`: The transaction can be executed as a Cobo Loop transfer.
            - `false`: The transaction cannot be executed as a Cobo Loop transfer.
          example: false
          type: boolean
      required:
      - validity
      type: object
    create_transfer_transaction_201_response:
      example:
        transaction_id: c986cb3b-1301-412f-9450-13a52c43a95f
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Submitted
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction ID.
          example: c986cb3b-1301-412f-9450-13a52c43a95f
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
      required:
      - request_id
      - status
      - transaction_id
      type: object
    list_transactions_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Address
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          raw_tx_info:
            selected_utxos:
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
        - is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Address
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          raw_tx_info:
            selected_utxos:
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
      properties:
        data:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    broadcast_signed_transactions_request:
      properties:
        transaction_ids:
          description: "The transaction IDs of the signed transactions to be broadcast.\
            \ You can retrieve the transactions corresponding to a staking activity\
            \ by calling [Get staking activity details](/v2/api-references/stakings/get-staking-activity-details)."
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
      type: object
    broadcast_signed_transactions_201_response_inner:
      example:
        transaction_id: c986cb3b-1301-412f-9450-13a52c43a95f
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction ID of this broadcast transaction.
          example: c986cb3b-1301-412f-9450-13a52c43a95f
          type: string
      required:
      - request_id
      - transaction_id
      type: object
    get_token_2XX_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        scope: ""
        token_type: Bearer
        expires_in: 43199
      properties:
        access_token:
          description: The Org Access Token.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: "The type of the tokens, which is Bearer."
          example: Bearer
          type: string
        scope:
          description: "The scope of the Org Access Token to limit the app's access\
            \ to the organization's resources. \n**Note**: Currently this property\
            \ value is empty. The scope of the Org Access Token is based on the permissions\
            \ granted when the app user installs the app.\n"
          example: ""
          type: string
        expires_in:
          description: The time in seconds in which the Org Access Token expires.
          example: 43199
          type: integer
        refresh_token:
          description: "The Refresh Token, used to obtain a new Org Access Token when\
            \ the current Org Access Token expires. The expiration time for Refresh\
            \ Tokens is currently set to 30 days and is subject to change."
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    get_token_4XX_response:
      description: The response of a failed request.
      example:
        error_description: error_description
        error: error
      properties:
        error:
          description: The error name.
          type: string
        error_description:
          description: The error description.
          type: string
      required:
      - error
      - error_description
      type: object
    refresh_token_request:
      properties:
        client_id:
          description: "The client ID, a unique identifier to distinguish Cobo Portal\
            \ Apps. You can get the client ID by retrieving the manifest file after\
            \ publishing the app."
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        grant_type:
          description: The OAuth grant type. Set the value as `refresh_token`.
          example: refresh_token
          type: string
        refresh_token:
          description: The Refresh Token of the current Org Access Token.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    refresh_token_2XX_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        scope: ""
        token_type: Bearer
        expires_in: 43199
      properties:
        access_token:
          description: The new Org Access Token.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: "The type of the tokens, which is Bearer."
          example: Bearer
          type: string
        scope:
          description: |
            The scope of the Org Access Token to limit the app's access to the organization's resources.
            **Note**: Currently this property value is empty. The scope of the Org Access Token is based on the permissions granted when the app user installs the app.
          example: ""
          type: string
        expires_in:
          description: The time in seconds in which the new Org Access Token expires.
          example: 43199
          type: integer
        refresh_token:
          description: "The Refresh Token, used to obtain another Org Access Token\
            \ when the new Org Access Token expires. The expiration time for Refresh\
            \ Tokens is currently set to 30 days and is subject to change."
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    list_webhook_endpoints_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: My webhook endpoint
          created_timestamp: 1701396866000
          url: https://example.com/webhook
          status: STATUS_ACTIVE
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: My webhook endpoint
          created_timestamp: 1701396866000
          url: https://example.com/webhook
          status: STATUS_ACTIVE
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEndpoint'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_webhook_endpoint_request:
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          type: string
        subscribed_events:
          description: |
            The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - subscribed_events
      - url
      type: object
    update_webhook_endpoint_by_id_request:
      properties:
        subscribed_events:
          description: "The new event types you want to subscribe to for this webhook\
            \ endpoint. You can call [Get webhook event types](/v2/api-references/developers--webhooks/get-webhook-event-types)\
            \ to retrieve all available event types."
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          description: "The new status you want to set the webhook endpoint to. If\
            \ you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked,\
            \ meaning it will no longer receive any webhook events."
          enum:
          - STATUS_INACTIVE
          example: STATUS_INACTIVE
          type: string
        description:
          description: The webhook endpoint description.
          example: My webhook endpoint
          type: string
      type: object
    list_webhook_event_definitions_200_response_inner:
      example:
        event_type: wallets.transaction.created
        description: Occurs when the transaction status is updated
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        description:
          description: The description of the webhook event type.
          example: Occurs when the transaction status is updated
          type: string
      type: object
    trigger_test_webhook_event_request:
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        override_data:
          description: "An object for customization of the webhook event payload.\
            \ You only need to include the fields you want to customize. \n\nThe provided\
            \ fields must match the webhook event data structure, depending on the\
            \ specified event type. For a complete introduction of the webhook event\
            \ data structure, refer to the `data.data` property in the response of\
            \ [List all webhook events](/v2/api-references/developers--webhooks/list-all-webhook-events).\n\
            \nIf this property is not provided, a default payload will be returned.\n"
          example:
            chain_id: ETH
            transaction_id: Test-transaction-id
          type: object
      required:
      - event_type
      type: object
    trigger_test_webhook_event_201_response:
      example:
        triggered: true
      properties:
        triggered:
          description: |
            Whether a test webhook event was successfully triggered.
            - `true`: The test webhook event was successfully triggered.
            - `false`: The test webhook event could not be triggered.
          example: true
          type: boolean
      type: object
    list_webhook_events_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Address
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            raw_tx_info:
              selected_utxos:
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Address
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            raw_tx_info:
              selected_utxos:
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_webhook_event_logs_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - request_body:
            next_retry_timestamp: 1701396866000
            retries_left: 3
            event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
            data:
              is_loop: false
              chain_id: ETH
              confirmed_num: 12
              fee:
                effective_gas_price: "100000000"
                max_priority_fee_per_gas: "1000000000000"
                gas_limit: "21000"
                token_id: ETH
                gas_used: "100000000"
                max_fee_per_gas: "9000000000000"
                fee_type: EVM_EIP_1559
                fee_used: "0.1"
              initiator: "API Prod Key #1"
              destination:
                account_output:
                  amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                  memo: "82840924"
                destination_type: Address
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                utxo_outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                force_internal: false
                force_external: false
              description: withdrawal to exchange trading account
              block_info:
                block_timestamp: 1717740319
                block_number: 123
                block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
              asset_id: USDT
              source:
                wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
                source_type: DepositFromAddress
              confirming_threshold: 15
              type: Deposit
              result:
                result_type: Address
                signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              sub_status: PendingDoubleCheck
              cobo_id: "20231213122855000000000000000000"
              created_timestamp: 1610445878970
              initiator_type: API
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              data_type: Transaction
              category:
              - Payment
              - Payment
              request_id: web_send_by_user_327_1610444045047
              raw_tx_info:
                selected_utxos:
                - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  value: "0.5"
                - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  value: "0.5"
                raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
                used_nonce: 9
              replacement:
                replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_type: Resend
                replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_type: Resend
              failed_reason: Rejected by signer Cobo TSS
              status: Submitted
            created_timestamp: 1701396866000
            type: wallets.transaction.created
            url: https://example.com/webhook
            status: Success
          success: true
          request_headers: "{\"Content-Type\": \"application/json\"}"
          response_body: response_body
          created_timestamp: 1701396866000
          response_time: 100
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          failure_reason: Connect Timeout
          response_status_code: 200
        - request_body:
            next_retry_timestamp: 1701396866000
            retries_left: 3
            event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
            data:
              is_loop: false
              chain_id: ETH
              confirmed_num: 12
              fee:
                effective_gas_price: "100000000"
                max_priority_fee_per_gas: "1000000000000"
                gas_limit: "21000"
                token_id: ETH
                gas_used: "100000000"
                max_fee_per_gas: "9000000000000"
                fee_type: EVM_EIP_1559
                fee_used: "0.1"
              initiator: "API Prod Key #1"
              destination:
                account_output:
                  amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                  memo: "82840924"
                destination_type: Address
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                utxo_outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                force_internal: false
                force_external: false
              description: withdrawal to exchange trading account
              block_info:
                block_timestamp: 1717740319
                block_number: 123
                block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
              asset_id: USDT
              source:
                wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
                source_type: DepositFromAddress
              confirming_threshold: 15
              type: Deposit
              result:
                result_type: Address
                signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              sub_status: PendingDoubleCheck
              cobo_id: "20231213122855000000000000000000"
              created_timestamp: 1610445878970
              initiator_type: API
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              data_type: Transaction
              category:
              - Payment
              - Payment
              request_id: web_send_by_user_327_1610444045047
              raw_tx_info:
                selected_utxos:
                - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  value: "0.5"
                - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  value: "0.5"
                raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
                used_nonce: 9
              replacement:
                replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_type: Resend
                replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_type: Resend
              failed_reason: Rejected by signer Cobo TSS
              status: Submitted
            created_timestamp: 1701396866000
            type: wallets.transaction.created
            url: https://example.com/webhook
            status: Success
          success: true
          request_headers: "{\"Content-Type\": \"application/json\"}"
          response_body: response_body
          created_timestamp: 1701396866000
          response_time: 100
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          failure_reason: Connect Timeout
          response_status_code: 200
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEventLog'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    retry_webhook_event_by_id_201_response:
      example:
        retried: true
      properties:
        retried:
          description: Whether the retry request has been successfully sent.
          example: true
          type: boolean
      type: object
    list_staking_pools_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - protocol: Babylon
          supported_wallet_subtypes:
          - Org-Controlled
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
        - protocol: Babylon
          supported_wallet_subtypes:
          - Org-Controlled
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
      properties:
        data:
          items:
            $ref: '#/components/schemas/PoolSummary'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_staking_estimation_fee_request:
      discriminator:
        mapping:
          Stake: '#/components/schemas/EstimateStakeFee'
          Unstake: '#/components/schemas/EstimateUnstakeFee'
          Withdraw: '#/components/schemas/EstimateWithdrawFee'
          Claim: '#/components/schemas/EstimateClaimFee'
        propertyName: activity_type
      oneOf:
      - $ref: '#/components/schemas/EstimateStakeFee'
      - $ref: '#/components/schemas/EstimateUnstakeFee'
      - $ref: '#/components/schemas/EstimateWithdrawFee'
      - $ref: '#/components/schemas/EstimateClaimFee'
    get_staking_estimation_fee_201_response:
      discriminator:
        mapping:
          ETHBeacon: '#/components/schemas/EthStakeEstimatedFee'
          Babylon: '#/components/schemas/BabylonStakeEstimatedFee'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/EthStakeEstimatedFee'
      - $ref: '#/components/schemas/BabylonStakeEstimatedFee'
    create_stake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateStakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_stake_activity_201_response:
      example:
        activity_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        activity_id:
          description: The activity ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        staking_id:
          description: The ID of the staking position.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - activity_id
      type: object
    list_stakings_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          amounts:
          - amount: "100.00"
            status: Active
          - amount: "100.00"
            status: Active
          token_id: BTC
          updated_timestamp: 1640995200000
          validator_info:
            icon_url: https://example.com/icon.png
            public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            supported_pos_chains:
            - Babylon
            - Cosmos
            - Ethereum
            name: Cobo
            commission_rate: 0.1
            priority: 0
            pool_type: Babylon
          extra:
            unlock_block_height: 871234
            stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            pos_chain: Babylon Chain
            unlock_timestamp: 1640995200000
            pool_type: Babylon
          created_timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          pool_id: babylon_btc_signet
          rewards_info: {}
        - wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          amounts:
          - amount: "100.00"
            status: Active
          - amount: "100.00"
            status: Active
          token_id: BTC
          updated_timestamp: 1640995200000
          validator_info:
            icon_url: https://example.com/icon.png
            public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            supported_pos_chains:
            - Babylon
            - Cosmos
            - Ethereum
            name: Cobo
            commission_rate: 0.1
            priority: 0
            pool_type: Babylon
          extra:
            unlock_block_height: 871234
            stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            pos_chain: Babylon Chain
            unlock_timestamp: 1640995200000
            pool_type: Babylon
          created_timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          pool_id: babylon_btc_signet
          rewards_info: {}
      properties:
        data:
          items:
            $ref: '#/components/schemas/Stakings'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_unstake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateUnstakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_withdraw_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateWithdrawActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_claim_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateClaimActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    list_staking_activities_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - amount: "100.00"
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          initiator: steve@example.com
          fee:
            max_fee_amount: "0.1"
            token_id: TRON
            fee_type: EVM_EIP_1559
          created_timestamp: 1640995200000
          type: Stake
          pool_id: babylon_btc_signet
          initiator_type: API
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          token_id: BTC
          updated_timestamp: 1640995200000
          extra:
            param_version: 2
            finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time: 2000
            auto_broadcast: false
            withdraw_from_type: Stake
            pool_type: Babylon
          request_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          timeline:
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          transaction_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
        - amount: "100.00"
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          initiator: steve@example.com
          fee:
            max_fee_amount: "0.1"
            token_id: TRON
            fee_type: EVM_EIP_1559
          created_timestamp: 1640995200000
          type: Stake
          pool_id: babylon_btc_signet
          initiator_type: API
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          token_id: BTC
          updated_timestamp: 1640995200000
          extra:
            param_version: 2
            finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time: 2000
            auto_broadcast: false
            withdraw_from_type: Stake
            pool_type: Babylon
          request_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          timeline:
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          transaction_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_api_key_info_200_response:
      example:
        callback_url: https://example.com/api/callback
        valid_ips:
        - 127.0.0.1
        - 127.0.0.1
        role_scopes:
        - role_name: API_Spender
          scopes:
            wallet_subtypes:
            - Asset
            - Asset
            wallet_types:
            - Custodial
            - Custodial
            wallet_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            vault_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            project_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - role_name: API_Spender
          scopes:
            wallet_subtypes:
            - Asset
            - Asset
            wallet_types:
            - Custodial
            - Custodial
            wallet_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            vault_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            project_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
        updated_timestamp: 1701396866000
        expired_timestamp: 1701396866000
        curve_type: ED25519
        name: my_api_key
        created_timestamp: 1701396866000
        key: 427b06814cca3359bd0e710c1187833b7f052748a3fdf59888fad4ddc4bd379f
      properties:
        name:
          description: The API key name.
          example: my_api_key
          type: string
        curve_type:
          description: |
            The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include:
            - `ED25519`: Ed25519
            - `SECP256K1`: Secp256k1
          enum:
          - ED25519
          - SECP256K1
          example: ED25519
          type: string
        key:
          description: The API key value.
          example: 427b06814cca3359bd0e710c1187833b7f052748a3fdf59888fad4ddc4bd379f
          type: string
        callback_url:
          description: The URL of the callback endpoint that receives callback messages
            triggered by this API key.
          example: https://example.com/api/callback
          type: string
        valid_ips:
          description: (Applicable to permanent API keys only) The list of IP addresses
            that are allowed to use this API key.
          items:
            example: 127.0.0.1
            type: string
          type: array
        created_timestamp:
          description: "The time when the API key was registered, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the API key information was last updated, in\
            \ Unix timestamp format, measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        expired_timestamp:
          description: "The time when the API key expires, in Unix timestamp format,\
            \ measured in milliseconds. For permanent API keys, this property value\
            \ is `null`."
          example: 1701396866000
          format: int64
          type: integer
        role_scopes:
          description: The list of user roles and wallet scopes associated with the
            API key.
          items:
            $ref: '#/components/schemas/RoleScopes'
          type: array
      required:
      - created_timestamp
      - curve_type
      - key
      - name
      - updated_timestamp
      type: object
    list_callback_messages_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          result: ok
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Address
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            raw_tx_info:
              selected_utxos:
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          updated_timestamp: 1640918000000
          created_timestamp: 1640918000000
          id: 00000000-0000-0000-0000-000000000000
          request_id: "1734602498819"
          url: https://example.com/withdraw_callback
          status: Approved
        - transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          result: ok
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Address
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            raw_tx_info:
              selected_utxos:
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              - address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          updated_timestamp: 1640918000000
          created_timestamp: 1640918000000
          id: 00000000-0000-0000-0000-000000000000
          request_id: "1734602498819"
          url: https://example.com/withdraw_callback
          status: Approved
      properties:
        data:
          items:
            $ref: '#/components/schemas/CallbackMessage'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    list_address_books_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_name: Example Wallet
          memo: 9d4773eb
          wallet_type: Custodial
          label: test
          entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          email: help@cobo.com
          chain_ids:
          - ETH
          - ETH
        - address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_name: Example Wallet
          memo: 9d4773eb
          wallet_type: Custodial
          label: test
          entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          email: help@cobo.com
          chain_ids:
          - ETH
          - ETH
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressBook'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_swap_activities_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: 123e4567-e89b-12d3-a456-426614174001
          fee_amount: "0.005"
          updated_timestamp: 1677587393000
          pay_amount: "1.5"
          initiator: John Doe
          activity_id: 123e4567-e89b-12d3-a456-426614174000
          pay_token_id: ETH
          receive_token_id: USDT
          receive_amount: "2000"
          created_timestamp: 1677587333000
          status: Success
          initiator_type: API
        - wallet_id: 123e4567-e89b-12d3-a456-426614174001
          fee_amount: "0.005"
          updated_timestamp: 1677587393000
          pay_amount: "1.5"
          initiator: John Doe
          activity_id: 123e4567-e89b-12d3-a456-426614174000
          pay_token_id: ETH
          receive_token_id: USDT
          receive_amount: "2000"
          created_timestamp: 1677587333000
          status: Success
          initiator_type: API
      properties:
        data:
          items:
            $ref: '#/components/schemas/SwapActivity'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_enable_token_pairs_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - pay_token_id: ETH
          receive_token_id: USDT
        - pay_token_id: ETH
          receive_token_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/SwapTokenPair'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_quote_request:
      properties:
        pay_token_id:
          description: Unique id of the token to pay.
          example: ETH
          type: string
        receive_token_id:
          description: Unique id of the token to receive.
          example: ETH
          type: string
        pay_amount:
          description: The amount of token to swap.
          example: "1.5"
          type: string
        receive_amount:
          description: The amount of token to receive.
          example: "2000"
          type: string
      required:
      - pay_token_id
      - receive_token_id
      type: object
    create_quote_201_response:
      example:
        pay_usd_value: "2850.75"
        quote_id: 550e8400-e29b-41d4-a716-446655440000
        pay_amount: "1.5"
        max_pay_amount: "1000"
        quote_expired_time: 1677587393000
        fee_token_id: "1.5"
        min_receive_amount: "0"
        receive_usd_value: "2000"
        fee_amount: "2000"
        fee_usd_value: "2850.75"
        receive_amount: "2000"
        max_receive_amount: "0"
        min_pay_amount: "0"
        quote_created_time: 1677587333000
      properties:
        quote_id:
          description: The unique identifier of this quote.
          example: 550e8400-e29b-41d4-a716-446655440000
          type: string
        pay_amount:
          description: The amount of tokens to pay.
          example: "1.5"
          type: string
        pay_usd_value:
          description: The USD value of pay_amount.
          example: "2850.75"
          type: string
        receive_amount:
          description: The amount of tokens to receive.
          example: "2000"
          type: string
        receive_usd_value:
          description: The USD value of receive_amount.
          example: "2000"
          type: string
        fee_token_id:
          description: The token to pay for fee.
          example: "1.5"
          type: string
        fee_amount:
          description: The amount of tokens to pay for fee.
          example: "2000"
          type: string
        fee_usd_value:
          description: The USD value of fee_amount.
          example: "2850.75"
          type: string
        min_pay_amount:
          description: The minimum amount of tokens to pay.
          example: "0"
          type: string
        max_pay_amount:
          description: The maximum amount of tokens to pay.
          example: "1000"
          type: string
        min_receive_amount:
          description: The minimum amount of tokens to receive.
          example: "0"
          type: string
        max_receive_amount:
          description: The maximum amount of tokens to receive.
          example: "0"
          type: string
        quote_created_time:
          description: "The time when the quote was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1677587333000
          type: integer
        quote_expired_time:
          description: "The time when the quote will expire, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1677587393000
          type: integer
      required:
      - activity_id
      - pay_amount
      - pay_usd_value
      - quote_created_time
      - quote_expired_time
      - quote_id
      - receive_amount
      - receive_usd_value
      type: object
    create_swap_activity_request:
      properties:
        wallet_id:
          description: The unique identifier of the wallet.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        quote_id:
          description: The unique identifier of the quote.
          example: 123e4567-e89b-12d3-a456-426614174001
          format: uuid
          type: string
      required:
      - quote_id
      - wallet_id
      type: object
    TokenBalance_balance:
      description: The balance details.
      example:
        total: "100.0"
        pending: "10.5"
        available: "80.5"
        locked: "3.0"
      properties:
        total:
          description: "The current amount of tokens in an address, which is retrieved\
            \ directly from the network. To learn more, see [Balances and transaction\
            \ amounts for MPC Wallets](/v2/guides/mpc-wallets/balance-amounts) for\
            \ more details."
          example: "100.0"
          type: string
        available:
          description: "The amount of tokens ready to be spent. To learn more, see\
            \ [Balances and transaction amounts for MPC Wallets](/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "80.5"
          type: string
        pending:
          default: "0"
          description: "The total amount being sent in a transaction, which is calculated\
            \ as the withdrawal amount plus the transaction fee. To learn more, see\
            \ [Balances and transaction amounts for MPC Wallets](/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "10.5"
          type: string
        locked:
          default: "0"
          description: "For UTXO chains, this is the combined value of the selected\
            \ UTXOs for the transaction. For other chains, it is equal to the Pending\
            \ amount. To learn more, see [Balances and transaction amounts for MPC\
            \ Wallets](/v2/guides/mpc-wallets/balance-amounts) for more details."
          example: "3.0"
          type: string
      required:
      - available
      - total
      type: object
    EstimatedEvmEip1559Fee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      required:
      - gas_limit
      - max_fee_per_gas
      - max_priority_fee_per_gas
    EstimatedEvmLegacyFee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      required:
      - gas_limit
      - gas_price
    EstimatedUtxoFee_slow:
      allOf:
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
      required:
      - fee_amount
      - fee_rate
    Transaction_source:
      discriminator:
        mapping:
          Asset: '#/components/schemas/TransactionCustodialAssetWalletSource'
          Web3: '#/components/schemas/TransactionCustodialWeb3WalletSource'
          Org-Controlled: '#/components/schemas/TransactionMPCWalletSource'
          User-Controlled: '#/components/schemas/TransactionMPCWalletSource'
          Safe{Wallet}: '#/components/schemas/TransactionSmartContractSafeWalletSource'
          Main: '#/components/schemas/TransactionExchangeWalletSource'
          Sub: '#/components/schemas/TransactionExchangeWalletSource'
          DepositFromAddress: '#/components/schemas/TransactionDepositFromAddressSource'
          DepositFromWallet: '#/components/schemas/TransactionDepositFromWalletSource'
          DepositFromLoop: '#/components/schemas/TransactionDepositFromLoopSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/TransactionCustodialAssetWalletSource'
      - $ref: '#/components/schemas/TransactionCustodialWeb3WalletSource'
      - $ref: '#/components/schemas/TransactionMPCWalletSource'
      - $ref: '#/components/schemas/TransactionSmartContractSafeWalletSource'
      - $ref: '#/components/schemas/TransactionExchangeWalletSource'
      - $ref: '#/components/schemas/TransactionDepositFromAddressSource'
      - $ref: '#/components/schemas/TransactionDepositFromWalletSource'
      - $ref: '#/components/schemas/TransactionDepositFromLoopSource'
    Transaction_destination:
      discriminator:
        mapping:
          Address: '#/components/schemas/TransactionTransferToAddressDestination'
          ExchangeWallet: '#/components/schemas/TransactionTransferToWalletDestination'
          EVM_Contract: '#/components/schemas/TransactionEvmContractDestination'
          EVM_EIP_191_Signature: '#/components/schemas/TransactionMessageSignEIP191Destination'
          EVM_EIP_712_Signature: '#/components/schemas/TransactionMessageSignEIP712Destination'
          EVM_Raw_Message_Signature: '#/components/schemas/TransactionRawMessageSignDestination'
          DepositToAddress: '#/components/schemas/TransactionDepositToAddressDestination'
          DepositToWallet: '#/components/schemas/TransactionDepositToWalletDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/TransactionTransferToAddressDestination'
      - $ref: '#/components/schemas/TransactionTransferToWalletDestination'
      - $ref: '#/components/schemas/TransactionEvmContractDestination'
      - $ref: '#/components/schemas/TransactionMessageSignEIP191Destination'
      - $ref: '#/components/schemas/TransactionMessageSignEIP712Destination'
      - $ref: '#/components/schemas/TransactionRawMessageSignDestination'
      - $ref: '#/components/schemas/TransactionDepositToAddressDestination'
      - $ref: '#/components/schemas/TransactionDepositToWalletDestination'
    Transaction_replacement:
      example:
        replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        replaced_by_type: Resend
        replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replaced_type: Resend
      properties:
        replaced_by_type:
          $ref: '#/components/schemas/ReplaceType'
        replaced_by_transaction_id:
          description: The ID of the transaction that this transaction was replaced
            by.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_by_transaction_hash:
          description: The hash of the transaction that this transaction was replaced
            by.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        replaced_type:
          $ref: '#/components/schemas/ReplaceType'
        replaced_transaction_id:
          description: The ID of the transaction that this transaction replaced.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_transaction_hash:
          description: The hash of the transaction that this transaction replaced.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
      type: object
    TransactionTransferToAddressDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      type: object
    TransactionTransferToAddressDestination_utxo_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      type: object
    TransactionRbf_source:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcTransferSource'
    AddressTransferDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      type: object
    AddressTransferDestination_utxo_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      type: object
    EthStakingExtra_allOf_beacon_validators:
      properties:
        pubkey:
          description: The public key of the validator.
          example: 0x123456789abcdef
          type: string
        status:
          $ref: '#/components/schemas/AmountStatus'
        apy:
          description: The annual percentage yield (APY) of the validator.
          example: 0.02
          type: number
        staked_amount:
          description: The staked amount.
          example: "100.00"
          type: string
        rewards_received:
          description: The rewards received.
          example: "10.00"
          type: string
        updated_timestamp:
          description: "The time when the validator's status was last updated, in\
            \ Unix timestamp format and measured in milliseconds."
          example: 1640995200000
          format: int64
          type: integer
      type: object
    Activity_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakingActivityDetailExtra'
          ETHBeacon: '#/components/schemas/EthStakingActivityDetailExtra'
          CoreBTC: '#/components/schemas/CoreStakingActivityDetailExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakingActivityDetailExtra'
      - $ref: '#/components/schemas/EthStakingActivityDetailExtra'
      - $ref: '#/components/schemas/CoreStakingActivityDetailExtra'
    CreateStakeActivity_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakeExtra'
          ETHBeacon: '#/components/schemas/EthStakeExtra'
          CoreBTC: '#/components/schemas/CoreStakeExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakeExtra'
      - $ref: '#/components/schemas/EthStakeExtra'
      - $ref: '#/components/schemas/CoreStakeExtra'
    CreateUnstakeActivity_extra:
      description: Additional protocol-specific information required for the unstaking
        operation. The required fields vary depending on the staking protocol.
      discriminator:
        mapping:
          ETHBeacon: '#/components/schemas/EthUnstakeExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/EthUnstakeExtra'
    AmountDetails_inner:
      example:
        amount: "100.00"
        status: Active
      properties:
        status:
          $ref: '#/components/schemas/AmountStatus'
        amount:
          description: The staking amount.
          example: "100.00"
          type: string
      required:
      - amount
      - status
      type: object
    PoolDetails_allOf_validators_info:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonValidator'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonValidator'
    Stakings_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakingExtra'
          ETHBeacon: '#/components/schemas/EthStakingExtra'
          CoreBTC: '#/components/schemas/CoreStakingExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakingExtra'
      - $ref: '#/components/schemas/EthStakingExtra'
      - $ref: '#/components/schemas/CoreStakingExtra'
  securitySchemes:
    CoboAuth:
      description: |
        The API key. For more details, refer to [API key](/v2/guides/overview/cobo-auth#api-key).

        In the API playground, enter your [API secret](/v2/guides/overview/cobo-auth#api-secret), and your API key will be accordingly calculated.
      in: header
      name: BIZ-API-KEY
      type: apiKey
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://auth.cobo.com/authorize
          scopes:
            custodial_asset_wallet:create: Create access to custodial asset wallets
            custodial_asset_wallet:add: Generate address access to custodial asset
              wallets
            custodial_asset_wallet:edit: Change wallet name access to custodial asset
              wallets
            custodial_asset_wallet:withdraw: Withdraw access to custodial asset wallets
            mpc_organization_controlled_wallet:create: Create access to MPC organization-controlled
              wallets
            mpc_organization_controlled_wallet:add: Generate address access to MPC
              organization-controlled wallets
            mpc_organization_controlled_wallet:edit: Change wallet name access to
              MPC organization-controlled wallets
            mpc_organization_controlled_wallet:withdraw: Withdraw access to MPC organization-controlled
              wallets
            mpc_organization_controlled_wallet:contract_call: Contract call access
              to MPC organization-controlled wallets
            mpc_organization_controlled_wallet:message_sign: Message sign access to
              MPC organization-controlled wallets
            mpc_organization_controlled_vault:manage: Create/Edit access to MPC organization-controlled
              vaults
            mpc_organization_controlled_key_group:manage: Create/Edit/Delete access
              to MPC organization-controlled key groups
            mpc_organization_controlled_tss_request:manage: Create/Cancel access to
              MPC organization-controlled tss requests
            mpc_user_controlled_wallet:create: Create access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:add: Generate address access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:edit: Change wallet name access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:withdraw: Withdraw access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:contract_call: Contract call access to MPC
              user-controlled wallets
            mpc_user_controlled_wallet:message_sign: Message sign access to MPC user-controlled
              wallets
            mpc_user_controlled_project:manage: Create/Edit access to MPC user-controlled
              projects
            mpc_user_controlled_vault:manage: Create/Edit access to MPC user-controlled
              vaults
            mpc_user_controlled_key_group:manage: Create/Edit/Delete access to MPC
              user-controlled key groups
            mpc_user_controlled_tss_request:manage: Create/Cancel access to MPC user-controlled
              tss requests
            webhook:resend: Resend access to webhook events
            webhook_url:edit: Create/Edit access to webhook urls
          tokenUrl: https://auth.cobo.com/oauth/token
      type: oauth2
