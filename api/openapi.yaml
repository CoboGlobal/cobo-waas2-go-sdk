openapi: 3.0.3
info:
  contact:
    email: help@cobo.com
    name: Cobo WaaS
    url: https://www.cobo.com/waas
  description: |
    The Cobo Wallet-as-a-Service (WaaS) 2.0 API is the latest version of Cobo's WaaS API offering. It enables you to access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls. By encapsulating complex security protocols and streamlining blockchain interactions, this API allows you to concentrate on your core business activities without worrying about the safety of your assets. The WaaS 2.0 API presents the following key features:

    - A unified API for Cobo's [all four wallet types](https://manuals.cobo.com/en/portal/introduction#an-all-in-one-wallet-platform)
    - Support for 80+ chains and 3000+ tokens
    - A comprehensive selection of webhook events
    - Flexible usage models for MPC Wallets, including [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction) and [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction)
    - Programmatic control of smart contract wallets such as Safe{Wallet} with fine-grained access controls
    - Seamlessly transfer funds across multiple exchanges, including Binance, OKX, Bybit, Deribit, and more

    For more information about the WaaS 2.0 API, see [Introduction to WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://cobo.com/waas/tos/
  title: Cobo Wallet as a Service 2.0
  version: 1.0.0
servers:
- description: Development environment
  url: https://api.dev.cobo.com/v2
- description: Production environment
  url: https://api.cobo.com/v2
security:
- CoboAuth: []
tags:
- description: Operations related to Organizations.
  name: Organizations
- description: Operations related to all wallets.
  name: Wallets
- description: Operations related to mpc wallet.
  name: Wallets - MPC Wallets
- description: Operations related to exchange wallet.
  name: Wallets - Exchange Wallet
- description: Operations related to smart contract wallet.
  name: Wallets - Smart Contract Wallets
- description: Operations related to all transactions.
  name: Transactions
- description: Operations related to webhooks.
  name: Developers - Webhooks
- description: Operations related to staking.
  name: Stakings
- description: Operations related to OAuth.
  name: OAuth
- description: Operations related to developers.
  name: Developers
- description: Operations related to address books.
  name: AddressBooks
- description: Operations related to travel rule.
  name: TravelRule
- description: Operations related to prime broker.
  name: PrimeBroker
- description: Operations related to app workflow.
  name: AppWorkflows
- description: Operations related to fee station.
  name: FeeStation
- description: Operations related to payment.
  name: Payment
paths:
  /organizations/info:
    get:
      description: |
        This operation retrieves the detailed information about the organization associated with the current API key.
      operationId: get_org_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get organization information
      tags:
      - Organizations
  /wallets/chains:
    get:
      description: "This operation retrieves all chains supported by a specific wallet\
        \ type or subtype. \n\nIt provides details such as the chain ID, chain symbol,\
        \ and other relevant information. If you do not specify a wallet type, this\
        \ operation returns a combination of chains supported by each wallet type.\
        \ You can filter the result by chain IDs. The chain metadata is publicly available\
        \ without any permission restrictions.\n\nCobo Portal currently supports over\
        \ 80 blockchains and more than 3,000 tokens. In addition to this operation,\
        \ you can also view the full list of supported chains [here](https://www.cobo.com/chains).\
        \ We regularly update the list with new additions. If you want to request\
        \ support for a specific chain or token, please [contact us](https://www.cobo.com/contact).\n"
      operationId: list_supported_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_chains_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List supported chains
      tags:
      - Wallets
  /wallets/chains/{chain_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified chain.
      operationId: get_chain_by_id
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain."
        example: ETH
        explode: false
        in: path
        name: chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get chain information
      tags:
      - Wallets
  /wallets/tokens:
    get:
      description: "This operation retrieves all tokens supported by a specific wallet\
        \ type or subtype. \n\nIt provides details such as token ID, token symbol,\
        \ and other relevant information. If you do not specify a wallet type, this\
        \ operation returns a combination of tokens supported by each wallet type.\
        \ You can filter the result by token IDs or chain IDs. The token metadata\
        \ is publicly available without any permission restrictions.\n\nCobo Portal\
        \ currently supports over 80 blockchains and more than 3,000 tokens. In addition\
        \ to this operation, you can also view the full list of supported tokens [here](https://www.cobo.com/tokens).\
        \ We regularly update the list with new additions. If you want to request\
        \ support for a specific chain or token, please [contact us](https://www.cobo.com/contact).\n"
      operationId: list_supported_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_tokens_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List supported tokens
      tags:
      - Wallets
  /wallets/tokens/{token_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified token.
      operationId: get_token_by_id
      parameters:
      - description: "The token ID, which is the unique identifier of a token."
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedTokenInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get token information
      tags:
      - Wallets
  /wallets/enabled_chains:
    get:
      description: "This operation retrieves all the chains that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type or subtype. If\
        \ you do not specify a wallet type, this operation returns a combination of\
        \ chains that can be used by your organization for each wallet type.\n"
      operationId: list_enabled_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_chains_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List enabled chains
      tags:
      - Wallets
  /wallets/enabled_tokens:
    get:
      description: "This operation retrieves all the tokens that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type, subtype, chain\
        \ IDs, and token IDs. If you do not specify a wallet type, this operation\
        \ returns a combination of tokens that can be used by your organization for\
        \ each wallet type.\n"
      operationId: list_enabled_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_tokens_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List enabled tokens
      tags:
      - Wallets
  /wallets/tokens/listing_requests:
    get:
      description: |
        This operation lists all token listing requests in your organization. You can filter the results by request status.
      operationId: list_token_listing_requests
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The current status of the token listing request.
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/TokenListingRequestStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_listing_requests_200_response'
          description: List of token listing requests
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List token listing requests
      tags:
      - Wallets
    post:
      description: |
        This operation creates a token listing request. The token to be listed must already be deployed on the specified blockchain and have a valid contract address.

        <note>Currently, tokens listed through this operation are only supported in wallets of type `Custodial` or `MPC`, and subtype `Asset`, `Web3`, or `Org-Controlled`.</note>
      operationId: create_token_listing_request
      requestBody:
        $ref: '#/components/requestBodies/createTokenListingRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_token_listing_request_201_response'
          description: Successful token listing request submission
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.create
      summary: Create token listing request
      tags:
      - Wallets
  /wallets/tokens/listing_requests/{request_id}:
    get:
      description: |
        This operation retrieves detailed information about a specific token listing request, including its current status.
      operationId: get_token_listing_request_by_request_id
      parameters:
      - description: The unique identifier of the token listing request.
        example: 123e4567e89b12d3a456426614174000
        explode: false
        in: path
        name: request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenListing'
          description: Detailed information about a token listing request
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get token listing request
      tags:
      - Wallets
  /wallets:
    get:
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type and subtype. For MPC Wallets, you can also filter by project ID and vault ID.
      operationId: list_wallets
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_wallets_200_response'
          description: Successfully listed wallets
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List all wallets
      tags:
      - Wallets
    post:
      description: |
        This operation creates a wallet with the provided information.

        <Note>This operation is not applicable to Smart Contract Wallets.</Note>
      operationId: create_wallet
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedWalletInfo'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.create
      summary: Create wallet
      tags:
      - Wallets
  /wallets/{wallet_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified wallet.
      operationId: get_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successful get a wallet info
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get wallet information
      tags:
      - Wallets
    put:
      description: |
        This operation updates the information of a specified wallet.
      operationId: update_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successfully updated address
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - OAuth2:
        - wallet.update
      summary: Update wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/delete:
    post:
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      operationId: delete_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_wallet_by_id_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.delete
      summary: Delete wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos:
    get:
      description: |
        The operation retrieves a list of unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets and Custodial Wallets (Web3 Wallets) only.</Note>
      operationId: list_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: false
        schema:
          description: The wallet address.
          type: string
        style: form
      - example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        explode: true
        in: query
        name: tx_hash
        required: false
        schema:
          description: The transaction hash of the UTXO.
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_utxos_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos/batch_check:
    post:
      description: |
        This operation verifies the existence and details of specified unspent transaction outputs (UTXOs) for a given wallet and token. A maximum of 100 UTXOs can be verified per request.
        <Note>This operation is applicable to MPC Wallets and Custodial Wallets (Web3 Wallets) only.</Note>
      operationId: batch_check_utxo
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/batchCheckUtxoRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch_check_utxo_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Batch check UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos/lock:
    post:
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: lock_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_utxos_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.manage_utxo
      summary: Lock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/utxos/unlock:
    post:
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: unlock_utxos
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_utxos_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.manage_utxo
      summary: Unlock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/max_transferable_value:
    get:
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: get_max_transferable_value
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The fee rate in sats/vByte or gas price in wei.
        example: "10"
        explode: true
        in: query
        name: fee_rate
        required: true
        schema:
          type: string
        style: form
      - description: The recipient's address.
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: to_address
        required: true
        schema:
          type: string
        style: form
      - description: "The sender's address. For EVM addresses in MPC Wallets, this\
          \ parameter is required."
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: from_address
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxTransferableValue'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get maximum transferable value
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses:
    get:
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      operationId: list_addresses
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma. For addresses\
          \ requiring a memo, append the memo after the address using the '|' separator\
          \ (e.g., \"address|memo\")."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List wallet addresses
      tags:
      - Wallets
    post:
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: create_address
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AddressInfo'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.create_address
      summary: Create addresses in wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address}/tokens:
    get:
      description: "The operation retrieves a list of token balances for a specified\
        \ address within a wallet. \n\n<Note>This operation is applicable to MPC Wallets\
        \ and Smart Contract Wallets only.</Note>\n"
      operationId: list_token_balances_for_address
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: simple
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_balances_for_address_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List token balances by address
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens:
    get:
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is not applicable to Exchange Wallets.</Note>
      operationId: list_token_balances_for_wallet
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_balances_for_address_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List token balances by wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens/{token_id}:
    get:
      description: |
        This operation retrieves a list of address balances for a specified token within a wallet.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: list_address_balances_by_token
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token."
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      - description: "A list of wallet addresses, separated by comma. For addresses\
          \ requiring a memo, append the memo after the address using the '|' separator\
          \ (e.g., \"address|memo\")."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_balances_by_token_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List address balances by token
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens/{token_id}/refresh_address_balances:
    put:
      description: |
        This operation refreshes the balances of specified addresses for a given token within a wallet.

        The successful return of the request only means that the refresh request has been submitted.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: refresh_address_balances_by_token
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token."
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/refreshAddressBalancesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refresh_address_balances_by_token_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Refresh address balances by token
      tags:
      - Wallets
  /wallets/check_address_validity:
    get:
      description: |
        This operation verifies if a given address is valid for a specific chain.
      operationId: check_address_validity
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check_address_validity_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Check address validity
      tags:
      - Wallets
  /wallets/check_addresses_validity:
    get:
      description: |
        This operation verifies if given addresses are valid for a specific chain.
      operationId: check_addresses_validity
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma. You can specify\
          \ a maximum of 100 addresses."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_addresses_validity_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Check addresses validity
      tags:
      - Wallets
  /wallets/check_address_chains_validity:
    get:
      description: |
        This operation verifies if a given address is valid for a list of chains.

        <Note>You can specify up to 20 chain IDs in a single request.</Note>
      operationId: check_address_chains_validity
      parameters:
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: true
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_address_chains_validity_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Check address validity across chains
      tags:
      - Wallets
  /wallets/mpc/cobo_key_share_holders:
    get:
      description: "This operation retrieves a list of all Cobo key share holders\
        \ and their information. \n\n<Info>When using this operation, `type` will\
        \ only return `Cobo` and will never return `Mobile` or `API`.</Info>\n"
      operationId: list_cobo_key_holders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyShareHolder'
                type: array
          description: Successfully listed MPC Wallets' key share holder information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List all Cobo key share holders
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects:
    get:
      description: |
        This operation retrieves a list of all projects.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: list_mpc_projects
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_mpc_projects_200_response'
          description: Successfully listed all projects.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_project.read
      summary: List all projects
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a project.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: create_mpc_project
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully created project.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_project.create
      summary: Create project
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects/{project_id}:
    get:
      description: |
        This operation retrieves detailed information about a project.
        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: get_mpc_project_by_id
      parameters:
      - description: "The project ID, which you can retrieve by calling [List all\
          \ projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_project.read
      summary: Get project information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a project's name.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      operationId: update_mpc_project_by_id
      parameters:
      - description: "The project ID, which you can retrieve by calling [List all\
          \ projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_project.update
      summary: Update project name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults:
    get:
      description: |
        This operation retrieves a list of all vaults. You can filter the result by project ID.

        **Notes for query parameters**:
        1. `project_id` is required when `vault_type` is set to `User-Controlled`.
        2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: list_mpc_vaults
      parameters:
      - description: |
          The vault type. Possible values include:
          - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

          - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
        explode: true
        in: query
        name: vault_type
        required: true
        schema:
          $ref: '#/components/schemas/MPCVaultType'
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_mpc_vaults_200_response'
          description: Successfully listed all vaults.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_vault.read
      summary: List all vaults
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: create_mpc_vault
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully created the vault.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_vault.create
      summary: Create vault
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}:
    get:
      description: |
        This operation retrieves detailed information about a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: get_mpc_vault_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully retrieved vault information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_vault.read
      summary: Get vault information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a vault's name.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      operationId: update_mpc_vault_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully modify mpc vault
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_vault.update
      summary: Update vault name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups:
    get:
      description: |
        This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type.
      operationId: list_key_share_holder_groups
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          The key share holder group type. Possible values include:
          - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

          - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

          - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

          **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
        explode: true
        in: query
        name: key_share_holder_group_type
        required: false
        schema:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_key_share_holder_groups_200_response'
          description: Successfully listed key share holder groups.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: List all key share holder groups
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note>
      operationId: create_key_share_holder_group
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createKeyShareHolderGroupBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: mpc vault successfully created
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.create
      summary: Create key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified key share holder group.
      operationId: get_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: Successfully get mpc tss group
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: Get key share holder group information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      operationId: update_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateGroupBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolderGroup'
          description: Successfully modify mpc tss group
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.update
      summary: Update key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete:
    post:
      description: This operation deletes a specified key share holder group.
      operationId: delete_key_share_holder_group_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share holder group ID.
        example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
        explode: false
        in: path
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_key_share_holder_group_by_id_201_response'
          description: Successfully deleted the specified key share holder group.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.delete
      summary: Delete key share holder group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests:
    get:
      description: |
        This operation retrieves a list of TSS requests and their details.
      operationId: list_tss_requests
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The key share holder group ID of the TSS request, which you\
          \ can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
        example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
        explode: true
        in: query
        name: key_share_holder_group_id
        required: true
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_tss_requests_200_response'
          description: Successfully retrieved TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: List TSS requests
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery.
      operationId: create_tss_request
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: mpc vault successfully created
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.create
      summary: Create TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}:
    get:
      description: |
        This operation retrieves detailed information about a TSS request.
      operationId: get_tss_request_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The TSS request ID, which you can retrieve by calling [List\
          \ TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
        example: "20240711114129000132315000003970"
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully retrieved TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: Get TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel:
    post:
      description: |
        This operation cancels a TSS request.
      operationId: cancel_tss_request_by_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The TSS request ID, which you can retrieve by calling [List\
          \ TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
        example: "20240711114129000132315000003970"
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully modified the TSS request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.delete
      summary: Cancel TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holders:
    get:
      description: |
        This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID.
      operationId: list_key_share_holders
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of key share holder group IDs, separated by comma. You\
          \ can retrieve the IDs of all the key share holder groups by calling [List\
          \ all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
        example: "dc0cac48-9add-4243-9c7a-b8badac8a198,5558bd1b-d221-4e2b-8c29-f6c97d9e6aca"
        explode: true
        in: query
        name: key_share_holder_group_ids
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_key_share_holders_200_response'
          description: Successfully retrieved key share holder list
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: List all key share holders
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_share_holders/{tss_node_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified key share holder.
      operationId: get_key_share_holder_by_tss_node_id
      parameters:
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The TSS Node ID.
        example: coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
        explode: false
        in: path
        name: tss_node_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyShareHolder'
          description: Successfully retrieved key share holder information
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_key_group.read
      summary: Get key share holder information
      tags:
      - Wallets - MPC Wallets
  /wallets/exchanges:
    get:
      description: "This operation retrieves the information about the exchanges supported\
        \ by Cobo's Exchange Wallets, including exchange IDs and trading account types."
      operationId: list_exchanges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_exchanges_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List supported exchanges
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets:
    get:
      description: This operation retrieves all the assets supported by a specified
        exchange.
      operationId: list_supported_assets_for_exchange
      parameters:
      - description: |
          The ID of the exchange. Possible values include:
            - `binance`: Binance.
            - `okx`: OKX.
            - `deribit`: Deribit.
            - `bybit`: Bybit.
            - `gate`: Gate.io
            - `bitget`: Bitget
            - `bitmart`: BitMart
            - `bitfinex`: Bitfinex
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_supported_assets_for_exchange_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List supported assets
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets/{asset_id}/chains:
    get:
      description: "This operation retrieves all the chains supported by a specified\
        \ exchange for a given asset. \n\nYou can use this operation to confirm whether\
        \ you can transfer an asset from or to your Exchange Wallet when using a specific\
        \ chain.\n"
      operationId: list_supported_chains_for_exchange
      parameters:
      - description: |
          The ID of the exchange. Possible values include:
            - `binance`: Binance.
            - `okx`: OKX.
            - `deribit`: Deribit.
            - `bybit`: Bybit.
            - `gate`: Gate.io
            - `bitget`: Bitget
            - `bitmart`: BitMart
            - `bitfinex`: Bitfinex
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "(This concept applies to Exchange Wallets only) The asset ID.\
          \ An asset ID is the unique identifier of the asset held within your linked\
          \ exchange account. You can get the ID of the assets supported by an exchanges\
          \ by calling [List supported assets](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-assets)."
        example: USDT
        explode: false
        in: path
        name: asset_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChainInfo'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List supported chains
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/exchanges/assets:
    get:
      description: |
        This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID.
      operationId: list_asset_balances_for_exchange_wallet
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "A list of trading account types, separated by comma. You can\
          \ get the the supported trading account types of an exchange by calling\
          \ [List supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges)."
        example: "Trading,Funding"
        explode: true
        in: query
        name: trading_account_types
        required: false
        schema:
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) A list of asset\
          \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
          \ held within your linked exchange account."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_asset_balances_for_exchange_wallet_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List asset balances
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/smart_contracts/delegates:
    post:
      description: |
        This operation retrieves all available Delegates of a Safe\{Wallet\} for a given transfer or contract call request.
      operationId: list_safe_wallet_delegates
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/safeWalletDelegatesRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CoboSafeDelegate'
                type: array
          description: Delegates successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List Delegates
      tags:
      - Wallets - Smart Contract Wallets
  /transactions/check_loop_transfers:
    get:
      description: "This operation verifies if the transactions from a given source\
        \ wallet to a list of given destinations can be executed as Cobo Loop transfers.\
        \ \n\nFor more information about Cobo Loop, see [Cobo Loop's product manuals](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop).\n"
      operationId: check_loop_transfers
      parameters:
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet ID of the transaction source.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: source_wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: form
      - description: "A list of destination addresses, separated by comma."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: destination_addresses
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/check_loop_transfers_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.estimate_fee
      summary: Check Cobo Loop transfers
      tags:
      - Transactions
  /transactions/estimate_fee:
    post:
      description: |
        This operation estimates the transaction fee of a token transfer or a contract call based on the fee model that the chain uses, considering factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, token ID (only applicable to token transfers), and chain ID (only applicable to contract calls).

        The response can contain different properties based on the transaction fee model used by the chain. For the legacy, EIP-1559, and UTXO fee models, Cobo also supports three different transaction speed levels: slow, recommended, and fast. For more information about estimating transaction fees, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees).
      operationId: estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedFee'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.estimate_fee
      summary: Estimate transaction fee
      tags:
      - Transactions
  /transactions/transfer:
    post:
      description: |
        The operation transfers your assets from a wallet created on Cobo Portal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>If you make transfers from Custodial Wallets (Asset Wallets) and Exchange Wallets, do not set the fee-related properties, as they will not take effects.</Note>

        <Note>You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. To do this, you should use the <code>utxo_outputs</code> property to specify the destination addresses.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      operationId: create_transfer_transaction
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.withdraw
      summary: Transfer token
      tags:
      - Transactions
  /transactions/contract_call:
    post:
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>Currently, this operation only applies to the transactions from MPC Wallets or Smart Contract Wallets on the blockchains that have a similar architecture to Ethereum.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      operationId: create_contract_call_transaction
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.contract_call
      summary: Call smart contract
      tags:
      - Transactions
  /transactions/message_sign:
    post:
      description: "This operation creates a transaction to sign the provided message\
        \ using cryptographic techniques.\n\nIn some scenarios, you want to sign a\
        \ message for identity authentication or transaction approval. You need to\
        \ provide details such as the source address, destination address, and the\
        \ message to be signed. A transaction request for tracking is returned upon\
        \ successful operation.\n\nYou can get the signature result by calling [Get\
        \ transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information).\
        \ \n\n<Note>This operation only applies to transactions from MPC Wallets.</Note>\n"
      operationId: create_message_sign_transaction
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.message_sign
      summary: Sign message
      tags:
      - Transactions
  /transactions:
    get:
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      operationId: list_transactions
      parameters:
      - description: The request ID that is used to track a transaction request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
          \ to track a transaction."
        example: "20231213122855000000000000000000,20231213122955000000000000000000"
        explode: true
        in: query
        name: cobo_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction hashes, separated by comma."
        example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        explode: true
        in: query
        name: transaction_hashes
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction types, separated by comma. Possible values\
          \ include: \n  - `Deposit`: A deposit transaction.\n  - `Withdrawal`: A\
          \ withdrawal transaction.\n  - `ContractCall`: A transaction that interacts\
          \ with a smart contract.\n  - `MessageSign`: A transaction that signs a\
          \ message. \n  - `ExternalSafeTx`: A transaction to a Smart Contract Wallet\
          \ (Safe{Wallet}) that requires one or multiple signatures to be executed.\n\
          \  - `Stake`: A transaction that creates a staking request.\n  - `Unstake`:\
          \ A transaction that creates a unstaking request.\n"
        example: "Deposit,Withdrawal"
        explode: true
        in: query
        name: types
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction statuses, separated by comma. Possible\
          \ values include: \n  - `Submitted`: The transaction is submitted.\n  -\
          \ `PendingScreening`: The transaction is pending screening by Risk Control.\
          \ \n  - `PendingAuthorization`: The transaction is pending approvals.\n\
          \  - `PendingSignature`: The transaction is pending signature. \n  - `Broadcasting`:\
          \ The transaction is being broadcast.\n  - `Confirming`: The transaction\
          \ is waiting for the required number of confirmations.\n  - `Completed`:\
          \ The transaction is completed.\n  - `Failed`: The transaction failed.\n\
          \  - `Rejected`: The transaction is rejected.\n  - `Pending`: The transaction\
          \ is waiting to be included in the next block of the blockchain.\n"
        example: "Completed,Failed"
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          type: string
        style: form
      - description: "A list of wallet IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868"
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          description: "A list of wallet IDs, separated by comma."
          type: string
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) A list of asset\
          \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
          \ held within your linked exchange account."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: |
          The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: |
          The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.

          If not provided, the default value is 90 days before the current time. This default value is subject to change.
        example: 1635744000000
        explode: true
        in: query
        name: min_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.

          If not provided, the default value is the current time. This default value is subject to change.
        example: 1635744000000
        explode: true
        in: query
        name: max_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          The sort direction. Possible values include:
            - `ASC`: Sort the results in ascending order.
            - `DESC`: Sort the results in descending order.
        example: ASC
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_200_response'
          description: The information about the transactions.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: List all transactions
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      operationId: get_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetail'
          description: The information about a transaction.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: Get transaction information
      tags:
      - Transactions
  /transactions/{transaction_id}/resend:
    post:
      description: |
        This operation resends a specified transaction. Resending a transaction means retrying a previously failed transaction. For more details about resending a transaction, see [Resend a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#resend-a-transaction).

        A transaction can be resent if its status is `failed`.

        <Note>This operation only applies to transactions from MPC Wallets in the SOL token.</Note>
      operationId: resend_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Resend transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/cancel:
    post:
      description: |
        This operation cancels a specified transaction. Canceling a transaction stops it while it is still pending. For more information, see [Cancel a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#cancel-a-transaction).

        <Note>This operation only applies to transactions from MPC Wallets and Smart Contract Wallets.</Note>

        A transaction can be cancelled if its status is either of the following:
        - `Submitted`
        - `PendingScreening`
        - `PendingAuthorization`
        - `PendingSignature` (Only when the sub-status is `Queue`, `InsufficientBalance`, `InsufficientBalanceFundLocked`, `PendingSignerApproval`, `PendingSystemProcessing`, or `Built`)
      operationId: cancel_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Cancel transaction
      tags:
      - Transactions
  /transactions/broadcast:
    post:
      description: "<Note>This operation is only applicable to the staking scenarios.</Note>\n\
        This operation broadcasts a list of signed transactions. \n\nIf you set `auto_broadcast`\
        \ to `false` when [creating a staking activity](https://www.cobo.com/developers/v2/api-references/staking/create-stake-activity),\
        \ the transaction will not be submitted to the blockchain automatically after\
        \ being signed. In such cases, you can call this operation to broadcast the\
        \ transaction to the blockchain.\n\nA transaction can only be broadcast if\
        \ its status is `Broadcasting`.\n"
      operationId: broadcast_signed_transactions
      requestBody:
        $ref: '#/components/requestBodies/broadcastTransactionsBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/broadcast_signed_transactions_201_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Broadcast signed transactions
      tags:
      - Transactions
  /transactions/{transaction_id}/drop:
    post:
      description: |
        This operation drops a specified transaction. Dropping a transaction leverages RBF to replace the original transaction with a version that effectively cancels it. For more details about dropping a transaction, refer to [Drop a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#drop-a-transaction).

        A transaction can be sped up only if its status is `Broadcasting`.

        <Note>This operation only applies to transactions from Custodial Wallets (Web3 Wallets), MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        You can use the `address` or `included_utxos` properties in the request body to specify the address or UTXOs that will cover the transaction fee. Generally, the transaction fee is paid by the original transaction's source. If that source's balance is insufficient, the specified address or UTXOs can be used to cover the fee.
      operationId: drop_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Drop transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/speedup:
    post:
      description: |
        This operation accelerates a specified transaction. Speeding up a transaction will trigger a Replace-By-Fee (RBF) transaction which is a new version of the original transaction. For more details about speeding up a transaction, refer to [Speed up a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#speed-up-a-transaction).

        You can use the `address` or `included_utxos` properties in the request body to specify the address or UTXOs that will cover the transaction fee. Generally, the transaction fee is paid by the original transaction's source. If that source's balance is insufficient, the specified address or UTXOs can be used to cover the fee.

        A transaction can be sped up only if its status is `Broadcasting`.

        <Note>This operation only applies to transactions from Custodial Wallets (Web3 Wallets), MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        <Info>If you speed up a transaction from a Smart Contract Wallet, two RBF transactions will be triggered, one for the transaction from the Smart Contract Wallet, and the other for the transaction from the Delegate.</Info>
      operationId: speedup_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Speed up transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/sign_and_broadcast:
    post:
      description: "This operation signs and broadcasts a specified transaction.\n\
        \nTo call this operation, the following conditions must be met:\n- The `transaction_process_type`\
        \ of the transaction must be set to `BuildOnly` when you call the [Transfer\
        \ token](https://www.cobo.com/developers/v2/api-references/transactions/transfer-token)\
        \ or [Call smart contract](https://www.cobo.com/developers/v2/api-references/transactions/call-smart-contract)\
        \ operation.  \n- The transaction status must be `Built`.\n"
      operationId: sign_and_broadcast_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.manage
      summary: Sign and broadcast transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/approval_detail:
    get:
      description: |
        This operation retrieves detailed approval information about a specified transaction.
      operationId: get_transaction_approval_detail
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionApprovalDetail'
          description: The information about a transaction approval detail.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: Get transaction approval details
      tags:
      - Transactions
  /transactions/approval_details:
    get:
      description: |
        This operation retrieves detailed approval information for all transactions.
      operationId: list_transaction_approval_details
      parameters:
      - description: "A list of transaction IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
          \ to track a transaction."
        example: "20231213122855000000000000000000,20231213122955000000000000000000"
        explode: true
        in: query
        name: cobo_ids
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transaction_approval_details_200_response'
          description: The information about transaction approval detail.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: List transaction approval details
      tags:
      - Transactions
  /oauth/token:
    get:
      description: "<Note>This operation is only applicable to Cobo Portal App developers.\
        \ To call this operation, you need to use the Cobo OAuth authentication method\
        \ that requires an app key.</Note>\nThis operation allows Cobo Portal Apps\
        \ to get an Org Access Token and a Refresh Token with a specified client ID,\
        \ organization ID, and grant type. \n\nAccess tokens allow the app to signal\
        \ to the WaaS service that it has received permission to access specific resources\
        \ of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction).\
        \ Once the app has been granted permission by the organization's admin, it\
        \ can use this operation to obtain both an Org Access Token and a Refresh\
        \ Token.\n\nFor security purposes, Org Access Tokens expire after a certain\
        \ period. Once they expire, the app needs to call [Refresh token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-org-access-token)\
        \ to get a new Org Access Token and a new Refresh Token. \n"
      operationId: get_token
      parameters:
      - description: "The client ID, a unique identifier to distinguish Cobo Portal\
          \ Apps. You can get the client ID by retrieving the manifest file after\
          \ publishing the app."
        example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
        explode: true
        in: query
        name: client_id
        required: true
        schema:
          type: string
        style: form
      - description: "Organization ID, a unique identifier to distinguish different\
          \ organizations. You can get the organization ID from the callback message\
          \ sent to the URL that was configured in the manifest file."
        example: e3986401-4aec-480a-973d-e775a4518413
        explode: true
        in: query
        name: org_id
        required: true
        schema:
          type: string
        style: form
      - description: The OAuth grant type. Set the value as `org_implicit`.
        example: org_implicit
        explode: true
        in: query
        name: grant_type
        required: true
        schema:
          type: string
        style: form
      responses:
        "2XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_2XX_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get Org Access Token
      tags:
      - OAuth
    post:
      description: "<Note>This operation is only applicable to Cobo Portal Apps developers.\
        \ To call this operation, you need to use the Cobo OAuth authentication method\
        \ that requires an app key.</Note>\nThis operation allows Cobo Portal Apps\
        \ to obtain a new Org Access Token with a specified client ID, grant type\
        \ and a Refresh Token. \n\nFor security purposes, Org Access Tokens expire\
        \ after a certain period. Once they expire, the app needs to call this operation\
        \ to get a new Org Access Token and a new Refresh Token. \n"
      operationId: refresh_token
      requestBody:
        $ref: '#/components/requestBodies/tokenEndpointBody'
      responses:
        "2XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refresh_token_2XX_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Refresh Org Access Token
      tags:
      - OAuth
  /oauth/permission_token/exchange:
    post:
      description: |
        This operation acquires an Access Token and a Refresh Token for the Checkout SDK.

        For security purposes, an Access Token expires after a certain period. Once it expires, you need to call the [Refresh Access Token](/v2/api-references/oauth/refresh-access-token) operation to get a new Access Token and a new Refresh Token.
      operationId: exchange_permission_token
      requestBody:
        $ref: '#/components/requestBodies/permissionTokenExchangeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exchange_permission_token_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get Access Token
      tags:
      - OAuth
  /oauth/permission_token/refresh:
    post:
      description: |
        This operation refreshes the Access Token and Refresh Token for the Checkout SDK.

        For security purposes, an Access Token expires after a certain period. Once it expires, you need to call this operation to get a new Access Token and Refresh Token.
      operationId: refresh_permission_token
      requestBody:
        $ref: '#/components/requestBodies/permissionTokenRefreshBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exchange_permission_token_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_4XX_response'
          description: Unauthorized. Please provide valid credentials.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Refresh Access Token
      tags:
      - OAuth
  /webhooks/endpoints:
    get:
      description: This operation retrieves the information of all webhook endpoints
        registered under your organization. You can filter the result by endpoint
        status and the subscribed event type.
      operationId: list_webhook_endpoints
      parameters:
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        style: form
      - explode: true
        in: query
        name: event_type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_endpoints_200_response'
          description: Successfully listed of webhook endpoints
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.read
      summary: List webhook endpoints
      tags:
      - Developers - Webhooks
    post:
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.edit
      summary: Register webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}:
    get:
      description: This operation retrieves the information of a specified webhook
        endpoint.
      operationId: get_webhook_endpoint_by_id
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.read
      summary: Get webhook endpoint information
      tags:
      - Developers - Webhooks
    put:
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint_by_id
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEndpoint'
          description: Update webhook endpoint successfully.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.edit
      summary: Update webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/events/definitions:
    get:
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get webhook event types
      tags:
      - Developers - Webhooks
  /webhooks/events/trigger:
    post:
      description: |
        This operation tests the functionality of your webhook endpoint by triggering a test webhook event. The test event will be sent to all the endpoints you have registered on Cobo Portal.

        You only need to provide the event type. By default, the payload contains dummy data with no impact on your real business transactions or activities. You can optionally provide the `override_data` property to customize the payload.
      operationId: trigger_test_webhook_event
      requestBody:
        $ref: '#/components/requestBodies/triggerTestEventBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trigger_test_webhook_event_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Trigger test event
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events:
    get:
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note>
      operationId: list_webhook_events
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - example: Success
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventStatus'
        style: form
      - example: wallets.transaction.updated
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_events_200_response'
          description: A list of webhook events has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.read
      summary: List all webhook events
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}:
    get:
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event_by_id
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
          description: The webhook event information is successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.read
      summary: Retrieve event information
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/logs:
    get:
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: list_webhook_event_logs
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_event_logs_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.read
      summary: List webhook event logs
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/retry:
    post:
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event_by_id
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - webhook.resend
      summary: Retry event
      tags:
      - Developers - Webhooks
  /stakings/pools:
    get:
      description: |
        This operation retrieves a list of staking pools currently supported.
      operationId: list_staking_pools
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_staking_pools_200_response'
          description: A list of staking pools has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List staking pools
      tags:
      - Stakings
  /stakings/pools/{pool_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified staking pool.
      operationId: get_staking_pool_by_id
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools)\
          \ to retrieve a list of staking pools."
        example: babylon_btc
        explode: false
        in: path
        name: pool_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolDetails'
          description: A staking pool has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get staking pool details
      tags:
      - Stakings
  /stakings/estimate_fee:
    post:
      description: "<Note>This operation is deprecated. Please use the [updated version](https://www.cobo.com/developers/v2/api-references/stakings/estimate-staking-fees-v2)\
        \ instead.</Note> \nThis operation calculates the fee required for a staking\
        \ activity based on factors such as network congestion and transaction complexity.\n\
        \nFor some protocols, you can use the `fee.fee_rate` property in the request\
        \ body to specify the fee rate you are willing to pay.\n\nThe `fee.max_fee_amount`\
        \ property in the request body will be ignored.\n\n<Note>For the Babylon protocol,\
        \ you can only select UTXO as the fee model.</Note>\n"
      operationId: get_staking_estimation_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_staking_estimation_fee_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.estimate_fee
      summary: Estimate staking fees
      tags:
      - Stakings
  /stakings/estimate_fee_v2:
    post:
      description: |
        This operation calculates the fee required for a staking activity based on factors such as network congestion and transaction complexity.

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      operationId: get_staking_estimation_fee_v2
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthStakeEstimatedFee'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.estimate_fee
      summary: Estimate staking fees v2
      tags:
      - Stakings
  /stakings/activities/stake:
    post:
      description: "This operation creates a staking request.\n\nFor some protocols,\
        \ you can use the `fee` property in the request body to specify the maximum\
        \ fee you are willing to pay. The transaction will fail if the actual fee\
        \ exceeds the specified maximum fee. \n\n<Note>For the Babylon protocol, you\
        \ can only select UTXO as the fee model.</Note>\n"
      operationId: create_stake_activity
      requestBody:
        $ref: '#/components/requestBodies/createStakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.stake
      summary: Create stake activity
      tags:
      - Stakings
  /stakings:
    get:
      description: "This operation retrieves a list of staking positions. \n"
      operationId: list_stakings
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools)\
          \ to retrieve a list of staking pools."
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: |
          The statuses of the staking amounts, separated by comma. Possible values include:

          - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
          - `Active`: The amount has been staked.
          - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
          - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
          - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
          - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
          - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
          - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
          - `Closed`: The staking position is closed.
        example: "Active,StakeInProgress,"
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          type: string
        style: form
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: wallet_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List enabled\
          \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_stakings_200_response'
          description: A list of staking positions has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List staking positions
      tags:
      - Stakings
  /stakings/{staking_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified staking position.
      operationId: get_staking_by_id
      parameters:
      - description: "The ID of the staking position. You can retrieve a list of staking\
          \ positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: staking_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stakings'
          description: A staking position has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get staking position details
      tags:
      - Stakings
  /stakings/activities/unstake:
    post:
      description: "This operation creates an unstaking request. Your staked tokens\
        \ will be automatically unlocked once the specified locking period ends. If\
        \ you want to withdraw your tokens beforehand, you can unstake them with this\
        \ operation.\n\nFor some protocols, you can use the `fee` property in the\
        \ request body to specify the maximum fee you are willing to pay. The transaction\
        \ will fail if the actual fee exceeds the specified maximum fee. \n\n<Note>For\
        \ the Babylon protocol, you can only select UTXO as the fee model.</Note>\n"
      operationId: create_unstake_activity
      requestBody:
        $ref: '#/components/requestBodies/createUnstakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.unstake
      summary: Create unstake activity
      tags:
      - Stakings
  /stakings/activities/withdraw:
    post:
      description: "This operation creates a withdrawal request. \n\nFor some protocols,\
        \ you can use the `fee` property in the request body to specify the maximum\
        \ fee you are willing to pay. The transaction will fail if the actual fee\
        \ exceeds the specified maximum fee. \n\n<Note>For the Babylon protocol, you\
        \ can only select UTXO as the fee model.</Note>\n"
      operationId: create_withdraw_activity
      requestBody:
        $ref: '#/components/requestBodies/createWithdrawActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.unstake_withdraw
      summary: Create withdraw activity
      tags:
      - Stakings
  /stakings/activities/claim:
    post:
      description: "This operation creates a claim request.\n\n<Note>Currently, only\
        \ the Ethereum Beacon protocol supports this operation.</Note>\n\nFor some\
        \ protocols, you can use the `fee` property in the request body to specify\
        \ the maximum fee you are willing to pay. The transaction will fail if the\
        \ actual fee exceeds the specified maximum fee. \n"
      operationId: create_claim_activity
      requestBody:
        $ref: '#/components/requestBodies/createClaimActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.stake
      summary: Create claim activity
      tags:
      - Stakings
  /stakings/activities:
    get:
      description: |
        This operation retrieves a list of staking activities.
      operationId: list_staking_activities
      parameters:
      - description: "The ID of the staking pool. A staking pool is a pairing of a\
          \ staking protocol and a specific type of token. You can call [List staking\
          \ pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools)\
          \ to retrieve a list of staking pools."
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the Phase-1 BTC staking position.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: staking_id
        required: false
        schema:
          type: string
        style: form
      - example: Stake
        explode: true
        in: query
        name: activity_type
        required: false
        schema:
          $ref: '#/components/schemas/ActivityType'
        style: form
      - example: Success
        explode: true
        in: query
        name: activity_status
        required: false
        schema:
          $ref: '#/components/schemas/ActivityStatus'
        style: form
      - description: "The start time of the query. All staking activities updated\
          \ after the specified time will be retrieved. The time is in Unix timestamp\
          \ format, measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: min_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The end time of the query. All staking activities updated before\
          \ the specified time will be retrieved. The time is in Unix timestamp format,\
          \ measured in milliseconds."
        example: 1635744000000
        explode: true
        in: query
        name: max_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The activity initiator, which is your API key by default. You\
          \ can also specify the initiator when creating the activity."
        example: steve@example.com
        explode: true
        in: query
        name: initiator
        required: false
        schema:
          type: string
        style: form
      - description: The request ID that is used to track a transaction request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_staking_activities_200_response'
          description: A list of staking activities have been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List staking activities
      tags:
      - Stakings
  /stakings/activities/{activity_id}:
    get:
      description: |
        This operation retrieves the details of a specified staking activity.
      operationId: get_staking_activity_by_id
      parameters:
      - description: The activity ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: activity_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: A staking activity has been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: Get staking activity details
      tags:
      - Stakings
  /stakings/protocols/babylon/stakings/registrations:
    get:
      description: |
        This operation lists all Babylon Phase-2 registration records within your organization. You can filter the results by request status and staking position ID.

        The registration is processed asynchronously and may take some time to complete. It is recommended to implement automatic monitoring and handle the registration on time.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_staking_registrations
      parameters:
      - description: The registration request status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          description: |
            The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
            - `Processing`: The registration request is being processed.
            - `Completed`: The registration has been completed.
            - `Failed`: The registration failed.
          enum:
          - Processing
          - Completed
          - Failed
          example: Processing
          type: string
        style: form
      - description: The ID of the Phase-1 BTC staking position.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: staking_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_babylon_staking_registrations_200_response'
          description: List of babylon staking registrations retrieved successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List Babylon Phase-2 registrations
      tags:
      - Stakings
    post:
      description: "This operation initiates a Babylon Phase-2 registration request.\
        \ \n\nBefore calling this operation, please ensure the following:\n- The staking\
        \ position is eligible for the Babylon Phase-2 and has not been registered.\
        \ You can call the [List staking positions eligible for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions-eligible-for-babylon-phase-2)\
        \ operation to check the registration status.\n- The Babylon address has enough\
        \ asset to pay for the registration fee.\n- The Babylon address must be a\
        \ Babylon address in an MPC Wallet in your organization.\n\nThe system first\
        \ checks whether the provided address is eligible for Phase-2. If eligible,\
        \ it creates a unique registration ID, which can be used to track the status.\
        \ \n\nThe registration is processed asynchronously and may take some time\
        \ to complete. It is recommended that you regularly call the [Get Babylon\
        \ Phase-2 registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-phase-2-registration-details)\
        \ operation to check the status and handle registration accordingly.\n\nFor\
        \ more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).\n"
      operationId: create_babylon_staking_registration
      requestBody:
        $ref: '#/components/requestBodies/createBabylonStakingRegistrationBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_babylon_staking_registration_201_response'
          description: Register Babylon BTC staking for phase 2 successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Register for Babylon Phase-2
      tags:
      - Stakings
  /stakings/protocols/babylon/stakings/registrations/{registration_id}:
    get:
      description: |
        This operation returns the details of a specific Babylon Phase-2 registration, including registration status, Bitcoin (BTC) and Babylon addresses, staked amount, and error messages (if any).

        Please note that registration is an asynchronous process and may take several minutes to complete. It is recommended to call this operation at regular intervals to track the status.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: get_babylon_staking_registration_by_id
      parameters:
      - description: "The Babylon airdrop or Babylon Phase-2 registration ID. You\
          \ can use the [Register for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-airdrop)\
          \ or the [Register for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-phase-2)\
          \ operation to get this information."
        explode: false
        in: path
        name: registration_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BabylonStakingRegistration'
          description: Get babylon staking registration details successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get Babylon Phase-2 registration details
      tags:
      - Stakings
  /stakings/protocols/babylon/stakings/eligibles:
    get:
      description: |
        This operation lists all staking positions that are eligible for Babylon Phase-2. If an eligible staking position's status is `Unregistered`, you can initiate a registration for it. You can filter the results by registration status.

        You can use this operation to:
        - Check which staking positions can be registered
        - Get staking details before initiating registration
        - Monitor available positions for registration

        As registration is an asynchronous process and might take some time to complete, it is recommended that you regularly call this operation to check staking position eligibility and register eligible positions on time.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_eligible_stakings
      parameters:
      - description: |
          The status of Babylon airdrop or Phase-2 registration. Possible values are:
          - `Registered`: Registered for Babylon airdrop or Phase-2.
          - `Unregistered`: Not registered for any Babylon airdrop or Phase-2.
          - `Registering`: The Babylon airdrop or Phase-2 registration is in progress but not yet completed.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - Registered
          - Unregistered
          - Registering
          example: Registered
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_babylon_eligible_stakings_200_response'
          description: List of stakings eligible for Babylon Phase-2 registration
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List staking positions eligible for Babylon Phase-2
      tags:
      - Stakings
  /stakings/protocols/babylon/airdrops/registrations:
    get:
      description: |
        This operation lists all Babylon airdrop registration records within your organization. You can filter the results by request status and Bitcoin (BTC) address.

        The registration is processed asynchronously and may take some time to complete. It is recommended to implement automatic monitoring and handle the registration on time.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_airdrop_registrations
      parameters:
      - description: The registration request status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          description: |
            The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
            - `Processing`: The registration request is being processed.
            - `Completed`: The registration has been completed.
            - `Failed`: The registration failed.
          enum:
          - Processing
          - Completed
          - Failed
          example: Processing
          type: string
        style: form
      - description: The Bitcoin (BTC) address used for staking.
        example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
        explode: true
        in: query
        name: btc_address
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_babylon_airdrop_registrations_200_response'
          description: List of babylon airdrop registrations retrieved successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List Babylon airdrop registrations
      tags:
      - Stakings
    post:
      description: "This operation initiates a Babylon airdrop registration request.\
        \ \n\nBefore calling this operation, please ensure the following:\n- The Bitcoin\
        \ (BTC) address is eligible for the Babylon airdrop and has not been registered.\
        \ You can call the [List wallets eligible for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/list-wallets-eligible-for-babylon-airdrop)\
        \ operation to check the registration status.\n- The Babylon address has enough\
        \ asset to pay for the registration fee.\n- The Babylon address must be a\
        \ Babylon address in an MPC Wallet in your organization.\n\nThe system first\
        \ checks whether the provided address is eligible for the Babylon airdrop.\
        \ If eligible, it creates a unique registration ID, which can be used to track\
        \ the status. \n\nThe registration is processed asynchronously and may take\
        \ some time to complete. It is recommended that you regularly call the [Get\
        \ Babylon airdrop registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-airdrop-registration-details)\
        \ operation to check the status and handle registration accordingly.\n\nFor\
        \ more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).\n"
      operationId: create_babylon_airdrop_registration
      requestBody:
        $ref: '#/components/requestBodies/createBabylonAirdropRegistrationBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_babylon_airdrop_registration_201_response'
          description: Airdrop registration created successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Register for Babylon airdrop
      tags:
      - Stakings
  /stakings/protocols/babylon/airdrops/registrations/{registration_id}:
    get:
      description: |
        This operation returns the details of a specific Babylon airdrop registration, including registration status, Bitcoin (BTC) and Babylon addresses, airdrop amount, and error messages (if any).

        Please note that registration is an asynchronous process and may take several minutes to complete. It is recommended to call this operation at regular intervals to track the status.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: get_babylon_airdrop_registration_by_id
      parameters:
      - description: "The Babylon airdrop or Babylon Phase-2 registration ID. You\
          \ can use the [Register for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-airdrop)\
          \ or the [Register for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-phase-2)\
          \ operation to get this information."
        explode: false
        in: path
        name: registration_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BabylonAirdropRegistration'
          description: Get airdrop registration details successfully
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get Babylon airdrop registration details
      tags:
      - Stakings
  /stakings/protocols/babylon/airdrops/eligibles:
    get:
      description: |
        This operation lists all wallets that are eligible for the Babylon airdrop. If an eligible wallet's status is `Unregistered`, you can initiate an airdrop registration for it. You can filter the results by airdrop registration status.

        You can use this operation to:
        - Check which wallets are eligible for airdrop registrations
        - Estimate airdrop amounts before claiming
        - Monitor available airdrop

        As registration is an asynchronous process and might take some time to complete, it is recommended that you regularly call this operation to check wallet eligibility and register eligible wallets on time.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_eligible_airdrops
      parameters:
      - description: |
          The status of Babylon airdrop or Phase-2 registration. Possible values are:
          - `Registered`: Registered for Babylon airdrop or Phase-2.
          - `Unregistered`: Not registered for any Babylon airdrop or Phase-2.
          - `Registering`: The Babylon airdrop or Phase-2 registration is in progress but not yet completed.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - Registered
          - Unregistered
          - Registering
          example: Registered
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_babylon_eligible_airdrops_200_response'
          description: List of wallets eligible for Babylon airdrop registration
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: List wallets eligible for Babylon airdrop
      tags:
      - Stakings
  /developers/api_key_info:
    get:
      description: This operation retrieves the details of the API key that you are
        using.
      operationId: get_api_key_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_api_key_info_200_response'
          description: The API key information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - api_key.read
      summary: Get API key information
      tags:
      - Developers
  /developers/callback_messages:
    get:
      description: |
        This operation retrieves all the callback messages in your organization.

        For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages).
      operationId: list_callback_messages
      parameters:
      - description: "A list of callback message IDs, separated by commas."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: callback_message_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of request IDs, separated by commas. The request ID is\
          \ provided by you and must be unique within your organization."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: request_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction IDs, separated by commas."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of wallet IDs, separated by commas."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          type: string
        style: form
      - description: "The callback message status. Possible values include `Approved`,\
          \ `Denied`, and `Failed`."
        example: Approved
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - Denied
          - Approved
          - Failed
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_callback_messages_200_response'
          description: The information about callback messages.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - callback.read
      summary: List all callback messages
      tags:
      - Developers
  /developers/callback_messages/{message_id}/retry:
    post:
      description: |
        This operation resends a callback message that failed previously.

        If your callback endpoint doesn't respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be `Failed`. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages).
      operationId: retry_callback_message
      parameters:
      - description: The callback message ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_callback_message_201_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - callback.resend
      summary: Retry callback message
      tags:
      - Developers
  /address_books:
    get:
      description: |
        This operation retrieves a list of addresses from your address book.
      operationId: list_address_books
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: false
        schema:
          description: The wallet address.
          type: string
        style: form
      - description: The address label.
        example: test
        explode: true
        in: query
        name: label
        required: false
        schema:
          description: The address label.
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_address_books_200_response'
          description: The information about an address book entry.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - address_book.read
      summary: List address book entries
      tags:
      - AddressBooks
  /prime_broker/user/{user_id}/guard_pubkey:
    get:
      description: |
        This operation retrieves the current Cobo Guard public key binding details for a broker user.
      operationId: query_guard_pubkey
      parameters:
      - description: The user ID.
        example: "168108513539918"
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: The user ID.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query_guard_pubkey_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Query a Guard pubkey
      tags:
      - PrimeBroker
    post:
      description: "This operation creates a binding between a broker user ID and\
        \ a Cobo Guard public key. \n"
      operationId: create_guard_pubkey
      parameters:
      - description: The user ID.
        example: "168108513539918"
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: The user ID.
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/change_guard_pubkey_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create Guard pubkey binding
      tags:
      - PrimeBroker
    put:
      description: |
        This operation updates an existing binding to associate a broker user ID with a new Cobo Guard public key.
      operationId: change_guard_pubkey
      parameters:
      - description: The user ID.
        example: "168108513539918"
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: The user ID.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/change_guard_pubkey_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Change Guard pubkey binding
      tags:
      - PrimeBroker
  /prime_broker/user/{user_id}/guard_pubkey/delete:
    post:
      description: |
        This operation deletes a binding between a broker user ID and a Cobo Guard public key.
      operationId: delete_guard_pubkey
      parameters:
      - description: The user ID.
        example: "168108513539918"
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: The user ID.
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_guard_pubkey_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Delete Guard pubkey binding
      tags:
      - PrimeBroker
  /prime_broker/user/{user_id}/addresses:
    post:
      description: |
        This operation binds addresses to a broker user.
      operationId: create_prime_broker_address
      parameters:
      - description: The user ID.
        example: "168108513539918"
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: The user ID.
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createPrimeBrokerUserAddressBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_prime_broker_address_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Bind addresses to a broker user
      tags:
      - PrimeBroker
  /prime_broker/approval_statement/{statement_id}:
    get:
      description: |
        This operation queries an approval statement.
      operationId: query_approval_statement
      parameters:
      - description: The approval statement ID.
        example: "168108513539918"
        explode: false
        in: path
        name: statement_id
        required: true
        schema:
          description: The approval statement ID.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query_approval_statement_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Query approval statement
      tags:
      - PrimeBroker
  /travel_rule/transaction/countries:
    get:
      description: |
        This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.

        Use this endpoint to obtain valid country values for:
          - Place of incorporation of a legal entity
          - Place of birth of a natural person
      operationId: list_supported_countries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_supported_countries_200_response_inner'
                type: array
          description: A list of countries supported.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - travel_rule.read
      summary: List supported countries
      tags:
      - TravelRule
  /travel_rule/transaction/limitation:
    get:
      description: |
        This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.

        Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction.
      operationId: get_transaction_limitation
      parameters:
      - description: "The transaction type. Possible values include: \n  - `DEPOSIT`:\
          \ A deposit transaction.\n  - `WITHDRAW`: A withdrawal transaction.\n"
        example: DEPOSIT
        explode: true
        in: query
        name: transaction_type
        required: true
        schema:
          enum:
          - DEPOSIT
          - WITHDRAW
          type: string
        style: form
      - description: The transaction ID.
        explode: true
        in: query
        name: transaction_id
        required: true
        schema:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_transaction_limitation_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - travel_rule.read
      summary: Retrieve transaction limitations
      tags:
      - TravelRule
  /travel_rule/transaction/deposit/travel_rule_info:
    post:
      description: |
        This operation submits Travel Rule information for a deposit transaction.
      operationId: submit_deposit_travel_rule_info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelRuleDepositRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submit_deposit_travel_rule_info_201_response'
          description: Successfully submitted the Travel Rule information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - travel_rule.edit
      summary: Submit Travel Rule information for deposits
      tags:
      - TravelRule
  /travel_rule/transaction/withdraw/travel_rule_info:
    post:
      description: |
        This operation submits Travel Rule information for a withdrawal transaction.
      operationId: submit_withdraw_travel_rule_info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelRuleWithdrawRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submit_deposit_travel_rule_info_201_response'
          description: Successfully submitted the Travel Rule information.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - travel_rule.edit
      summary: Submit Travel Rule information for withdrawals
      tags:
      - TravelRule
  /fee_station/addresses:
    get:
      description: |
        This operation retrieves a list of deposit addresses of your Fee Station, including the chain ID, address, and additional information. You can filter the result by chain ID and address.
      operationId: list_fee_station_addresses
      parameters:
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma. For addresses\
          \ requiring a memo, append the memo after the address using the '|' separator\
          \ (e.g., \"address|memo\")."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List Fee Station addresses
      tags:
      - FeeStation
  /fee_station/tokens:
    get:
      description: |
        The operation retrieves a list of token balances within your Fee Station.
      operationId: list_token_balances_for_fee_station
      parameters:
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_token_balances_for_fee_station_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - wallet.read
      summary: List Fee Station token balances
      tags:
      - FeeStation
  /fee_station/transactions:
    get:
      description: |
        This operation retrieves all Fee Station transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamp. You can also paginate and sort your query results.
      operationId: list_fee_station_transactions
      parameters:
      - description: The request ID that is used to track a transaction request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
          \ to track a transaction."
        example: "20231213122855000000000000000000,20231213122955000000000000000000"
        explode: true
        in: query
        name: cobo_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction IDs, separated by comma."
        example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
        explode: true
        in: query
        name: transaction_ids
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction hashes, separated by comma."
        example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        explode: true
        in: query
        name: transaction_hashes
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction types for Fee Station, separated by comma.\
          \ Possible values include: \n  - `Deposit`: A deposit transaction.\n  -\
          \ `Withdrawal`: A withdrawal transaction.\n"
        example: "Deposit,Withdrawal"
        explode: true
        in: query
        name: types
        required: false
        schema:
          type: string
        style: form
      - description: "A list of transaction statuses, separated by comma. Possible\
          \ values include: \n  - `Submitted`: The transaction is submitted.\n  -\
          \ `PendingScreening`: The transaction is pending screening by Risk Control.\
          \ \n  - `PendingAuthorization`: The transaction is pending approvals.\n\
          \  - `PendingSignature`: The transaction is pending signature. \n  - `Broadcasting`:\
          \ The transaction is being broadcast.\n  - `Confirming`: The transaction\
          \ is waiting for the required number of confirmations.\n  - `Completed`:\
          \ The transaction is completed.\n  - `Failed`: The transaction failed.\n\
          \  - `Rejected`: The transaction is rejected.\n  - `Pending`: The transaction\
          \ is waiting to be included in the next block of the blockchain.\n"
        example: "Completed,Failed"
        explode: true
        in: query
        name: statuses
        required: false
        schema:
          type: string
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) A list of asset\
          \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
          \ held within your linked exchange account."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: |
          The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.

          If not provided, the default value is 90 days before the current time. This default value is subject to change.
        example: 1635744000000
        explode: true
        in: query
        name: min_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.

          If not provided, the default value is the current time. This default value is subject to change.
        example: 1635744000000
        explode: true
        in: query
        name: max_created_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: |
          The sort direction. Possible values include:
            - `ASC`: Sort the results in ascending order.
            - `DESC`: Sort the results in descending order.
        example: ASC
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_200_response'
          description: The information about the transactions.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: List all Fee Station transactions
      tags:
      - FeeStation
  /fee_station/transactions/{transaction_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified Fee Station transaction record, such as the transaction status, source address, destination address, and timestamp.
      operationId: get_fee_station_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetail'
          description: The information about a transaction.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.read
      summary: Get Fee Station transaction information
      tags:
      - FeeStation
  /fee_station/transactions/estimate_fee:
    post:
      description: |
        This operation estimates the gas fee required for a top-up transaction sent by [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction) to provide gas to the sender of the original transaction.

        You need to provide the token ID and transfer amount.

        For more information about transaction fee models and how fees are calculated, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees).
      operationId: estimate_fee_station_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeStationFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedFixedFee'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - transaction.estimate_fee
      summary: Estimate fee for Fee Station transaction
      tags:
      - FeeStation
  /app/workflows:
    get:
      description: |
        This operation retrieves all approval workflows of an Cobo Portal App.
        <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note>
        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: list_app_workflows
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppWorkflow'
                type: array
          description: A list of approval workflows successfully retrieved
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - app_governance_policy.read
      summary: List app workflows
      tags:
      - AppWorkflows
  /app/workflows/approval_requests:
    get:
      description: |
        This operation retrieves a list of approval requests.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: list_approval_requests
      parameters:
      - description: The unique ID of the approval workflow.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: operation_id
        required: true
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_approval_requests_200_response'
          description: A list of approval requests have been successfully retrieved.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - app_governance_policy.read
      summary: List approval requests
      tags:
      - AppWorkflows
    post:
      description: |
        This operation triggers a specified workflow and generates a new approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: create_approval_request
      requestBody:
        $ref: '#/components/requestBodies/requestApprovalBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_approval_request_201_response'
          description: The request workflow approval was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - app_governance_policy.update
      summary: Request workflow approval
      tags:
      - AppWorkflows
  /app/workflows/approval_requests/{approval_id}:
    get:
      description: |
        This operation retrieves the details of a specific approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: get_approval_request_by_id
      parameters:
      - description: The system-generated unique ID of the approval request.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: approval_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestDetail'
          description: The information about an approval request.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - app_governance_policy.read
      summary: Get approval request details
      tags:
      - AppWorkflows
  /app/workflows/approval_requests/{approval_id}/revoke:
    post:
      description: |
        This operation revokes a pending approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: revoke_approval_request
      parameters:
      - description: The system-generated unique ID of the approval request.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: approval_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/revokeApprovalRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revoke_approval_request_201_response'
          description: The request workflow approval was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - app_governance_policy.update
      summary: Revoke approval request
      tags:
      - AppWorkflows
  /payments/merchants:
    get:
      description: "This operation retrieves the information of all merchants. \n\n\
        You can filter the results by using a keyword for fuzzy search on merchant\
        \ names or by specifying a wallet ID.\n"
      operationId: list_merchants
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A search term used for fuzzy matching of merchant names.
        example: keyword
        explode: true
        in: query
        name: keyword
        required: false
        schema:
          description: The keyword.
          type: string
        style: form
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: wallet_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_merchants_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.read
      summary: List all merchants
      tags:
      - Payment
    post:
      description: |
        This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.

        Upon successful creation, a merchant ID is generated and returned along with the merchant's information.
      operationId: create_merchant
      requestBody:
        $ref: '#/components/requestBodies/createMerchantBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.create
      summary: Create merchant
      tags:
      - Payment
  /payments/merchants/{merchant_id}:
    put:
      description: |
        This operation updates the information of an existing merchant.
      operationId: update_merchant_by_id
      parameters:
      - description: The merchant ID.
        example: M1001
        explode: false
        in: path
        name: merchant_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateMerchantBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.update
      summary: Update merchant
      tags:
      - Payment
  /payments/refunds:
    get:
      description: |
        This operation retrieves the information of all refund orders.
      operationId: get_refunds
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The merchant ID.
        example: M1001
        explode: true
        in: query
        name: merchant_id
        required: false
        schema:
          type: string
        style: form
      - description: The request ID.
        example: random_request_id
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_refunds_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_refund.read
      summary: List all refund orders
      tags:
      - Payment
    post:
      description: "This operation creates a refund order to return cryptocurrency\
        \ to a specified address. \n\nWhen creating a refund order, you can optionally\
        \ link it to an existing pay-in order for tracking and reconciliation purposes.\n"
      operationId: create_refund
      requestBody:
        $ref: '#/components/requestBodies/createRefundBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: Refund transaction created successfully.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_refund.create
      summary: Create refund order
      tags:
      - Payment
  /payments/refunds/{refund_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified refund order.
      operationId: get_refund_detail_by_id
      parameters:
      - description: The refund order ID.
        example: R20250304-M1001-1001
        explode: false
        in: path
        name: refund_id
        required: true
        schema:
          description: The refund order ID.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_refund.read
      summary: Get refund order information
      tags:
      - Payment
    put:
      description: |
        This operation updates a specified refund order.
      operationId: update_refund_by_id
      parameters:
      - description: The refund order ID.
        example: R20250304-M1001-1001
        explode: false
        in: path
        name: refund_id
        required: true
        schema:
          description: The refund order ID.
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateRefundBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_refund.update
      summary: Update refund order information
      tags:
      - Payment
  /payments/refunds/{refund_id}/cancel:
    put:
      description: |
        This operation cancels a specified refund order.
      operationId: cancel_refund_by_id
      parameters:
      - description: The refund order ID.
        example: R20250304-M1001-1001
        explode: false
        in: path
        name: refund_id
        required: true
        schema:
          description: The refund order ID.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_refund.update
      summary: Cancel refund order
      tags:
      - Payment
  /payments/bank_accounts:
    get:
      description: |
        This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account.
      operationId: list_bank_accounts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BankAccount'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.read
      summary: List all bank accounts
      tags:
      - Payment
  /payments/orders:
    get:
      description: |
        This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID.
      operationId: list_payment_orders
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The merchant ID.
        example: M1001
        explode: true
        in: query
        name: merchant_id
        required: false
        schema:
          type: string
        style: form
      - description: A unique reference code assigned by the developer to identify
          this order in their system.
        example: P20240201001
        explode: true
        in: query
        name: psp_order_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_payment_orders_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_payin.read
      summary: List all pay-in orders
      tags:
      - Payment
    post:
      description: |
        This operation creates a pay-in order.
      operationId: create_payment_order
      requestBody:
        $ref: '#/components/requestBodies/createPaymentOrderBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_payin.create
      summary: Create pay-in order
      tags:
      - Payment
  /payments/orders/{order_id}:
    get:
      description: |
        This operation retrieves details of a specific pay-in order.
      operationId: get_payment_order_detail_by_id
      parameters:
      - description: The pay-in order ID.
        example: O20250304-M1001-1001
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_payin.read
      summary: Get pay-in order information
      tags:
      - Payment
    put:
      description: |
        This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed.
      operationId: update_payment_order
      parameters:
      - description: The pay-in order ID.
        example: O20250304-M1001-1001
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updatePaymentOrderBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_payin.update
      summary: Update pay-in order
      tags:
      - Payment
  /payments/exchange_rates/{token_id}/{currency}:
    get:
      description: |
        This operation retrieves the current exchange rate between a specified currency pair.
      operationId: get_exchange_rate
      parameters:
      - description: |
          The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
            - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
            - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      - description: "The fiat currency. Currently, only `USD` is supported."
        example: USD
        explode: false
        in: path
        name: currency
        required: true
        schema:
          default: USD
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_exchange_rate_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      summary: Get exchange rate
      tags:
      - Payment
  /payments/settlement_info:
    get:
      description: |
        This operation retrieves the current withdrawable balances of specified merchants or the developer.
      operationId: get_settlement_info_by_ids
      parameters:
      - description: A list of merchant IDs to query.
        example: "M1001,M1002,M1003"
        explode: true
        in: query
        name: merchant_ids
        required: false
        schema:
          type: string
        style: form
      - description: "The currency for the operation. Currently, only `USD` is supported."
        example: USD
        explode: true
        in: query
        name: currency
        required: false
        schema:
          default: USD
          type: string
        style: form
      - explode: true
        in: query
        name: acquiring_type
        required: false
        schema:
          $ref: '#/components/schemas/AcquiringType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_settlement_info_by_ids_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_settlement.read
      summary: Get withdrawable balances
      tags:
      - Payment
  /payments/settlement_requests:
    get:
      description: |
        This operation retrieves the information of all settlement requests.
      operationId: list_settlement_requests
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The request ID.
        example: random_request_id
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_settlement_requests_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_settlement.read
      summary: List all settlement requests
      tags:
      - Payment
    post:
      description: |
        This operation creates a settlement request to withdraw available balances.
      operationId: create_settlement_request
      requestBody:
        $ref: '#/components/requestBodies/createSettlementBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: The settlement request was successfully created.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_settlement.create
      summary: Create settlement request
      tags:
      - Payment
  /payments/settlement_requests/{settlement_request_id}:
    get:
      description: |
        This operation retrieves the information of a specific settlement request.
      operationId: get_settlement_by_id
      parameters:
      - description: The settlement request ID.
        example: S20250304-1001
        explode: false
        in: path
        name: settlement_request_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_settlement.read
      summary: Get settlement request information
      tags:
      - Payment
  /payments/crypto_addresses:
    get:
      description: "This operation retrieves a list of crypto addresses registered\
        \ for crypto withdrawal. \n\nContact our support team at [help@cobo.com](mailto:help@cobo.com)\
        \ to register a new crypto address.\n"
      operationId: list_crypto_addresses
      parameters:
      - description: |
          The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
            - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
            - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CryptoAddress'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.read
      summary: List crypto addresses
      tags:
      - Payment
  /payments/supported_tokens:
    get:
      description: |
        This operation retrieves the information of all supported tokens.
      operationId: list_payment_supported_tokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SupportedToken'
                type: array
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.read
      summary: List all supported tokens
      tags:
      - Payment
  /payments/topup/address:
    get:
      description: |
        This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
      operationId: get_top_up_address
      parameters:
      - description: The merchant ID.
        example: M1001
        explode: true
        in: query
        name: merchant_id
        required: true
        schema:
          type: string
        style: form
      - description: |
          The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
            - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
            - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: A unique identifier assigned by the developer to track and identify
          individual payers in their system.
        example: payer_0001
        explode: true
        in: query
        name: custom_payer_id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopUpAddress'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_merchant.read
      summary: Get top-up address
      tags:
      - Payment
  /payments/topup/payers:
    get:
      description: "This operation retrieves the information of all payers under a\
        \ merchant. \n\nYou can filter the result by the payer ID.\n"
      operationId: list_top_up_payers
      parameters:
      - description: "The maximum number of objects to return. For most operations,\
          \ the value range is [1, 50]."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
        example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The merchant ID.
        example: M1001
        explode: true
        in: query
        name: merchant_id
        required: true
        schema:
          type: string
        style: form
      - description: A unique identifier assigned by Cobo to track and identify individual
          payers.
        example: P20250619T0310056d7aa
        explode: true
        in: query
        name: payer_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_top_up_payers_200_response'
          description: The request was successful.
        "4XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal server error.
      security:
      - CoboAuth: []
      - OAuth2:
        - payment_orders_payin.read
      summary: List payers
      tags:
      - Payment
components:
  parameters:
    sortByParam:
      description: The field used for sorting.
      example: timestamp
      explode: true
      in: query
      name: sort_by
      required: false
      schema:
        default: ""
        type: string
      style: form
    directionParam:
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      example: ASC
      explode: true
      in: query
      name: direction
      required: false
      schema:
        default: ASC
        enum:
        - ASC
        - DESC
        type: string
      style: form
    limitParam:
      description: "The maximum number of objects to return. For most operations,\
        \ the value range is [1, 50]."
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        format: int32
        type: integer
      style: form
    beforeParam:
      description: |
        A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
      explode: true
      in: query
      name: before
      required: false
      schema:
        type: string
      style: form
    afterParam:
      description: |
        A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
      explode: true
      in: query
      name: after
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdParam:
      description: (This concept applies to Exchange Wallets only) The asset ID. An
        asset ID is the unique identifier of the asset held within your linked exchange
        account.
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdListParam:
      description: "(This concept applies to Exchange Wallets only) A list of asset\
        \ IDs, separated by comma. An asset ID is the unique identifier of the asset\
        \ held within your linked exchange account."
      example: "USDT,USDC"
      explode: true
      in: query
      name: asset_ids
      required: false
      schema:
        description: "A list of asset IDs, separated by comma."
        type: string
      style: form
    requiredAssetIdParam:
      description: (This concept applies to Exchange Wallets only) The asset ID. An
        asset ID is the unique identifier of the asset held within your linked exchange
        account.
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: true
      schema:
        type: string
      style: form
    chainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain."
      example: ETH
      explode: false
      in: path
      name: chain_id
      required: true
      schema:
        type: string
      style: simple
    requiredChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: true
      schema:
        type: string
      style: form
    optionalChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: false
      schema:
        type: string
      style: form
    optionalChainIdListParam:
      description: "A list of chain IDs, separated by comma. The chain ID is the unique\
        \ identifier of a blockchain. You can retrieve the IDs of all the chains you\
        \ can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
      example: "BTC,ETH"
      explode: true
      in: query
      name: chain_ids
      required: false
      schema:
        description: "A list of chain IDs, separated by comma."
        type: string
      style: form
    requiredChainIdListParam:
      description: "A list of chain IDs, separated by comma. The chain ID is the unique\
        \ identifier of a blockchain. You can retrieve the IDs of all the chains you\
        \ can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
      example: "BTC,ETH"
      explode: true
      in: query
      name: chain_ids
      required: true
      schema:
        description: "A list of chain IDs, separated by comma."
        type: string
      style: form
    tokenIdParam:
      description: "The token ID, which is the unique identifier of a token."
      example: ETH_USDT
      explode: false
      in: path
      name: token_id
      required: true
      schema:
        type: string
      style: simple
    optionalTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List enabled\
        \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: false
      schema:
        type: string
      style: form
    optionalTokenListIdParam:
      description: "A list of token IDs, separated by comma. The token ID is the unique\
        \ identifier of a token. You can retrieve the IDs of all the tokens you can\
        \ use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
      example: "ETH_USDT,ETH_USDC"
      explode: true
      in: query
      name: token_ids
      required: false
      schema:
        description: "A list of token IDs, separated by comma."
        type: string
      style: form
    requiredTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List enabled\
        \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: true
      schema:
        type: string
      style: form
    requiredFeeRateParam:
      description: The fee rate in sats/vByte or gas price in wei.
      example: "10"
      explode: true
      in: query
      name: fee_rate
      required: true
      schema:
        type: string
      style: form
    requiredWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: true
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    optionalWalletTypeParam:
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      explode: true
      in: query
      name: wallet_type
      required: false
      schema:
        $ref: '#/components/schemas/WalletType'
      style: form
    optionalWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: false
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    walletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalWalletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    requiredWalletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: form
    optionalWalletListIdParam:
      description: "A list of wallet IDs, separated by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868"
      explode: true
      in: query
      name: wallet_ids
      required: false
      schema:
        description: "A list of wallet IDs, separated by comma."
        type: string
      style: form
    addressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: false
      in: path
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: simple
    requiredAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: form
    requiredAddressListParam:
      description: "A list of wallet addresses, separated by comma. You can specify\
        \ a maximum of 100 addresses."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: addresses
      required: true
      schema:
        type: string
      style: form
    optionalAddressListParam:
      description: "A list of wallet addresses, separated by comma. For addresses\
        \ requiring a memo, append the memo after the address using the '|' separator\
        \ (e.g., \"address|memo\")."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: addresses
      required: false
      schema:
        type: string
      style: form
    requiredTradingAccountTypeParam:
      description: The trading account type.
      example: SPOT
      explode: true
      in: query
      name: trading_account_type
      required: true
      schema:
        type: string
      style: form
    optionalTradingAccountTypeListParam:
      description: "A list of trading account types, separated by comma. You can get\
        \ the the supported trading account types of an exchange by calling [List\
        \ supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges)."
      example: "Trading,Funding"
      explode: true
      in: query
      name: trading_account_types
      required: false
      schema:
        type: string
      style: form
    optionalAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: false
      schema:
        description: The wallet address.
        type: string
      style: form
    requiredToAddressParam:
      description: The recipient's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: true
      schema:
        type: string
      style: form
    optionalToAddressParam:
      description: The recipient's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: false
      schema:
        type: string
      style: form
    optionalFromAddressParam:
      description: "The sender's address. For EVM addresses in MPC Wallets, this parameter\
        \ is required."
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: from_address
      required: false
      schema:
        type: string
      style: form
    optionalUtxoTxHashParam:
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
      explode: true
      in: query
      name: tx_hash
      required: false
      schema:
        description: The transaction hash of the UTXO.
        type: string
      style: form
    requiredSourceWalletIdParam:
      description: The wallet ID of the transaction source.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: source_wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: form
    requiredDestinationAddressesParam:
      description: "A list of destination addresses, separated by comma."
      example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
      explode: true
      in: query
      name: destination_addresses
      required: true
      schema:
        type: string
      style: form
    keyShareHolderGroupIdParam:
      description: The key share holder group ID.
      example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
      explode: false
      in: path
      name: key_share_holder_group_id
      required: true
      schema:
        type: string
      style: simple
    optionalKeyShareHolderGroupTypeParam:
      description: |
        The key share holder group type. Possible values include:
        - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

        - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

        - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

        **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
      explode: true
      in: query
      name: key_share_holder_group_type
      required: false
      schema:
        $ref: '#/components/schemas/KeyShareHolderGroupType'
      style: form
    projectIdParam:
      description: "The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: project_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalProjectIdQueryParam:
      description: |
        The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: project_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalProjectIdListQueryParam:
      description: "A list of MPC project IDs, separated by comma."
      example: "a3d8eae2-1740-4b5e-92f2-88c2b1e44c6b,b51f63a3-8a8e-4a34-ae9e-6f3e6b1fdf99"
      explode: true
      in: query
      name: project_ids
      required: false
      schema:
        type: string
      style: form
    requiredKeyShareHolderGroupIdParam:
      description: "The key share holder group ID of the TSS request, which you can\
        \ retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
      example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
      explode: true
      in: query
      name: key_share_holder_group_id
      required: true
      schema:
        type: string
      style: form
    tssRequestIdParam:
      description: "The TSS request ID, which you can retrieve by calling [List TSS\
        \ requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests)."
      example: "20240711114129000132315000003970"
      explode: false
      in: path
      name: tss_request_id
      required: true
      schema:
        type: string
      style: simple
    vaultIdParam:
      description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: vault_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalVaultIdQueryParam:
      description: "The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: vault_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalVaultIdListQueryParam:
      description: "A list of vault IDs, separated by comma."
      example: "f5c3f9e8-1d8a-44b2-9284-94bf76b7b017,ab2e3f55-472e-4a98-86d1-446d2f9e839e"
      explode: true
      in: query
      name: vault_ids
      required: false
      schema:
        type: string
      style: form
    optionalVaultNameParam:
      description: Unique id of the mpc vault
      example: my vault name
      explode: true
      in: query
      name: vault_name
      required: false
      schema:
        type: string
      style: form
    tssNodeIdParam:
      description: The TSS Node ID.
      example: coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
      explode: false
      in: path
      name: tss_node_id
      required: true
      schema:
        type: string
      style: simple
    optionalGroupIdsListQueryParam:
      description: "A list of key share holder group IDs, separated by comma. You\
        \ can retrieve the IDs of all the key share holder groups by calling [List\
        \ all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups)."
      example: "dc0cac48-9add-4243-9c7a-b8badac8a198,5558bd1b-d221-4e2b-8c29-f6c97d9e6aca"
      explode: true
      in: query
      name: key_share_holder_group_ids
      required: false
      schema:
        type: string
      style: form
    exchangeIdParam:
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      explode: false
      in: path
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: simple
    optionalExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: false
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    requiredExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    optionalApikeyParam:
      description: The API Key for the exchange
      example: d8f062da-39f4-4a11-8b9d-12595854237f
      explode: true
      in: query
      name: apikey
      required: false
      schema:
        type: string
      style: form
    optionalSecretParam:
      description: The API Secret for the exchange.
      example: 75B4F636193162488A3728B4A5797708
      explode: true
      in: query
      name: secret
      required: false
      schema:
        type: string
      style: form
    optionalPassphraseParam:
      description: The API passphrase for the exchange wallet.
      example: A3DBHJV
      explode: true
      in: query
      name: passphrase
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdParam:
      description: The request ID that is used to track a transaction request. The
        request ID is provided by you and must be unique within your organization.
      example: web_send_by_user_327_1610444045047
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    optionalCoboIdParam:
      description: "A list of Cobo IDs, separated by comma. A Cobo ID can be used\
        \ to track a transaction."
      example: "20231213122855000000000000000000,20231213122955000000000000000000"
      explode: true
      in: query
      name: cobo_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionIdParam:
      description: "A list of transaction IDs, separated by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
      explode: true
      in: query
      name: transaction_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionTypeParam:
      description: The type of a transaction
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/TransactionType'
      style: form
    optionalTransactionTypeListParam:
      description: "A list of transaction types, separated by comma. Possible values\
        \ include: \n  - `Deposit`: A deposit transaction.\n  - `Withdrawal`: A withdrawal\
        \ transaction.\n  - `ContractCall`: A transaction that interacts with a smart\
        \ contract.\n  - `MessageSign`: A transaction that signs a message. \n  -\
        \ `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet})\
        \ that requires one or multiple signatures to be executed.\n  - `Stake`: A\
        \ transaction that creates a staking request.\n  - `Unstake`: A transaction\
        \ that creates a unstaking request.\n"
      example: "Deposit,Withdrawal"
      explode: true
      in: query
      name: types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionStatusParam:
      description: The status of a transaction
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/TransactionStatus'
      style: form
    optionalTransactionStatusListParam:
      description: "A list of transaction statuses, separated by comma. Possible values\
        \ include: \n  - `Submitted`: The transaction is submitted.\n  - `PendingScreening`:\
        \ The transaction is pending screening by Risk Control. \n  - `PendingAuthorization`:\
        \ The transaction is pending approvals.\n  - `PendingSignature`: The transaction\
        \ is pending signature. \n  - `Broadcasting`: The transaction is being broadcast.\n\
        \  - `Confirming`: The transaction is waiting for the required number of confirmations.\n\
        \  - `Completed`: The transaction is completed.\n  - `Failed`: The transaction\
        \ failed.\n  - `Rejected`: The transaction is rejected.\n  - `Pending`: The\
        \ transaction is waiting to be included in the next block of the blockchain.\n"
      example: "Completed,Failed"
      explode: true
      in: query
      name: statuses
      required: false
      schema:
        type: string
      style: form
    optionalMinCreatedTimestampParam:
      description: |
        The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.

        If not provided, the default value is 90 days before the current time. This default value is subject to change.
      example: 1635744000000
      explode: true
      in: query
      name: min_created_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalMaxCreatedTimestampParam:
      description: |
        The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.

        If not provided, the default value is the current time. This default value is subject to change.
      example: 1635744000000
      explode: true
      in: query
      name: max_created_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalTransactionSourceTypeListParam:
      description: |
        A list of transaction source types, separated by comma. Possible values include:
          - `Asset`: Custodial Wallets (Asset Wallets).
          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
          - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
          - `Main`: Exchange Wallets (Main Account).
          - `Sub`: Exchange Wallets (Sub Account).
          - `DepositFromAddress`: An address which can include both Cobo's wallet addresses and external addresses.
          - `DepositFromWallet`: An Exchange Wallet.
          - `DepositFromLoop`: A transfer sender through the [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) network.
      example: "Asset,DepositFromAddress"
      explode: true
      in: query
      name: source_types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionSourceAddressListParam:
      description: "A list of wallet IDs of the transaction sources, separated by\
        \ comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
      explode: true
      in: query
      name: source_wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionSourceWalletIdListParam:
      description: "A list of addresses of the transaction source, separated by comma."
      explode: true
      in: query
      name: source_addresses
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationTypeListParam:
      description: "A list of transaction destination types, separated by comma. Possible\
        \ values include:\n  - `Address`: An external address. \n  - `ContractCall`:\
        \ A transaction that interacts with a smart contract.\n  - `MessageSign`:\
        \ A transaction that signs a message. \n  - `CustodialWallet`: A Custodial\
        \ Wallet.\n  - `MPCWallet`: An MPC Wallet.\n  - `SafeWallet`: A Smart Contract\
        \ Wallets (Safe{Wallet}).\n  - `ExchangeWallet`: An Exchange Wallet.\n"
      example: "ContractCall,MessageSign"
      explode: true
      in: query
      name: destination_types
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationAddressListParam:
      description: "A list of wallet IDs of the transaction destinations, separated\
        \ by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3"
      explode: true
      in: query
      name: destination_wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionDestinationWalletIdListParam:
      description: |
        A list of addresses of the transaction destination, separated by comma. If the address includes a memo, use `|` to append the memo to the address. For example, if the address is `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku` and the memo is `82840924`, you need to provide `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku|82840924` as the property value.
      explode: true
      in: query
      name: destination_addresses
      required: false
      schema:
        type: string
      style: form
    transactionIdParam:
      description: The transaction ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: transaction_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalTransactionHashParam:
      description: "A list of transaction hashes, separated by comma."
      example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
      explode: true
      in: query
      name: transaction_hashes
      required: false
      schema:
        type: string
      style: form
    webhookEventIdParam:
      description: "The event ID. You can obtain a list of event IDs by calling [List\
        \ all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    endpointIdParam:
      description: "The webhook endpoint ID. You can retrieve a list of webhook endpoint\
        \ IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: endpoint_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    activityIdRequiredParam:
      description: The activity ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: activity_id
      required: true
      schema:
        type: string
      style: simple
    poolIdRequiredParam:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. You can call [List staking pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools)\
        \ to retrieve a list of staking pools."
      example: babylon_btc
      explode: false
      in: path
      name: pool_id
      required: true
      schema:
        type: string
      style: simple
    poolIdOptionalParam:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. You can call [List staking pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools)\
        \ to retrieve a list of staking pools."
      example: babylon_btc
      explode: true
      in: query
      name: pool_id
      required: false
      schema:
        type: string
      style: form
    stakingIdRequiredParam:
      description: "The ID of the staking position. You can retrieve a list of staking\
        \ positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: staking_id
      required: true
      schema:
        type: string
      style: simple
    stakingIdOptionalParam:
      description: The ID of the Phase-1 BTC staking position.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: staking_id
      required: false
      schema:
        type: string
      style: form
    activityTypeOptionalParam:
      example: Stake
      explode: true
      in: query
      name: activity_type
      required: false
      schema:
        $ref: '#/components/schemas/ActivityType'
      style: form
    activityStatusOptionalParam:
      example: Success
      explode: true
      in: query
      name: activity_status
      required: false
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      style: form
    activityInitiatorOptionalParam:
      description: "The activity initiator, which is your API key by default. You\
        \ can also specify the initiator when creating the activity."
      example: steve@example.com
      explode: true
      in: query
      name: initiator
      required: false
      schema:
        type: string
      style: form
    maxModifiedTimestampOptionalParam:
      description: "The end time of the query. All staking activities updated before\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: max_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    minModifiedTimestampOptionalParam:
      description: "The start time of the query. All staking activities updated after\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: min_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    babylonRegistrationStatusOptionalParam:
      description: |
        The status of Babylon airdrop or Phase-2 registration. Possible values are:
        - `Registered`: Registered for Babylon airdrop or Phase-2.
        - `Unregistered`: Not registered for any Babylon airdrop or Phase-2.
        - `Registering`: The Babylon airdrop or Phase-2 registration is in progress but not yet completed.
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - Registered
        - Unregistered
        - Registering
        example: Registered
        type: string
      style: form
    babylonRegistrationRequestStatusOptionalParam:
      description: The registration request status.
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: |
          The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
          - `Processing`: The registration request is being processed.
          - `Completed`: The registration has been completed.
          - `Failed`: The registration failed.
        enum:
        - Processing
        - Completed
        - Failed
        example: Processing
        type: string
      style: form
    babylonRegistrationIdRequiredParam:
      description: "The Babylon airdrop or Babylon Phase-2 registration ID. You can\
        \ use the [Register for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-airdrop)\
        \ or the [Register for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-phase-2)\
        \ operation to get this information."
      explode: false
      in: path
      name: registration_id
      required: true
      schema:
        type: string
      style: simple
    btcAddressOptionalParam:
      description: The Bitcoin (BTC) address used for staking.
      example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
      explode: true
      in: query
      name: btc_address
      required: false
      schema:
        type: string
      style: form
    ClientIdRequiredParam:
      description: "The client ID, a unique identifier to distinguish Cobo Portal\
        \ Apps. You can get the client ID by retrieving the manifest file after publishing\
        \ the app."
      example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
      explode: true
      in: query
      name: client_id
      required: true
      schema:
        type: string
      style: form
    OrgIdRequiredParam:
      description: "Organization ID, a unique identifier to distinguish different\
        \ organizations. You can get the organization ID from the callback message\
        \ sent to the URL that was configured in the manifest file."
      example: e3986401-4aec-480a-973d-e775a4518413
      explode: true
      in: query
      name: org_id
      required: true
      schema:
        type: string
      style: form
    GrantTypeRequiredParam:
      description: The OAuth grant type. Set the value as `org_implicit`.
      example: org_implicit
      explode: true
      in: query
      name: grant_type
      required: true
      schema:
        type: string
      style: form
    optionalAddressBookLabelParam:
      description: The address label.
      example: test
      explode: true
      in: query
      name: label
      required: false
      schema:
        description: The address label.
        type: string
      style: form
    requiredTransactionTypeParam:
      description: "The transaction type. Possible values include: \n  - `DEPOSIT`:\
        \ A deposit transaction.\n  - `WITHDRAW`: A withdrawal transaction.\n"
      example: DEPOSIT
      explode: true
      in: query
      name: transaction_type
      required: true
      schema:
        enum:
        - DEPOSIT
        - WITHDRAW
        type: string
      style: form
    requiredTransactionIdParam:
      description: The transaction ID.
      explode: true
      in: query
      name: transaction_id
      required: true
      schema:
        example: 123e4567-e89b-12d3-a456-426614174000
        format: uuid
        type: string
      style: form
    apilogIdParam:
      description: The API log ID.
      example: e39864014aec480a973de775a4518413
      explode: false
      in: path
      name: log_id
      required: true
      schema:
        type: string
      style: simple
    optionalApiEndTimestampParam:
      description: "The time when the API request was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter API logs\
        \ of requests created on or before the specified time."
      example: 1640918000000
      explode: true
      in: query
      name: end_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalApiStartTimestampParam:
      description: "The time when the API request was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter API logs\
        \ of requests created on or after the specified time."
      example: 1640918000000
      explode: true
      in: query
      name: start_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    optionalApiStatusCodeParam:
      description: "The HTTP status code returned by the API request. For more details,\
        \ refer to [Error codes and status codes](https://www.cobo.com/developers/v2/api-references/error-codes)."
      example: "400,401"
      explode: true
      in: query
      name: status_code
      required: false
      schema:
        type: string
      style: form
    optionalApiMethodParam:
      description: |
        The HTTP method used for the API request. Possible values include:
          - `GET`: The GET method.
          - `POST`: The POST method.
          - `PUT`: The PUT method.
          - `DELETE`: The DELETE method.
      example: GET
      explode: true
      in: query
      name: method
      required: false
      schema:
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        type: string
      style: form
    optionalApiKeyParam:
      description: "The API key used to call the API. For more details, refer to [API\
        \ key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key)."
      example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
      explode: true
      in: query
      name: api_key
      required: false
      schema:
        type: string
      style: form
    optionalApiEndpointParam:
      description: The endpoint of the API request.
      example: /v2/wallets/asset
      explode: true
      in: query
      name: api_endpoint
      required: false
      schema:
        type: string
      style: form
    optionalApiIpAddressParam:
      description: The client's IP address that made the API request.
      example: 127.0.0.1
      explode: true
      in: query
      name: ip_address
      required: false
      schema:
        type: string
      style: form
    optionalApiLogStatusParam:
      description: The API request status. Possible values are `Success` and `Failed`.
      example: Success
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - Success
        - Failed
        type: string
      style: form
    optionalApiLogClientIdParam:
      description: The client ID of the Cobo Portal App that made the API request.
      example: 9535384b-33cf-4ef7-88fa-74136f9748db1
      explode: true
      in: query
      name: client_id
      required: false
      schema:
        type: string
      style: form
    optionalCallbackMessageIdsParam:
      description: "A list of callback message IDs, separated by commas."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: callback_message_ids
      required: false
      schema:
        type: string
      style: form
    optionalTransactionIdsParam:
      description: "A list of transaction IDs, separated by commas."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: transaction_ids
      required: false
      schema:
        type: string
      style: form
    optionalWalletIdsParam:
      description: "A list of wallet IDs, separated by commas."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: wallet_ids
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdsParam:
      description: "A list of request IDs, separated by commas. The request ID is\
        \ provided by you and must be unique within your organization."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479"
      explode: true
      in: query
      name: request_ids
      required: false
      schema:
        type: string
      style: form
    optionalCallbackStatusParam:
      description: "The callback message status. Possible values include `Approved`,\
        \ `Denied`, and `Failed`."
      example: Approved
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - Denied
        - Approved
        - Failed
        type: string
      style: form
    callbackMessageIdParam:
      description: The callback message ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: message_id
      required: true
      schema:
        type: string
      style: simple
    activityIdParam:
      description: The unique id of the activity.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: activity_id
      required: true
      schema:
        type: string
      style: simple
    initiatorOptionalParam:
      description: "The activity initiator, which is your API key by default. You\
        \ can also specify the initiator when creating the activity."
      example: steve@example.com
      explode: true
      in: query
      name: initiator
      required: false
      schema:
        type: string
      style: form
    payAmountRequiredParam:
      description: The amount of pay token.
      example: "1.5"
      explode: true
      in: query
      name: pay_amount
      required: true
      schema:
        type: string
      style: form
    payAmountOptionalParam:
      description: The amount of pay token.
      example: "1.5"
      explode: true
      in: query
      name: pay_amount
      required: false
      schema:
        type: string
      style: form
    receiveAmountRequiredParam:
      description: The amount of token to receive.
      example: "2000"
      explode: true
      in: query
      name: receive_amount
      required: true
      schema:
        type: string
      style: form
    receiveAmountOptionalParam:
      description: The amount of token to receive.
      example: "2000"
      explode: true
      in: query
      name: receive_amount
      required: false
      schema:
        type: string
      style: form
    payTokenIdRequiredParam:
      description: Unique id of the token to pay.
      example: ETH
      explode: true
      in: query
      name: pay_token_id
      required: true
      schema:
        type: string
      style: form
    receiveTokenIdRequiredParam:
      description: Unique id of the token to receive.
      example: USDT
      explode: true
      in: query
      name: receive_token_id
      required: true
      schema:
        type: string
      style: form
    swapActivityStatusOptionalParam:
      example: Success
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/SwapActivityStatus'
      style: form
    swapTypeOptionalParam:
      example: Bridge
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/SwapType'
      style: form
    swapActivityMinUpdatedTimestampOptionalParam:
      description: "The start time of the query. All staking activities updated after\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: min_updated_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    swapActivityMaxUpdatedTimestampOptionalParam:
      description: "The end time of the query. All staking activities updated before\
        \ the specified time will be retrieved. The time is in Unix timestamp format,\
        \ measured in milliseconds."
      example: 1635744000000
      explode: true
      in: query
      name: max_updated_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    ApprovalIdParam:
      description: The system-generated unique ID of the approval request.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: approval_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    ApprovalOperationIdParam:
      description: The unique ID of the approval workflow.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: operation_id
      required: true
      schema:
        type: string
      style: form
    ApprovalRequestIdParam:
      description: The request ID that is used to track a workflow request. The request
        ID is provided by you and must be unique within your app.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: request_id
      required: true
      schema:
        type: string
      style: form
    UserIdParam:
      description: The user ID.
      example: "168108513539918"
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        description: The user ID.
        type: string
      style: simple
    optionalFeeStationTransactionTypeListParam:
      description: "A list of transaction types for Fee Station, separated by comma.\
        \ Possible values include: \n  - `Deposit`: A deposit transaction.\n  - `Withdrawal`:\
        \ A withdrawal transaction.\n"
      example: "Deposit,Withdrawal"
      explode: true
      in: query
      name: types
      required: false
      schema:
        type: string
      style: form
    BankIdPathParam:
      description: The bank account ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: bank_account_id
      required: true
      schema:
        description: The bank account ID.
        format: uuid
        type: string
      style: simple
    CurrencyRequiredParam:
      description: "The fiat currency. Currently, only `USD` is supported."
      example: USD
      explode: false
      in: path
      name: currency
      required: true
      schema:
        default: USD
        type: string
      style: simple
    CurrencyOptionalParam:
      description: "The currency for the operation. Currently, only `USD` is supported."
      example: USD
      explode: true
      in: query
      name: currency
      required: false
      schema:
        default: USD
        type: string
      style: form
    KeywordOptionalParam:
      description: A search term used for fuzzy matching of merchant names.
      example: keyword
      explode: true
      in: query
      name: keyword
      required: false
      schema:
        description: The keyword.
        type: string
      style: form
    MerchantIdOptionalParam:
      description: The merchant ID.
      example: M1001
      explode: true
      in: query
      name: merchant_id
      required: false
      schema:
        type: string
      style: form
    MerchantIdRequiredParam:
      description: The merchant ID.
      example: M1001
      explode: true
      in: query
      name: merchant_id
      required: true
      schema:
        type: string
      style: form
    MerchantIdPathParam:
      description: The merchant ID.
      example: M1001
      explode: false
      in: path
      name: merchant_id
      required: true
      schema:
        type: string
      style: simple
    MerchantIdsParam:
      description: A list of merchant IDs to query.
      example: "M1001,M1002,M1003"
      explode: true
      in: query
      name: merchant_ids
      required: false
      schema:
        type: string
      style: form
    OrderIdRequiredParam:
      description: The pay-in order ID.
      example: O20250304-M1001-1001
      explode: false
      in: path
      name: order_id
      required: true
      schema:
        type: string
      style: simple
    TokenIdRequiredParam:
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      example: ETH_USDT
      explode: false
      in: path
      name: token_id
      required: true
      schema:
        type: string
      style: simple
    TokenIdQueryRequiredParam:
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: true
      schema:
        type: string
      style: form
    TokenIdOptionalParam:
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: false
      schema:
        type: string
      style: form
    WalletIdOptionalParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    RefundIdPathParam:
      description: The refund order ID.
      example: R20250304-M1001-1001
      explode: false
      in: path
      name: refund_id
      required: true
      schema:
        description: The refund order ID.
        type: string
      style: simple
    RefundIdOptionalParam:
      description: The refund order ID.
      example: R20250304-M1001-1001
      explode: true
      in: query
      name: refund_id
      required: false
      schema:
        description: The refund order ID.
        type: string
      style: form
    SettlementRequestIdPathParam:
      description: The settlement request ID.
      example: S20250304-1001
      explode: false
      in: path
      name: settlement_request_id
      required: true
      schema:
        type: string
      style: simple
    RequestIdOptionalParam:
      description: The request ID.
      example: random_request_id
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    PspOrderIdOptionalParam:
      description: A unique reference code assigned by the developer to identify this
        order in their system.
      example: P20240201001
      explode: true
      in: query
      name: psp_order_id
      required: false
      schema:
        type: string
      style: form
    PayerIdOptionalParam:
      description: A unique identifier assigned by Cobo to track and identify individual
        payers.
      example: P20250619T0310056d7aa
      explode: true
      in: query
      name: payer_id
      required: false
      schema:
        type: string
      style: form
    CustomPayerIdRequiredParam:
      description: A unique identifier assigned by the developer to track and identify
        individual payers in their system.
      example: payer_0001
      explode: true
      in: query
      name: custom_payer_id
      required: true
      schema:
        type: string
      style: form
    AcquiringTypeOptionalParam:
      explode: true
      in: query
      name: acquiring_type
      required: false
      schema:
        $ref: '#/components/schemas/AcquiringType'
      style: form
  requestBodies:
    createWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWalletParams'
      description: The request body to create a wallet
    updateWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWalletParams'
      description: The request body.
    createAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_address_request'
      description: The request body to generates addresses within a specified wallet.
    lockUtxosBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_utxos_request'
      description: The request body of the Lock/Unlock UTXOs operation.
    safeWalletDelegatesRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SafeWalletDelegates'
      description: "The request body to query the Delegates of a Safe{Wallet}."
    refreshAddressBalancesBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_address_balances_by_token_request'
      description: The request body to refresh addresses balances.
    createTokenListingRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_token_listing_request_request'
      description: |
        Request body for submitting a token listing request.
      required: true
    batchCheckUtxoRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/batch_check_utxo_request'
      description: The request body of the Batch check UTXOs operation.
    maxTransferableValueRequestBody:
      content:
        application/json:
          schema:
            properties:
              token_id:
                description: "The token ID of the transferred token. You can retrieve\
                  \ the IDs of all the tokens you can use by calling [List enabled\
                  \ tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).\
                  \ For transfers from Exchange Wallets, this property value represents\
                  \ the asset ID."
                example: ETH_USDT
                type: string
              fee:
                $ref: '#/components/schemas/TransactionRequestFee'
              to_address:
                description: The recipient's address.
                example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                type: string
              from_address:
                description: "The sender's address. For EVM addresses in MPC Wallets,\
                  \ this parameter is required."
                example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                type: string
            required:
            - fee
            - to_address
            - token_id
            type: object
      description: The request body to get max transferable value within a specified
        wallet.
    createKeyShareHolderGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_share_holder_group_request'
      description: The request body to create a key share holder group.
    createMpcProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_project_request'
      description: The request body to create a project.
    createTssRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_tss_request_request'
      description: The request body to create a TSS request.
    createMpcVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_vault_request'
      description: The request body to create a vault.
    updateProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_project_by_id_request'
      description: The request body to update a project's name.
    updateVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_vault_by_id_request'
      description: The request body to update a vault's name.
    updateGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_key_share_holder_group_by_id_request'
    createTransferBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferParams'
      description: The request body to create a transfer transaction
    createSmartContractCallBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCallParams'
      description: The request body for making a contract call.
    createMessageSignBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageSignParams'
      description: The request body to create a message signing transaction
    estimateFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFeeParams'
      description: The request body to estimate the transaction fee of a token transfer
        or a contract call.
    feeRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
      description: The request body to drop or to speed up transactions
    resendTransactionBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
      description: The request body to resend transactions
    broadcastTransactionsBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/broadcast_signed_transactions_request'
      description: The request body to broadcast a list of signed transactions.
    createStakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_request'
      description: The request body to create a staking request.
    createWithdrawActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_withdraw_activity_request'
      description: The request body to create a withdraw activity.
    createUnstakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_unstake_activity_request'
      description: The request body to create a unstaking request.
    createClaimActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_claim_activity_request'
      description: The request body to create a staking request.
    estimateStakeActivityFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_staking_estimation_fee_request'
      description: The request body to get the estimated fee of a staking activity.
    createBabylonStakingRegistrationBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_babylon_staking_registration_request'
      description: The request body to transit Babylon BTC staking to phase 2
    createBabylonAirdropRegistrationBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_babylon_airdrop_registration_request'
      description: The request body to register for the Babylon airdrop.
    createWebhookEndpointBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_webhook_endpoint_request'
      description: The request body to register a webhook endpoint.
    updateWebhookBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_webhook_endpoint_by_id_request'
      description: The request body to update a webhook endpoint.
    triggerTestEventBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/trigger_test_webhook_event_request'
      description: 'The request body used to trigger a test webhook event. '
    tokenEndpointBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_token_request'
      description: The request body for refreshing an Org Access Token.
      required: true
    permissionTokenExchangeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exchange_permission_token_request'
      description: The request body to acquire an Access Token.
      required: true
    permissionTokenRefreshBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_permission_token_request'
      description: The request body to refresh the Access Token and the Refresh Token.
      required: true
    createPrimeBrokerUserAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_prime_broker_address_request'
      description: The request body to bind addresses to a broker user.
    createSwapActivityBody:
      content:
        application/json:
          schema:
            properties:
              wallet_id:
                description: The unique identifier of the wallet to pay.
                example: 123e4567-e89b-12d3-a456-426614174000
                type: string
              address:
                description: The wallet address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                type: string
              quote_id:
                description: The unique identifier of the quote.
                example: 123e4567-e89b-12d3-a456-426614174001
                format: uuid
                type: string
              app_initiator:
                description: "The initiator of the app activity. If you do not specify\
                  \ this property, the WaaS service will automatically designate the\
                  \ API key as the initiator."
                example: steve@example.com
                type: string
              request_id:
                description: The request id of the swap activity.
                example: 123e4567-e89b-12d3-a456-426614174002
                type: string
              destination:
                $ref: '#/components/schemas/AddressTransferDestination'
            required:
            - quote_id
            - wallet_id
            type: object
      description: The request body for creating a swap activity.
      required: true
    graphQLRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GraphQLRequest'
      description: The request body to generate addresses within a specified wallet.
    createMerchantBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_merchant_request'
      description: The request body to create a merchant.
    updateMerchantBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_merchant_by_id_request'
      description: The request body to update a merchant.
    createBankAccountBody:
      content:
        application/json:
          schema:
            properties:
              info:
                additionalProperties: true
                description: |
                  JSON-formatted bank account details. The object should include the following fields:
                  - beneficiary_name: Name of the account holder
                  - beneficiary_address: Address of the account holder
                  - account_number: Bank account number
                  - bank_name: Name of the bank
                  - bank_address: Address of the bank
                  - iban: (Optional) International Bank Account Number
                  - swift_or_bic: SWIFT or BIC code of the bank
                example:
                  beneficiary_name: John Doe
                  beneficiary_address: "123 Main St, Anytown, USA"
                  account_number: "4111111111111111"
                  bank_name: ABC Bank
                  bank_address: "456 Bank Ave, Cityville, USA"
                  swift_or_bic: ABCDEFGH
                type: object
            required:
            - info
            type: object
      description: The request body to register a bank account.
    updateBankAccountBody:
      content:
        application/json:
          schema:
            properties:
              info:
                additionalProperties: true
                description: |
                  JSON-formatted bank account details. The object should include the following fields:
                  - beneficiary_name: Name of the account holder
                  - beneficiary_address: Address of the account holder
                  - account_number: Bank account number
                  - bank_name: Name of the bank
                  - bank_address: Address of the bank
                  - iban: (Optional) International Bank Account Number
                  - swift_or_bic: SWIFT or BIC code of the bank
                example:
                  beneficiary_name: John Doe
                  beneficiary_address: "123 Main St, Anytown, USA"
                  account_number: "4111111111111111"
                  bank_name: ABC Bank
                  bank_address: "456 Bank Ave, Cityville, USA"
                  swift_or_bic: ABCDEFGH
                type: object
            required:
            - info
            type: object
      description: The request body for updating an existing bank account.
    createPaymentOrderBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_payment_order_request'
      description: The request body to create a pay-in order.
    updatePaymentOrderBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_payment_order_request'
      description: The request body to update a pay-in order.
    createRefundBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_refund_request'
      description: The request body to create a refund order.
    updateRefundBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_refund_by_id_request'
      description: The request body to update a refund order.
    createSettlementBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_settlement_request_request'
      description: The request body to create a settlement request.
    createCryptoAddressBody:
      content:
        application/json:
          schema:
            properties:
              token_id:
                description: |
                  The token ID that identifies the cryptocurrency and its corresponding blockchain.

                  **Supported values**:
                    - **USDC**: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
                    - **USDT**: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
                example: ETH_USDT
                type: string
              address:
                description: |
                  The blockchain address where crypto withdrawals will be sent. Must be a valid address format for the blockchain specified by `token_id`. For example:
                  - For `SOL_USDC`: Provide a Solana address.
                  - For `ETH_USDT`: Provide an Ethereum address.
                example: 0xabc123456789def0000000000000000000000000
                type: string
              label:
                description: |
                  A label to help identify the address's purpose.
                example: Main Withdrawal Address
                type: string
            required:
            - address
            - token_id
            type: object
      description: The request body to create a crypto address.
    updateTopUpAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTopUpAddress'
      description: The request body to update top up address.
    estimateFeeStationFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeeStationTransfer'
      description: The information about a Fee Station top-up transaction.
    requestApprovalBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestApproval'
      description: The request body to request workflow approval.
    revokeApprovalRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/revoke_approval_request_request'
      description: The request body to revoke an approval request.
  responses:
    badRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad request. Your request contains malformed syntax or invalid
        parameters.
    unauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized. Please provide valid credentials.
    forbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden. You do not have the permission to access the requested
        resource.
    notFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Requested resources not found.
    tooManyRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Too many requests.
    internalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Internal server error.
    serviceUnavailableError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unknown internal error.
    getOrgInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrgInfo'
      description: The request was successful.
    getChainsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_chains_200_response'
      description: The request was successful.
    getChainByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
      description: The request was successful.
    getAssetsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_assets_for_exchange_200_response'
      description: The request was successful.
    getTokensResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_supported_tokens_200_response'
      description: The request was successful.
    getTokenByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
      description: The request was successful.
    getTokenBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_token_balances_for_address_200_response'
      description: The request was successful.
    getAddressBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_address_balances_by_token_200_response'
      description: The request was successful.
    getAssetBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_asset_balances_for_exchange_wallet_200_response'
      description: The request was successful.
    getWalletsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_wallets_200_response'
      description: Successfully listed wallets
    getWalletByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successful get a wallet info
    createWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWalletInfo'
      description: The request was successful.
    updateWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successfully updated address
    deleteWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_wallet_by_id_201_response'
      description: The request was successful.
    listUtxoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_utxos_200_response'
      description: The request was successful.
    lockUtxoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_utxos_201_response'
      description: The request was successful.
    batchCheckUtxoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/batch_check_utxo_201_response'
      description: The request was successful.
    maxTransferableValueResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
      description: The request was successful.
    getAddressesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_addresses_200_response'
      description: Successfully listed addresses
    getAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: Successfully listed address information
    createAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: The request was successful.
    checkAddressValidityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/check_address_validity_200_response'
      description: The request was successful.
    checkAddressesValidityResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_addresses_validity_200_response_inner'
            type: array
      description: The request was successful.
    checkAddressChainsValidityResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_address_chains_validity_200_response_inner'
            type: array
      description: The request was successful.
    checkLoopTransfersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/check_loop_transfers_200_response_inner'
            type: array
      description: The request was successful.
    refreshAddressBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_address_balances_by_token_200_response'
      description: The request was successful.
    createTokenListingRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_token_listing_request_201_response'
      description: Successful token listing request submission
    createKeyShareHolderGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: mpc vault successfully created
    createMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully created project.
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully created the vault.
    getCoboKeyHoldersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyShareHolder'
            type: array
      description: Successfully listed MPC Wallets' key share holder information.
    getKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: Successfully get mpc tss group
    getKeyShareHolderGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_key_share_holder_groups_200_response'
      description: Successfully listed key share holder groups.
    getMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully listed all vaults.
    getMpcProjectsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_mpc_projects_200_response'
      description: Successfully listed all projects.
    getTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully retrieved TSS request.
    getMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully retrieved vault information.
    getMpcVaultsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_mpc_vaults_200_response'
      description: Successfully listed all vaults.
    deleteKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_key_share_holder_group_by_id_201_response'
      description: Successfully deleted the specified key share holder group.
    putKeyShareHolderGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
      description: Successfully modify mpc tss group
    putTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully modified the TSS request.
    putVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully modify mpc vault
    getKeyShareHolderResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolder'
      description: Successfully retrieved key share holder information
    getKeyShareHoldersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_key_share_holders_200_response'
      description: Successfully retrieved key share holder list
    getExchangeSettingsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_exchanges_200_response_inner'
            type: array
      description: The request was successful.
    getChainsByAssetIdResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ChainInfo'
            type: array
      description: The request was successful.
    getSafeWalletDelegatesResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/CoboSafeDelegate'
            type: array
      description: Delegates successfully retrieved.
    getChainFeeResponse:
      content:
        application/json:
          schema:
            description: "The fee rate for the specified chain or token. \n\nThe `max_priority_fee`\
              \ in the EIP-1559 fee model and the `max_fee_amount` properties in the\
              \ fixed fee model represent the recommended values from the chain.\n"
            items:
              $ref: '#/components/schemas/FeeRate'
            type: array
      description: The request was successful.
    getTransactionsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_transactions_200_response'
      description: The information about the transactions.
    getTransactionByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetail'
      description: The information about a transaction.
    estimateFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
      description: The request was successful.
    transactionFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRequestFee'
      description: Successful get a transaction detail
    createTransactionRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_transfer_transaction_201_response'
      description: The request was successful.
    broadcastTransactionsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/broadcast_signed_transactions_201_response_inner'
            type: array
      description: The request was successful.
    getTransactionApprovalDetailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionApprovalDetail'
      description: The information about a transaction approval detail.
    batchGetTransactionApprovalDetailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_transaction_approval_details_200_response'
      description: The information about transaction approval detail.
    createWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: The request was successful.
    getWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: The request was successful.
    listWebhookEndpointsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_endpoints_200_response'
      description: Successfully listed of webhook endpoints
    updateWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
      description: Update webhook endpoint successfully.
    listWebhookEventsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_events_200_response'
      description: A list of webhook events has been successfully retrieved.
    getWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
      description: The webhook event information is successfully retrieved.
    getWebhookEventDefinitionsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
            type: array
      description: The request was successful.
    retryWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/retry_webhook_event_by_id_201_response'
      description: The request was successful.
    getWebhookEventLogsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_event_logs_200_response'
      description: The request was successful.
    triggerTestWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/trigger_test_webhook_event_201_response'
      description: The request was successful.
    listStakingPoolsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_staking_pools_200_response'
      description: A list of staking pools has been successfully retrieved.
    createActivityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_201_response'
      description: Successfully created a staking activity.
    stakingsDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
      description: A staking position has been successfully retrieved.
    poolDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
      description: A staking pool has been successfully retrieved.
    listStakingsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_stakings_200_response'
      description: A list of staking positions has been successfully retrieved.
    listActivitiesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_staking_activities_200_response'
      description: A list of staking activities have been successfully retrieved.
    estimateStakingFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_staking_estimation_fee_201_response'
      description: The request was successful.
    estimateStakingFeeV2Response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EthStakeEstimatedFee'
      description: The request was successful.
    getBabylonAirdropRegistrationDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BabylonAirdropRegistration'
      description: Get airdrop registration details successfully
    listBabylonAirdropRegistrationsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_babylon_airdrop_registrations_200_response'
      description: List of babylon airdrop registrations retrieved successfully
    listBabylonAirdropEligibleResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_babylon_eligible_airdrops_200_response'
      description: List of wallets eligible for Babylon airdrop registration
    createBabylonAirdropRegistrationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_babylon_airdrop_registration_201_response'
      description: Airdrop registration created successfully
    getBabylonStakingRegistrationDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BabylonStakingRegistration'
      description: Get babylon staking registration details successfully
    listBabylonStakingRegistrationsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_babylon_staking_registrations_200_response'
      description: List of babylon staking registrations retrieved successfully
    listBabylonStakingEligibleResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_babylon_eligible_stakings_200_response'
      description: List of stakings eligible for Babylon Phase-2 registration
    createBabylonStakingRegistrationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_babylon_staking_registration_201_response'
      description: Register Babylon BTC staking for phase 2 successfully
    getTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_token_2XX_response'
      description: The request was successful.
    refreshTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refresh_token_2XX_response'
      description: The request was successful.
    oauthErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_token_4XX_response'
      description: Unauthorized. Please provide valid credentials.
    permissionTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exchange_permission_token_201_response'
      description: The request was successful.
    createUserAdressResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_prime_broker_address_201_response'
      description: The request was successful.
    createGuardPubkeyResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/change_guard_pubkey_200_response'
      description: The request was successful.
    deleteGuardPubkeyResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_guard_pubkey_201_response'
      description: The request was successful.
    queryGuardPubkeyResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/query_guard_pubkey_200_response'
      description: The request was successful.
    queryApprovalStatementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/query_approval_statement_200_response'
      description: The request was successful.
    listAddressBooksResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_address_books_200_response'
      description: The information about an address book entry.
    getCountriesResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_supported_countries_200_response_inner'
            type: array
      description: A list of countries supported.
    getTransactionLimitationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_transaction_limitation_200_response'
      description: The request was successful.
    submitTravelRuleInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/submit_deposit_travel_rule_info_201_response'
      description: Successfully submitted the Travel Rule information.
    listApiLogsResponse:
      content:
        application/json:
          schema:
            properties:
              data:
                items:
                  $ref: '#/components/schemas/ApiLogSummary'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
            - data
            - pagination
            type: object
      description: The information about API logs.
    getApiLogDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiLogDetails'
      description: The information about an API log.
    getApiKeyInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_api_key_info_200_response'
      description: The API key information.
    listCallbackMessagesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_callback_messages_200_response'
      description: The information about callback messages.
    retryCallbackMessageResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/retry_callback_message_201_response'
      description: The request was successful.
    getSwapActivityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapActivityDetail'
      description: The swap activity details have been successfully retrieved.
    listSwapActivitiesResponse:
      content:
        application/json:
          schema:
            properties:
              data:
                items:
                  $ref: '#/components/schemas/SwapActivity'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
            type: object
      description: A list of swap activities have been successfully retrieved.
    listSwapEnabledTokensResponse:
      content:
        application/json:
          schema:
            properties:
              data:
                items:
                  $ref: '#/components/schemas/SwapToken'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
            type: object
      description: A list of enabled tokens have been successfully retrieved.
    getSwapQuoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapQuote'
      description: The swap quote has been successfully retrieved.
    graphqlResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GraphQLResponse'
      description: A staking activity has been successfully retrieved.
    createMerchantResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Merchant'
      description: The request was successful.
    listMerchantResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_merchants_200_response'
      description: The request was successful.
    createBankAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankAccount'
      description: The request was successful.
    listBankAccountsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/BankAccount'
            type: array
      description: The request was successful.
    createPaymentOrderResponse:
      $ref: '#/components/responses/getPaymentOrderResponse'
    listPaymentOrdersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_payment_orders_200_response'
      description: The request was successful.
    listPaymentPayersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_top_up_payers_200_response'
      description: The request was successful.
    getPaymentOrderResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      description: The request was successful.
    createRefundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
      description: Refund transaction created successfully.
    getExchangeRateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_exchange_rate_200_response'
      description: The request was successful.
    getSettlementInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_settlement_info_by_ids_200_response'
      description: The request was successful.
    getSettlementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
      description: The details of a settlement request.
    createSettlementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
      description: The settlement request was successfully created.
    listSettlementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_settlement_requests_200_response'
      description: The request was successful.
    listRefundsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_refunds_200_response'
      description: The request was successful.
    getRefundDetailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
      description: The request was successful.
    getSettlementReqeustDetailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
      description: The request was successful.
    listCryptoAddressesResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/CryptoAddress'
            type: array
      description: The request was successful.
    listSupportedTokensResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/SupportedToken'
            type: array
      description: The request was successful.
    getTopUpAddressResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopUpAddress'
      description: The request was successful.
    updateTopUpAddressResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopUpAddress'
      description: Top-up address updated successfully.
    listPayerAccountsResponse:
      content:
        application/json:
          schema:
            properties:
              data:
                items:
                  $ref: '#/components/schemas/PayerAccount'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
            type: object
      description: The request was successful.
    getFeeStationTokenBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_token_balances_for_fee_station_200_response'
      description: The request was successful.
    getFeeStationEstimationFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFixedFee'
      description: The request was successful.
    getApprovalRequestByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApprovalRequestDetail'
      description: The information about an approval request.
    listAppWorkflowsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AppWorkflow'
            type: array
      description: A list of approval workflows successfully retrieved
    listApprovalRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_approval_requests_200_response'
      description: A list of approval requests have been successfully retrieved.
    requestApprovalResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_approval_request_201_response'
      description: The request workflow approval was successful.
    revokeApprovalRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/revoke_approval_request_201_response'
      description: The request workflow approval was successful.
  schemas:
    Pagination:
      description: The pagination information of the returned data.
      example:
        before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
        total_count: 10000
        after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
      properties:
        before:
          description: "An object ID used to retrieve records before the specified\
            \ object, indicating earlier or smaller records relative to the current\
            \ dataset. You can use it to paginate backwards. \n\nIf empty, it means\
            \ you have reached the start of the data.  \n\nMost API endpoints sort\
            \ by object ID, but some use other fields depending on the endpoint.\n"
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          type: string
        after:
          description: "An object ID used to retrieve records after the specified\
            \ object, indicating newer or larger records relative to the current dataset.\
            \ You can use it to paginate forwards.  \n\nIf empty, it means you have\
            \ reached the end of the data.  \n\nMost API endpoints sort by object\
            \ ID, but some use other fields depending on the endpoint.\n"
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
          type: string
        total_count:
          description: "The total number of records that match the query criteria,\
            \ unaffected by the pagination parameters (`before` , `after`, and `limit`)."
          example: 10000
          type: integer
      required:
      - after
      - before
      - total_count
      type: object
    ErrorResponse:
      description: The response of a failed request.
      example:
        error_message: error_message
        error_id: 0b6ddf19083c4bd1a9ca01bec44b24dd
        error_code: 0
      properties:
        error_code:
          description: "The error code. Refer to [Error codes and status codes](https://www.cobo.com/developers/v2/api-references/error-codes)\
            \ for more details."
          type: integer
        error_message:
          description: The error description.
          type: string
        error_id:
          description: The error log ID. You can provide the error ID when submitting
            a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
          type: string
      required:
      - error_code
      - error_id
      - error_message
      type: object
    AssetInfo:
      description: The asset information.
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        display_code: USDT
        description: Tether USDT
        asset_id: USDT
      properties:
        asset_id:
          description: The asset ID. An asset ID is the unique identifier of the asset
            held within your linked exchange account.
          example: USDT
          type: string
        display_code:
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
          type: string
        description:
          description: The description of the asset.
          example: Tether USDT
          type: string
        icon_url:
          description: The URL of the asset icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
      required:
      - asset_id
      type: object
    TokenAssetModelType:
      description: |
        The asset model type. Possible values include:

        - `Account`: The account model. This model tracks the balances of user accounts, similar to the traditional banking system.

        - `UTXO`: The UTXO model. This model tracks individual outputs of a transaction rather than account balances. Each transaction consists of inputs (previous UTXOs) and outputs (new UTXOs).
      enum:
      - Account
      - UTXO
      example: Account
      type: string
    TokenInfo:
      description: The token information.
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        asset_model_type: Account
        symbol: USDT
        chain_id: ETH
        custodial_minimum_deposit_threshold: "0.0001"
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
        dust_threshold: "0.00000546"
        fee_token_id: ETH
        can_deposit: true
        token_id: ETH_USDT
        name: Tether USDT
        can_withdraw: true
        decimal: 18
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token."
          example: ETH_USDT
          type: string
        chain_id:
          description: The ID of the chain on which the token operates.
          example: ETH
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        symbol:
          description: "The token symbol, which is the abbreviated name of a token."
          example: USDT
          type: string
        name:
          description: "The token name, which is the full name of a token."
          example: Tether USDT
          type: string
        decimal:
          description: The token decimal.
          example: 18
          type: integer
        icon_url:
          description: The URL of the token icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
        token_address:
          description: "The token address, if applicable."
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
        fee_token_id:
          description: The fee token ID. A fee token is the token with which you pay
            transaction fees.
          example: ETH
          type: string
        can_deposit:
          description: Whether deposits are enabled for this token.
          example: true
          type: boolean
        can_withdraw:
          description: Whether withdrawals are enabled for this token.
          example: true
          type: boolean
        dust_threshold:
          description: |
            The minimum withdrawal amount for Custodial Wallets. If your withdrawal amount is smaller than this threshold, the withdrawal request will receive an error.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfers do not have this limitation.
          example: "0.00000546"
          type: string
        custodial_minimum_deposit_threshold:
          description: |
            The minimum deposit amount for Custodial Wallets. If the amount you deposit to a Custodial Wallet is smaller than this threshold, the deposit will not show up on Cobo Portal or trigger any webhook events.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop)transfers do not have this limitation.
          example: "0.0001"
          type: string
        asset_model_type:
          $ref: '#/components/schemas/TokenAssetModelType'
      required:
      - chain_id
      - token_id
      type: object
    ExtendedTokenInfo:
      allOf:
      - properties:
          can_deposit:
            default: false
            description: |
              Whether the token can be deposited.

              - `true`: The token can be deposited.

              - `false`: The token cannot be deposited.
            example: false
            type: boolean
          can_withdraw:
            default: false
            description: |
              Whether the token can be withdrawn.

              - `true`: The token can be withdrawn.

              - `false`: The token cannot be withdrawn.
            example: false
            type: boolean
        type: object
      - $ref: '#/components/schemas/TokenInfo'
      description: "The token information, including whether the token can be deposited\
        \ or withdrawn."
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        asset_model_type: Account
        symbol: USDT
        chain_id: ETH
        custodial_minimum_deposit_threshold: "0.0001"
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
        dust_threshold: "0.00000546"
        can_deposit: true
        fee_token_id: ETH
        token_id: ETH_USDT
        name: Tether USDT
        can_withdraw: true
        decimal: 18
      type: object
    ChainInfo:
      description: The chain information.
      example:
        icon_url: https://d.cobo.com/public/logos/ETH.png
        symbol: ETH
        chain_id: ETH
        require_memo: false
        confirming_threshold: 15
        explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
        coinbase_maturity: 15
        explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain."
          example: ETH
          type: string
        symbol:
          description: "The chain symbol, which is the abbreviated name of a chain."
          example: ETH
          type: string
        icon_url:
          description: The URL of the chain icon.
          example: https://d.cobo.com/public/logos/ETH.png
          type: string
        explorer_tx_url:
          description: The transaction URL pattern on the blockchain explorer. You
            can use it to concatenate the transaction URLs.
          example: "https://etherscan.io/tx/{txn_id}"
          type: string
        explorer_address_url:
          description: The address URL pattern on the blockchain explorer. You can
            use it to concatenate the address URLs.
          example: "https://etherscan.io/address/{address}"
          type: string
        require_memo:
          description: Whether the chain requires a memo.
          example: false
          type: boolean
        confirming_threshold:
          description: "The number of confirmations required for an on-chain transaction,\
            \ such as 64 for Ethereum."
          example: 15
          format: int32
          type: integer
        coinbase_maturity:
          description: "The number of confirmations required before a coinbase transaction\
            \ is considered mature and can be spent, for example, 100 confirmations\
            \ for BTC."
          example: 15
          format: int32
          type: integer
      required:
      - chain_id
      type: object
    WalletType:
      description: |
        The wallet type. Possible values include:

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      enum:
      - Custodial
      - MPC
      - SmartContract
      - Exchange
      example: Custodial
      type: string
    WalletSubtype:
      description: |
        The wallet sub-type. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3 Wallets).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).

        Each wallet sub-type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Asset
      - Web3
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      - Main
      - Sub
      example: Asset
      type: string
    SmartContractWalletType:
      default: "Safe{Wallet}"
      description: The Smart Contract Wallet type.
      enum:
      - "Safe{Wallet}"
      example: "Safe{Wallet}"
      type: string
    SmartContractWalletOperationType:
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
      enum:
      - CoboSafe
      example: CoboSafe
      type: string
    SmartContractInitiator:
      description: The information about the initiator.
      properties:
        wallet_id:
          description: The initiator's wallet ID.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        address:
          description: 'The initiator''s wallet address. '
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - address
      - wallet_id
      title: Initiator Wallets
      type: object
    ExchangeId:
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      enum:
      - binance
      - okx
      - deribit
      - bybit
      - gate
      - bitget
      - bitmart
      - bitfinex
      example: binance
      type: string
    Balance:
      description: The balance details.
      example:
        total: "100.0"
        pending: "10.5"
        available: "80.5"
        locked: "3.0"
      properties:
        total:
          description: "The current amount of tokens in an address, which is retrieved\
            \ directly from the network. To learn more, see [Balances and transaction\
            \ amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "100.0"
          type: string
        available:
          description: "The amount of tokens ready to be spent. To learn more, see\
            \ [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "80.5"
          type: string
        pending:
          default: "0"
          description: "The total amount being sent in a transaction, which is calculated\
            \ as the withdrawal amount plus the transaction fee. To learn more, see\
            \ [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "10.5"
          type: string
        locked:
          default: "0"
          description: "For UTXO chains, this is the combined value of the selected\
            \ UTXOs for the transaction. For other chains, it is equal to the Pending\
            \ amount. To learn more, see [Balances and transaction amounts for MPC\
            \ Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts)\
            \ for more details."
          example: "3.0"
          type: string
      required:
      - available
      - total
      type: object
    TokenBalance:
      description: The balance information.
      example:
        token_id: BTC
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - balance
      - token_id
      type: object
    AddressBalance:
      description: The token balance for a specific wallet address.
      example:
        address: 0x0000000000000000000000000000000000000000
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
      properties:
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - address
      - balance
      type: object
    AssetBalance:
      description: The data for asset balance information.
      properties:
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - asset_id
      - balance
      type: object
    SubWalletAssetBalance:
      description: The information about the asset balance of a trading account.
      example:
        trading_account_type: Spot
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
        asset_id: USDT
      properties:
        trading_account_type:
          description: The trading account type.
          example: Spot
          type: string
        asset_id:
          description: The asset ID. An asset ID is the unique identifier of the asset
            held within your linked exchange account.
          example: USDT
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - asset_id
      - balance
      type: object
    BalanceUpdateInfo:
      description: The balance information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        wallet_uuid:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        updated_timestamp:
          description: |
            The time when the balance updated, in Unix timestamp format, measured in milliseconds.
          example: 1640995200000
          format: int64
          type: integer
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - address
      - balance
      - token_id
      - updated_timestamp
      - wallet_uuid
      type: object
    SafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - properties:
            chain_id:
              description: The ID of the chain on which the wallet operates.
              example: ETH
              type: string
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: The Smart Contract Wallet address.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: The signers of the Smart Contract Wallet.
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: 'The minimum number of confirmations required for the Smart
              Contract Wallet. '
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: The address of Cobo Safe.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SmartContractInitiator'
        required:
        - smart_contract_wallet_type
        title: Safe Wallets
        type: object
    CustodialWalletInfo:
      description: The basic information of a wallet.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_subtype: Asset
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name: Example Wallet
        wallet_type: Custodial
      properties:
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
        org_id:
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - name
      - org_id
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    MPCWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          project_id:
            description: The project ID.
            example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
            type: string
          project_name:
            description: The project name.
            example: Project name
            type: string
          vault_id:
            description: The ID of the owning vault.
            type: string
          vault_name:
            description: The vault name.
            example: Vault name
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    SmartContractWalletInfo:
      discriminator:
        mapping:
          Safe{Wallet}: '#/components/schemas/SafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/SafeWallet'
      title: Smart Contract Wallets
    ExchangeWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          main_wallet_id:
            description: The wallet ID of the Main Account associated with the Sub
              Account. This property is returned only if you are creating or querying
              an Exchange Wallet (Sub Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            format: uuid
            type: string
        required:
        - apikey
        - exchange_id
        type: object
      title: Exchange Wallets
    WalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/SmartContractWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    UTXO:
      description: The UTXO information.
      example:
        is_locked: false
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_id: BTC
        is_frozen: false
        is_coinbase: false
        vout_n: 0
        tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        value: "0.5"
        confirmed_number: 66716
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
        address:
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token."
          example: BTC
          type: string
        value:
          description: The value of the UTXO.
          example: "0.5"
          type: string
        is_coinbase:
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
          type: boolean
        is_locked:
          description: Whether the UTXO is locked.
          example: false
          type: boolean
        confirmed_number:
          description: The number of confirmations for the UTXO.
          example: 66716
          type: integer
        is_frozen:
          description: Whether the UTXO is frozen.
          example: false
          type: boolean
      type: object
    BatchUTXOParam:
      description: The UTXO information.
      properties:
        tx_hash:
          description: The transaction hash.
          example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
          type: string
        vout_ns:
          items:
            description: The output index of the UTXO.
            example: 0
            type: integer
          type: array
      required:
      - tx_hash
      type: object
    MaxTransferableValue:
      description: "The maximum amount you can transfer from the wallet or the specified\
        \ wallet address, along with the corresponding transaction fee."
      example:
        token_id: ETH
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        max_transferable_value: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH
          type: string
        max_transferable_value:
          description: The maximum amount you can transfer from the wallet or the
            specified wallet address.
          example: "3.0"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      type: object
    AddressInfo:
      description: The address information.
      example:
        path: m/44/0/2/0/0
        address: 0x0000000000000000000000000000000000000000
        chain_id: ETH
        x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
        memo: "82840924"
        taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
        taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
        encoding: ENCODING_P2PKH
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
      properties:
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        memo:
          description: The memo code.
          example: "82840924"
          type: string
        path:
          description: "The derivation path of the address. This property applies\
            \ to MPC Wallets only. To learn the meaning of each level in the path,\
            \ see [Path levels](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels)."
          example: m/44/0/2/0/0
          type: string
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          description: The public key of the address. This property applies to MPC
            Wallets only.
          example: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
          type: string
        x_only_pubkey:
          description: The 32-byte x-only public key in hexadecimal format after tweaking.
          example: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          type: string
        root_pubkey:
          description: The root public key of the address. This property applies to
            MPC Wallets only.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        taproot_script_tree_hash:
          description: The information about the new address.
          example: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          type: string
        taproot_internal_address:
          description: The Taproot address before tweaking.
          example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          type: string
      required:
      - address
      - chain_id
      type: object
    AddressEncoding:
      description: The address encoding formats. This property only applies to blockchains
        that have a similar architecture to Bitcoin.
      enum:
      - ENCODING_P2PKH
      - ENCODING_P2SH_P2WPKH
      - ENCODING_BECH32
      - ENCODING_P2PKH_UNCOMPRESSED
      - ENCODING_P2SH_P2MS
      - ENCODING_P2SH_P2WSH_P2MS
      - ENCODING_P2TR
      - ENCODING_ADA_BYRON
      - ENCODING_ADA_SHELLEY
      - ENCODING_DEFAULT
      example: ENCODING_P2PKH
      type: string
    CreateCustodialWalletParams:
      description: The information of Custodial Wallets.
      example:
        wallet_subtype: Asset
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
      properties:
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
      required:
      - name
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    CreateMpcWalletParams:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - properties:
          vault_id:
            description: "The ID of the owning vault. You can call [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults)\
              \ to retrieve all vault IDs under your organization."
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    CreateSmartContractWalletParams:
      discriminator:
        mapping:
          Safe{Wallet}: '#/components/schemas/CreateSafeWalletParams'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateSafeWalletParams'
      title: Smart Contract Wallets
    CreateSafeWalletParams:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - properties:
            chain_id:
              description: The ID of the chain that the wallet operates on.
              example: ETH
              type: string
          required:
          - chain_id
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: "The address of the Smart Contract Wallet. If this is not\
              \ provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe\
              \ for you. In that case, the `threshold` and `signers` properties are\
              \ required."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: "The signers of the Smart Contract Wallet. This property\
              \ is required when creating a new Safe{Wallet}."
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: "The minimum number of confirmations required for the Smart\
              \ Contract Wallet. This property is required when creating a new Safe{Wallet}."
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: "The address of Cobo Safe. If you are importing an existing\
              \ Safe{Wallet}, Cobo Safe must have been created and enabled."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SmartContractInitiator'
        required:
        - smart_contract_wallet_type
        type: object
    CreateExchangeWalletParams:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - properties:
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          secret:
            description: The API secret of your exchange account.
            example: 75B4F636193162488A3728B4A5797708
            type: string
          passphrase:
            description: The passphrase of your exchange account.
            example: sXASDKWKLLsWWEE
            type: string
          memo:
            description: The memo you use when applying for the API key of your exchange
              account.
            example: xxx@cobo.com
            type: string
          account_identify:
            description: |
              The identifier of your exchange account.
              - For Binance, this is email address of your exchange account.
              - For OKX, this is the user name of your exchange account.
            example: xxx@cobo.com
            type: string
          ga_code:
            description: The GA code for the exchange.
            example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            type: string
          main_wallet_id:
            description: The ID of the Exchange Wallet (Main Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
        required:
        - apikey
        - exchange_id
        - secret
        type: object
      title: Exchange Wallets
    CreateWalletParams:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWalletParams'
          MPC: '#/components/schemas/CreateMpcWalletParams'
          Exchange: '#/components/schemas/CreateExchangeWalletParams'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateCustodialWalletParams'
      - $ref: '#/components/schemas/CreateMpcWalletParams'
      - $ref: '#/components/schemas/CreateExchangeWalletParams'
    CreatedWalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    UpdateCustodialWalletParams:
      description: The information of Custodial Wallets.
      example:
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - name
      - wallet_type
      title: Custodial Wallets
      type: object
    UpdateMpcWalletParams:
      description: The information of MPC Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - name
      - wallet_type
      title: MPC Wallets
      type: object
    UpdateSmartContractWalletParams:
      description: The information of Smart Contract Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
      required:
      - name
      - wallet_type
      title: Smart Contract Wallets
      type: object
    UpdateExchangeWalletParams:
      description: The information of Exchange Wallets.
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
      required:
      - name
      - wallet_type
      title: Exchange Wallets
      type: object
    UpdateWalletParams:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/UpdateCustodialWalletParams'
          MPC: '#/components/schemas/UpdateMpcWalletParams'
          SmartContract: '#/components/schemas/UpdateSmartContractWalletParams'
          Exchange: '#/components/schemas/UpdateExchangeWalletParams'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/UpdateCustodialWalletParams'
      - $ref: '#/components/schemas/UpdateMpcWalletParams'
      - $ref: '#/components/schemas/UpdateSmartContractWalletParams'
      - $ref: '#/components/schemas/UpdateExchangeWalletParams'
    SafeWalletDelegatesContractCall:
      example:
        address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
        request_type: Transfer
        calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        value: "1.5"
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
      required:
      - request_type
      title: Contract Call by Delegates
      type: object
    SafeWalletDelegatesTransfer:
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        token_id:
          description: The token ID.
          example: ETH
          type: string
        amount:
          description: "The transfer amount. For example, if you trade 1.5 ETH, then\
            \ the value is `1.5`."
          example: "0.1"
          type: string
        address:
          description: The address of the recipient.
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - request_type
      - token_id
      title: Transfer by Delegates
      type: object
    SafeWalletDelegates:
      discriminator:
        mapping:
          ContractCall: '#/components/schemas/SafeWalletDelegatesContractCall'
          Transfer: '#/components/schemas/SafeWalletDelegatesTransfer'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/SafeWalletDelegatesContractCall'
      - $ref: '#/components/schemas/SafeWalletDelegatesTransfer'
    OrgInfo:
      description: |
        The information of an organization. To learn more about organizations, see [Introduction to Organization](https://manuals.cobo.com/en/portal/organization/introduction).
      example:
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name: Org name
        created_timestamp: 1718619403933
      properties:
        org_id:
          description: The organization ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        name:
          description: The organization name.
          example: Org name
          type: string
        created_timestamp:
          description: "The organization's creation time in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      required:
      - org_id
      type: object
    TokenListingRequestStatus:
      description: |
        The status of the token listing request.
        - `Submitted`: The request has been submitted and is pending processing.
        - `Succeeded`: The token has been successfully listed.
        - `Failed`: The token listing request was rejected or failed to process.
      enum:
      - Submitted
      - Succeeded
      - Failed
      example: Submitted
      type: string
    TokenListingRequestSource:
      description: |
        The source of the token listing request.
        - `API`: The request was created via the WaaS 2.0 API.
        - `Admin`: The request was created on Cobo Portal.
      enum:
      - API
      - Admin
      example: API
      type: string
    CurveType:
      description: |
        The elliptic curve type of the [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys). Possible values include:

        - `SECP256K1`: The secp256k1 elliptic curve.

        - `ED25519`: The Ed25519 elliptic curve.
      enum:
      - SECP256K1
      - ED25519
      example: SECP256K1
      type: string
    KeyShareHolderGroup:
      description: The data for key share holder group information.
      example:
        key_share_holders:
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
        key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
        tss_key_share_groups:
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
        threshold: 2
        created_timestamp: 1718619403933
        type: MainGroup
        participants: 3
        status: Valid
      properties:
        key_share_holder_group_id:
          description: The key share holder group ID.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        tss_key_share_groups:
          items:
            $ref: '#/components/schemas/TSSGroups'
          type: array
        key_share_holders:
          items:
            $ref: '#/components/schemas/KeyShareHolder'
          type: array
        participants:
          description: The number of key share holders in this key share holder group.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to approve each operation
            in this key share holder group.
          example: 2
          type: integer
        status:
          $ref: '#/components/schemas/KeyShareHolderGroupStatus'
        created_timestamp:
          description: "The key share holder group's creation time in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    KeyShareHolderGroupStatus:
      description: |
        The status of the key share holder group. Possible values include:
        - `New`: The key share holder group has been newly created. The status will become `Valid` after you call [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) and specifying this key share holder group as the target key share holder group.

        - `Valid`: The key share holder group is valid.

        - `Unavailable`: The key share holder group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone.
      enum:
      - New
      - Valid
      - Unavailable
      example: Valid
      type: string
    KeyShareHolderGroupType:
      description: |
        The type of key share holder group. Possible values include:

        - `MainGroup`: A [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `SigningGroup`: A [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `RecoveryGroup`: A [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        **Note:** For `MainGroup` and `SigningGroup`, a Cobo key share holder will be added automatically.
      enum:
      - MainGroup
      - SigningGroup
      - RecoveryGroup
      example: MainGroup
      type: string
    CreateKeyShareHolder:
      description: "When creating MainKeyGroup and SigningKeyGroup, the Cobo key share\
        \ holder will be added automatically."
      properties:
        name:
          description: Key share holder's name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          description: "Key share holder's TSS Node ID. You can obtain the TSS Node\
            \ ID using either mobile co-signer or server co-signer. See the \"Primary\
            \ Purposes\" row on the table in [Create a Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group)."
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        signer:
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
          example: true
          type: boolean
      type: object
    KeyShareHolder:
      description: The data for MPC Wallets' key share holder information.
      example:
        account_id: auth0|cobo|839305394802991371
        name: Key share holder name
        tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        online: true
        type: API
        signer: true
        status: Valid
      properties:
        name:
          description: The key share holder name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          description: The key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        online:
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
          type: boolean
        signer:
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
          example: true
          type: boolean
        status:
          $ref: '#/components/schemas/KeyShareHolderStatus'
        account_id:
          description: The key share holder's Cobo Portal account ID.
          example: auth0|cobo|839305394802991371
          type: string
      type: object
    KeyShareHolderStatus:
      description: |
        The status of key share holder's TSS Node. Possible values include:
        - `Valid`: The TSS Node is configured and activated.

        - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted.
      enum:
      - Valid
      - NotConfigured
      - NotActivated
      - Changed
      example: Valid
      type: string
    KeyShareHolderType:
      description: |
        The key share holder's TSS Node type. Possible values include:

        - `Cobo`: The TSS Node is generated and held by Cobo.

        - `Mobile`: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `API`: The TSS Node is generated and held by a [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment).
      enum:
      - Cobo
      - Mobile
      - API
      example: API
      type: string
    MPCVault:
      description: The data for vault information.
      example:
        root_pubkeys:
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        - curve: SECP256K1
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        name: Vault name
        created_timestamp: 1718619403933
        type: Org-Controlled
        vault_id: YPdbyVaVGqXXjkUsohHw
      properties:
        vault_id:
          description: The vault ID.
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        project_id:
          description: The project ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The vault name.
          example: Vault name
          type: string
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          items:
            $ref: '#/components/schemas/RootPubkey'
          type: array
        created_timestamp:
          description: "The vault's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    MPCVaultType:
      description: |
        The vault type. Possible values include:
        - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

        - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
      enum:
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    MPCProject:
      description: The data for project information.
      example:
        project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
        name: Project name
        threshold: 2
        created_timestamp: 1718619403933
        participants: 3
      properties:
        project_id:
          description: The project ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        org_id:
          description: "The [organization](https://manuals.cobo.com/en/portal/organization/introduction)\
            \ ID."
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          type: string
        name:
          description: The project name.
          example: Project name
          type: string
        participants:
          description: The number of key share holders in the project.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to sign an operation
            in the project.
          example: 2
          type: integer
        created_timestamp:
          description: "The project's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1718619403933
          format: int64
          type: integer
      type: object
    RootPubkey:
      description: The data for MPC Root Extended Public Key information.
      example:
        curve: SECP256K1
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        root_pubkey:
          description: "The vault's [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys)."
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSGroups:
      description: The data for the TSS key share group.
      example:
        curve: SECP256K1
        root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
      properties:
        tss_key_share_group_id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
        root_pubkey:
          description: "The vault's [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys)."
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
      type: object
    TSSRequest:
      description: The information about the TSS request.
      example:
        description: This is a request to create key shares using the Recovery Group
          for a key share holder in the Main Group if their key share has been lost
          (e.g. by losing their phone).
        created_timestamp: 1701396866000
        tss_request_id: "20240711114129000132315000003970"
        type: Recovery
        source_key_share_holder_group:
          key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          tss_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
        status: Success
      properties:
        tss_request_id:
          description: The TSS request ID.
          example: "20240711114129000132315000003970"
          type: string
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        target_key_share_holder_group_id:
          description: The target key share holder group ID.
          example: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          type: string
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
        description:
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          type: string
        created_timestamp:
          description: "The TSS request's creation time in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
      type: object
    TSSRequestStatus:
      description: "The TSS request status. Possible values include:\n- `PendingKeyHolderConfirmation`:\
        \ The action done to the TSS request is currently pending enough key share\
        \ holders to approve.\n\n- `KeyHolderConfirmationFailed`: Key share holders\
        \ failed to approve the the action to be done to the TSS request.\n\n- `KeyGenerating`:\
        \ The key share is currently being generated for the action to be done to\
        \ the TSS request.\n\n- `MPCProcessing`: The TSS request approval is waiting\
        \ to be started. \n  - For [MPC Wallets (User-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction),\
        \ you need to use the Client App and call the UCW SDK to start the TSS request\
        \ approval process.\n  - For [MPC Wallets (Organization-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction):\n\
        \    - If you are using the [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group),\
        \ this status indicates that the TSS Node will soon request the callback server\
        \ to start the [risk controls](https://manuals.cobo.com/en/portal/risk-controls/introduction)\
        \ check. No further action is required from you at this stage.\n    - If you\
        \ are using the [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group),\
        \ key share holders need to use their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction)\
        \ to approve the TSS request and participate in the signing process.\n\n-\
        \ `KeyGeneratingFailed`: The key share generation process has failed for the\
        \ action to be done to the TSS request.\n\n- `Success`: The action done to\
        \ the TSS request has been completed successfully. If you see this status\
        \ while running [Cancel TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/cancel-tss-request),\
        \ this mean the specified TSS request has been successfully canceled.\n"
      enum:
      - PendingKeyHolderConfirmation
      - KeyHolderConfirmationFailed
      - KeyGenerating
      - MPCProcessing
      - KeyGeneratingFailed
      - Success
      example: Success
      type: string
    TSSRequestType:
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key) and key shares for your [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created the Main Group with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group). You only need to do this once per [organization](https://manuals.cobo.com/en/portal/organization/introduction).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create key shares for your [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) or [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created these key share holder groups with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group).

        - `Recovery`: This is a request to create key shares using the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) for a key share holder in the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if their key share has been lost (e.g. by losing their phone).
      enum:
      - KeyGen
      - KeyGenFromKeyGroup
      - Recovery
      example: Recovery
      type: string
    UpdateGroupAction:
      description: |
        The available actions of key share holder group update. Possible values include:
        - `UpgradeToMainGroup`: This upgrades an active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). The original Main Group will be permanently deleted.
      enum:
      - UpgradeToMainGroup
      example: UpgradeToMainGroup
      type: string
    SourceGroup:
      description: |
        The source key share holder group.

        **Note:** `source_key_share_holder_group` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the `target_key_share_holder_group`.
      example:
        key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        tss_node_ids:
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
      properties:
        key_share_holder_group_id:
          description: The source key share holder group ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        tss_node_ids:
          description: "The TSS Node IDs participating in creating a new key share\
            \ holder group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`.\
            \ \n\n**Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ such as the 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\"\
            \ format), for `tss_node_ids`, you only need to fill in 1 Cobo TSS Node\
            \ ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers\
            \ specified in `threshold`. To obtain the Cobo TSS Node ID, run [List\
            \ all Cobo key share holders](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders).\n"
          items:
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      required:
      - key_share_holder_group_id
      type: object
    FeeType:
      default: EVM_EIP_1559
      description: "The fee model. Possible values include:\n- `Fixed`: The fixed\
        \ fee model. \n- `EVM_EIP_1559`: The EIP-1559 fee model.\n- `EVM_Legacy`:\
        \ The legacy fee model.\n- `UTXO`: The fee model used in UTXO-based blockchains,\
        \ such as Bitcoin.\n- `SOL`: The fee model used in Solana.\n- `FIL`: The fee\
        \ model used in Filecoin.\n\n\nEach fee model requires a different set of\
        \ properties. Switch between the above tabs for details.\n\nTo learn more\
        \ about the fee models, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).\n"
      enum:
      - Fixed
      - EVM_EIP_1559
      - EVM_Legacy
      - UTXO
      - SOL
      - FIL
      example: EVM_EIP_1559
      type: string
    FeeAmount:
      description: The transaction fee.
      properties:
        fee_amount:
          description: The transaction fee that you need to pay for the transaction.
          example: "0.1"
          type: string
      type: object
    MaxFeeAmount:
      description: The maximum transaction fee.
      properties:
        max_fee_amount:
          description: The maximum fee that you are willing to pay for the transaction.
            Provide the value without applying precision. The transaction will fail
            if the transaction fee exceeds the maximum fee.
          example: "0.1"
          type: string
      type: object
    FeeGasLimit:
      properties:
        gas_limit:
          description: The gas limit. It represents the maximum number of gas units
            that you are willing to pay for the execution of a transaction or Ethereum
            Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          example: "21000"
          type: string
      type: object
    EvmEip1559FeeBasePrice:
      description: The transaction gas price based on the EIP-1559 fee model.
      properties:
        max_fee_per_gas:
          description: "The maximum gas fee per gas unit used on the chain, in wei."
          example: "9000000000000"
          type: string
        max_priority_fee_per_gas:
          description: "The maximum priority fee per gas unit used, in wei. The maximum\
            \ priority fee represents the highest amount of miner tips that you are\
            \ willing to pay for your transaction."
          example: "1000000000000"
          type: string
      type: object
    EvmLegacyFeeBasePrice:
      description: The transaction gas price based on the legacy fee model.
      properties:
        gas_price:
          description: "The gas price, in wei. The gas price represents the amount\
            \ of ETH that must be paid to validators for processing transactions per\
            \ gas unit used."
          example: "100000000"
          type: string
      type: object
    UtxoFeeBasePrice:
      description: The transaction fee rate for UTXO-based chains (such as Bitcoin).
      properties:
        fee_rate:
          description: The fee rate in sat/vByte. The fee rate represents the satoshis
            you are willing to pay for each byte of data that your transaction will
            consume on the blockchain.
          example: "50"
          type: string
      type: object
    EvmEip1559FeeRate:
      description: The transaction fee rate based on the EIP-1559 fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
        recommended:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
        fast:
          allOf:
          - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
          required:
          - max_fee_per_gas
          - max_priority_fee_per_gas
      required:
      - fee_type
      - recommended
      - token_id
      title: EIP-1559 Fee Rate
      type: object
    EvmLegacyFeeRate:
      description: The transaction fee rate based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
        recommended:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
        fast:
          allOf:
          - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
          required:
          - gas_price
      required:
      - fee_type
      - recommended
      - token_id
      title: Legacy Fee Rate
      type: object
    UtxoFeeRate:
      description: The transaction fee rate for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: BTC
          type: string
        slow:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
        recommended:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
        fast:
          allOf:
          - $ref: '#/components/schemas/UtxoFeeBasePrice'
          required:
          - fee_rate
      required:
      - fee_type
      - recommended
      - token_id
      title: UTXO Fee Rate
      type: object
    FixedFeeRate:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The transaction fee that you need to pay based on the fixed fee
        model for some blockchains. The fee can vary between different chains.
      required:
      - fee_type
      - token_id
      title: Fixed
      type: object
    FeeRate:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/FixedFeeRate:'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeeRate:'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeeRate:'
          UTXO: '#/components/schemas/UtxoFeeRate:'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/FixedFeeRate'
      - $ref: '#/components/schemas/EvmEip1559FeeRate'
      - $ref: '#/components/schemas/EvmLegacyFeeRate'
      - $ref: '#/components/schemas/UtxoFeeRate'
    FeeReserved:
      properties:
        reserved_fee:
          description: "The estimated fee required for submitting the transaction\
            \ data to L1 (Layer 1), measured in wei."
          example: "1000000000000"
          type: string
      type: object
    SOLBase:
      description: The transaction base fee based on the SOL fee model.
      properties:
        base_fee:
          description: "The fundamental fee required for each transaction. It is charged\
            \ to prevent spam transactions and network congestion, ensuring that only\
            \ meaningful transactions consume network resources."
          example: "0.000005"
          type: string
        rent_amount:
          description: The fee charged as rent for maintaining the state of accounts
            on the blockchain. This rent ensures accounts are stored on-chain over
            the long term and that there's sufficient balance to sustain the account
            state.
          example: '0.00001 '
          type: string
      type: object
    SOLComputeUnit:
      description: The transaction gas price based on the SOL fee model.
      properties:
        compute_unit_price:
          description: "The cost per compute unit. Transactions consume computational\
            \ resources measured in compute units, and this price helps determine\
            \ the cost of executing transactions, especially complex ones involving\
            \ smart contracts."
          example: "0.0001"
          type: string
        compute_unit_limit:
          description: "The maximum number of compute units allowed for a transaction.\
            \ This limits the resources any single transaction can consume, preventing\
            \ excessive resource usage that could impact network performance negatively."
          example: "200000"
          type: string
      type: object
    FILBase:
      description: The transaction gas base based on the FIL fee model.
      properties:
        gas_base:
          description: "This is the minimum fee required to include a transaction\
            \ in a block. It is determined by the network's congestion level, which\
            \ adjusts to maintain a target block utilization rate. The base fee is\
            \ burned, reducing the total supply of Filecoin over time."
          example: "0.0002"
          type: string
      type: object
    FILPrice:
      description: The transaction gas price based on the FIL fee model.
      properties:
        gas_premium:
          description: An optional additional fee that users can include to prioritize
            their transactions over others. It acts like a tip to incentivize miners
            to select and include your transaction over transactions with only the
            base fee.
          example: "0.0001"
          type: string
        gas_fee_cap:
          description: The gas_fee_cap is a user-defined limit on how much they are
            willing to pay per unit of gas.
          example: "0.00035"
          type: string
        gas_limit:
          description: "This defines the maximum amount of computational effort that\
            \ a transaction is allowed to consume. It's a way to cap the resources\
            \ that a transaction can use, ensuring it doesn't consume excessive network\
            \ resources."
          example: "500"
          type: string
      type: object
    EstimatedFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
          is_loop:
            description: |
              Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction was executed as a Cobo Loop transfer.
              - `false`: The transaction was not executed as a Cobo Loop transfer.
            example: false
            type: boolean
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The estimated transaction fee based on the fixed fee model.
      example:
        is_loop: false
        fee_amount: "0.1"
        token_id: TRON
        fee_type: EVM_EIP_1559
      required:
      - fee_amount
      - fee_type
      - token_id
      title: Fixed
      type: object
    EstimatedEvmEip1559Fee:
      description: The estimated transaction fee based on the EIP-1559 fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedEvmEip1559Fee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: EVM_EIP_1559
      type: object
    EstimatedEvmLegacyFee:
      description: The estimated transaction fee based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedEvmLegacyFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: EVM_Legacy
      type: object
    EstimatedUtxoFee:
      description: The estimated transaction fee for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: BTC
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedUtxoFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: UTXO
      type: object
    EstimatedSOLFee:
      description: The estimated transaction fee based on the sol fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedSOLFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedSOLFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedSOLFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: SOL (Estimated)
      type: object
    EstimatedFILFee:
      description: The estimated transaction fee based on the fil fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EstimatedFILFee_slow'
        recommended:
          $ref: '#/components/schemas/EstimatedFILFee_slow'
        fast:
          $ref: '#/components/schemas/EstimatedFILFee_slow'
      required:
      - fee_type
      - recommended
      - token_id
      title: FIL (Estimated)
      type: object
    EstimatedFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/EstimatedFixedFee'
          EVM_EIP_1559: '#/components/schemas/EstimatedEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EstimatedEvmLegacyFee'
          UTXO: '#/components/schemas/EstimatedUtxoFee'
          SOL: '#/components/schemas/EstimatedSOLFee'
          FIL: '#/components/schemas/EstimatedFILFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EstimatedFixedFee'
      - $ref: '#/components/schemas/EstimatedEvmEip1559Fee'
      - $ref: '#/components/schemas/EstimatedEvmLegacyFee'
      - $ref: '#/components/schemas/EstimatedUtxoFee'
      - $ref: '#/components/schemas/EstimatedSOLFee'
      - $ref: '#/components/schemas/EstimatedFILFee'
    TransactionRequestFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
        type: object
      - $ref: '#/components/schemas/MaxFeeAmount'
      description: |
        The preset properties to limit transaction fee.

        In the fixed fee model, the transaction fee is a fixed amount within a certain amount of period regardless of the transaction size or network congestion, which can vary between different chains. For more information about the fixed fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      example:
        max_fee_amount: "0.1"
        token_id: TRON
        fee_type: EVM_EIP_1559
      required:
      - fee_type
      - token_id
      title: Fixed
      type: object
    TransactionRequestEvmEip1559Fee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          gas_limit:
            description: The gas limit. It represents the maximum number of gas units
              that you are willing to pay for the execution of a transaction or Ethereum
              Virtual Machine (EVM) operation. The gas unit cost of each operation
              varies.
            example: "21000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      description: "The preset properties to limit transaction fee.\n\nIn the EIP-1559\
        \ fee model, the transaction fee is calculated by multiplying the gas price\
        \ and the gas units used by the transaction. This can be expressed as: Transaction\
        \ fee = gas price * gas units used. For more information about the EIP-1559\
        \ fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).\n\
        \nYou can specify the maximum gas fee per gas unit, maximum priority fee per\
        \ gas unit, and the gas limit to limit the gas price, priority fee per gas\
        \ unit, gas units used in the transaction. \n\nSwitch between the tabs to\
        \ display the properties for different transaction fee models.\n"
      required:
      - fee_type
      - max_fee_per_gas
      - max_priority_fee_per_gas
      - token_id
      title: EVM_EIP_1559
      type: object
    TransactionRequestEvmLegacyFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          gas_limit:
            description: The gas limit. It represents the maximum number of gas units
              that you are willing to pay for the execution of a transaction or Ethereum
              Virtual Machine (EVM) operation. The gas unit cost of each operation
              varies.
            example: "21000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      description: |
        The preset properties to limit transaction fee.

        In the legacy fee model, the transaction fee is calculated by multiplying the gas price by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). For more information about the legacy fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the gas limit to limit the gas units used in the transaction.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      - gas_price
      - token_id
      title: EVM_Legacy
      type: object
    TransactionRequestUtxoFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          max_fee_amount:
            description: The maximum fee that you are willing to pay for the transaction.
              Provide the value without applying precision. The transaction will fail
              if the transaction fee exceeds the maximum fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      description: |
        The preset properties to limit transaction fee.

        In the UTXO fee model, the transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. For more information about the UTXO fee model, see [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      - token_id
      title: UTXO
      type: object
    TransactionRequestSOLFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
        type: object
      - $ref: '#/components/schemas/SOLComputeUnit'
      description: "The preset properties to limit transaction fee.\n\nIn the SOL\
        \ fee model, the calculation method for the fee is: fee = base_fee + compute_unit_price\
        \ * compute_unit_limit + rent_amount, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).\n\
        \nYou can specify the compute_unit_price, compute_unit_limit. \n\nSwitch between\
        \ the tabs to display the properties for different transaction fee models.\n"
      required:
      - compute_unit_limit
      - compute_unit_price
      - fee_type
      - token_id
      title: SOL (Preset)
      type: object
    TransactionRequestFILFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
        type: object
      - $ref: '#/components/schemas/FILPrice'
      description: |
        The preset properties to limit transaction fee.

        In the Fil fee model, the calculation method for the fee is: fee = gas_fee_cap * gas_limit, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      - gas_fee_cap
      - gas_premium
      - token_id
      title: FIL (Preset)
      type: object
    TransactionRequestFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/TransactionRequestFixedFee'
          EVM_EIP_1559: '#/components/schemas/TransactionRequestEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionRequestEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionRequestUtxoFee'
          SOL: '#/components/schemas/TransactionRequestSOLFee'
          FIL: '#/components/schemas/TransactionRequestFILFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/TransactionRequestFixedFee'
      - $ref: '#/components/schemas/TransactionRequestEvmEip1559Fee'
      - $ref: '#/components/schemas/TransactionRequestEvmLegacyFee'
      - $ref: '#/components/schemas/TransactionRequestUtxoFee'
      - $ref: '#/components/schemas/TransactionRequestSOLFee'
      - $ref: '#/components/schemas/TransactionRequestFILFee'
    Transaction:
      description: The information about a transaction.
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          estimated_fee_used: "0.1"
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Signature
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        extra:
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        cobo_category:
        - AutoFueling
        - AutoFueling
        category:
        - Payment
        - Payment
        request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
        raw_tx_info:
          utxo_change:
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            value: "0.5"
          selected_utxos:
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
          unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
        fueling_info:
          transaction_id: b0530b27-104f-4338-87de-de01500326ea
          request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
      properties:
        transaction_id:
          description: The transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        cobo_id:
          description: "The Cobo ID, which can be used to track a transaction."
          example: "20231213122855000000000000000000"
          type: string
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: 760a1955-e212-4dfb-a8d0-e66312a1a051
          type: string
        wallet_id:
          description: "For deposit transactions, this property represents the wallet\
            \ ID of the transaction destination. For transactions of other types,\
            \ this property represents the wallet ID of the transaction source."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          description: (This property is applicable to approval failures and signature
            failures only) The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        source:
          $ref: '#/components/schemas/Transaction_source'
        destination:
          $ref: '#/components/schemas/Transaction_destination'
        result:
          $ref: '#/components/schemas/TransactionResult'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          description: The transaction initiator.
          example: "API Prod Key #1"
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          description: The number of confirmations this transaction has received.
          example: 12
          format: int32
          type: integer
        confirming_threshold:
          description: The minimum number of confirmations required to deem a transaction
            secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
          format: int32
          type: integer
        transaction_hash:
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        block_info:
          $ref: '#/components/schemas/TransactionBlockInfo'
        raw_tx_info:
          $ref: '#/components/schemas/TransactionRawTxInfo'
        replacement:
          $ref: '#/components/schemas/Transaction_replacement'
        category:
          description: A custom transaction category for you to identify your transfers
            more easily.
          items:
            $ref: '#/components/schemas/TransactionCategory'
          type: array
        description:
          description: The description for your transaction.
          example: withdrawal to exchange trading account
          type: string
        is_loop:
          description: |
            Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
            - `true`: The transaction was executed as a Cobo Loop transfer.
            - `false`: The transaction was not executed as a Cobo Loop transfer.
          example: false
          type: boolean
        cobo_category:
          description: "The transaction category defined by Cobo. Possible values\
            \ include: \n- `AutoSweep`: An auto-sweep transaction.\n- `AutoFueling`:\
            \ A transaction where Fee Station pays transaction fees to an address\
            \ within your wallet.\n- `AutoFuelingRefund`: A refund for an auto-fueling\
            \ transaction.\n- `SafeTxMessage`: A message signing transaction to authorize\
            \ a Smart Contract Wallet (Safe\\{Wallet\\}) transaction.\n- `BillPayment`:\
            \ A transaction to pay Cobo bills through Fee Station.\n- `BillRefund`:\
            \ A refund for a previously made bill payment.\n- `CommissionFeeCharge`:\
            \ A transaction to charge commission fees via Fee Station.\n- `CommissionFeeRefund`:\
            \ A refund of previously charged commission fees.\n"
          items:
            example: AutoFueling
            type: string
          type: array
        extra:
          description: |
            A list of JSON-encoded strings containing structured, business-specific extra information for the transaction. Each item corresponds to a specific data type, indicated by the `extra_type` field in the JSON object (for example, "BabylonBusinessInfo", "BtcAddressInfo").
          items:
            example: |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            type: string
          type: array
        fueling_info:
          $ref: '#/components/schemas/TransactionFuelingInfo'
        created_timestamp:
          description: "The time when the transaction was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the transaction was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - created_timestamp
      - destination
      - initiator_type
      - source
      - status
      - transaction_id
      - transaction_type
      - updated_timestamp
      - wallet_id
      type: object
    TransactionDetail:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          estimated_fee_used: "0.1"
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Signature
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        extra:
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        timeline:
        - finished_timestamp: 1610445878970
          finished: true
          status: Submitted
        - finished_timestamp: 1610445878970
          finished: true
          status: Submitted
        cobo_category:
        - AutoFueling
        - AutoFueling
        category:
        - Payment
        - Payment
        request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
        raw_tx_info:
          utxo_change:
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            value: "0.5"
          selected_utxos:
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
          unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
        fueling_info:
          transaction_id: b0530b27-104f-4338-87de-de01500326ea
          request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
    TransactionApprover:
      description: The approver data for transaction.
      properties:
        name:
          description: The approver name of the transaction.
          example: "Approver #1"
          type: string
        status:
          description: The approval status.
          enum:
          - Pending
          - Approved
          - Rejected
          example: Pending
          type: string
      type: object
    TransactionTokenAmount:
      description: The data for transaction asset information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: (This concept applies to Exchange Wallets only) The asset ID.
            An asset ID is the unique identifier of the asset held within your linked
            exchange account.
          example: USDT
          type: string
        amount:
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          example: "1.5"
          format: float
          type: string
      required:
      - amount
      - asset_id
      type: object
    TransactionCategory:
      example: Payment
      type: string
    TransactionDetails:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          initiator:
            description: Transaction initiator
            example: "API Prod Key #1"
            type: string
          approvers:
            items:
              $ref: '#/components/schemas/TransactionApprover'
            type: array
          signers:
            items:
              $ref: '#/components/schemas/TransactionSigner'
            type: array
          nonce:
            description: Transaction nonce
            example: 9
            type: integer
          replaced_by:
            description: Replace by transaction hash
            example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            type: string
          fee:
            $ref: '#/components/schemas/TransactionRequestFee'
          fueled_by:
            description: Fueled by address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          confirmed_num:
            description: Transaction confirmed number
            example: 12
            type: integer
          confirming_threshold:
            description: "Number of confirmations required for a transaction, such\
              \ as 15 for ETH chain."
            example: 15
            format: int32
            type: integer
          token_approval:
            $ref: '#/components/schemas/TransactionTokeApproval'
          message:
            description: Transaction raw message
            example: this to certify that am owner this wallet address
            type: string
          algorithm:
            description: Transaction message signing algorithm
            type: string
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
    TransactionInitiatorType:
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
      enum:
      - API
      - Web
      - App
      - External
      example: API
      type: string
    TransactionSigner:
      description: The signer data for transaction.
      properties:
        signer:
          description: The signer name of the transaction.
          example: Cobo TSS
          type: string
        status:
          description: The signing status.
          enum:
          - Pending
          - Signed
          - Timeout
          - Rejected
          example: Signed
          type: string
        failed_reason:
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
          type: string
      type: object
    TransactionStatus:
      description: |
        The transaction status. For more details including sub-statuses, please refer to [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).
      enum:
      - Submitted
      - PendingScreening
      - PendingAuthorization
      - PendingSignature
      - Broadcasting
      - Confirming
      - Completed
      - Failed
      - Rejected
      - Pending
      example: Submitted
      type: string
    TransactionSubStatus:
      description: |
        The transaction sub-status. For more details, please refer to [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).
      enum:
      - RejectedKYT
      - PendingDoubleCheck
      - PendingSpenderCheck
      - PendingRiskControlCheck
      - PendingApproverCheck
      - RejectedCoboCheck
      - RejectedWhiteList
      - RejectedDoubleCheck
      - RejectedSpenderAuth
      - RejectedRiskControlCheck
      - RejectedApproverAuth
      - RejectedbyMobileCosigner
      - Built
      - PendingWaitSigner
      - PendingApprovalStart
      - PendingSignerApproval
      - PendingSignerProcessing
      - RejectedBySigner
      - FailedBySigner
      - FailedSignerTimeout
      - FailedBroadcasting
      - FailedOnChain
      - Reverting
      - Queue
      - InsufficientBalance
      - InsufficientBalanceFundLocked
      - PendingSystemProcessing
      - SystemProcessingOngoing
      - PendingBlockConfirmations
      - ReOrged
      - ReplacedByNewTransaction
      - CanceledBySpender
      - CanceledByAPI
      - OnchainRejection
      - RejectedTravelRule
      - RejectedTravelRuleDueToCompliance
      - PendingTravelRuleInfo
      - PendingTravelRuleCheck
      - RejectedTravelRuleDueToUnsupportedToken
      - SignatureVerificationSuccess
      - SignatureVerificationFailed
      - PendingCoboCheck
      - RejectedTransactionPolicy
      - RejectedByScreeningApp
      - PendingScreeningAppCheck
      - PendingCoboKYTCheck
      - RejectedByCoboKYT
      - PendingCoboTravelRuleCheck
      example: PendingDoubleCheck
      type: string
    TransactionTimeline:
      description: "The information about transaction timeline, which lists all statuses\
        \ that the transaction passes through with timestamps indicating when each\
        \ status is completed."
      example:
        finished_timestamp: 1610445878970
        finished: true
        status: Submitted
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          description: |
            Whether the transaction status is completed:
              - `true`: The transaction status is completed.
              - `false`: The transaction is currently in the status.
          example: true
          type: boolean
        finished_timestamp:
          description: "The time when the transaction status is completed in Unix\
            \ timestamp format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      type: object
    TransactionTokeApproval:
      allOf:
      - $ref: '#/components/schemas/TokenInfo'
      - description: The data for transaction token approval information.
        properties:
          amount:
            description: |
              Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
            example: 1.5
            format: float
            type: number
          spender:
            description: Spender address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        type: object
    TransactionType:
      description: "The transaction type. Possible values include: \n  - `Deposit`:\
        \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n  -\
        \ `ContractCall`: A transaction that interacts with a smart contract.\n  -\
        \ `MessageSign`: A transaction that signs a message. \n  - `ExternalSafeTx`:\
        \ A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one\
        \ or multiple signatures to be executed.\n  - `Stake`: A transaction that\
        \ creates a staking request.\n  - `Unstake`: A transaction that creates a\
        \ unstaking request.\n"
      enum:
      - Deposit
      - Withdrawal
      - ContractCall
      - MessageSign
      - ExternalSafeTx
      - Stake
      - Unstake
      example: Deposit
      type: string
    MpcSigningGroup:
      description: The information about the Signing Group of an MPC Wallet.
      example:
        used_tss_node_ids:
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        used_key_share_holder_group_id:
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        used_tss_node_ids:
          description: The ID of the TSS Nodes that are required to participate in
            the signature.
          items:
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      required:
      - used_key_share_holder_group_id
      type: object
    TransactionSourceType:
      description: |
        The transaction source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Asset
      - Web3
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      - Main
      - Sub
      - DepositFromAddress
      - DepositFromWallet
      - DepositFromLoop
      example: DepositFromAddress
      type: string
    TransactionCustodialAssetWalletSource:
      description: |
        Information about the transaction source type `Asset`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: DepositFromAddress
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Asset
      type: object
    TransactionCustodialWeb3WalletSource:
      description: |
        Information about the transaction source type `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
      required:
      - source_type
      - wallet_id
      title: Web3
      type: object
    TransactionMPCWalletSource:
      description: |
        Information about the transaction source type `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        signer_key_share_holder_group_id:
          description: The ID of the key share holder group that is selected to sign
            the transaction.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          type: string
      required:
      - source_type
      - wallet_id
      title: Org-Controlled/User-Controlled
      type: object
    TransactionSmartContractSafeWalletSource:
      description: |
        Information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0x1234567890123456789012345678901234567890
          type: string
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
      required:
      - address
      - source_type
      - wallet_id
      title: "Safe{Wallet}"
      type: object
    TransactionExchangeWalletSource:
      description: |
        Information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
          type: string
      required:
      - exchange_id
      - source_type
      - wallet_id
      title: Main/Sub
      type: object
    TransactionDepositFromAddressSource:
      description: |
        Information about the transaction source type `DepositFromAddress`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        addresses:
          description: A list of addresses.
          items:
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          type: array
      required:
      - addresses
      - source_type
      title: DepositFromAddress
      type: object
    TransactionDepositFromWalletSource:
      description: |
        Information about the transaction source type `DepositFromWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
          type: string
      required:
      - source_type
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: DepositFromWallet
      type: object
    TransactionDepositFromLoopSource:
      description: |
        Information about the transaction source type `DepositFromLoop`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
      required:
      - source_type
      title: DepositFromLoop
      type: object
    TransactionFeeStationWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The Wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Fee Station
      type: object
    TransactionDestinationType:
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Address
      - CustodialWallet
      - ExchangeWallet
      - EVM_Contract
      - SOL_Contract
      - COSMOS_Contract
      - EVM_EIP_191_Signature
      - EVM_EIP_712_Signature
      - BTC_BIP_137_Signature
      - BTC_BIP_322_Signature
      - COSMOS_ADR_36_Signature
      - Raw_Message_Signature
      - DepositToAddress
      - DepositToWallet
      example: Address
      type: string
    TransactionDepositToAddressDestination:
      description: |
        Information about the transaction destination type `DepositToAddress`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
        tx_info:
          $ref: '#/components/schemas/TransactionDepositToAddressDestination_tx_info'
      required:
      - address
      - amount
      - destination_type
      - wallet_id
      - wallet_type
      title: DepositToAddress
      type: object
    TransactionDepositToWalletDestination:
      description: |
        Information about the transaction destination type `DepositToWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: DepositToWallet
      type: object
    TransactionEvmContractMethod:
      description: The information about a method in a smart contract.
      properties:
        name:
          description: The method name.
          example: transfer
          type: string
        sig:
          description: "The signature of the method, which includes the method name\
            \ and parameter types."
          example: "transfer(address,uint256)"
          type: string
        type:
          description: The method type.
          example: Function
          type: string
        payable:
          description: |
            Whether the method is payable, which means it can receive tokens along with the transaction.
            - `true`: The method is payable.
            - `false`: The method is not payable.
          example: true
          type: boolean
        selector:
          description: "The method selector, a four-byte identifier derived from the\
            \ method's signature, used to invoke the method in a transaction."
          example: 0xa9059cbb
          type: string
      type: object
    TransactionEvmCalldataInfo:
      properties:
        chain_id:
          description: The ID of the chain on which the smart contract is issued.
          example: ETH
          type: string
        address:
          description: The address of the smart contract.
          example: 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84
          type: string
        name:
          description: The name of the smart contract.
          example: AppProxyUpgradeable
          type: string
        impl_address:
          description: The address of the implementation smart contract. This property
            is applicable only when the specified smart contract is a proxy contract.
          example: 0x17144556fd3424edc8fc8a4c940b2d04936d17eb
          type: string
        impl_name:
          description: The name of the implementation smart contract. This property
            is applicable only when the specified smart contract is a proxy contract.
          example: Lido
          type: string
        proxy:
          description: |
            Whether the specified smart contract address is a proxy contract.
            - `true`: The specified smart contract address is a proxy contract.
            - `false`: The specified smart contract address is not a proxy contract.
          example: true
          type: boolean
        method:
          $ref: '#/components/schemas/TransactionEvmContractMethod'
        params:
          description: |
            The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter:
            - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`.
            - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`.
            - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values.
          example: "[[\"exactInput\", \"tuple\", [[\"dstReceiver\", \"address\", \"\
            0xbbff75515f6e924441c3d80af4714edf19911111\"], [\"wrappedToken\", \"address\"\
            , \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"], [\"router\", \"uint256\"\
            , \"452312848583266388373324160887510303453432363010492966520592108215996663949\"\
            ], [\"amount\", \"uint256\", \"10000000000000000\"], [\"minReturnAmount\"\
            , \"uint256\", \"369987456553029\"], [\"fee\", \"uint256\", \"30000000000000\"\
            ], [\"path\", \"address[]\", [[\"[0]\", \"address\", \"0x0000000000000000000000000000000000000000\"\
            ], [\"[1]\", \"address\", \"0x1ae21d57afc033a556ef63daa216046321b3d391\"\
            ]]], [\"pool\", \"address[]\", [[\"[0]\", \"address\", \"0x725522665fa5e1fa2912fed453dc0044deda5cfd\"\
            ]]], [\"signature\", \"bytes\", \"0x\"], [\"channel\", \"string\", \"\
            android\"]]], [\"deadline\", \"uint256\", \"1729582030\"]]"
          type: string
      type: object
    TransactionEvmContractDestination:
      description: |
        Information about the transaction destination type `EVM_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
        calldata_info:
          $ref: '#/components/schemas/TransactionEvmCalldataInfo'
      required:
      - address
      - calldata
      - destination_type
      title: EVM_Contract
      type: object
    TransactionSolContractDestination:
      description: |
        The information about the transaction destination type `SOL_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        instructions:
          items:
            $ref: '#/components/schemas/TransactionSolContractInstruction'
          type: array
      required:
      - destination_type
      title: SOL_Contract
      type: object
    TransactionCosmosMessage:
      description: The information about the Cosmos message.
      properties:
        type_url:
          description: |
            The type URL of the Cosmos message.
          example: /babylon.btcstaking.v1.MsgCreateBTCDelegation
          type: string
        message:
          description: |
            The Base64-encoded Cosmos message.
          example: eyJ0eXBlIjoiYmFiY29zZS5idGNzdGFnaW5nLnYxLk1zZ0NyZWF0ZUJUQ0RlbGVnYXRpb24iLCJtZXNzYWdlIjp7ImNvbW1hbmRfaWQiOiJjb21tYW5kX2lkIiwibWVzc2FnZV92YWx1ZSI6Im1lc3NhZ2VfdmFsdWUiLCJtZXNzYWdlX3R5cGUiOiJtZXNzYWdlX3R5cGUifX0=
          type: string
      required:
      - message
      - type_url
      title: Cosmos Message
      type: object
    TransactionCosmosContractDestination:
      description: |
        Information about the transaction destination type `COSMOS_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        cosmos_messages:
          items:
            $ref: '#/components/schemas/TransactionCosmosMessage'
          type: array
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - cosmos_messages
      - destination_type
      title: Cosmos Contract
      type: object
    TransactionSolContractAccount:
      description: sol contract instruction account
      properties:
        pubkey:
          description: |
            account address. If the account is signer, pubkey needs to match the from_address parameter.
          example: E4MhQWiqCLER3fFZNf8LyQFpLWW3BRxtsR5eps3c3vNS
          type: string
        is_signer:
          description: |
            boolean value indicating whether the account can sign transactions.
          example: true
          type: boolean
        is_writable:
          description: |
            boolean value indicating whether the account can be modified.
          example: true
          type: boolean
      title: SOL Instruction Account
      type: object
    TransactionSolContractInstruction:
      description: sol contract instruction
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/TransactionSolContractAccount'
          type: array
        data:
          description: |
            data used for calling Solana contract..
          example: "Canary TX 4, slot: 219858117"
          type: string
        program_id:
          description: |
            contract address. when calling a Solana contract, the to_address parameter needs to match the program_id parameter. If multiple contracts are being called, then the to_address parameter should match the program_id parameter of the first instruction.
          example: MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr
          type: string
      title: SOL Instruction
      type: object
    TransactionMessageSignEIP191Destination:
      description: |
        Information about the transaction destination type `EVM_EIP_191_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
      required:
      - destination_type
      - message
      title: EVM_EIP_191_Signature
      type: object
    TransactionMessageSignEIP712Destination:
      description: |
        Information about the transaction destination type `EVM_EIP_712_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        raw_structured_data:
          description: "The raw structured data to be signed, formatted as a JSON\
            \ string."
          type: string
        structured_data:
          additionalProperties: true
          description: "The structured data to be signed, formatted as a JSON object\
            \ according to the EIP-712 standard."
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          type: object
        safe_tx_extra_data:
          $ref: '#/components/schemas/SafeTxExtraData'
      required:
      - destination_type
      - structured_data
      title: EVM_EIP_712_Signature
      type: object
    TransactionRawMessageSignDestination:
      description: |
        The information about the destination `Raw_Message_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        msg_hash:
          description: "Message hash to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message
      title: Raw_Message_Signature
      type: object
    TransactionTransferToAddressDestination:
      description: |
        Information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        utxo_outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal: false
        force_external: false
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        account_output:
          $ref: '#/components/schemas/TransactionTransferToAddressDestination_account_output'
        utxo_outputs:
          items:
            $ref: '#/components/schemas/TransactionTransferToAddressDestination_utxo_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        force_internal:
          description: |
            Whether the transaction request must be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must be executed as a Cobo Loop transfer.
              - `false`: The transaction request may not be executed as a Cobo Loop transfer.

            If both `force_internal` and `force_external` are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.

            If both `force_internal` and `force_external` are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
          type: boolean
      required:
      - destination_type
      title: Address
      type: object
    TransactionTransferToWalletDestination:
      description: |
        Information about the transaction destination type `CustodialWallet` or `ExchangeWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type. This field is only applicable when
            `destination_type` is `ExchangeWallet`.
          example: Asset
          type: string
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - wallet_id
      title: Wallet
      type: object
    TransactionBIP322Destination:
      description: |
        The information about the destination `BTC_BIP_322_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_bip322:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_bip322
      title: BTC_BIP_322_Signature
      type: object
    TransactionBIP137Destination:
      description: |
        The information about the destination `BTC_BIP_137_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_bip137:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_bip137
      title: BTC_BIP_137_Signature
      type: object
    TransactionCosmosAdr36Destination:
      description: |
        The information about the destination `COSMOS_ADR_36_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_cosmos_adr36:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_cosmos_adr36
      title: COSMOS_ADR_36_Signature
      type: object
    TransactionResultType:
      description: |
        The transaction result type. Possible values include:
          - `Signature`: An EVM EIP-191 or EVM EIP-712 signature.
      enum:
      - Signature
      example: Signature
      type: string
    TransactionSignatureResult:
      description: The result of a message signing transaction.
      example:
        result_type: Signature
        signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
      properties:
        result_type:
          $ref: '#/components/schemas/TransactionResultType'
        signature:
          description: The raw data of the signature.
          example: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          type: string
      required:
      - signature
      title: Signature
      type: object
    TransactionResult:
      discriminator:
        mapping:
          Signature: '#/components/schemas/TransactionSignatureResult'
        propertyName: result_type
      oneOf:
      - $ref: '#/components/schemas/TransactionSignatureResult'
    TransactionBlockInfo:
      description: The information about the transaction block.
      example:
        block_timestamp: 1717740319
        block_number: 123
        block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
      properties:
        block_number:
          description: The block number.
          example: 123
          format: int64
          type: integer
        block_timestamp:
          description: "The time when the block was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1717740319
          format: int64
          type: integer
        block_hash:
          description: The block hash.
          example: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          type: string
      type: object
    TransactionRawTxInfo:
      description: The raw transaction information.
      example:
        utxo_change:
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          value: "0.5"
        selected_utxos:
        - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
          value: "0.5"
        - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
          value: "0.5"
        raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        used_nonce: 9
        unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
      properties:
        used_nonce:
          description: The transaction nonce.
          example: 9
          type: integer
        selected_utxos:
          description: The selected UTXOs to be consumed in the transaction.
          items:
            $ref: '#/components/schemas/TransactionSelectedUtxo'
          type: array
        raw_tx:
          description: The raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
        unsigned_raw_tx:
          description: The unsigned raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
        utxo_change:
          $ref: '#/components/schemas/TransactionUtxoChange'
      type: object
    TransactionUtxoChange:
      description: The UTXO change output information.
      example:
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        value: "0.5"
      properties:
        address:
          description: The receiving address of the UTXO change output.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        value:
          description: The amount of the UTXO change output.
          example: "0.5"
          type: string
      type: object
    TransactionSelectedUtxo:
      description: The selected UTXO information.
      example:
        revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        vout_n: 0
        tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
        value: "0.5"
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
        address:
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        value:
          description: The value of the UTXO.
          example: "0.5"
          type: string
        redeem_script:
          description: The redeem script used in P2SH and P2WSH transactions.
          example: 0x1cc56cbbac4622082221a8768d1d0901
          type: string
        revealed_script:
          description: The revealed script used for Taproot script-path spend transaction.
          example: 0x1cc56cbbac4622082221a8768d1d0901
          type: string
      type: object
    TransactionUtxo:
      description: The UTXO information.
      example:
        vout_n: 0
        tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      type: object
    TransactionFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: TRON
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/MaxFeeAmount'
      description: "The transaction fee actually charged by the chain that uses the\
        \ fixed fee model. \n\nSwitch between the tabs to display the properties for\
        \ different transaction fee models.\n"
      required:
      - fee_type
      title: Fixed
      type: object
    TransactionEvmEip1559Fee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          effective_gas_price:
            description: "The gas price (gas fee per gas unit) on the chain, in wei.\
              \ The gas price represents the amount of ETH that must be paid to validators\
              \ for processing transactions."
            example: "100000000"
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The number of gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      description: "The transaction fee actually charged by the chain that uses the\
        \ EIP-1559 fee model. \n\nThe transaction fee is calculated by multiplying\
        \ the gas price by the used gas units. This can be expressed as: Transaction\
        \ fee = gas price * used gas units.\n\nSwitch between the tabs to display\
        \ the properties for different transaction fee models.\n"
      example:
        effective_gas_price: "100000000"
        max_priority_fee_per_gas: "1000000000000"
        gas_limit: "21000"
        token_id: ETH
        estimated_fee_used: "0.1"
        gas_used: "100000000"
        max_fee_per_gas: "9000000000000"
        fee_type: EVM_EIP_1559
        fee_used: "0.1"
      required:
      - fee_type
      title: EVM_EIP_1559
      type: object
    TransactionEvmLegacyFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      description: "The transaction fee actually charged by the chain that uses the\
        \ legacy fee model. \n\nThe transaction fee is calculated by multiplying the\
        \ gas price by the used gas. This can be expressed as: Transaction fee = gas\
        \ price * used gas units.\n\nSwitch between the tabs to display the properties\
        \ for different transaction fee models.\n"
      required:
      - fee_type
      title: EVM_Legacy
      type: object
    TransactionUtxoFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
          max_fee_amount:
            description: The maximum fee that you are willing to pay for the transaction.
              The transaction will fail if the transaction fee exceeds the maximum
              fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      description: |
        The transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.

        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      title: UTXO
      type: object
    TransactionSOLFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/SOLBase'
      - $ref: '#/components/schemas/SOLComputeUnit'
      description: |
        The transaction fee actually charged by the chain that uses the SOL fee model.

        In the SOL fee model, the calculation method for the fee is: fee = base_fee + compute_unit_price * compute_unit_limit + rent_amount, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      title: SOL
      type: object
    TransactionFILFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          estimated_fee_used:
            description: The estimated transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/FILBase'
      - $ref: '#/components/schemas/FILPrice'
      description: |
        The transaction fee actually charged by the chain that uses the FIL fee model.

        In the Fil fee model, the calculation method for the fee is: fee = gas_fee_cap * gas_limit, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        Switch between the tabs to display the properties for different transaction fee models.
      required:
      - fee_type
      title: FIL
      type: object
    TransactionFee:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
          SOL: '#/components/schemas/TransactionSOLFee'
          FIL: '#/components/schemas/TransactionFILFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
      - $ref: '#/components/schemas/TransactionEvmLegacyFee'
      - $ref: '#/components/schemas/TransactionUtxoFee'
      - $ref: '#/components/schemas/TransactionFixedFee'
      - $ref: '#/components/schemas/TransactionSOLFee'
      - $ref: '#/components/schemas/TransactionFILFee'
    TransactionRbf:
      description: The information about the request to drop or to speed up transactions.
      example:
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        description: Speedup transaction
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          included_utxos:
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          excluded_utxos:
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          - vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          source_type: Asset
          mpc_used_key_share_holder_group:
            used_tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        source:
          $ref: '#/components/schemas/TransactionRbf_source'
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description of the RBF transaction.
          example: Speedup transaction
          type: string
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - fee
      - request_id
      type: object
    TransactionResend:
      description: The information about the request to resend transactions.
      example:
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - request_id
      type: object
    ReplaceType:
      description: "The `replaced_by_type` property indicates the replacement type\
        \ of the transaction that this transaction was replaced by, and the `replaced_type`\
        \ property indicates the replacement type of the transaction that this transaction\
        \ replaced.\nPossible values include: \n  - `Drop`: To drop a transaction.\n\
        \  - `Resend`: To resend a transaction.\n  - `SpeedUp`: To speed up a transaction.\n"
      enum:
      - Drop
      - Resend
      - SpeedUp
      example: Resend
      type: string
    AutoFuelType:
      description: |
        The mode of transaction fee payment using Fee Station. Currently, Fee Station supports EVM-compatible and TRON transactions initiated from MPC Wallets (Organization-Controlled). For more details, refer to [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction).
        - `ProActiveAutoFuel`: Always use Fee Station to pay transaction fees.
        - `PassiveAutoFuel`: Use Fee Station only when the source address balance is insufficient to cover the transaction fees.

        Please note that the TRON chain does not support `PassiveAutoFuel` due to its fee delegation mechanism.
      enum:
      - PassiveAutoFuel
      - ProActiveAutoFuel
      example: PassiveAutoFuel
      type: string
    TransactionApprovalDetail:
      description: The approval detail data for transaction.
      example:
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        approver:
          result: Approved
          review_threshold: 1
          complete_time: complete_time
          user_details:
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          initiator: tom@gmail.com
        address_owner:
          result: Approved
          review_threshold: 1
          complete_time: complete_time
          user_details:
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          initiator: tom@gmail.com
        spender:
          result: Approved
          review_threshold: 1
          complete_time: complete_time
          user_details:
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          - result: Approved
            signature: signature
            name: tom
            language: en
            message: message
            extra_message: extra_message
            email: tom@gmail.com
            message_version: 1.0.1
            pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          initiator: tom@gmail.com
        cobo_id: "20231213122855000000000000000000"
        request_id: web_send_by_user_327_1610444045047
      properties:
        transaction_id:
          description: The transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        cobo_id:
          description: "The Cobo ID, which can be used to track a transaction."
          example: "20231213122855000000000000000000"
          type: string
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
          type: string
        spender:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
        approver:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
        address_owner:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
      type: object
    TransactionApprovalResult:
      description: "The transaction approval result. Possible values include: \n \
        \ - `Approved`: The transaction is approved.\n  - `Rejected`: The transaction\
        \ is rejected. \n  - `Pending`: The transaction is pending approval.\n"
      enum:
      - Approved
      - Rejected
      - Pending
      example: Approved
      type: string
    TransactionRoleApprovalDetail:
      description: The role approval data for transaction.
      example:
        result: Approved
        review_threshold: 1
        complete_time: complete_time
        user_details:
        - result: Approved
          signature: signature
          name: tom
          language: en
          message: message
          extra_message: extra_message
          email: tom@gmail.com
          message_version: 1.0.1
          pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
        - result: Approved
          signature: signature
          name: tom
          language: en
          message: message
          extra_message: extra_message
          email: tom@gmail.com
          message_version: 1.0.1
          pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
        initiator: tom@gmail.com
      properties:
        result:
          $ref: '#/components/schemas/TransactionApprovalResult'
        review_threshold:
          description: The threshold for passing the review of this role.
          example: 1
          type: integer
        initiator:
          description: The initiator of the transaction.
          example: tom@gmail.com
          type: string
        complete_time:
          description: Time to complete the review.
          type: string
        user_details:
          items:
            $ref: '#/components/schemas/TransactionUserApprovalDetail'
          type: array
      type: object
    TransactionUserApprovalDetail:
      description: The user approval data for transaction.
      example:
        result: Approved
        signature: signature
        name: tom
        language: en
        message: message
        extra_message: extra_message
        email: tom@gmail.com
        message_version: 1.0.1
        pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
      properties:
        name:
          description: The name of the user who audited this message.
          example: tom
          type: string
        email:
          description: The email of the user who audited this message.
          example: tom@gmail.com
          type: string
        pubkey:
          description: The Cobo Guard public key of the user who audited this message.
          example: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          type: string
        result:
          $ref: '#/components/schemas/TransactionApprovalResult'
        signature:
          description: The signature of the audited message.
          type: string
        language:
          description: The language of the audited message.
          example: en
          type: string
        message_version:
          description: The version of the audited message.
          example: 1.0.1
          type: string
        message:
          description: The audited message.
          type: string
        extra_message:
          description: The extra audited message.
          type: string
      type: object
    TransactionFuelingInfo:
      description: Details of the auto-fueling transaction that provides gas for the
        current transaction.
      example:
        transaction_id: b0530b27-104f-4338-87de-de01500326ea
        request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
      properties:
        request_id:
          description: The request ID of the transaction.
          example: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          type: string
        transaction_id:
          description: The transaction ID.
          example: b0530b27-104f-4338-87de-de01500326ea
          format: uuid
          type: string
      type: object
    TransactionCoboCategory:
      description: "The transaction category defined by Cobo. Possible values include:\
        \ \n  - `AutoSweep`: An auto-sweep transaction.\n  - `AutoFueling`: A transaction\
        \ where Fee Station pays transaction fees to an address within your MPC Wallets.\n\
        \  - `AutoFuelingRefund`: A refund for an auto-fueling transaction.\n  - `SafeTxMessage`:\
        \ A message signing transaction initiated by an MPC wallet to authorize a\
        \ Smart Contract Wallet (Safe\\{Wallet\\}) transaction.\n  - `BillPayment`:\
        \ A transaction to pay Cobo bills through Fee Station.\n  - `BillRefund`:\
        \ A refund for a previously made bill payment.\n  - `CommissionFeeCharge`:\
        \ A transaction to charge commission fees via Fee Station.\n  - `CommissionFeeRefund`:\
        \ A refund of previously charged commission fees.\n  - `StakingBabylonBtcDelegation`:\
        \ A transaction for delegating BTC in Babylon staking.\n  - `StakingBabylonBtcSignBabylon`:\
        \ A transaction for signing Babylon operations with BTC.\n  - `StakingBabylonClaim`:\
        \ A transaction for claiming rewards from Babylon staking.\n  - `StakingBabylonSlashing`:\
        \ A transaction related to slashing penalties in Babylon staking.\n  - `StakingBabylonStake`:\
        \ A transaction for staking assets in the Babylon platform.\n  - `StakingBabylonUnstake`:\
        \ A transaction for unstaking assets from the Babylon platform.\n  - `StakingBabylonWithdraw`:\
        \ A transaction for withdrawing assets from Babylon staking.\n  - `StakingBithiveClaim`:\
        \ A transaction for claiming rewards from BitHive staking.\n  - `StakingBithiveStake`:\
        \ A transaction for staking assets in the BitHive platform.\n  - `StakingBithiveUnstake`:\
        \ A transaction for unstaking assets from the BitHive platform.\n  - `StakingBithiveWithdraw`:\
        \ A transaction for withdrawing assets from BitHive staking.\n  - `StakingCoreStake`:\
        \ A transaction for staking assets in the Core staking platform.\n  - `StakingCoreWithdraw`:\
        \ A transaction for withdrawing assets from Core staking.\n  - `StakingEthClaim`:\
        \ A transaction for claiming rewards from ETH staking.\n  - `StakingEthStake`:\
        \ A transaction for staking ETH assets.\n  - `StakingEthUnstake`: A transaction\
        \ for unstaking ETH assets.\n  - `StakingSkyfarmClaim`: A transaction for\
        \ claiming rewards from Skyfarm staking.\n  - `StakingSkyfarmStake`: A transaction\
        \ for staking assets in the Skyfarm platform.\n  - `StakingSkyfarmUnstake`:\
        \ A transaction for unstaking assets from the Skyfarm platform.\n"
      enum:
      - AutoFueling
      - AutoFuelingRefund
      - AutoSweep
      - BillPayment
      - BillRefund
      - CommissionFeeCharge
      - CommissionFeeRefund
      - SafeTxMessage
      - StakingBabylonBtcDelegation
      - StakingBabylonBtcSignBabylon
      - StakingBabylonClaim
      - StakingBabylonSlashing
      - StakingBabylonStake
      - StakingBabylonUnstake
      - StakingBabylonWithdraw
      - StakingBithiveClaim
      - StakingBithiveStake
      - StakingBithiveUnstake
      - StakingBithiveWithdraw
      - StakingCoreStake
      - StakingCoreWithdraw
      - StakingEthClaim
      - StakingEthStake
      - StakingEthUnstake
      - StakingSkyfarmClaim
      - StakingSkyfarmStake
      - StakingSkyfarmUnstake
      - ScreenAppRefund
      - ScreenAppIsolate
      - ComplianceRefund
      - ComplianceIsolate
      example: AutoSweep
      type: string
    SafeTxExtraData:
      description: "The information used to construct and sign Safe{Wallet} transactions\
        \ using the EIP-712 standard."
      properties:
        to:
          description: The recipient address of the transaction.
          example: 0x1234567890abcdef1234567890abcdef12345678
          type: string
        value:
          description: "The human-readable transaction value, for example, `1 ETH`."
          example: 1 ETH
          type: string
        data:
          description: The transaction call data.
          example: 0xabcdef...
          type: string
        domain_hash:
          description: The EIP-712 domain separator hash.
          example: 0xabcdef123456...
          type: string
        message_hash:
          description: The hash of the structured message to be signed.
          example: 0xabcdef123456...
          type: string
        safe_address:
          description: The address of the Safe contract.
          example: 0xabcdefabcdefabcdefabcdefabcdefabcdef
          type: string
        safe_tx_hash:
          description: The hash of the transaction.
          example: 0x123456abcdef...
          type: string
        safe_nonce:
          description: The nonce of the transaction.
          example: 42
          type: integer
        operation:
          description: The operation type for the transaction.
          example: Call
          type: string
        gas_token_addr:
          description: The address of the token used to pay gas.
          example: 0xabcdefabcdef...
          type: string
        safe_tx_gas:
          description: The gas limit used for the transaction.
          example: 21000
          type: integer
        base_gas:
          description: The base gas for the transaction.
          example: 5000
          type: integer
        gas_price:
          description: The gas price used in the transaction.
          example: "100"
          type: string
        refund_receiver:
          description: The address used to receive the gas refund.
          example: 0xabcdefabcdef...
          type: string
        to_contract_name:
          description: The name of the recipient contract (if available).
          example: UniswapV2Router
          type: string
        decoded_data:
          $ref: '#/components/schemas/SafeTxDecodedData'
        signature:
          description: The signature of the transaction (if signed by Cobo Signer).
          example: 0xabcdef123456...
          type: string
        wei:
          description: The transaction amount in Wei.
          example: "1000000000000000000"
          nullable: true
          type: string
      required:
      - data
      - domain_hash
      - message_hash
      - operation
      - safe_address
      - safe_nonce
      - safe_tx_hash
      - to
      - value
      type: object
    SafeTxDecodedData:
      description: The information about the decoded data of the transaction.
      properties:
        method:
          description: The name of the method decoded from the transaction data.
          example: transfer
          type: string
        parameters:
          description: The list of parameters decoded from the transaction data.
          items:
            $ref: '#/components/schemas/SafeTxDecodedDataParameters'
          type: array
      type: object
    SafeTxDecodedDataParameters:
      description: The information about the decoded parameters of the transaction.
      properties:
        name:
          description: The name of the parameter.
          example: recipient
          type: string
        type:
          description: The data type of the parameter.
          example: address
          type: string
        value:
          description: The value of the parameter.
          example: 0x1234567890abcdef1234567890abcdef12345678
          type: string
        value_decoded:
          description: The decoded value of the parameter (if applicable).
          items:
            $ref: '#/components/schemas/SafeTxSubTransaction'
          type: array
      type: object
    SafeTxSubTransaction:
      description: The information about the sub-transaction.
      properties:
        operation:
          description: The type of operation in the sub-transaction.
          example: Call
          type: string
        to:
          description: The destination address of the sub-transaction.
          example: 0xabcdefabcdefabcdefabcdefabcdefabcdef
          type: string
        value:
          description: "The human-readable transaction value, for example, `1 ETH`."
          example: 1 ETH
          type: string
        wei:
          description: The transaction amount in Wei
          example: "1000000000000000000"
          type: string
        data:
          description: Encoded transaction data
          example: 0xabcdef...
          type: string
        data_decoded:
          $ref: '#/components/schemas/SafeTxDecodedData'
        to_contract_name:
          description: The name of the recipient contract (if available).
          example: UniswapV2Router
          nullable: true
          type: string
      type: object
    TransactionExtra:
      discriminator:
        mapping:
          BabylonBusinessInfo: '#/components/schemas/TransactionBabylonBusinessInfo'
          BabylonTxParameters: '#/components/schemas/TransactionBabylonTxParameters'
          CoreStakeInfo: '#/components/schemas/TransactionCoreStakeInfo'
        propertyName: extra_type
      oneOf:
      - $ref: '#/components/schemas/TransactionBabylonBusinessInfo'
      - $ref: '#/components/schemas/TransactionBabylonTxParameters'
      - $ref: '#/components/schemas/TransactionCoreStakeInfo'
    TransactionExtraType:
      description: |
        The transaction extra information type. Possible values include:
          - `BabylonBusinessInfo`: The extra information related to Babylon business logic.
          - `BabylonTxParameters`: The extra information for Babylon transaction parameters.
          - `CoreStakeInfo`: The extra information related to core staking operations.
      enum:
      - BabylonBusinessInfo
      - BabylonTxParameters
      - CoreStakeInfo
      example: BabylonBusinessInfo
      type: string
    TransactionBabylonBusinessInfo:
      description: The extra information related to Babylon business logic.
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        babylon_address_info:
          $ref: '#/components/schemas/AddressInfo'
        btc_address_info:
          $ref: '#/components/schemas/AddressInfo'
      required:
      - extra_type
      title: BabylonBusinessInfo
      type: object
    TransactionBabylonTxParameters:
      description: The extra information for Babylon transaction parameters.
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        stake_amount:
          description: The original staking amount.
          example: "100.00"
          type: string
        finality_provider_public_key:
          description: The public key of the finality provider.
          example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          pattern: "^[0-9a-fA-F]{64}$"
          type: string
        stake_block_time:
          description: The number of blocks that need to be processed before the locked
            tokens are unlocked and become accessible.
          example: 2000
          format: int64
          type: integer
        param_version:
          description: The version of Babylon global parameters.
          example: 2
          format: int64
          type: integer
        withdraw_from_type:
          $ref: '#/components/schemas/ActivityType'
        slash_from_type:
          $ref: '#/components/schemas/ActivityType'
      required:
      - extra_type
      title: BabylonTxParameters
      type: object
    TransactionCoreStakeInfo:
      description: The extra information related to core staking operations.
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        stake_amount:
          description: The original staking amount.
          example: "100.00"
          type: string
        timelock:
          description: The Unix timestamp (in seconds) when the staking position will
            be unlocked and available for withdrawal.
          type: integer
        change_address:
          description: "The change address on the Bitcoin chain. If not provided,\
            \ the source wallet's address will be used as the change address."
          type: string
        validator_address:
          description: The validator's EVM address.
          type: string
        reward_address:
          description: The EVM address used to receive staking rewards.
          type: string
      required:
      - extra_type
      title: CoreStakeInfo
      type: object
    CustodialTransferSource:
      description: |
        The information about the transaction source types `Asset`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: Asset
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Asset
      type: object
    CustodialWeb3TransferSource:
      description: |
        The information about the transaction source types `Web3`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: |
            The wallet address.

            If you want to specify the UTXOs to be used, please provide the `included_utxos` property. When `included_utxos` is specified, only these specified UTXOs will be used for the transaction. If you specify both the `address` and `included_utxos` properties, the specified included UTXOs must belong to the address. It is recommended to specify no more than 100 included UTXOs to ensure optimal transaction processing.

            You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
      required:
      - source_type
      - wallet_id
      title: Web3
      type: object
    MpcTransferSource:
      description: |
        The information about the transaction source types `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.

        Switch between the tabs to display the properties for different transaction sources.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        included_utxos:
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        excluded_utxos:
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        - vout_n: 0
          tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        source_type: Asset
        mpc_used_key_share_holder_group:
          used_tss_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: |
            The wallet address.
            If you want to specify the UTXOs to be used, please provide the `included_utxos` property. When `included_utxos` is specified, only these specified UTXOs will be used for the transaction. If you specify both the `address` and `included_utxos` properties, the specified included UTXOs must belong to the address. It is recommended to specify no more than 100 included UTXOs to ensure optimal transaction processing.

            You need to provide either the `address` or `included_utxos` property. If neither property is provided, the transfer will fail.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        included_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        excluded_utxos:
          items:
            $ref: '#/components/schemas/TransactionUtxo'
          type: array
        mpc_used_key_share_holder_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      required:
      - source_type
      - wallet_id
      title: Org-Controlled/User-Controlled
      type: object
    SafeTransferSource:
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
      required:
      - address
      - delegate
      - source_type
      - wallet_id
      title: "Safe{Wallet}"
      type: object
    CoboSafeDelegateType:
      default: Org-Controlled
      description: |
        The wallet subtype of the Delegate. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
      enum:
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    CoboSafeDelegate:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MPCDelegate'
          User-Controlled: '#/components/schemas/MPCDelegate'
        propertyName: delegate_type
      oneOf:
      - $ref: '#/components/schemas/MPCDelegate'
    MPCDelegate:
      description: "The information about the MPC Wallet as the Delegate. You can\
        \ call the [List Delegates](https://www.cobo.com/developers/v2/api-references/wallets--smart-contract-wallets/list-delegates)\
        \ operation to retrieve the applicable Delegates."
      example:
        wallet_id: 123e4567-e89b-12d3-a456-426614174000
        address: 0x1234567890123456789012345678901234567890
        delegate_type: Org-Controlled
      properties:
        delegate_type:
          $ref: '#/components/schemas/CoboSafeDelegateType'
        wallet_id:
          description: "The wallet ID of the Delegate. This is required when initiating\
            \ a transfer or contract call from Smart Contract Wallets (Safe{Wallet})."
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        address:
          description: "The wallet address of the Delegate. This is required when\
            \ initiating a transfer or contract call from Smart Contract Wallets (Safe{Wallet})."
          example: 0x1234567890123456789012345678901234567890
          type: string
      required:
      - address
      - delegate_type
      - wallet_id
      title: MPC Wallet Delegate
      type: object
    ExchangeTransferSource:
      description: |
        The information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Assets in an Exchange Wallet (Sub Account) can only be transferred to another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
      required:
      - source_type
      - trading_account_type
      - wallet_id
      title: Main/Sub
      type: object
    TransferSource:
      discriminator:
        mapping:
          Asset: '#/components/schemas/CustodialTransferSource'
          Web3: '#/components/schemas/CustodialWeb3TransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          Safe{Wallet}: '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/CustodialTransferSource'
      - $ref: '#/components/schemas/CustodialWeb3TransferSource'
      - $ref: '#/components/schemas/MpcTransferSource'
      - $ref: '#/components/schemas/SafeTransferSource'
      - $ref: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      description: |
        The information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        **You need to specify either the `account_output` property or the `utxo_outputs` property.**

        You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. To do this, you should use the `utxo_outputs` property to specify the destination addresses.

        Switch between the tabs to display the properties for different transaction destinations.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        utxo_outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal: false
        change_output_type: First
        force_external: false
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          $ref: '#/components/schemas/AddressTransferDestination_account_output'
        utxo_outputs:
          items:
            $ref: '#/components/schemas/AddressTransferDestination_utxo_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        change_output_type:
          description: "The position of the change output in the transaction's outputs.\
            \ Possible values are:\n- `Last`: The change output is placed at the end\
            \ of the transaction's outputs.  \n- `First`: The change output is placed\
            \ at the beginning of the transaction's outputs.\n"
          enum:
          - Last
          - First
          example: First
          type: string
        force_internal:
          description: "Whether the transaction request must be executed as a [Cobo\
            \ Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop)\
            \ transfer.\n  - `true`: The transaction request must be executed as a\
            \ Cobo Loop transfer.\n  - `false`: The transaction request may not be\
            \ executed as a Cobo Loop transfer.\n  \nPlease do not set both `force_internal`\
            \ and `force_external` as `true`. If both are set to `false`, the system\
            \ uses Cobo Loop by default if possible; otherwise, it proceeds with an\
            \ on-chain transfer.\n"
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.

            Please do not set both `force_internal` and `force_external` as `true`. If both are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
          type: boolean
      required:
      - destination_type
      title: Address
      type: object
    CustodialTransferDestination:
      description: |
        The information about the transaction destination type `CustodialWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        A Custodial Wallet (Asset Wallet) can only receive transfers from another Custodial Wallet (Asset Wallet) by using [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop).

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - wallet_id
      title: CustodialWallet
      type: object
    ExchangeTransferDestination:
      description: |
        The information about the transaction destination type `ExchangeWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        An Exchange Wallet (Sub Account) can only receive asset transfers from another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction destinations.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        trading_account_type:
          description: The trading account type.
          example: Asset
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - destination_type
      - trading_account_type
      - wallet_id
      title: ExchangeWallet
      type: object
    TransferDestinationType:
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each destination type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Address
      - CustodialWallet
      - ExchangeWallet
      example: Address
      type: string
    TransferDestination:
      discriminator:
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          CustodialWallet: '#/components/schemas/CustodialTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/AddressTransferDestination'
      - $ref: '#/components/schemas/CustodialTransferDestination'
      - $ref: '#/components/schemas/ExchangeTransferDestination'
    TransferParams:
      description: The information about a token transfer.
      example:
        transaction_process_type: AutoProcess
        token_id: ETH_USDT
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          change_output_type: First
          force_external: false
        description: Transfer from wallet
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID of the transferred token. You can retrieve the\
            \ IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).\
            \ For transfers from Exchange Wallets, this property value represents\
            \ the asset ID."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description of the transfer.
          example: Transfer from wallet
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        transaction_process_type:
          $ref: '#/components/schemas/TransactionProcessType'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - destination
      - request_id
      - request_type
      - source
      - token_id
      type: object
    EstimateFeeRequestType:
      description: |
        The request type. Possible values include:
          - `Transfer`: A request to transfer tokens.
          - `ContractCall`: A request to interact with a smart contract.
      enum:
      - Transfer
      - ContractCall
      example: Transfer
      type: string
    EstimateFeeParams:
      discriminator:
        mapping:
          Transfer: '#/components/schemas/EstimateTransferFeeParams:'
          ContractCall: '#/components/schemas/EstimateContractCallFeeParams:'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/EstimateTransferFeeParams'
      - $ref: '#/components/schemas/EstimateContractCallFeeParams'
    EstimateTransferFeeParams:
      description: The information about a token transfer.
      example:
        request_type: Transfer
        token_id: ETH_USDT
        replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          change_output_type: First
          force_external: false
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        fee_type: EVM_EIP_1559
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
            It is recommended to use the same request ID as the transaction for which
            you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID of the transferred token. You can retrieve the\
            \ IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        replaced_transaction_id:
          description: The ID of the transaction that this transaction replaced.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
      required:
      - request_type
      - source
      - token_id
      title: Transfer
      type: object
    EstimateContractCallFeeParams:
      description: The information about a transaction that interacts with a smart
        contract
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
            It is recommended to use the same request ID as the transaction for which
            you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        chain_id:
          description: "The chain ID of the chain on which the smart contract is issued.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        replaced_transaction_id:
          description: The ID of the transaction that this transaction replaced.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
      required:
      - chain_id
      - destination
      - request_type
      - source
      title: ContractCall
      type: object
    BaseContractCallSource:
      description: |
        The information about the transaction source type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      properties:
        source_type:
          $ref: '#/components/schemas/ContractCallSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
      required:
      - address
      - source_type
      - wallet_id
      type: object
    MpcContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      - properties:
          mpc_used_key_share_holder_group:
            $ref: '#/components/schemas/MpcSigningGroup'
        type: object
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        source_type: Org-Controlled
        mpc_used_key_share_holder_group:
          used_tss_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      title: Org-Controlled/User-Controlled
    CustodialWeb3ContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      title: Web3
    SafeContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      - properties:
          delegate:
            $ref: '#/components/schemas/CoboSafeDelegate'
        required:
        - delegate
        type: object
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: "Safe{Wallet}"
    ContractCallSourceType:
      description: |
        The type of the source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each source type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - Web3
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      example: Org-Controlled
      type: string
    ContractCallSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          Safe{Wallet}: '#/components/schemas/SafeContractCallSource'
          Web3: '#/components/schemas/CustodialWeb3ContractCallSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcContractCallSource'
      - $ref: '#/components/schemas/SafeContractCallSource'
      - $ref: '#/components/schemas/CustodialWeb3ContractCallSource'
    ContractCallDestinationType:
      description: |
        The type of the contract format. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - EVM_Contract
      - SOL_Contract
      example: EVM_Contract
      type: string
    EvmContractCallDestination:
      description: "The information about the transaction destination. Refer to [Transaction\
        \ sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      example:
        destination_type: EVM_Contract
        address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
        calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        value: "1.5"
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        address:
          description: The destination address.
          example: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          type: string
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          type: string
      required:
      - address
      - calldata
      - destination_type
      title: EVM_Contract
      type: object
    CosmosContractCallMessage:
      description: The information about the Cosmos message.
      properties:
        type_url:
          description: |
            The type URL of the Cosmos message.
          example: /babylon.btcstaking.v1.MsgCreateBTCDelegation
          type: string
        message:
          description: |
            The Base64-encoded Cosmos message.
          example: eyJ0eXBlIjoiYmFiY29zZS5idGNzdGFnaW5nLnYxLk1zZ0NyZWF0ZUJUQ0RlbGVnYXRpb24iLCJtZXNzYWdlIjp7ImNvbW1hbmRfaWQiOiJjb21tYW5kX2lkIiwibWVzc2FnZV92YWx1ZSI6Im1lc3NhZ2VfdmFsdWUiLCJtZXNzYWdlX3R5cGUiOiJtZXNzYWdlX3R5cGUifX0=
          type: string
      required:
      - message
      - type_url
      title: Cosmos Message
      type: object
    CosmosContractCallDestination:
      description: "The information about the transaction destination. Refer to [Transaction\
        \ sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        cosmos_messages:
          items:
            $ref: '#/components/schemas/CosmosContractCallMessage'
          type: array
        value:
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - cosmos_messages
      - destination_type
      title: Cosmos Contract
      type: object
    SolContractCallDestination:
      description: "The information about the transaction destination. Refer to [Transaction\
        \ sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        instructions:
          items:
            $ref: '#/components/schemas/SolContractCallInstruction'
          type: array
      required:
      - destination_type
      - instructions
      title: SOL_Contract
      type: object
    SolContractCallAccount:
      description: The information about the account involved in a Solana instruction.
      properties:
        pubkey:
          description: |
            The public key of the account. If the account is a signer of this transaction, this property must be the same as the value of the `source.address` property.
          example: E4MhQWiqCLER3fFZNf8LyQFpLWW3BRxtsR5eps3c3vNS
          type: string
        is_signer:
          description: |
            Whether the account is the signer of this transaction:
            - `true`: The account is a signer.
            - `false`: The account is not a signer.
          example: true
          type: boolean
        is_writable:
          description: |
            Whether the account can be modified by the instruction:
            - `true`: The account can be modified by the instruction.
            - `false`: The account cannot be modified by the instruction.
          example: true
          type: boolean
      required:
      - is_signer
      - is_writable
      - pubkey
      title: SOL Instruction Account
      type: object
    SolContractCallInstruction:
      description: The information about the Solana instruction.
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/SolContractCallAccount'
          type: array
        data:
          description: |
            The Base64-encoded instruction data used for interacting with a Solana program.
          example: 37u9WtQpcm6ULa3WRQHmj49EPs4if7o9f1jSRVZpm2dvihR9C8jY4NqEwXUbLwx15HBSNcP1
          type: string
        program_id:
          description: "The address of the Solana program (smart contract). \n"
          example: MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr
          type: string
      required:
      - accounts
      - data
      - program_id
      title: SOL Instruction
      type: object
    ContractCallDestination:
      discriminator:
        mapping:
          EVM_Contract: '#/components/schemas/EvmContractCallDestination'
          SOL_Contract: '#/components/schemas/SolContractCallDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/EvmContractCallDestination'
      - $ref: '#/components/schemas/SolContractCallDestination'
    ContractCallParams:
      description: The information about a transaction that interacts with a smart
        contract
      example:
        transaction_process_type: AutoProcess
        chain_id: ETH
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        destination:
          destination_type: EVM_Contract
          address: 0x0406db8351aa6839169bb363f63c2c808fee8f99
          calldata: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          value: "1.5"
        description: Transaction to call a smart contract initiated from a wallet
        auto_fuel: PassiveAutoFuel
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
          mpc_used_key_share_holder_group:
            used_tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        description:
          description: The description of the contract call transaction.
          example: Transaction to call a smart contract initiated from a wallet
          type: string
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        transaction_process_type:
          $ref: '#/components/schemas/TransactionProcessType'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      title: Contract call
      type: object
    TransactionProcessType:
      description: "Transaction processing type. Possible values are:\n- `AutoProcess`\
        \ (default): After the transaction is constructed, it will be automatically\
        \ signed and broadcast.  \n- `BuildOnly`: Set to this value if you want to\
        \ build the transaction first without automatically signing and broadcasting\
        \ it. You can manually call the [Sign and broadcast transaction](https://www.cobo.com/developers/v2/api-references/transactions/sign-and-broadcast-transaction)\
        \ operation to complete the signing and broadcasting process.\n"
      enum:
      - AutoProcess
      - BuildOnly
      example: AutoProcess
      type: string
    MpcMessageSignSource:
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        source_type: Org-Controlled
        mpc_used_key_share_holder_group:
          used_tss_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        mpc_used_key_share_holder_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      required:
      - address
      - source_type
      - wallet_id
      title: Org-Controlled/User-Controlled
      type: object
    CustodialWeb3MessageSignSource:
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      required:
      - address
      - source_type
      - wallet_id
      title: Web3
      type: object
    MessageSignSourceType:
      description: |
        The wallet subtype of the transaction source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
      enum:
      - Web3
      - Org-Controlled
      - User-Controlled
      example: Org-Controlled
      type: string
    MessageSignSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcMessageSignSource'
          User-Controlled: '#/components/schemas/MpcMessageSignSource'
          Web3: '#/components/schemas/CustodialWeb3MessageSignSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcMessageSignSource'
      - $ref: '#/components/schemas/CustodialWeb3MessageSignSource'
    EvmEIP191MessageSignDestination:
      description: "The information about the destination `EVM_EIP_191_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      example:
        destination_type: EVM_EIP_191_Signature
        message: YWFhYQ==
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
      required:
      - destination_type
      - message
      title: EVM_EIP_191_Signature
      type: object
    BTCEIP191MessageSignDestination:
      description: "The information about the destination `BTC_EIP_191_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
      required:
      - destination_type
      - message
      title: BTC_EIP_191_Signature
      type: object
    EvmEIP712MessageSignDestination:
      description: "The information about the destination `EVM_EIP_712_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        structured_data:
          additionalProperties: true
          description: "The structured data to be signed, formatted as a JSON object\
            \ according to the EIP-712 standard."
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          type: object
      required:
      - destination_type
      - structured_data
      title: EVM_EIP_712_Signature
      type: object
    RawMessageSignDestination:
      description: "The information about the destination `Raw_Message_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        msg_hash:
          description: "Message hash to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - msg_hash
      title: Raw_Message_Signature
      type: object
    BTCBIP322MessageSignDestination:
      description: "The information about the destination `BTC_BIP_322_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_bip322:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_bip322
      title: BTC_BIP_322_Signature
      type: object
    BTCBIP137MessageSignDestination:
      description: "The information about the destination `BTC_BIP_137_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_bip137:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_bip137
      title: BTC_BIP_137_Signature
      type: object
    CosmosAdr36MessageSignDestination:
      description: "The information about the destination `COSMOS_ADR_36_Signature`.\
        \ Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations)\
        \ for a detailed introduction about the supported sources and destinations\
        \ for each transaction type."
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_cosmos_adr36:
          description: "Message to be signed, in hexadecimal format."
          type: string
      required:
      - destination_type
      - message_cosmos_adr36
      title: COSMOS_ADR_36_Signature
      type: object
    MessageSignDestinationType:
      description: |
        The type of the signature format. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each signature format type requires a different set of properties. Switch between the above tabs for details.
      enum:
      - EVM_EIP_191_Signature
      - EVM_EIP_712_Signature
      - BTC_EIP_191_Signature
      - BTC_BIP_137_Signature
      - BTC_BIP_322_Signature
      - COSMOS_ADR_36_Signature
      - Raw_Message_Signature
      example: EVM_EIP_191_Signature
      type: string
    MessageSignDestination:
      discriminator:
        mapping:
          EVM_EIP_191_Signature: '#/components/schemas/EvmEIP191MessageSignDestination'
          EVM_EIP_712_Signature: '#/components/schemas/EvmEIP712MessageSignDestination'
          BTC_EIP_191_Signature: '#/components/schemas/BTCEIP191MessageSignDestination'
          BTC_BIP_137_Signature: '#/components/schemas/BTCBIP137MessageSignDestination'
          BTC_BIP_322_Signature: '#/components/schemas/BTCBIP322MessageSignDestination'
          COSMOS_ADR_36_Signature: '#/components/schemas/CosmosAdr36MessageSignDestination'
          Raw_Message_Signature: '#/components/schemas/RawMessageSignDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/EvmEIP191MessageSignDestination'
      - $ref: '#/components/schemas/EvmEIP712MessageSignDestination'
      - $ref: '#/components/schemas/RawMessageSignDestination'
      - $ref: '#/components/schemas/BTCEIP191MessageSignDestination'
      - $ref: '#/components/schemas/BTCBIP137MessageSignDestination'
      - $ref: '#/components/schemas/BTCBIP322MessageSignDestination'
      - $ref: '#/components/schemas/CosmosAdr36MessageSignDestination'
    MessageSignParams:
      description: The information about a transaction that signs a message. You can
        provide the message either as raw data or as structured data.
      example:
        chain_id: ETH
        destination:
          destination_type: EVM_EIP_191_Signature
          message: YWFhYQ==
        description: Transaction to sign a message initiated from a wallet
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          source_type: Org-Controlled
          mpc_used_key_share_holder_group:
            used_tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            used_key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/MessageSignSource'
        destination:
          $ref: '#/components/schemas/MessageSignDestination'
        description:
          description: The description of the message signing transaction.
          example: Transaction to sign a message initiated from a wallet
          type: string
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      type: object
    WebhookEvent:
      description: The webhook event payload.
      example:
        next_retry_timestamp: 1701396866000
        retries_left: 3
        event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
          is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            estimated_fee_used: "0.1"
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Signature
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          extra:
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data_type: Transaction
          cobo_category:
          - AutoFueling
          - AutoFueling
          category:
          - Payment
          - Payment
          request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
          raw_tx_info:
            utxo_change:
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              value: "0.5"
            selected_utxos:
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
            unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
          fueling_info:
            transaction_id: b0530b27-104f-4338-87de-de01500326ea
            request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
        created_timestamp: 1701396866000
        type: wallets.transaction.created
        url: https://example.com/webhook
        status: Success
      properties:
        event_id:
          description: The event ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        created_timestamp:
          description: |
            The time when the event type was triggered, in Unix timestamp format (milliseconds).
            - The value remains unchanged across retries.
            - The default webhook timeout is 2 seconds.
          example: 1701396866000
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/WebhookEventData'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          example: 1701396866000
          format: int64
          type: integer
        retries_left:
          description: The number of retries left. This field is only present if the
            event status is `Retrying`.
          example: 3
          type: integer
      required:
      - created_timestamp
      - data
      - id
      - type
      - url
      type: object
    WebhookEventDataType:
      description: The data type of the event.
      properties:
        data_type:
          description: "\nThe data type of the event.\n- `Transaction`: The transaction\
            \ event data.\n- `TSSRequest`: The TSS request event data.\n- `Addresses`:\
            \ The addresses event data.\n- `WalletInfo`: The wallet information event\
            \ data.\n- `MPCVault`: The MPC vault event data.\n- `Chains`: The enabled\
            \ chain event data.\n- `Tokens`: The enabled token event data.\n- `TokenListing`:\
            \ The token listing event data.\n      \n- `PaymentOrder`: The payment\
            \ order event data.\n- `BalanceUpdateInfo`: The balance update event data.\n\
            - `PaymentRefund`: The payment refund event data.\n- `PaymentSettlement`:\
            \ The payment settlement event data."
          enum:
          - Transaction
          - TSSRequest
          - Addresses
          - WalletInfo
          - MPCVault
          - Chains
          - Tokens
          - TokenListing
          - BalanceUpdateInfo
          - PaymentOrder
          - PaymentRefund
          - PaymentSettlement
          example: Transaction
          type: string
      required:
      - data_type
      type: object
    WebhookEventData:
      discriminator:
        mapping:
          Transaction: '#/components/schemas/TransactionWebhookEventData'
          TSSRequest: '#/components/schemas/TSSRequestWebhookEventData'
          Addresses: '#/components/schemas/AddressesEventData'
          WalletInfo: '#/components/schemas/WalletInfoEventData'
          MPCVault: '#/components/schemas/MPCVaultEventData'
          Chains: '#/components/schemas/ChainsEventData'
          Tokens: '#/components/schemas/TokensEventData'
          TokenListing: '#/components/schemas/TokenListingEventData'
          BalanceUpdateInfo: '#/components/schemas/BalanceUpdateInfoEventData'
          PaymentOrder: '#/components/schemas/PaymentOrderEventData'
          PaymentRefund: '#/components/schemas/PaymentRefundEventData'
          PaymentSettlement: '#/components/schemas/PaymentSettlementEvent'
        propertyName: data_type
      oneOf:
      - $ref: '#/components/schemas/TransactionWebhookEventData'
      - $ref: '#/components/schemas/TSSRequestWebhookEventData'
      - $ref: '#/components/schemas/AddressesEventData'
      - $ref: '#/components/schemas/WalletInfoEventData'
      - $ref: '#/components/schemas/MPCVaultEventData'
      - $ref: '#/components/schemas/ChainsEventData'
      - $ref: '#/components/schemas/TokensEventData'
      - $ref: '#/components/schemas/TokenListingEventData'
      - $ref: '#/components/schemas/BalanceUpdateInfoEventData'
      - $ref: '#/components/schemas/PaymentOrderEventData'
      - $ref: '#/components/schemas/PaymentRefundEventData'
      - $ref: '#/components/schemas/PaymentSettlementEvent'
    TransactionWebhookEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/Transaction'
      example:
        is_loop: false
        chain_id: ETH
        confirmed_num: 12
        fee:
          effective_gas_price: "100000000"
          max_priority_fee_per_gas: "1000000000000"
          gas_limit: "21000"
          token_id: ETH
          estimated_fee_used: "0.1"
          gas_used: "100000000"
          max_fee_per_gas: "9000000000000"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          utxo_outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: withdrawal to exchange trading account
        block_info:
          block_timestamp: 1717740319
          block_number: 123
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        asset_id: USDT
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: DepositFromAddress
        confirming_threshold: 15
        type: Deposit
        result:
          result_type: Signature
          signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        extra:
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        - |
          {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        sub_status: PendingDoubleCheck
        cobo_id: "20231213122855000000000000000000"
        created_timestamp: 1610445878970
        initiator_type: API
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        data_type: Transaction
        cobo_category:
        - AutoFueling
        - AutoFueling
        category:
        - Payment
        - Payment
        request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
        raw_tx_info:
          utxo_change:
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            value: "0.5"
          selected_utxos:
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
            address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
            vout_n: 0
            tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
            value: "0.5"
          raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          used_nonce: 9
          unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_type: Resend
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
        fueling_info:
          transaction_id: b0530b27-104f-4338-87de-de01500326ea
          request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
      title: Transaction
    TSSRequestWebhookEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/TSSRequest'
      title: TSSRequest
    AddressesEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - properties:
          addresses:
            description: A list of addresses.
            items:
              $ref: '#/components/schemas/AddressesEventData_allOf_addresses'
            type: array
        type: object
      title: Addresses
    WalletInfoEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - properties:
          wallet:
            $ref: '#/components/schemas/WalletInfo'
        type: object
      title: WalletInfo
    MPCVaultEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/MPCVault'
      title: MPCVault
    ChainsEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - properties:
          chains:
            description: The enabled chains.
            items:
              $ref: '#/components/schemas/ChainInfo'
            type: array
          wallet_type:
            $ref: '#/components/schemas/WalletType'
          wallet_subtypes:
            items:
              $ref: '#/components/schemas/WalletSubtype'
            type: array
        required:
        - chains
        type: object
      title: Chains
    TokensEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - properties:
          tokens:
            description: The enabled tokens.
            items:
              $ref: '#/components/schemas/TokenInfo'
            type: array
          wallet_type:
            $ref: '#/components/schemas/WalletType'
          wallet_subtypes:
            items:
              $ref: '#/components/schemas/WalletSubtype'
            type: array
        required:
        - tokens
        type: object
      title: Tokens
    TokenListing:
      description: Detailed information about a token listing request.
      example:
        feedback: Token has been added to the system
        wallet_subtype: Asset
        chain_id: ETH
        updated_timestamp: 1625184000000
        wallet_type: Custodial
        created_timestamp: 1625097600000
        source: API
        contract_address: 0x6B175474E89094C44Da98b954EedeAC495271d0F
        request_id: 123e4567e89b12d3a456426614174000
        token:
          icon_url: https://d.cobo.com/public/logos/USDT.png
          asset_model_type: Account
          symbol: USDT
          chain_id: ETH
          custodial_minimum_deposit_threshold: "0.0001"
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          dust_threshold: "0.00000546"
          fee_token_id: ETH
          can_deposit: true
          token_id: ETH_USDT
          name: Tether USDT
          can_withdraw: true
          decimal: 18
        status: Submitted
      properties:
        request_id:
          description: The unique identifier of the token listing request.
          example: 123e4567e89b12d3a456426614174000
          type: string
        chain_id:
          description: The ID of the blockchain where the token is deployed.
          example: ETH
          type: string
        contract_address:
          description: The token's contract address on the specified blockchain.
          example: 0x6B175474E89094C44Da98b954EedeAC495271d0F
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        token:
          $ref: '#/components/schemas/TokenInfo'
        status:
          $ref: '#/components/schemas/TokenListingRequestStatus'
        source:
          $ref: '#/components/schemas/TokenListingRequestSource'
        feedback:
          description: The feedback provided by Cobo when a token listing request
            is rejected.
          example: Token has been added to the system
          type: string
        created_timestamp:
          description: "The time when the request was created in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1625097600000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the request was last updated in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1625184000000
          format: int64
          type: integer
      required:
      - chain_id
      - contract_address
      - created_at
      - request_id
      - status
      - updated_at
      - wallet_subtype
      - wallet_type
      type: object
    TokenListingEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/TokenListing'
      title: Token Listing Event Data
    BalanceUpdateInfoEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/BalanceUpdateInfo'
      title: BalanceUpdateInfo
    PaymentOrderEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/Order'
      title: Payment order Event Data
    PaymentRefundEventData:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/Refund'
      title: Payment refund Event Data
    PaymentSettlementEvent:
      allOf:
      - $ref: '#/components/schemas/WebhookEventDataType'
      - $ref: '#/components/schemas/Settlement'
      title: Payment refund Event Data
    WebhookEventType:
      description: "The event type. To learn the trigger condition of each event type,\
        \ refer to [Webhook event types and event data](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/webhook-event-type)."
      enum:
      - wallets.transaction.created
      - wallets.transaction.updated
      - wallets.transaction.failed
      - wallets.transaction.succeeded
      - wallets.mpc.tss_request.created
      - wallets.mpc.tss_request.updated
      - wallets.mpc.tss_request.failed
      - wallets.mpc.tss_request.succeeded
      - wallets.addresses.created
      - wallets.created
      - wallets.token_listing.failed
      - wallets.token_listing.succeeded
      - mpc_vaults.created
      - fee_station.transaction.created
      - fee_station.transaction.updated
      - fee_station.transaction.failed
      - fee_station.transaction.succeeded
      - wallet.token.enabled
      - wallet.chain.enabled
      - wallet.mpc.balance.updated
      - wallet.web3.balance.updated
      - payment.transaction.created
      - payment.transaction.late
      - payment.transaction.completed
      - payment.transaction.held
      - payment.status.updated
      - payment.refund.status.updated
      - payment.settlement.status.updated
      example: wallets.transaction.created
      type: string
    WebhookEventStatus:
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
      enum:
      - Success
      - Retrying
      - Failed
      example: Success
      type: string
    WebhookEventLog:
      description: The webhook event log.
      example:
        request_body:
          next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              estimated_fee_used: "0.1"
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Signature
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            extra:
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            cobo_category:
            - AutoFueling
            - AutoFueling
            category:
            - Payment
            - Payment
            request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
            raw_tx_info:
              utxo_change:
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                value: "0.5"
              selected_utxos:
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
              unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
            fueling_info:
              transaction_id: b0530b27-104f-4338-87de-de01500326ea
              request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        success: true
        request_headers: "{\"Content-Type\": \"application/json\"}"
        response_body: response_body
        created_timestamp: 1701396866000
        response_time: 100
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        failure_reason: Connect Timeout
        response_status_code: 200
      properties:
        id:
          description: The event log ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        created_timestamp:
          description: |
            The time when the event type was triggered, in Unix timestamp format (milliseconds).
            - The value remains unchanged across retries.
            - The default webhook timeout is 2 seconds.
          example: 1701396866000
          format: int64
          type: integer
        request_headers:
          description: The request headers of the webhook event.
          example: "{\"Content-Type\": \"application/json\"}"
          type: object
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          description: The response body of the webhook event.
          type: string
        response_status_code:
          description: The response status code of the webhook event.
          example: 200
          type: integer
        response_time:
          description: "The response time of the webhook event, in milliseconds."
          example: 100
          type: integer
        success:
          description: Whether the webhook event has been successfully delivered.
          example: true
          type: boolean
        failure_reason:
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
          type: string
      required:
      - created_timestamp
      - id
      - request_body
      - request_headers
      - status
      - success
      type: object
    WebhookEndpoint:
      description: The information about a webhook endpoint.
      example:
        subscribed_events:
        - wallets.transaction.created
        - wallets.transaction.created
        endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        description: My webhook endpoint
        created_timestamp: 1701396866000
        url: https://example.com/webhook
        status: STATUS_ACTIVE
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: "The time when the endpoint was registered, in Unix timestamp\
            \ format, measured in seconds."
          example: 1701396866000
          format: int64
          type: integer
        endpoint_id:
          description: The webhook endpoint ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - created_timestamp
      - id
      - status
      - subscribed_events
      - url
      type: object
    WebhookEndpointStatus:
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
      enum:
      - STATUS_ACTIVE
      - STATUS_INACTIVE
      - STATUS_PENDING_ACTIVE
      - STATUS_PENDING_INACTIVE
      - STATUS_PENDING_UPDATE
      - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      type: string
    StakingSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcStakeSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcStakeSource'
    MpcStakeSource:
      allOf:
      - $ref: '#/components/schemas/BaseStakeSource'
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        source_type: Org-Controlled
      title: Stake from MPC Wallets
    BaseStakeSource:
      description: The information about the staking source.
      properties:
        source_type:
          $ref: '#/components/schemas/StakeSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
      required:
      - address
      - source_type
      - wallet_id
      type: object
    StakeSourceType:
      description: |
        The staking source type. Possible values include:
          - `Org-Controlled`: An MPC Wallet (Organization-Controlled Wallet).
      enum:
      - Org-Controlled
      example: Org-Controlled
      type: string
    BaseStakeExtra:
      description: The base information about a staking protocol.
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
      required:
      - pool_type
      type: object
    BabylonStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Babylon protocol.
        properties:
          finality_provider_public_key:
            description: The public key of the finality provider.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            pattern: "^[0-9a-fA-F]{64}$"
            type: string
          stake_block_time:
            description: The number of blocks that need to be processed before the
              locked tokens are unlocked and become accessible.
            example: 2000
            format: int64
            type: integer
          auto_broadcast:
            description: |
              Whether to automatically broadcast the transaction. The default value is `true`.

              - `true`: Automatically broadcast the transaction.
              - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](https://www.cobo.com/developers/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
            example: false
            type: boolean
          babylon_address:
            $ref: '#/components/schemas/StakingSource'
        required:
        - finality_provider_public_key
        - stake_block_time
        type: object
      title: Babylon
    BabylonStakeEstimatedFee:
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        fee_amount:
          description: The amount of the estimated fee.
          example: "0.02"
          type: string
        token_id:
          description: The token ID of the staking fee.
          example: BTC
          type: string
      title: Babylon Staking Fee
      type: object
    CoreStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the CORE staking protocol.
        properties:
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
          change_address:
            description: "The change address on the Bitcoin chain. If not provided,\
              \ the source wallet's address will be used as the change address."
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator's EVM address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The EVM address to receive staking rewards.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
        required:
        - reward_address
        - timelock
        - validator_address
        type: object
      title: CORE
    EthStakeEstimatedFee:
      example:
        validator_pubkeys:
        - 0x1234567890987654321012345678909876543210
        fee:
          is_loop: false
          fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        core_btc_staking_address: bc1qcqj9k34vrvgmmvt85ym2ua79k2d22vcfxmuratakfm78chdqksnq5agezk
        pool_type: Babylon
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee:
          $ref: '#/components/schemas/EstimatedFee'
        validator_pubkeys:
          description: A list of public keys associated with the Ethereum validators
            for this staking operation.
          example:
          - 0x1234567890987654321012345678909876543210
          items:
            type: string
          type: array
        core_btc_staking_address:
          description: The P2WSH address generated for this staking operation (only
            applicable if the estimated fee is for CORE staking).
          example: bc1qcqj9k34vrvgmmvt85ym2ua79k2d22vcfxmuratakfm78chdqksnq5agezk
          type: string
      title: Ethereum Staking Fee
      type: object
    EthStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Ethereum Beacon Chain.
        properties:
          provider_name:
            description: The name of the provider.
            example: Stakefish
            type: string
        required:
        - provider_name
        type: object
      title: Ethereum Beacon Chain
    EthUnstakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: Additional information required for unstaking from the Ethereum
          Beacon Chain.
        properties:
          validator_pubkeys:
            description: A list of public keys identifying the validators to unstake
              from the Ethereum Beacon Chain.
            example:
            - 0x1234567890987654321012345678909876543210
            - 0x1234567890987654321012345678909876543210
            items:
              type: string
            type: array
        required:
        - validator_pubkeys
        type: object
      title: Ethereum Beacon Chain
    BabylonStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Babylon protocol.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Babylon Chain
            type: string
          unlock_timestamp:
            description: "The estimated time when the bitcoins will be unlocked, in\
              \ Unix timestamp format, measured in milliseconds."
            example: 1640995200000
            format: int64
            type: integer
          unlock_block_height:
            description: The block height at which the bitcoins will be unlocked.
            example: 871234
            format: int64
            type: integer
          stake_address:
            description: The address receiving the staked bitcoins.
            example: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            type: string
          unbond_address:
            description: The address receiving the unlocked bitcoins.
            example: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            type: string
        required:
        - pos_chain
        type: object
      example:
        unlock_block_height: 871234
        stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
        unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
        pos_chain: Babylon Chain
        unlock_timestamp: 1640995200000
        pool_type: Babylon
      title: Babylon
    EthStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Ethereum Beacon Chain.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Ethereum
            type: string
          beacon_validators:
            description: The list of validator information.
            items:
              $ref: '#/components/schemas/EthStakingExtra_allOf_beacon_validators'
            type: array
        required:
        - pos_chain
        type: object
      title: Ethereum Beacon Chain
    CoreStakingExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about staking in the CORE staking protocol.
        properties:
          pos_chain:
            description: The Proof-of-Stake (PoS) chain.
            example: Ethereum
            type: string
          staker_address:
            description: The staker's Bitcoin address.
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator's EVM address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The EVM address to receive staking rewards.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
        required:
        - pos_chain
        - reward_address
        - staker_address
        - timelock
        - validator_address
        type: object
      title: CORE
    EigenLayerLstStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of LST on Eigenlayer.
        properties:
          operator:
            description: The operator's address.
            example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            type: string
        required:
        - id
        type: object
    EigenLayerNativeStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of eigen layer native ETH.
        properties:
          fee_recipient:
            description: "The fee recipient address, if not provided the staker address\
              \ will be used."
            example: 30
            format: int32
            type: number
        type: object
    BabylonStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Babylon protocol.
        properties:
          finality_provider_public_key:
            description: The public key of the finality provider.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            pattern: "^[0-9a-fA-F]{64}$"
            type: string
          stake_block_time:
            description: The number of blocks that need to be processed before the
              locked tokens are unlocked and become accessible.
            example: 2000
            format: int64
            type: integer
          auto_broadcast:
            description: |
              Whether to automatically broadcast the transaction.

              - `true`: Automatically broadcast the transaction.
              - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](https://www.cobo.com/developers/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
            example: false
            type: boolean
        type: object
      example:
        finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        stake_block_time: 2000
        auto_broadcast: false
        pool_type: Babylon
      title: Babylon
    EthStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the Ethereum Beacon Chain.
        properties:
          provider_name:
            description: The name of the provider.
            example: Stakefish
            type: string
          validator_pubkeys:
            description: A list of public keys associated with the Ethereum validators
              for this unstaking operation.
            example:
            - 0x1234567890987654321012345678909876543210
            - 0x1234567890987654321012345678909876543210
            items:
              type: string
            type: array
        type: object
      title: Ethereum Beacon Chain
    CoreStakingActivityDetailExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The staking information specific to the CORE staking protocol.
        properties:
          timelock:
            description: The Unix timestamp (in seconds) when the staking position
              will be unlocked and available for withdrawal.
            example: 1704067200
            type: integer
          change_address:
            description: "The change address on the Bitcoin chain. If not provided,\
              \ the source wallet's address will be used as the change address."
            example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            type: string
          validator_address:
            description: The validator's EVM address.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
          reward_address:
            description: The EVM address to receive staking rewards.
            example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            type: string
        type: object
      title: CoreBTC
    Activity:
      description: The staking activity.
      example:
        amount: "100.00"
        address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
        initiator: steve@example.com
        fee:
          max_fee_amount: "0.1"
          token_id: TRON
          fee_type: EVM_EIP_1559
        created_timestamp: 1640995200000
        type: Stake
        pool_id: babylon_btc_signet
        initiator_type: API
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        token_id: BTC
        updated_timestamp: 1640995200000
        extra:
          finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          stake_block_time: 2000
          auto_broadcast: false
          pool_type: Babylon
        request_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        timeline:
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          action: Submitted
          status: success
          timestamp: 1640995200000
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          action: Submitted
          status: success
          timestamp: 1640995200000
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        transaction_ids:
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        status: Success
      properties:
        id:
          description: The activity ID.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        initiator:
          description: The initiator of the activity.
          example: steve@example.com
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          description: The staker's wallet ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker's wallet address.
          example: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          type: string
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          description: The token ID.
          example: BTC
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        request_ids:
          description: The request IDs of the corresponding transactions of the activity.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        amount:
          description: The staking amount.
          example: "100.00"
          type: string
        transaction_ids:
          description: The IDs of the corresponding transactions of the activity.
          items:
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            type: string
          type: array
        timeline:
          description: The timeline of the activity.
          items:
            $ref: '#/components/schemas/ActivityTimeline'
          type: array
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        extra:
          $ref: '#/components/schemas/Activity_extra'
        created_timestamp:
          description: The time when the activity was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_timestamp:
          description: The time when the activity was last updated.
          example: 1640995200000
          format: int64
          type: integer
      required:
      - amount
      - created_at
      - pool_id
      - stake_id
      - status
      - token_id
      - updated_at
      type: object
    ActivityAction:
      description: |
        The specific action taken within an activity. Possible values include:
        - `Submitted`: Submit the staking, unstaking, or withdrawal request.
        - `BTCConfirmation`: The Bitcoin chain confirms the request.
        - `BabylonConfirmation`: The Babylon protocol confirms the request.
        - `DepositETH`: Deposit ETH to the validator to start staking.
        - `ClaimRewards`: Claim the rewards from the validator.
        - `ActivateValidator`: Activate the validator to start staking.
        - `UnstakeETH`: Unstake ETH from the validator.
        - `ApproveUSDC`: Grant permission for the protocol to use your USDC.
        - `ConvertToUSDS`: Convert your USDC to USDS.
        - `ApproveUSDS`: Grant permission for the protocol to use your USDS.
        - `DepositUSDS`: Stake the USDS with the validator.
        - `WithdrawUSDS`: Withdraw the USDS from the protocol.
        - `ConvertToUSDC`: Convert USDS back to USDC.
      enum:
      - Submitted
      - BTCConfirmation
      - BabylonConfirmation
      - DepositETH
      - ClaimRewards
      - ActivateValidator
      - UnstakeETH
      - ApproveUSDC
      - ConvertToUSDS
      - ApproveUSDS
      - DepositUSDS
      - WithdrawUSDS
      - ConvertToUSDC
      example: Submitted
      type: string
    ActivityTimeline:
      description: The timeline of the staking activity.
      example:
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        action: Submitted
        status: success
        timestamp: 1640995200000
      properties:
        action:
          $ref: '#/components/schemas/ActivityAction'
        status:
          description: |
            The status of the action. Possible values include:
              - `Success`: The action is successfully completed.
              - `Processing`: The action is being processed.
              - `Failed`: The action has failed.
          example: success
          type: string
        timestamp:
          description: "The time when the action took place, in Unix timestamp format,\
            \ measured in milliseconds. \n- For the `Submitted` action, `timestamp`\
            \ represents the time the staking, unstaking, or withdrawal request was\
            \ created. \n- For the `BTCConfirmation` action, `timestamp` represents\
            \ the time when the request was confirmed on the Bitcoin chain, or when\
            \ the confirmation failed.\n- For the `BabylonConfirmation` action, `timestamp`\
            \ represents the time when the request was confirmed by the Babylon protocol,\
            \ or when the confirmation failed.\n"
          example: 1640995200000
          format: int64
          type: integer
        transaction_id:
          description: The ID of the corresponding transaction.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          type: string
      required:
      - action
      type: object
    ActivityInitiator:
      properties:
        app_initiator:
          description: "The initiator of the staking activity. If you do not specify\
            \ this property, the WaaS service will automatically designate the API\
            \ key as the initiator."
          example: steve@example.com
          type: string
      type: object
    CreateStakeActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        source:
          $ref: '#/components/schemas/StakingSource'
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        amount:
          description: The amount to stake.
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          $ref: '#/components/schemas/CreateStakeActivity_extra'
      required:
      - address
      - amount
      - fee
      - pool_id
      - wallet_id
      type: object
    CreateWithdrawActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: The amount to withdraw.
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      required:
      - fee
      - staking_id
      type: object
    CreateUnstakeActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: The ID of the corresponding staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: "The amount to unstake. For the Babylon protocol, this property\
            \ is ignored."
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          $ref: '#/components/schemas/CreateUnstakeActivity_extra'
      required:
      - staking_id
      type: object
    CreateClaimActivity:
      properties:
        request_id:
          description: The request ID that is used to track a request. The request
            ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: "The ID of the staking position. You can retrieve a list of\
            \ staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions)."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
      required:
      - staking_id
      type: object
    ActivityStatus:
      description: |
        The status of the staking activity. Possible values include:
        - `Success`: The activity is successfully completed.
        - `Processing`: The activity is being processed.
        - `Failed`: The activity has failed.
      enum:
      - Success
      - Processing
      - Failed
      example: Success
      type: string
    ActivityType:
      description: |
        The type of the staking activity. Possible values include:
        - `Stake`: Stake tokens.
        - `Unstake`: Unstake tokens. Unstaked tokens are still in the staking protocol.
        - `Withdraw`: Withdraw tokens from the staking protocol to your wallet.
        - `Claim`: Claim rewards from the staking protocol.
      enum:
      - Stake
      - Unstake
      - Withdraw
      - Claim
      example: Stake
      type: string
    AmountStatus:
      description: |
        The status of the staking amount. Possible values include:

        - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Active`: The amount has been staked.
        - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
        - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
        - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
        - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
        - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
        - `Closed`: The staking position is closed.
      enum:
      - StakeInProgress
      - Active
      - Rejected
      - LimitExceeded
      - Invalid
      - UnstakeInProgress
      - Withdrawable
      - WithdrawInProgress
      - Closed
      example: Active
      type: string
    AmountDetails:
      description: The details about the staking amount.
      items:
        $ref: '#/components/schemas/AmountDetails_inner'
      type: array
    BabylonValidator:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The information about the Babylon validator.
        properties:
          icon_url:
            description: The URL of the validator's icon.
            example: https://example.com/icon.png
            format: url
            type: string
          name:
            description: The validator's name.
            example: Cobo
            type: string
          priority:
            description: This property can be ignored.
            example: 0
            type: integer
          public_key:
            description: The public key of the validator.
            example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            type: string
          commission_rate:
            description: The commission rate of the validator.
            example: 0.1
            format: float
            type: number
          supported_pos_chains:
            description: A list of supported Proof-of-Stake (PoS) chains.
            example:
            - Babylon
            - Cosmos
            - Ethereum
            items:
              enum:
              - Babylon
              - Cosmos
              - Ethereum
              type: string
            type: array
        required:
        - name
        type: object
      example:
        icon_url: https://example.com/icon.png
        public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        supported_pos_chains:
        - Babylon
        - Cosmos
        - Ethereum
        name: Cobo
        commission_rate: 0.1
        priority: 0
        pool_type: Babylon
    EigenlayerValidator:
      description: The EigenLayer validator info.
      properties:
        icon_url:
          description: The URL of the validator's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        name:
          description: The name of validator.
          example: Cobo
          type: string
        priority:
          description: The priority of validator.
          example: 0
          type: integer
        address:
          description: The address of validator.
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
          type: string
        commission_rate:
          description: The commission of validator.
          example: 0.1
          format: float
          type: number
      required:
      - address
      - icon_url
      - name
      type: object
    PoolDetails:
      allOf:
      - $ref: '#/components/schemas/PoolSummary'
      - description: The detailed information about the staking protocol.
        properties:
          pool_type:
            $ref: '#/components/schemas/StakingPoolType'
          min_amount:
            description: The minimum amount that can be staked in one staking request.
            example: "0.01"
            type: string
          max_amount:
            description: The maximum amount that can be staked in one staking request.
            example: "100.00"
            type: string
          min_stake_period:
            description: "The minimum staking period, in days."
            example: 30
            format: int32
            type: integer
          max_stake_period:
            description: "The maximum staking period, in days."
            example: 1000
            format: int32
            type: integer
          min_stake_blocks:
            description: The minimum block number. A block number indicates the number
              of blocks that need to be processed before the locked tokens are unlocked
              and become accessible.
            example: 100
            format: int64
            type: integer
          max_stake_blocks:
            description: The maximum block number. A block number indicates the number
              of blocks that need to be processed before the locked tokens are unlocked
              and become accessible.
            example: 1000
            format: int64
            type: integer
          validators_info:
            description: A list of available validators.
            items:
              $ref: '#/components/schemas/PoolDetails_allOf_validators_info'
            type: array
        required:
        - validators_info
        type: object
      example:
        validators_info:
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        chain_id: Bitcoin
        min_amount: "0.01"
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
        protocol: Babylon
        min_stake_blocks: 100
        supported_wallet_subtypes:
        - Org-Controlled
        token_id: BTC
        supported_wallet_types:
        - MPC
        max_amount: "100.00"
        max_stake_period: 1000
        id: babylon_btc
        pool_type: Babylon
        max_stake_blocks: 1000
        min_stake_period: 30
    PoolSummary:
      description: The basic information of the staking pool.
      example:
        protocol: Babylon
        supported_wallet_subtypes:
        - Org-Controlled
        chain_id: Bitcoin
        token_id: BTC
        supported_wallet_types:
        - MPC
        id: babylon_btc
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
      properties:
        id:
          description: The ID of the staking pool. A staking pool is a pairing of
            a staking protocol and a specific type of token.
          example: babylon_btc
          type: string
        chain_id:
          description: The chain ID.
          example: Bitcoin
          type: string
        protocol:
          description: The name of the protocol.
          example: Babylon
          type: string
        protocol_icon_url:
          description: The URL of the protocol's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        supported_wallet_types:
          description: |
            The wallet type. Possible values include:

            - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

            - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

            - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

            - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          example:
          - MPC
          items:
            $ref: '#/components/schemas/WalletType'
          type: array
        supported_wallet_subtypes:
          description: |
            The wallet subtype. Possible values include:
            - `Asset`: Custodial Wallets (Asset Wallets).
            - `Web3`: Custodial Wallets (Web3  Wallets).
            - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
            - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
            - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
            - `Main`: Exchange Wallets (Main Account).
            - `Sub`: Exchange Wallets (Sub Account).
          example:
          - Org-Controlled
          items:
            $ref: '#/components/schemas/WalletSubtype'
          type: array
        token_id:
          description: The token ID.
          example: BTC
          type: string
        est_apr:
          description: The estimated annual percentage rate (APR).
          example: 0.05
          format: float
          type: number
      required:
      - chain_id
      - est_apr
      - id
      - protocol
      - protocol_icon_url
      - supported_wallet_subtypes
      - supported_wallet_types
      - token_id
      type: object
    Stakings:
      description: The information about a staking position.
      example:
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
        amounts:
        - amount: "100.00"
          status: Active
        - amount: "100.00"
          status: Active
        token_id: BTC
        updated_timestamp: 1640995200000
        validator_info:
          icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          - Ethereum
          name: Cobo
          commission_rate: 0.1
          priority: 0
          pool_type: Babylon
        extra:
          unlock_block_height: 871234
          stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
          unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
          pos_chain: Babylon Chain
          unlock_timestamp: 1640995200000
          pool_type: Babylon
        created_timestamp: 1640995200000
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        pool_id: babylon_btc_signet
        rewards_info: {}
      properties:
        id:
          description: The ID of the staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        wallet_id:
          description: The staker's wallet ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker's wallet address.
          example: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          type: string
        amounts:
          description: The details about the staking amount.
          items:
            $ref: '#/components/schemas/AmountDetails_inner'
          type: array
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          description: The token ID.
          example: BTC
          type: string
        rewards_info:
          description: The information about the staking rewards.
          example: {}
          type: object
        created_timestamp:
          description: The time when the staking position was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_timestamp:
          description: The time when the staking position was last updated.
          example: 1640995200000
          format: int64
          type: integer
        validator_info:
          $ref: '#/components/schemas/BabylonValidator'
        extra:
          $ref: '#/components/schemas/Stakings_extra'
      required:
      - address
      - amounts
      - created_timestamp
      - id
      - pool_id
      - token_id
      - updated_timestamp
      - validator_info
      - wallet_id
      type: object
    StakingPoolType:
      description: |
        The type of the staking pool. Possible values are:
        - `Babylon`: Babylon staking pool
        - `ETHBeacon`: Ethereum Beacon Chain staking pool
        - `CoreBTC`: Core BTC staking pool
        - `SkyFarm`: SKY farm staking pool
        - `BitHive`: BitHive staking pool
        - `BERABeacon`: BERA Beacon Chain staking pool
        - `BeraChainBGT`: Bera Chain BGT staking pool
      enum:
      - Babylon
      - ETHBeacon
      - CoreBTC
      - SkyFarm
      - BitHive
      - BERABeacon
      - BeraChainBGT
      example: Babylon
      type: string
    StakingPoolId:
      description: "The ID of the staking pool. A staking pool is a pairing of a staking\
        \ protocol and a specific type of token. Currently, `berachain_bgt` and `berachain_bgt_testnet`\
        \ are not supported."
      enum:
      - babylon_btc_signet
      - babylon_btc
      - beacon_eth
      - beacon_eth_holesky
      - core_btc
      - core_xtn
      - sky_farm_eth_usdc
      - bithive_signet
      - bithive
      - beacon_bera
      - beacon_bera_testnet
      - berachain_bgt
      - berachain_bgt_testnet
      example: babylon_btc_signet
      type: string
    BaseEstimateStakingFee:
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
      required:
      - activity_type
      type: object
    EstimateStakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateStakeActivity'
      title: Staking fee
    EstimateUnstakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateUnstakeActivity'
      title: Unstaking fee
    EstimateWithdrawFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateWithdrawActivity'
      title: Withdrawal fee
    EstimateClaimFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - properties:
          staking_id:
            description: "The ID of the staking position. You can retrieve a list\
              \ of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions)."
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          fee:
            $ref: '#/components/schemas/TransactionRequestFee'
        type: object
      title: Claim fee
    BabylonRegistrationStatus:
      description: |
        The status of Babylon airdrop or staking registration. Possible values are:
        - `Registered`: Registered for Babylon airdrop or staking.
        - `Unregistered`: Not registered for any Babylon airdrop or staking.
        - `Registering`: Requesting to register for Babylon airdrop or staking.
      enum:
      - Registered
      - Unregistered
      - Registering
      example: Registered
      type: string
    BabylonRegistrationRequestStatus:
      description: |
        The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
        - `Processing`: The registration request is being processed.
        - `Completed`: The registration has been completed.
        - `Failed`: The registration failed.
      enum:
      - Processing
      - Completed
      - Failed
      example: Processing
      type: string
    BabylonEligibleAirdrop:
      description: The babylon airdrop eligibility.
      example:
        babylon_address: null
        pop:
          btc_address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
          btc_public_key: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
          btc_sign_baby: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
          baby_sign_btc: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
          baby_address: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
          baby_public_key: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
        babylon_points: "1000.50"
        btc_address:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
        airdrop_amount: "500.25"
        status: Registered
      properties:
        btc_address:
          $ref: '#/components/schemas/StakingSource'
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
        babylon_points:
          description: The current Babylon points balance accumulated by the BTC address.
          example: "1000.50"
          type: string
        airdrop_amount:
          description: The estimated airdrop amount based on the current Babylon points
            balance.
          example: "500.25"
          type: string
        status:
          $ref: '#/components/schemas/BabylonRegistrationStatus'
        pop:
          $ref: '#/components/schemas/BabylonAirdropPop'
      type: object
    BabylonAirdropRegistration:
      description: The details of a Babylon airdrop registration.
      example:
        babylon_address: null
        error_message: User rejected
        updated_timestamp: 1677587400000
        btc_address:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
        airdrop_amount: "500.25"
        created_timestamp: 1677587333000
        id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Processing
      properties:
        id:
          description: "The registration ID, a unique identifier for tracking the\
            \ airdrop registration."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        status:
          $ref: '#/components/schemas/BabylonRegistrationRequestStatus'
        btc_address:
          $ref: '#/components/schemas/StakingSource'
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
        airdrop_amount:
          description: The actual airdrop amount allocated for this BTC address.
          example: "500.25"
          type: string
        error_message:
          description: The detailed error message if the registration failed.
          example: User rejected
          type: string
        created_timestamp:
          description: "The time when the registration was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587333000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the registration was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587400000
          format: int64
          type: integer
      type: object
    BabylonStakingRegistration:
      description: The details of aBabylon Phase-2 registration.
      example:
        babylon_address:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
        error_message: User rejected
        updated_timestamp: 1677587400000
        btc_address: null
        staked_amount: "500.25"
        created_timestamp: 1677587333000
        id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        staking_id: 3f2840ce-44eb-450b-aa81-d3f84b772efb
        status: Processing
      properties:
        id:
          description: "The registration ID, a unique identifier for tracking the\
            \ staking registration."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        staking_id:
          description: The ID of the Phase-1 BTC staking position.
          example: 3f2840ce-44eb-450b-aa81-d3f84b772efb
          type: string
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
        btc_address:
          $ref: '#/components/schemas/StakingSource'
        status:
          $ref: '#/components/schemas/BabylonRegistrationRequestStatus'
        staked_amount:
          description: The amount of BTC that is staked.
          example: "500.25"
          type: string
        error_message:
          description: The error message if the Babylon Phase-2 registration request
            failed.
          example: User rejected
          type: string
        created_timestamp:
          description: "The time when the registration was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587333000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the registration was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587400000
          format: int64
          type: integer
      type: object
    BabylonAirdropPop:
      description: Proof of Participation (PoP) details used for airdrop registration.
      example:
        btc_address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
        btc_public_key: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
        btc_sign_baby: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
        baby_sign_btc: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
        baby_address: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
        baby_public_key: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
      properties:
        baby_address:
          description: The Babylon (BABY) address used to receive BABY rewards.
          example: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
          type: string
        btc_address:
          description: The Bitcoin (BTC) address used for staking.
          example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
          type: string
        btc_public_key:
          description: "The public key corresponding to the `btc_address`, represented\
            \ in hex format."
          example: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
          type: string
        btc_sign_baby:
          description: A BTC signature that signs the `baby_address`.
          example: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
          type: string
        baby_sign_btc:
          description: A BABY signature that signs the `btc_address`.
          example: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
          type: string
        baby_public_key:
          description: "The public key corresponding to the `baby_address`, represented\
            \ in base64 format."
          example: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
          type: string
      required:
      - baby_address
      - baby_public_key
      - baby_sign_btc
      - btc_address
      - btc_public_key
      - btc_sign_baby
      type: object
    AddressBook:
      description: The information of an address book entry.
      example:
        wallet_subtype: Asset
        address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_name: Example Wallet
        memo: 9d4773eb
        wallet_type: Custodial
        label: test
        encoding: ENCODING_P2PKH
        entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email: help@cobo.com
        chain_ids:
        - ETH
        - ETH
      properties:
        org_id:
          description: The organization ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        entry_id:
          description: The entry ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          type: string
        memo:
          description: The memo.
          example: 9d4773eb
          type: string
        wallet_name:
          description: The wallet name.
          example: Example Wallet
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        label:
          description: The address label.
          example: test
          type: string
        chain_ids:
          description: A list of chain IDs.
          items:
            example: ETH
            type: string
          type: array
        email:
          description: The email of the address owner.
          example: help@cobo.com
          type: string
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
      required:
      - address
      - entry_id
      - label
      - org_id
      type: object
    TravelRuleDepositExchangesOrVASP:
      description: Required information when depositing from an exchange or other
        virtual asset service providers (VASP).
      example:
        vendor_code: NB
        vendor_vasp_name: Vendor A
        entity_info:
          place_of_incorporation: "City, Country"
          selected_entity_type: LEGAL
          date_of_incorporation: 2010-05-20
          legal_name: Company ABC Ltd.
        vendor_vasp_id: did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5
        destination_wallet_type: EXCHANGES_OR_VASP
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        vendor_code:
          description: The vendor code of the VASP.
          example: NB
          type: string
        vendor_vasp_id:
          description: The unique identifier of the VASP.
          example: did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5
          type: string
        vendor_vasp_name:
          description: The vendor name. Use this field to specify the name of a vendor
            not listed.
          example: Vendor A
          type: string
        entity_info:
          $ref: '#/components/schemas/TravelRuleDepositExchangesOrVASP_entity_info'
      required:
      - destination_wallet_type
      - entity_info
      - vendor_code
      - vendor_vasp_id
      title: VASPs (Deposit)
      type: object
    TravelRuleDepositLegalEntity:
      description: The required information of a legal entity.
      example:
        place_of_incorporation: "City, Country"
        selected_entity_type: LEGAL
        date_of_incorporation: 2010-05-20
        legal_name: Company ABC Ltd.
      properties:
        selected_entity_type:
          description: |
            The entity type. Possible values include:
            - `LEGAL`: Legal entity.
            - `NATURAL`: Natural person.
          enum:
          - LEGAL
          - NATURAL
          example: LEGAL
          type: string
        legal_name:
          description: The legal name of the entity.
          example: Company ABC Ltd.
          type: string
        date_of_incorporation:
          description: |
            The date of incorporation of the entity. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `LEGAL`.
          example: 2010-05-20
          format: date
          type: string
        place_of_incorporation:
          description: |
            The place of incorporation of the entity. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `LEGAL`.
          example: "City, Country"
          type: string
      required:
      - legal_name
      - selected_entity_type
      title: Legal Entity (Deposit)
      type: object
    TravelRuleDepositNaturalEntity:
      description: The required information of a natural person.
      properties:
        selected_entity_type:
          description: |
            Specifies the type of entity associated with the transaction.
            - `LEGAL`: Legal entity.
            - `NATURAL`: Natural person.
          enum:
          - LEGAL
          - NATURAL
          example: NATURAL
          type: string
        first_name:
          description: The first name of the natural person.
          example: John
          type: string
        last_name:
          description: The last name of the natural person.
          example: Doe
          type: string
        date_of_birth:
          description: |
            The date of birth of the natural person. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `NATURAL`.
          example: 1980-01-01
          format: date
          type: string
        place_of_birth:
          description: |
            The place of birth of the natural person. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `NATURAL`.
          example: "City, Country"
          type: string
      required:
      - first_name
      - last_name
      - selected_entity_type
      title: Natural Person (Deposit)
      type: object
    TravelRuleDepositRequest:
      example:
        transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        travel_rule_info:
          vendor_code: NB
          vendor_vasp_name: Vendor A
          entity_info:
            place_of_incorporation: "City, Country"
            selected_entity_type: LEGAL
            date_of_incorporation: 2010-05-20
            legal_name: Company ABC Ltd.
          vendor_vasp_id: did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5
          destination_wallet_type: EXCHANGES_OR_VASP
      properties:
        transaction_id:
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        travel_rule_info:
          $ref: '#/components/schemas/TravelRuleDepositRequest_travel_rule_info'
      required:
      - transaction_id
      - travel_rule_info
      type: object
    SelfCustodyWallet:
      description: Required information when depositing from or withdrawing to a self-custody
        wallet.
      example:
        self_custody_wallet_address: 0x1234567890abcdef1234567890abcdef12345678
        self_custody_wallet_challenge: challenge_token_abc123
        self_custody_wallet_sign: 0xf0a0ca69dd3afc57235c72aba3ff1f1144ee5409aeec013a9b17cdb58d0185a66a525945bfbd66e87bf0503eb0b83bf90cb973a8cbb730d19dc032e00dfe393a1c
        destination_wallet_type: EXCHANGES_OR_VASP
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        self_custody_wallet_challenge:
          description: The message obtained from the `Retrieve transaction limitations`
            operation. This message is used to verify wallet ownership through signing.
          example: challenge_token_abc123
          type: string
        self_custody_wallet_address:
          description: The address of the self-custody wallet.
          example: 0x1234567890abcdef1234567890abcdef12345678
          type: string
        self_custody_wallet_sign:
          description: The signature created by signing the challenge message with
            the wallet's private key.
          example: 0xf0a0ca69dd3afc57235c72aba3ff1f1144ee5409aeec013a9b17cdb58d0185a66a525945bfbd66e87bf0503eb0b83bf90cb973a8cbb730d19dc032e00dfe393a1c
          type: string
      required:
      - destination_wallet_type
      - self_custody_wallet_address
      - self_custody_wallet_challenge
      - self_custody_wallet_sign
      title: Self-Custody Wallet
      type: object
    DestinationWalletType:
      description: |
        The wallet type. Possible values include:
          - `EXCHANGES_OR_VASP`: Exchanges or other virtual asset service providers (VASP)
          - `SELF_CUSTODY_WALLET`: Self-custody wallets
      enum:
      - EXCHANGES_OR_VASP
      - SELF_CUSTODY_WALLET
      example: EXCHANGES_OR_VASP
      type: string
    SelectedEntityType:
      description: |
        Specifies the entity type. This must be `LEGAL`.
          - `LEGAL`: Legal entity.
          - `NATURAL`: Natural person.
      enum:
      - LEGAL
      - NATURAL
      example: LEGAL
      type: string
    Vasp:
      description: The information of a virtual asset service provider (VASP).
      example:
        vendor_code: NB
        name: ManyAges
        vendor_vasp_id: did:ethr:0x34414c8d5c8ed6f242aa6558ecb500283bab10f4
      properties:
        name:
          description: The VASP name.
          example: ManyAges
          format: name
          type: string
        vendor_code:
          description: The vendor code of the VASP.
          example: NB
          type: string
        vendor_vasp_id:
          description: The VASP ID.
          example: did:ethr:0x34414c8d5c8ed6f242aa6558ecb500283bab10f4
          type: string
      required:
      - name
      - vendor_code
      - vendor_vasp_id
      type: object
    TravelRuleWithdrawExchangesOrVASP:
      description: Required information when withdrawing tokens to an exchange or
        other virtual asset service providers (VASP).
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        vendor_code:
          description: The vendor code of the exchange or virtual asset service provider
            (VASP).
          example: NB
          type: string
        vendor_vasp_id:
          description: The unique identifier of the VASP.
          example: did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5
          type: string
        entity_info:
          $ref: '#/components/schemas/TravelRuleWithdrawExchangesOrVASP_entity_info'
      required:
      - destination_wallet_type
      - entity_info
      - vendor_code
      - vendor_vasp_id
      title: VASPs (Withdrawal)
      type: object
    TravelRuleWithdrawLegalEntity:
      description: The required information of a legal entity.
      properties:
        selected_entity_type:
          $ref: '#/components/schemas/SelectedEntityType'
        legal_name:
          description: The legal name of the entity.
          example: Company ABC Ltd.
          type: string
        date_of_incorporation:
          description: The date of incorporation of the entity.
          example: 2010-05-20
          format: date
          type: string
        place_of_incorporation:
          description: The place of incorporation of the entity.
          example: "City, Country"
          type: string
      required:
      - legal_name
      - selected_entity_type
      title: Legal Entity (Withdrawal)
      type: object
    TravelRuleWithdrawNaturalEntity:
      description: The required information of a natural person.
      properties:
        selected_entity_type:
          $ref: '#/components/schemas/SelectedEntityType'
        first_name:
          description: The first name of the natural person.
          example: John
          type: string
        last_name:
          description: The last name of the natural person.
          example: Doe
          type: string
        date_of_birth:
          description: The date of birth of the natural person.
          example: 1980-01-01
          format: date
          type: string
        place_of_birth:
          description: The place of birth of the natural person.
          example: "City, Country"
          type: string
      required:
      - first_name
      - last_name
      - selected_entity_type
      title: Natural Person (Withdrawal)
      type: object
    TravelRuleWithdrawRequest:
      example:
        transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        travel_rule_info:
          self_custody_wallet_address: 0x1234567890abcdef1234567890abcdef12345678
          self_custody_wallet_challenge: challenge_token_abc123
          self_custody_wallet_sign: 0xf0a0ca69dd3afc57235c72aba3ff1f1144ee5409aeec013a9b17cdb58d0185a66a525945bfbd66e87bf0503eb0b83bf90cb973a8cbb730d19dc032e00dfe393a1c
          destination_wallet_type: EXCHANGES_OR_VASP
      properties:
        transaction_id:
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        travel_rule_info:
          $ref: '#/components/schemas/TravelRuleWithdrawRequest_travel_rule_info'
      required:
      - transaction_id
      - travel_rule_info
      type: object
    ApiLogSummary:
      description: The information about an API log.
      properties:
        log_id:
          description: "A unique identifier for the API log, used for tracking."
          example: 924c461fae1047c3befabb50fe1633f9
          type: string
        api_method:
          description: The HTTP method used for the API request.
          example: GET
          type: string
        api_endpoint:
          description: The endpoint of the API request.
          example: /v2/wallets/asset
          type: string
        request_timestamp:
          description: "The time when the API request was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        status_code:
          description: The HTTP status code returned by the API request.
          example: 200
          type: integer
      required:
      - api_endpoint
      - api_method
      - api_request_uuid
      - request_timestamp
      - status_code
      type: object
    ApiLogDetails:
      description: The information about an API log.
      properties:
        log_id:
          description: "A unique identifier for the API log, used for tracking."
          example: 924c461fae1047c3befabb50fe1633f9
          type: string
        api_method:
          description: The HTTP method used for the API request.
          example: GET
          type: string
        api_endpoint:
          description: The endpoint of the API request.
          example: /v2/wallets/asset
          type: string
        status_code:
          description: The HTTP status code returned by the API request.
          example: 200
          type: integer
        ip_address:
          description: The client's IP address that made the API request.
          example: 127.0.0.1
          type: string
        request_timestamp:
          description: "The time when the API request was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        api_key:
          description: "The API key used to call the API. For more details, refer\
            \ to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key)."
          example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
          type: string
        response_body:
          description: The response body of the API request.
          example: "{\"success\":true}"
          type: string
        query_params:
          description: The query parameters of the API request.
          example: "{\"asset\":\"eth\",\"amount\":100}"
          type: string
        request_body:
          description: The request body of the API request.
          example: "{\"asset\":\"eth\",\"amount\":100}"
          type: string
      required:
      - api_endpoint
      - api_key
      - api_method
      - ip_address
      - log_id
      - query_params
      - request_body
      - request_timestamp
      - response_body
      - status_code
      type: object
    RoleScopes:
      example:
        role_name: API_Spender
        scopes:
          wallet_subtypes:
          - Asset
          - Asset
          wallet_types:
          - Custodial
          - Custodial
          wallet_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          vault_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          project_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        role_name:
          description: The user role associated with this API key.
          example: API_Spender
          type: string
        scopes:
          $ref: '#/components/schemas/Scopes'
      required:
      - role_name
      - scopes
      type: object
    Scopes:
      description: The wallet scopes associated with this API key.
      example:
        wallet_subtypes:
        - Asset
        - Asset
        wallet_types:
        - Custodial
        - Custodial
        wallet_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        vault_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        project_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        wallet_types:
          description: |
            The list of wallet types that this API key can access. Possible values include:
              - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)
              - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)
              - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)
              - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          items:
            $ref: '#/components/schemas/WalletType'
          type: array
        wallet_subtypes:
          description: |
            The list of wallet sub-types that this API key can access. Possible values include:
              - `Asset`: Custodial Wallets (Asset Wallets).
              - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
              - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
              - `Safe{Wallet}`: Smart Contract Wallets (Safe).
              - `Main`: Exchange Wallets (Main Account).
              - `Sub`: Exchange Wallets (Sub Account).
          items:
            $ref: '#/components/schemas/WalletSubtype'
          type: array
        wallet_ids:
          description: The list of wallet IDs that this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        vault_ids:
          description: (Applicable to MPC Wallets only) The list of vault IDs that
            this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        project_ids:
          description: (Applicable to MPC Wallets only) The list of project IDs that
            this API key can access.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
      type: object
    CallbackMessage:
      description: The information about a callback message.
      example:
        transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        result: ok
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        data:
          is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            estimated_fee_used: "0.1"
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Signature
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          extra:
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          cobo_category:
          - AutoFueling
          - AutoFueling
          category:
          - Payment
          - Payment
          request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
          raw_tx_info:
            utxo_change:
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              value: "0.5"
            selected_utxos:
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
            unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
          fueling_info:
            transaction_id: b0530b27-104f-4338-87de-de01500326ea
            request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
        updated_timestamp: 1640918000000
        created_timestamp: 1640918000000
        id: 00000000-0000-0000-0000-000000000000
        request_id: "1734602498819"
        url: https://example.com/withdraw_callback
        status: Approved
      properties:
        id:
          description: The callback message ID.
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        created_timestamp:
          description: "The time when the callback message was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the callback message was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1640918000000
          format: int64
          type: integer
        request_id:
          description: The request ID of the transaction.
          example: "1734602498819"
          type: string
        transaction_id:
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        url:
          description: The callback endpoint URL.
          example: https://example.com/withdraw_callback
          type: string
        data:
          $ref: '#/components/schemas/Transaction'
        status:
          description: |
            The callback message status. Possible values include `Denied`, `Approved`, and `Failed`.
          enum:
          - Denied
          - Approved
          - Failed
          example: Approved
          type: string
        result:
          description: |
            The callback message result. Possible values include `ok` and `deny`.
          enum:
          - ok
          - deny
          example: ok
          type: string
      required:
      - created_timestamp
      - data
      - id
      - request_id
      - status
      - transaction_id
      - updated_timestamp
      - url
      type: object
    SwapActivity:
      properties:
        activity_id:
          description: The unique identifier of the swap activity.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        swap_type:
          $ref: '#/components/schemas/SwapType'
        status:
          $ref: '#/components/schemas/SwapActivityStatus'
        request_id:
          description: The request id of the swap activity.
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        wallet_id:
          description: The unique identifier of the wallet.
          example: 123e4567-e89b-12d3-a456-426614174001
          format: uuid
          type: string
        pay_token_id:
          description: The token ID to pay.
          example: BTC
          type: string
        receive_token_id:
          description: The token ID to receive.
          example: ETH_WBTC
          type: string
        pay_amount:
          description: The amount of tokens to bridge.
          example: "100"
          type: string
        receive_amount:
          description: The amount of tokens to receive.
          example: "100"
          type: string
        fee_token_id:
          description: The fee token ID.
          example: BTC
          type: string
        fee_amount:
          description: The amount of fee.
          example: "0.3"
          type: string
        initiator:
          description: The initiator of the swap activity.
          example: John Doe
          nullable: true
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        description:
          description: The description of the swap activity.
          example: This is a description of the swap activity.
          type: string
        created_timestamp:
          description: "The time when the swap activity was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1677587333000
          type: integer
        updated_timestamp:
          description: "The time when the swap activity was last updated, in Unix\
            \ timestamp format, measured in milliseconds."
          example: 1677587393000
          type: integer
      type: object
    SwapActivityDetail:
      allOf:
      - $ref: '#/components/schemas/SwapActivity'
      - properties:
          timeline:
            items:
              $ref: '#/components/schemas/SwapActivityTimeline'
            type: array
          approvers:
            items:
              $ref: '#/components/schemas/SwapActivityApprovers'
            type: array
          signers:
            items:
              $ref: '#/components/schemas/SwapActivitySigners'
            type: array
        type: object
    SwapToken:
      properties:
        token_id:
          description: The token id.
          example: ETH_USDT
          type: string
        chain_id:
          description: The chain id.
          example: ETH
          type: string
        asset_id:
          description: The asset id.
          example: ETH
          type: string
        token_address:
          description: The token address.
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
        min_amount:
          description: The minimum amount.
          example: "1000"
          type: string
        max_amount:
          description: The maximum amount.
          example: "100000"
          type: string
      required:
      - asset_id
      - chain_id
      - token_id
      type: object
    SwapQuote:
      properties:
        quote_id:
          description: The unique id of quote.
          example: 2ec094034044ffa50f4294d48363fef31eb5755fc783ba3837a03c91b4904659
          type: string
        pay_token_id:
          description: The token ID to pay.
          example: BTC
          type: string
        pay_amount:
          description: The amount of tokens to pay.
          example: "100"
          type: string
        receive_token_id:
          description: The token ID to receive.
          example: ETH_WBTC
          type: string
        receive_amount:
          description: The amount of tokens to receive.
          example: "100"
          type: string
        fee_token_id:
          description: The token ID for the service fee.
          example: BTC
          type: string
        fee_amount:
          description: The amount of tokens for the service fee.
          example: "0.3"
          type: string
        estimated_network_fee_amount:
          description: The estimated amount of tokens for the network fee.
          example: "0.3"
          type: string
        min_receive_amount:
          description: The minimum amount of tokens to receive if the pay amount is
            specified.
          example: "0"
          type: string
        max_pay_amount:
          description: The maximum amount of tokens to pay if the receive amount is
            specified.
          example: "10000"
          type: string
        quote_expired_timestamp:
          description: "The time when the quote will expire, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1677587393000
          type: integer
      required:
      - fee_amount
      - fee_token_id
      - pay_amount
      - pay_token_id
      - quote_expired_timestamp
      - quote_id
      - receive_amount
      - receive_token_id
      type: object
    SwapType:
      description: |
        The type of the swap activity. Possible values include:
        - `Bridge`: The activity is a bridge activity.
        - `Exchange`: The activity is an exchange activity.
      enum:
      - Bridge
      - Exchange
      example: Bridge
      type: string
    SwapActivityStatus:
      description: |
        The status of the swap activity. Possible values include:
        - `Success`: The activity is successfully completed.
        - `Processing`: The activity is being processed.
        - `Failed`: The activity has failed.
      enum:
      - Success
      - Processing
      - Failed
      example: Success
      type: string
    SwapActivityTimeline:
      description: The timeline of the swap activity.
      properties:
        action:
          description: |
            The action of the swap activity. Possible values include:
              - `Submitted`: The swap request is submitted.
              - `Pending Authorization`: The swap request is pending authorization.
              - `Bridge {Token}`: The token is being bridged to the target chain.
              - `Swap {Token}`: The token is being swapped on the target chain.
              - `Cobo Confirmation`: The swap result is waiting for Cobo confirmation.
          example: Submitted
          type: string
        status:
          description: |
            The status of the action. Possible values include:
              - `Success`: The action is successfully completed.
              - `Processing`: The action is being processed.
              - `Failed`: The action has failed.
          example: Success
          type: string
        timestamp:
          description: "The time when the action took place, in Unix timestamp format,\
            \ measured in milliseconds. \n"
          example: 1640995200000
          type: integer
      required:
      - action
      - status
      type: object
    SwapActivityApprovers:
      description: The approvers data for swap activity.
      properties:
        name:
          description: |
            The approver name of the swap activity.
          example: Wenyu.Xiao
          type: string
        status:
          $ref: '#/components/schemas/SwapApproversStatus'
      required:
      - name
      - status
      type: object
    SwapActivitySigners:
      description: The signer data for swap activity.
      properties:
        signer:
          description: The signer name.
          example: Cobo TSS
          type: string
        status:
          $ref: '#/components/schemas/SwapSingingStatus'
        failed_reason:
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
          type: string
      type: object
    SwapApproversStatus:
      description: |
        The status of the approval. Possible values include:
          - `Pending`: Waiting for approval from the approver.
          - `Approved`: The approver has agreed to the approval.
          - `Rejected`: The approver has rejected the approval.
      enum:
      - Pending
      - Approved
      - Rejected
      example: Pending
      type: string
    SwapSingingStatus:
      description: "The transaction signing result. Possible values include: \n  -\
        \ `Pending`: Waiting for signing from the signer.\n  - `Approved`: The signer\
        \ has signed to the signing request.\n  - `Timeout`: The signing request has\
        \ expired due to no response from the signer.\n  - `Rejected`: The signer\
        \ has rejected the signing request.\n"
      enum:
      - Pending
      - Signed
      - Timeout
      - Rejected
      example: Pending
      type: string
    GraphQLRequest:
      description: The request body for a GraphQL query or mutation.
      properties:
        query:
          description: The GraphQL query or mutation as a string.
          example: |
            query {
              wallets {
                edges {
                  node {
                    id
                    name
                  }
                }
              }
            }
          type: string
        variables:
          additionalProperties: true
          description: Variables to use in the GraphQL operation. Can include dynamic
            values required for the query or mutation.
          type: object
        operationName:
          description: The operation name in case of multiple operations in the same
            query or mutation.
          example: getWallets
          type: string
      required:
      - query
      type: object
    GraphQLResponse:
      properties:
        data:
          additionalProperties: true
          description: The response data for the GraphQL operation.
          example:
            wallets:
              pageInfo:
                startCursor: ""
                endCursor: 3NemrECAgDytGhxYaX5LTUxyJ
              edges:
              - node:
                  name: Test Wallet
          type: object
        errors:
          description: Any errors that occurred during the GraphQL operation.
          example:
          - message: Field 'wallets' not found on type 'Query'.
            locations:
            - line: 2
              column: 5
            path:
            - wallets
          items:
            $ref: '#/components/schemas/GraphQLError'
          type: array
      type: object
    GraphQLError:
      description: Details of an error in the GraphQL operation.
      example:
        message: Field 'wallets' not found on type 'Query'.
        locations:
        - line: 2
          column: 5
        path:
        - wallets
      properties:
        message:
          description: The error message.
          type: string
        locations:
          description: The locations in the query where the error occurred.
          items:
            $ref: '#/components/schemas/GraphQLError_locations_inner'
          type: array
        path:
          description: The path in the response where the error occurred.
          items:
            type: string
          type: array
      type: object
    GuardPubkeyStatus:
      description: "The status of a Cobo Guard public key binding. Possible values\
        \ include: \n  - `New`: The binding is created.\n  - `ChangeNew`: A new binding\
        \ is created \n  - `WaitSelfConfirm`: The binding is waiting for user confirmation\
        \ on the old Cobo Guard.\n  - `WaitConfirm`: The binding is waiting for admin\
        \ confirmation.\n  - `WaitActive`: The binding is waiting to become active.\n\
        \  - `Active`: The binding has come into effect.\n  - `Freeze`: The binding\
        \ is frozen.\n  - `Invalid`: The binding is invalid.\n"
      enum:
      - New
      - ChangeNew
      - WaitSelfConfirm
      - WaitConfirm
      - WaitActive
      - Active
      - Freeze
      - Invalid
      example: New
      type: string
    ApprovalStatementStatus:
      description: "The status of the approval statement. Possible values include:\
        \ \n  - `UnSend`: The request has been created but not yet sent to the broker\
        \ user.\n  - `Wait`: The request is sent to broker user and is pending review\
        \ by the broker user.\n  - `Approve`: The user has approved the request.\n\
        \  - `Reject`: The user has rejected the request.\n  - `Invalid`: The request\
        \ is invalid.\n  - `Timeout`: The request has expired.\n"
      enum:
      - UnSend
      - WaitAudit
      - Approve
      - Reject
      - Invalid
      - Timeout
      example: New
      type: string
    AppWorkflow:
      description: The information of an approval workflow
      example:
        operation_name: Make Batch Payout
        workflow_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        operation_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        current_policies:
        - action:
            action_type: Pending
            content:
              user_ids:
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
              roles:
              - admin
              - admin
              threshold: 15
              type: PART_APPROVAL
          conditions:
          - value_type: INT
            field: amount
            value: "11.23"
            operator: =
          - value_type: INT
            field: amount
            value: "11.23"
            operator: =
        - action:
            action_type: Pending
            content:
              user_ids:
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
              roles:
              - admin
              - admin
              threshold: 15
              type: PART_APPROVAL
          conditions:
          - value_type: INT
            field: amount
            value: "11.23"
            operator: =
          - value_type: INT
            field: amount
            value: "11.23"
            operator: =
      properties:
        workflow_id:
          description: The unique ID distinguishing the approval workflow instance
            among organizations.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        operation_id:
          description: The unique ID of the approval workflow.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        operation_name:
          description: The name of the approval workflow.
          example: Make Batch Payout
          type: string
        current_policies:
          items:
            $ref: '#/components/schemas/AppWorkflowPolicy'
          type: array
      required:
      - current_policies
      - operation_id
      - operation_name
      - workflow_id
      type: object
    ApprovalRequest:
      description: The information of an approval request.
      example:
        initiated_timestamp: 1610445878970
        fields:
        - value_type: INT
          field: amount
          value: "11.23"
        - value_type: INT
          field: amount
          value: "11.23"
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Pending
      properties:
        approval_id:
          description: The system-generated unique ID of the approval request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_id:
          description: An identifier provided by you when requesting the approval.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fields:
          items:
            $ref: '#/components/schemas/AppWorkflowField'
          type: array
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        initiated_timestamp:
          description: "The time when the approval was initiated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - approval_id
      - fields
      - initiated_timestamp
      - request_id
      - status
      type: object
    ApprovalRequestDetail:
      description: The information of an approval request detail.
      example:
        initiator:
          name: John Smith
          created_timestamp: 1610445878970
          email: john.smith@example.com
          status: Pending
        approved_list:
        - approval_users:
          - name: John Smith
            created_timestamp: 1610445878970
            email: john.smith@example.com
            status: Pending
          - name: John Smith
            created_timestamp: 1610445878970
            email: john.smith@example.com
            status: Pending
          created_timestamp: 1610445878970
          status: Pending
        - approval_users:
          - name: John Smith
            created_timestamp: 1610445878970
            email: john.smith@example.com
            status: Pending
          - name: John Smith
            created_timestamp: 1610445878970
            email: john.smith@example.com
            status: Pending
          created_timestamp: 1610445878970
          status: Pending
        approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Pending
        modified_timestamp: 1610445878970
      properties:
        approval_id:
          description: The system-generated unique ID of the approval request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        initiator:
          $ref: '#/components/schemas/ApprovalUser'
        approved_list:
          items:
            $ref: '#/components/schemas/ApprovalEntry'
          type: array
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        modified_timestamp:
          description: "The time when the approval was modified, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - initiator
      - status
      - timestamp
      type: object
    ApprovalEntry:
      description: The information of an approval request.
      example:
        approval_users:
        - name: John Smith
          created_timestamp: 1610445878970
          email: john.smith@example.com
          status: Pending
        - name: John Smith
          created_timestamp: 1610445878970
          email: john.smith@example.com
          status: Pending
        created_timestamp: 1610445878970
        status: Pending
      properties:
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        created_timestamp:
          description: "The time when the approval was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
        approval_users:
          items:
            $ref: '#/components/schemas/ApprovalUser'
          type: array
      required:
      - created_timestamp
      - email
      - status
      type: object
    ApprovalStatus:
      description: "The approval status. Possible values include: \n  - `Pending`:\
        \ The approval is pending.\n  - `Completed`: The approval is completed. \n\
        \  - `Failed`: The approval is rejected.\n  - `Revoked`: The approval is revoked.\
        \ \n"
      enum:
      - Pending
      - Completed
      - Failed
      - Revoked
      example: Pending
      type: string
    ApprovalUser:
      description: The information of the user.
      example:
        name: John Smith
        created_timestamp: 1610445878970
        email: john.smith@example.com
        status: Pending
      properties:
        email:
          description: The user email.
          example: john.smith@example.com
          type: string
        name:
          description: The user name.
          example: John Smith
          type: string
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        created_timestamp:
          description: "The time when the approval was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - created_timestamp
      - email
      - status
      type: object
    AppWorkflowField:
      description: The information of a workflow field.
      example:
        value_type: INT
        field: amount
        value: "11.23"
      properties:
        field:
          description: The workflow field name.
          example: amount
          type: string
        value_type:
          $ref: '#/components/schemas/PolicyFieldValueType'
        value:
          description: The workflow field value.
          example: "11.23"
          type: string
      required:
      - field
      - value
      - value_type
      type: object
    AppWorkflowPolicy:
      description: "The current approval workflow policy, consisting of one or more\
        \ conditions and an associated action. When the conditions are met, the action\
        \ is triggered."
      example:
        action:
          action_type: Pending
          content:
            user_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            roles:
            - admin
            - admin
            threshold: 15
            type: PART_APPROVAL
        conditions:
        - value_type: INT
          field: amount
          value: "11.23"
          operator: =
        - value_type: INT
          field: amount
          value: "11.23"
          operator: =
      properties:
        action:
          $ref: '#/components/schemas/PolicyAction'
        conditions:
          items:
            $ref: '#/components/schemas/PolicyCondition'
          type: array
      required:
      - action
      type: object
    PolicyAction:
      description: The action to be executed when the policy conditions are satisfied.
      example:
        action_type: Pending
        content:
          user_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          roles:
          - admin
          - admin
          threshold: 15
          type: PART_APPROVAL
      properties:
        action_type:
          $ref: '#/components/schemas/PolicyActionType'
        content:
          $ref: '#/components/schemas/PolicyAction_content'
      required:
      - action_type
      type: object
    PolicyActionType:
      description: "The approval action type. Possible values include: \n  - `Reject`:\
        \ The action rejects the request.\n  - `Accept`: The action approves the request.\n\
        \  - `Quorum`: The action requires approval from multiple participants.\n"
      enum:
      - Reject
      - Accept
      - Quorum
      example: Pending
      type: string
    PolicyCondition:
      description: A condition that defines under what circumstances the policy’s
        action should be triggered.
      example:
        value_type: INT
        field: amount
        value: "11.23"
        operator: =
      properties:
        field:
          description: The field name.
          example: amount
          type: string
        value_type:
          $ref: '#/components/schemas/PolicyFieldValueType'
        value:
          description: The field value.
          example: "11.23"
          type: string
        operator:
          $ref: '#/components/schemas/PolicyFieldOperator'
      required:
      - field
      - operator
      - value
      - value_type
      type: object
    PolicyFieldOperator:
      description: "The policy field operator. Possible values include: \n  - `>`:\
        \ Greater than.\n  - `>=`: Greater than or equal.\n  - `<`: Less than.\n \
        \ - `<=`: Less than or equal.\n  - `=`: Equal.\n"
      enum:
      - '>'
      - '>='
      - <
      - <=
      - =
      example: =
      type: string
    PolicyFieldValueType:
      description: "The field value type. Possible values include: \n- `INT`: The\
        \ field value is an integer.\n- `Float2`: The field value is a float with\
        \ two decimal places.\n"
      enum:
      - INT
      - Float2
      example: INT
      type: string
    RequestApproval:
      description: The information about a approval request.
      example:
        guard_template: guard_template
        operation_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fields:
        - value_type: INT
          field: amount
          value: "11.23"
        - value_type: INT
          field: amount
          value: "11.23"
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        initiator_email: johnsmith@example.com
      properties:
        operation_id:
          description: The unique ID of the approval workflow.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_id:
          description: An identifier provided by you to track this request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        initiator_email:
          description: The email of the user who requested the approval.
          example: johnsmith@example.com
          type: string
        fields:
          items:
            $ref: '#/components/schemas/AppWorkflowField'
          type: array
        guard_template:
          description: "The template of a Cobo Guard message. Please connect [help@cobo.com](mailto:help@cobo.com)\
            \ to get the template content."
          type: string
      required:
      - fields
      - guard_template
      - initiator_email
      - operation_id
      - request_id
      type: object
    FeeStationTransactionType:
      description: "The transaction type. Possible values include: \n  - `Deposit`:\
        \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n"
      enum:
      - Deposit
      - Withdrawal
      example: Deposit
      type: string
    FeeStationTransfer:
      description: The information about a Fee Station top-up transaction.
      example:
        token_id: ETH_USDT
        destination:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
      properties:
        token_id:
          description: "The token ID of the transferred token. You can retrieve the\
            \ IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/FeeStationDestination'
      required:
      - token_id
      type: object
    FeeStationDestination:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      type: object
    BankAccount:
      example:
        bank_account_id: 123e4567-e89b-12d3-a456-426614174003
        updated_timestamp: 1744689600
        created_timestamp: 1744689600
        info:
          beneficiary_name: John Doe
          beneficiary_address: "123 Main St, Anytown, USA"
          account_number: "4111111111111111"
          bank_name: ABC Bank
          bank_country: USA
          bank_address: "456 Bank Ave, Cityville, USA"
          swift_or_bic: ABCDEFGH
      properties:
        bank_account_id:
          description: The bank account ID.
          example: 123e4567-e89b-12d3-a456-426614174003
          format: uuid
          type: string
        info:
          additionalProperties: true
          description: JSON-formatted bank account details.
          example:
            beneficiary_name: John Doe
            beneficiary_address: "123 Main St, Anytown, USA"
            account_number: "4111111111111111"
            bank_name: ABC Bank
            bank_country: USA
            bank_address: "456 Bank Ave, Cityville, USA"
            swift_or_bic: ABCDEFGH
          type: object
        created_timestamp:
          description: "The creation time of the bank account, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the bank account, represented as a\
            \ UNIX timestamp in seconds."
          example: 1744689600
          type: integer
      required:
      - bank_account_id
      - info
      type: object
    CreateSettlement:
      properties:
        merchant_id:
          description: The merchant ID. Specify this field when `settlement_type`
            is set to `Merchant`.
          example: M1001
          type: string
        token_id:
          description: "The ID of the cryptocurrency you want to settle. Specify this\
            \ field when `payout_channel` is set to `Crypto`. Supported values: \n\
            - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`,\
            \ `BSC_USDC`\n- USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`,\
            \ `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`\n"
          example: ETH_USDT
          type: string
        currency:
          description: "The fiat currency for settling the cryptocurrency. Currently,\
            \ only `USD` is supported. Specify this field when `payout_channel` is\
            \ set to `OffRamp`."
          example: USD
          type: string
        amount:
          description: |
            The settlement amount.
            - If `payout_channel` is set to `Crypto`, this represents the settlement amount in the specified cryptocurrency.
            - If `payout_channel` is set to `OffRamp`, this represents the settlement amount in the specified fiat currency.
          example: "500.00"
          type: string
        bank_account_id:
          description: |
            The ID of the bank account where the settled funds will be deposited. This field is only applicable when `payout_channel` is set to `OffRamp`.
            Call [List all bank accounts](/v2/api-references/payment/list-all-bank-accounts) to retrieve the IDs of registered bank accounts.
          example: 0123e457-e89b-12d3-a456-426614174004
          format: uuid
          type: string
        crypto_address_id:
          description: |
            The ID of the crypto address used for crypto withdrawal. Specify this field when `payout_channel` is set to `Crypto`.

            Call [List all crypto addresses](/v2/api-references/payments/list-all-crypto-addresses) to retrieve registered crypto addresses.
          example: addr_ethusdt_20250506T123456_ab12cd
          type: string
        order_ids:
          description: "A list of order IDs to be included in this settlement. If\
            \ provided, the settlement request will settle the merchant funds received\
            \ from the specified orders, and the `amount` field will be ignored. \n\
            \nThis field is only applicable when `settlement_type` is set to `Merchant`.\
            \ \n"
          items:
            description: The order ID.
            example: O20250304-M1001-1001
            type: string
          type: array
      type: object
    Merchant:
      example:
        wallet_id: 123e4567-e89b-12d3-a456-426614174001
        updated_timestamp: 1744689600
        name: Merchant-1
        created_timestamp: 1744689600
        merchant_id: "1"
        developer_fee_rate: "0.01"
      properties:
        merchant_id:
          description: The merchant ID.
          example: "1"
          type: string
        name:
          description: The merchant name.
          example: Merchant-1
          type: string
        wallet_id:
          description: The ID of the linked wallet.
          example: 123e4567-e89b-12d3-a456-426614174001
          format: uuid
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to this merchant. Expressed
            as a string in decimal format where "0.1" represents 10%. This fee is
            deducted from the payment amount and only applies to top-up transactions.
          example: "0.01"
          type: string
        created_timestamp:
          description: "The creation time of the merchant, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the merchant, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
      required:
      - merchant_id
      - name
      - wallet_id
      type: object
    Order:
      example:
        settlement_status: Pending
        chain_id: ETH
        exchange_rate: "0.99"
        created_timestamp: 1744689600
        merchant_id: "1001"
        expired_at: 1711324800
        transactions:
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        fee_amount: "2.00"
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        received_token_amount: "103.0305"
        order_amount: "100.00"
        merchant_order_code: M20240201001
        psp_order_code: P20240201001
        currency: USD
        payable_amount: "103.03"
        order_id: "5001"
        receive_address: 0x1234567890abcdef1234567890abcdef12345678
        status: Pending
      properties:
        order_id:
          description: The order ID.
          example: "5001"
          type: string
        merchant_id:
          description: The merchant ID.
          example: "1001"
          type: string
        token_id:
          description: "\nThe ID of the cryptocurrency used for payment. Supported\
            \ tokens: \n- USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`,\
            \ `MATIC_USDC`, `BSC_USDC`\n- USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`,\
            \ `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`\n"
          example: ETH_USDT
          type: string
        chain_id:
          description: "\nThe ID of the blockchain network where the payment transaction\
            \ should be made. Supported chains: \n- USDC: `ETH`, `ARBITRUM`, `SOL`,\
            \ `BASE`, `MATIC`, `BSC`\n- USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`,\
            \ `MATIC`, `BSC`\n"
          example: ETH
          type: string
        payable_amount:
          description: The cryptocurrency amount to be paid for this order.
          example: "103.03"
          type: string
        receive_address:
          description: The recipient wallet address to be used for the payment transaction.
          example: 0x1234567890abcdef1234567890abcdef12345678
          type: string
        currency:
          description: The fiat currency of the order.
          example: USD
          type: string
        order_amount:
          description: "The base amount of the order in fiat currency, excluding the\
            \ developer fee (specified in `fee_amount`)."
          example: "100.00"
          type: string
        fee_amount:
          description: The developer fee for the order in fiat currency. It is added
            to the base amount (`order_amount`) to determine the final charge.
          example: "2.00"
          type: string
        exchange_rate:
          description: "The exchange rate between a currency pair. Expressed as the\
            \ amount of fiat currency per one unit of cryptocurrency. For example,\
            \ if the cryptocurrency is USDT and the fiat currency is USD, a rate of\
            \ \"0.99\" means 1 USDT = 0.99 USD."
          example: "0.99"
          type: string
        expired_at:
          description: "The expiration time of the pay-in order, represented as a\
            \ UNIX timestamp in seconds."
          example: 1711324800
          type: integer
        merchant_order_code:
          description: A unique reference code assigned by the merchant to identify
            this order in their system.
          example: M20240201001
          type: string
        psp_order_code:
          description: A unique reference code assigned by the developer to identify
            this order in their system.
          example: P20240201001
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        received_token_amount:
          description: "The total cryptocurrency amount received for this order. Updates\
            \ until the expiration time. Precision matches the token standard (e.g.,\
            \ 6 decimals for USDT)."
          example: "103.0305"
          type: string
        created_timestamp:
          description: "The creation time of the order, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the order, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744689600
          type: integer
        transactions:
          description: An array of transactions associated with this pay-in order.
            Each transaction represents a separate blockchain operation related to
            the pay-in process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
          type: array
        settlement_status:
          $ref: '#/components/schemas/SettleStatus'
      required:
      - chain_id
      - currency
      - exchange_rate
      - fee_amount
      - order_amount
      - order_id
      - payable_amount
      - psp_order_code
      - receive_address
      - received_token_amount
      - status
      - token_id
      type: object
    OrderStatus:
      description: |
        The current status of the pay-in order:
        - `Pending`: The order has been created and is awaiting payment. No incoming transaction has been detected.
        - `Processing`: An incoming transaction has been detected at the recipient address.
        - `Completed`: The payment has been fully received and is now complete.
        - `Expired`: The order has reached its expiration time without receiving any payment, or the order has been cancelled by the [Update pay-in order](https://www.cobo.com/developers/v2/api-references/payment/update-pay-in-order) operation.
        - `Underpaid`: The order has reached its expiration time. A payment was received but the amount is less than the order's required amount.
      enum:
      - Pending
      - Processing
      - Completed
      - Expired
      - Underpaid
      example: Pending
      type: string
    Refund:
      example:
        amount: "0.0025"
        refund_type: Merchant
        chain_id: ETH
        initiator: b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b85b81dcc15f920e9d
        merchant_fee_amount: "0.0001"
        to_address: 0x9876543210abcdef1234567890abcdef12345678
        created_timestamp: 1744689600
        merchant_id: M1001
        transactions:
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        refund_id: R20250304-M1001-1001
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        merchant_fee_token_id: ETH_USDT
        request_id: 123e4567-e89b-12d3-a456-426614174004
        order_id: O20250304-M1001-1001
        status: Pending
        charge_merchant_fee: false
      properties:
        request_id:
          description: The request ID provided by you when creating the refund request.
          example: 123e4567-e89b-12d3-a456-426614174004
          type: string
        refund_id:
          description: The refund order ID.
          example: R20250304-M1001-1001
          type: string
        order_id:
          description: The ID of the pay-in order corresponding to this refund.
          example: O20250304-M1001-1001
          type: string
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        token_id:
          description: The ID of the cryptocurrency used for refund.
          example: ETH_USDT
          type: string
        chain_id:
          description: The ID of the blockchain network on which the refund transaction
            occurs.
          example: ETH
          type: string
        amount:
          description: The amount in cryptocurrency to be returned for this refund
            order.
          example: "0.0025"
          type: string
        to_address:
          description: The recipient's wallet address where the refund will be sent.
          example: 0x9876543210abcdef1234567890abcdef12345678
          type: string
        status:
          $ref: '#/components/schemas/RefundStatus'
        refund_type:
          $ref: '#/components/schemas/RefundType'
        created_timestamp:
          description: "The creation time of the refund order, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the refund order, represented as a\
            \ UNIX timestamp in seconds."
          example: 1744689600
          type: integer
        initiator:
          description: "\nThe initiator of this settlement request. Can return either\
            \ an API key or the Payment Management App's ID. \n- Format `api_key_<API_KEY>`:\
            \ Indicates the settlement request was initiated via the Payment API using\
            \ the API key.\n- Format `app_<APP_ID>`: Indicates the settlement request\
            \ was initiated through the Payment Management App using the App ID.\n"
          example: b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b85b81dcc15f920e9d
          type: string
        transactions:
          description: An array of transactions associated with this refund order.
            Each transaction represents a separate blockchain operation related to
            the refund process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
          type: array
        charge_merchant_fee:
          description: |
            Whether to charge developer fee to the merchant for the refund.

              - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance

              - `false`: The merchant is not charged any developer fee.
          example: false
          type: boolean
        merchant_fee_amount:
          description: "The developer fee amount to charge the merchant, denominated\
            \ in the cryptocurrency specified by `merchant_fee_token_id`. This is\
            \ only applicable if `charge_merchant_fee` is set to `true`."
          example: "0.0001"
          type: string
        merchant_fee_token_id:
          description: The ID of the cryptocurrency used for the developer fee. This
            is only applicable if `charge_merchant_fee` is set to true.
          example: ETH_USDT
          type: string
      required:
      - amount
      - chain_id
      - refund_id
      - status
      - to_address
      - token_id
      type: object
    RefundStatus:
      description: "The current status of the refund order. For information about\
        \ transaction status, see [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).\
        \ \n- `Pending`: The refund order has been created but the transaction has\
        \ not been initiated.\n- `Processing`: The refund order is currently being\
        \ processed, with at least one refund transaction in progress.\n- `Completed`:\
        \ All refund transactions have been completed successfully.\n- `PartiallyCompleted`:\
        \ Some refund transactions have been completed successfully, while others\
        \ have failed.\n- `Failed`: All refund transactions have failed.\n- `PendingConfirmation`:\
        \ The refund order has been completed but the address to send is pending confirmation.\n"
      enum:
      - Pending
      - Processing
      - Completed
      - PartiallyCompleted
      - Failed
      - PendingConfirmation
      example: Pending
      type: string
    RefundType:
      description: |
        Specifies the source of funds for the refund:
        - `Merchant`: The refund amount will be deducted from the merchant balance.
        - `Psp`: The refund amount will be deducted from the developer balance.
      enum:
      - Merchant
      - Psp
      example: Merchant
      type: string
    SettleRequestStatus:
      description: |
        The current status of the settlement request:
        - `Pending`: The settlement request has been created and is awaiting processing.
        - `Processing`: The settlement request is currently being processed, with at least one settlement in progress.
        - `Completed`: All requested settlements have been completed.
        - `PartiallyCompleted`: Some requested settlements have been completed successfully, while others have failed.
        - `Failed`: All requested settlements have failed.
      enum:
      - Pending
      - Processing
      - Completed
      - PartiallyCompleted
      - Failed
      example: Pending
      type: string
    SettleStatus:
      description: |
        The current status of settlement.
        - `Pending`: The settlement has been created and is awaiting processing.
        - `Processing`: The settlement is being processed.
        - `Completed`: The funds have been successfully deposited into the bank account.
        - `PartiallyCompleted`: Some settlement transactions have been completed successfully, while others have failed.
        - `Failed`: The settlement could not be completed due to an error.
      enum:
      - Pending
      - Processing
      - Completed
      - PartiallyCompleted
      - Failed
      example: Pending
      type: string
    Settlement:
      example:
        settlement_request_id: S20250304-1001
        settlements:
        - amount: "500.00"
          chain_id: ETH
          created_timestamp: 1744689600
          merchant_id: M1001
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          settled_amount: "500.00"
          crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          payout_channel: Crypto
          currency: USD
          acquiring_type: Order
          status: Pending
          bank_account:
            bank_account_id: 123e4567-e89b-12d3-a456-426614174003
            updated_timestamp: 1744689600
            created_timestamp: 1744689600
            info:
              beneficiary_name: John Doe
              beneficiary_address: "123 Main St, Anytown, USA"
              account_number: "4111111111111111"
              bank_name: ABC Bank
              bank_country: USA
              bank_address: "456 Bank Ave, Cityville, USA"
              swift_or_bic: ABCDEFGH
        - amount: "500.00"
          chain_id: ETH
          created_timestamp: 1744689600
          merchant_id: M1001
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          settled_amount: "500.00"
          crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          payout_channel: Crypto
          currency: USD
          acquiring_type: Order
          status: Pending
          bank_account:
            bank_account_id: 123e4567-e89b-12d3-a456-426614174003
            updated_timestamp: 1744689600
            created_timestamp: 1744689600
            info:
              beneficiary_name: John Doe
              beneficiary_address: "123 Main St, Anytown, USA"
              account_number: "4111111111111111"
              bank_name: ABC Bank
              bank_country: USA
              bank_address: "456 Bank Ave, Cityville, USA"
              swift_or_bic: ABCDEFGH
        updated_timestamp: 1744689600
        initiator: api_key_b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b35b81dcc15f520e9d
        created_timestamp: 1744689600
        request_id: SETTLEMENT123
        status: Pending
      properties:
        settlement_request_id:
          description: The settlement request ID generated by Cobo.
          example: S20250304-1001
          type: string
        request_id:
          description: The request ID provided by you when creating the settlement
            request.
          example: SETTLEMENT123
          type: string
        status:
          $ref: '#/components/schemas/SettleRequestStatus'
        settlements:
          items:
            $ref: '#/components/schemas/SettlementDetail'
          type: array
        created_timestamp:
          description: "The creation time of the settlement request, represented as\
            \ a UNIX timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the settlement request, represented\
            \ as a UNIX timestamp in seconds."
          example: 1744689600
          type: integer
        initiator:
          description: "\nThe initiator of this settlement request. Can return either\
            \ an API key or the Payment Management App's ID. \n- Format `api_key_<API_KEY>`:\
            \ Indicates the settlement request was initiated via the Payment API using\
            \ the API key.\n- Format `app_<APP_ID>`: Indicates the settlement request\
            \ was initiated through the Payment Management App using the App ID.\n"
          example: api_key_b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b35b81dcc15f520e9d
          type: string
      required:
      - request_id
      - settlement_request_id
      - settlements
      - status
      type: object
    SettlementDetail:
      example:
        amount: "500.00"
        chain_id: ETH
        created_timestamp: 1744689600
        merchant_id: M1001
        transactions:
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        settled_amount: "500.00"
        crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        payout_channel: Crypto
        currency: USD
        acquiring_type: Order
        status: Pending
        bank_account:
          bank_account_id: 123e4567-e89b-12d3-a456-426614174003
          updated_timestamp: 1744689600
          created_timestamp: 1744689600
          info:
            beneficiary_name: John Doe
            beneficiary_address: "123 Main St, Anytown, USA"
            account_number: "4111111111111111"
            bank_name: ABC Bank
            bank_country: USA
            bank_address: "456 Bank Ave, Cityville, USA"
            swift_or_bic: ABCDEFGH
      properties:
        currency:
          description: The fiat currency for the settlement.
          example: USD
          type: string
        token_id:
          description: The ID of the cryptocurrency settled.
          example: ETH_USDT
          type: string
        chain_id:
          description: The ID of the blockchain network on which the settlement occurred.
          example: ETH
          type: string
        merchant_id:
          description: The ID of the merchant associated with this settlement.
          example: M1001
          type: string
        amount:
          description: |
            The settlement amount.
            - If `payout_channel` is set to `Crypto`, this represents the settlement amount in the specified cryptocurrency.
            - If `payout_channel` is set to `OffRamp`, this represents the settlement amount in the specified fiat currency.
          example: "500.00"
          type: string
        settled_amount:
          description: |
            The settled amount of this settlement detail.

            - If `payout_channel` is set to `Crypto`, this represents the actual settled amount in the specified cryptocurrency.

            - If `payout_channel` is set to `OffRamp`, this represents the actual settled amount in the specified fiat currency.
          example: "500.00"
          type: string
        status:
          $ref: '#/components/schemas/SettleStatus'
        bank_account:
          $ref: '#/components/schemas/BankAccount'
        transactions:
          description: An array of transactions associated with this settlement request.
            Each transaction represents a separate blockchain operation related to
            the settlement process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
          type: array
        created_timestamp:
          description: "The creation time of the settlement, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the settlement, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
        crypto_address_id:
          description: The ID of the crypto address used for crypto withdrawal.
          example: addr_ethusdt_20250429T134512_a8c31f
          type: string
        payout_channel:
          $ref: '#/components/schemas/PayoutChannel'
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
      type: object
    SettlementInfo:
      example:
        settled_amount: "500.00"
        pending_currency_balance: "500.00"
        available_currency_balance: "500.00"
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        created_timestamp: 1744689600
        merchant_id: "123"
        available_amount: "500.00"
        acquiring_type: Order
        pending_amount: "500.00"
      properties:
        merchant_id:
          description: "The merchant ID. For developer balance, this field will be\
            \ empty."
          example: "123"
          type: string
        token_id:
          description: The ID of the cryptocurrency.
          example: ETH_USDT
          type: string
        available_amount:
          description: "The amount available for settlement or refund, in the specified\
            \ cryptocurrency."
          example: "500.00"
          type: string
        available_currency_balance:
          description: "The amount available for settlement or refund, in the specified\
            \ fiat currency."
          example: "500.00"
          type: string
        pending_amount:
          description: "The amount unavailable for settlement or refund, in the specified\
            \ cryptocurrency."
          example: "500.00"
          type: string
        pending_currency_balance:
          description: "The amount unavailable for settlement or refund, in the specified\
            \ fiat currency."
          example: "500.00"
          type: string
        settled_amount:
          description: "The amount already settled, in the specified cryptocurrency."
          example: "500.00"
          type: string
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        created_timestamp:
          description: "The creation time of the settlement, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the settlement, represented as a UNIX\
            \ timestamp in seconds."
          example: 1744689600
          type: integer
      required:
      - available_amount
      - token
      type: object
    SettlementType:
      description: |
        Specifies the source of funds for the settlement:
        - `Merchant`: The settlement amount will be deducted from the merchant balance.
        - `Psp`: The settlement amount will be deducted from the developer balance.
      enum:
      - Merchant
      - Psp
      example: Merchant
      type: string
    PaymentTransaction:
      example:
        amount: "0.15"
        token_id: ETH_USDT
        updated_timestamp: 1610445878970
        tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
        to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
        created_timestamp: 1610445878970
        tx_id: tx_123e4567-e89b-12d3-a456-426614174003
        from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
        status: Submitted
      properties:
        tx_id:
          description: The transaction ID.
          example: tx_123e4567-e89b-12d3-a456-426614174003
          type: string
        tx_hash:
          description: The transaction hash.
          example: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          type: string
        token_id:
          description: The ID of the cryptocurrency.
          example: ETH_USDT
          type: string
        from_address:
          description: The source address of the transaction.
          example: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          type: string
        to_address:
          description: The destination address of the transaction.
          example: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          type: string
        amount:
          description: "The amount of cryptocurrency transferred, as a decimal string."
          example: "0.15"
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        created_timestamp:
          description: "The time when the transaction was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the transaction was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - amount
      - created_timestamp
      - from_address
      - status
      - to_address
      - tx_id
      - updated_timestamp
      type: object
    CryptoAddress:
      example:
        address: 0xabc123456789def0000000000000000000000000
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        address_id: addr_ethusdt_20250429T134512_a8c31f
        created_timestamp: 1744689600
        label: Main Withdrawal Address
      properties:
        token_id:
          description: "The token identifier (e.g., ETH_USDT, TRON_USDT) that this\
            \ address is associated with."
          example: ETH_USDT
          type: string
        address_id:
          description: |
            A unique identifier for this crypto address, automatically generated by Cobo. Use this ID (not the raw blockchain address) when submitting a settlement request.
          example: addr_ethusdt_20250429T134512_a8c31f
          type: string
        address:
          description: |
            The blockchain address in its native format. This is the actual destination address where funds will be sent.
            Note: When submitting a settlement request, use the address ID rather than this raw address.
          example: 0xabc123456789def0000000000000000000000000
          type: string
        label:
          description: A label to help identify the address's purpose.
          example: Main Withdrawal Address
          type: string
        created_timestamp:
          description: "The creation time of the crypto address, represented as a\
            \ UNIX timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the crypto address, represented as\
            \ a UNIX timestamp in seconds."
          example: 1744689600
          type: integer
      required:
      - address
      - address_id
      - token_id
      type: object
    PayoutChannel:
      description: |
        The channel through which settlement funds will be transferred. Available options:
        - `Crypto`: Direct withdrawal to a registered crypto address.
        - `OffRamp`: Settle to a registered bank account.
      enum:
      - Crypto
      - OffRamp
      example: Crypto
      type: string
    AcquiringType:
      description: |
        The payment acquisition type.
        - `Order`: Payers pay by fixed-amount orders. Ideal for specific purchases and one-time transactions.
        - `TopUp`: Account recharge flow where payers deposit funds to their dedicated top-up addresses. Ideal for flexible or usage-based payment models.
      enum:
      - Order
      - TopUp
      example: Order
      type: string
    SupportedToken:
      example:
        symbol: USDT
        token_id: ETH_USDT
        chain_id: ETH
        name: Tether USD
        token_icon_url: https://example.com/icons/usdt.png
        token_address: 0xdac17f958d2ee523a2206206994597c13d831ec7
        decimal: 6
        chain_symbol: ETH
        chain_icon_url: https://example.com/icons/eth.png
      properties:
        token_id:
          description: Unique identifier of the token
          example: ETH_USDT
          type: string
        name:
          description: Full name of the token
          example: Tether USD
          type: string
        symbol:
          description: Symbol representation of the token
          example: USDT
          type: string
        decimal:
          description: Number of decimal places for the token
          example: 6
          type: integer
        token_address:
          description: Contract address of the token (may be null for native coins)
          example: 0xdac17f958d2ee523a2206206994597c13d831ec7
          nullable: true
          type: string
        chain_id:
          description: Identifier of the blockchain where the token exists
          example: ETH
          type: string
        chain_symbol:
          description: Symbol of the underlying blockchain
          example: ETH
          nullable: true
          type: string
        chain_icon_url:
          description: URL to the blockchain's icon image
          example: https://example.com/icons/eth.png
          nullable: true
          type: string
        token_icon_url:
          description: URL to the token's icon image
          example: https://example.com/icons/usdt.png
          nullable: true
          type: string
      required:
      - chain_id
      - chain_symbol
      - decimal
      - name
      - symbol
      - token_address
      - token_id
      type: object
    Account:
      description: "Details of a payment account used for top-up operations, including\
        \ address and balance metadata."
      properties:
        token_id:
          description: The ID of the cryptocurrency that this account is configured
            to handle.
          example: ETH_USDT
          type: string
        address:
          description: The top-up address corresponding to the account.
          example: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          type: string
        merchant_balance:
          description: The amount of merchant funds under this account.
          example: "0.15"
          type: string
        psp_balance:
          description: The amount of developer funds under this account.
          example: "0.15"
          type: string
        created_timestamp:
          description: "The creation time of the account, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
        updated_timestamp:
          description: "The last update time of the account, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1610445878970
          format: int64
          type: integer
      required:
      - address
      - merchant_balance
      - psp_balance
      - token_id
      type: object
    PayerAccount:
      properties:
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        payer_id:
          description: A unique identifier assigned by Cobo to track and identify
            individual payers.
          example: P20250619T0310056d7aa
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to the top-up transactions made
            by the payer. Expressed as a decimal string where "0.1" represents 10%.
          example: "0.01"
          type: string
        created_timestamp:
          description: "The creation time of the payer, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the payer, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744693200
          type: integer
        accounts:
          description: An array of accounts associated with this payer.
          items:
            $ref: '#/components/schemas/Account'
          type: array
      required:
      - developer_fee_rate
      - merchant_id
      - payer_id
      type: object
    TopUpAddress:
      description: The details of a top-up address
      example:
        chain: ETH
        address: 0x1234567890abcdef...
        token_id: ETH_USDT
        updated_timestamp: 1744689600
        custom_payer_id: user_abc_10001
        min_amount: "0.1"
        payer_id: P20250619T0310056d7aa
        created_timestamp: 1744689600
        merchant_id: M1001
        developer_fee_rate: "0.01"
      properties:
        address:
          description: The dedicated top-up address assigned to a specific payer under
            a merchant on a specified chain.
          example: 0x1234567890abcdef...
          type: string
        payer_id:
          description: A unique identifier assigned by Cobo to track and identify
            individual payers.
          example: P20250619T0310056d7aa
          type: string
        custom_payer_id:
          description: A unique identifier assigned by the developer to track and
            identify individual payers in their system.
          example: user_abc_10001
          type: string
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        token_id:
          description: "The token ID, which is a unique identifier that specifies\
            \ both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`."
          example: ETH_USDT
          type: string
        chain:
          description: The chain ID.
          example: ETH
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to top-up transactions made
            to this address. Expressed as a decimal string where "0.1" represents
            10%.
          example: "0.01"
          type: string
        min_amount:
          description: "The minimum top-up amount allowed for this address. Top-ups\
            \ below this threshold will not be credited to merchant funds, but to\
            \ developer funds instead."
          example: "0.1"
          type: string
        created_timestamp:
          description: "The creation time of the top-up address, represented as a\
            \ UNIX timestamp in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the top-up address, represented as\
            \ a UNIX timestamp in seconds."
          example: 1744689600
          type: integer
      required:
      - address
      - custom_payer_id
      - merchant_id
      - min_amount
      - payer_id
      - token_id
      type: object
    UpdateTopUpAddress:
      description: The request body to update top up address.
      properties:
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        token_id:
          description: |
            The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
              - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
              - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
          example: ETH_USDT
          type: string
        custom_payer_id:
          description: |
            Unique customer identifier on the merchant side, used to allocate a dedicated top-up address
          example: payer_0001
          type: string
      required:
      - custom_payer_id
      - merchant_id
      - token_id
      type: object
    TSSKeyGenRequest:
      properties:
        threshold:
          description: The number of key share holders required to approve each operation
            in TSS key share group.
          example: 2
          type: integer
        node_ids:
          items:
            description: The node IDs of the key share holder.
            example: "[\"coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi\",\"coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w\"\
              ]"
            type: string
          type: array
        curve:
          $ref: '#/components/schemas/TSSCurve'
        task_id:
          description: The task ID.
          example: "20231213122855000000000000000000"
          type: string
        biz_task_id:
          description: The business task ID. This field contains the TSS request ID.
          example: "20231213122855000000000000000000"
          type: string
      type: object
    TSSKeyReshareRequest:
      properties:
        old_group_id:
          description: The old TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        root_pub_key:
          description: The The old TSS key share group's root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        curve:
          $ref: '#/components/schemas/TSSCurve'
        used_node_ids:
          items:
            description: The node IDs of used key share holder.
            example: "[\"coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi\",\"coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w\"\
              ]"
            type: string
          type: array
        old_threshold:
          description: The number of key share holders required to approve each operation
            in the old TSS key share group.
          example: 2
          type: integer
        new_threshold:
          description: The number of key share holders required to approve each operation
            in the new TSS key share group.
          example: 2
          type: integer
        new_node_ids:
          items:
            description: The node IDs of new key share holder.
            example: "[\"coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi\",\"coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w\"\
              ]"
            type: string
          type: array
        task_id:
          description: The task ID.
          example: "20231213122855000000000000000000"
          type: string
        biz_task_id:
          description: The business task ID. This field contains the TSS request ID.
          example: "20231213122855000000000000000000"
          type: string
      type: object
    TSSKeySignRequest:
      properties:
        group_id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        root_pub_key:
          description: The The old TSS key share group's root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        used_node_ids:
          items:
            description: The node IDs of the key share holder.
            example: "[\"coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi\",\"coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w\"\
              ]"
            type: string
          type: array
        bip32_path_list:
          items:
            description: The BIP32 derivation paths.
            example: "[\"m/44/0/2/0/0\"]"
            type: string
          type: array
        msg_hash_list:
          items:
            description: The list of message hashes to sign.
            example: "[\"0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF\"\
              ]"
            type: string
          type: array
        tweak_list:
          items:
            description: The list of tweaks to apply.
            example: "[\"0x00\"]"
            type: string
          type: array
        signature_type:
          $ref: '#/components/schemas/TSSSignatureType'
        tss_protocol:
          $ref: '#/components/schemas/TSSProtocol'
        task_id:
          description: The task ID.
          example: "20231213122855000000000000000000"
          type: string
        biz_task_id:
          description: The business task ID. This field contains the transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          type: string
      type: object
    TSSKeyShareSignRequest:
      properties:
        node_id:
          description: The node ID of the key share holder.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        task_id:
          description: The task ID.
          example: "20231213122855000000000000000000"
          type: string
        details:
          items:
            $ref: '#/components/schemas/TSSKeyShareSignDetail'
          type: array
        biz_task_id:
          description: The business task ID. This field contains the key share sign
            request ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          type: string
      type: object
    TSSKeyShareSignDetail:
      properties:
        group_id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        message:
          description: The message to sign by key share.
          type: string
      type: object
    TSSKeyGenExtra:
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        target_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        tss_request:
          $ref: '#/components/schemas/TSSRequest'
      type: object
    TSSKeyReshareExtra:
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        source_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        target_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        tss_request:
          $ref: '#/components/schemas/TSSRequest'
      type: object
    TSSKeySignExtra:
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        wallet:
          $ref: '#/components/schemas/MPCWalletInfo'
        signer_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        source_addresses:
          items:
            $ref: '#/components/schemas/AddressInfo'
          type: array
        transaction:
          $ref: '#/components/schemas/Transaction'
      type: object
    TSSKeyShareSignExtra:
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        wallet:
          $ref: '#/components/schemas/MPCWalletInfo'
        validity_key_share_holder_groups:
          items:
            $ref: '#/components/schemas/KeyShareHolderGroup'
          type: array
      type: object
    TSSGroup:
      properties:
        id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        canonical_group_id:
          description: The canonical group ID.
          type: string
        protocol_group_id:
          description: The protocol group ID.
          type: string
        protocol_type:
          description: The protocol type.
          type: string
        created_timestamp:
          description: "The group creation timestamp, in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/TSSGroupType'
        root_extended_public_key:
          description: The root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        chaincode:
          description: The chaincode.
          type: string
        curve:
          $ref: '#/components/schemas/TSSCurveType'
        threshold:
          description: The threshold.
          type: integer
        participants:
          items:
            $ref: '#/components/schemas/TSSParticipant'
          type: array
      type: object
    TSSGroupType:
      description: |
        The elliptic curve type. Possible values include:

        - 1 : The `ECDSA` group.
        - 2 : The `EdDSA` group.
      enum:
      - 1
      - 2
      example: 1
      type: integer
      x-enum-varnames:
      - ECDSA
      - EdDSA
    TSSCurve:
      description: |
        The elliptic curve type. Possible values include:

        - 0 : The `SECP256K1` elliptic curve.
        - 2 : The `ED25519` elliptic curve.
      enum:
      - 0
      - 2
      example: 0
      type: integer
      x-enum-varnames:
      - SECP256K1
      - ED25519
    TSSCurveType:
      description: |
        The elliptic curve type. Possible values include:

        - `secp256k1` : The `SECP256K1` elliptic curve.
        - `ed25519` : The `ED25519` elliptic curve.
      enum:
      - secp256k1
      - ed25519
      example: secp256k1
      type: string
    TSSParticipant:
      properties:
        node_id:
          description: The node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        share_id:
          description: The share ID.
          example: "619693302942100684578205955442284626185"
          type: string
        share_public_key:
          description: The share public key.
          example: 0x217223cdea6b19af34131447763a269d1dbef580bc85272a5bdfc59fa4940cca
          type: string
      type: object
    TSSRequestTypeEenum:
      description: |2-

        The request type. - `KeyGen`: The key gen request. - `KeyReshare`: The key reshare request. - `KeySign`: The key sign request. - `KeyShareSign`: The key share sign request.
      enum:
      - KeyGen
      - KeyReshare
      - KeySign
      - KeyShareSign
      example: KeyGen
      type: string
    TSSStatus:
      description: |
        The status of the request. Possible values include:

        - 100 : Undefined.
        - 110 : Scheduling.
        - 120 : Initializing.
        - 130 : Approving.
        - 140 : Processing.
        - 160 : Declined.
        - 170 : Failed.
        - 180 : Canceled.
        - 190 : Completed.
      enum:
      - 100
      - 110
      - 120
      - 130
      - 140
      - 160
      - 170
      - 180
      - 190
      example: 190
      type: integer
      x-enum-varnames:
      - UNDEFINED
      - SCHEDULING
      - INITIALIZING
      - APPROVING
      - PROCESSING
      - DECLINED
      - FAILED
      - CANCELED
      - COMPLETED
    TSSKeyShareSignSignature:
      properties:
        group_id:
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        signed_msg:
          description: The hexadecimal encoded signed message.
          example: 0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF
          type: string
        msg_hash:
          description: The message hash.
          example: 0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF
          type: string
        signature:
          description: The signature.
          example: 0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF
          type: string
      type: object
    TSSKeyShareSignSignatures:
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/TSSKeyShareSignSignature'
          type: array
      type: object
    TSSSignatures:
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/TSSSignature'
          type: array
        signature_type:
          $ref: '#/components/schemas/TSSSignatureType'
        tss_protocol:
          $ref: '#/components/schemas/TSSProtocol'
      type: object
    TSSSignature:
      properties:
        bip32_path:
          description: The BIP32 path.
          example: m/44/0/2/0/0
          type: string
        msg_hash:
          description: The message hash.
          example: 0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF
          type: string
        tweak:
          description: The tweak.
          example: 0x00
          type: string
        signature:
          description: The signature.
          example: 0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF
          type: string
        signature_recovery:
          description: The signature recovery.
          example: 0x00
          type: string
      type: object
    TSSSignatureType:
      description: |
        The type of signature. Possible values include:

        - 1 : ECDSA signature
        - 2 : EdDSA signature
        - 3 : Schnorr signature
      enum:
      - 1
      - 2
      - 3
      example: 1
      type: integer
      x-enum-varnames:
      - ECDSA
      - EdDSA
      - Schnorr
    TSSProtocol:
      description: |
        The type of TSS protocol. Possible values include:

        - 1 : GG18
        - 2 : Lindell
        - 3 : EddsaTSS
      enum:
      - 1
      - 2
      - 3
      example: 1
      type: integer
      x-enum-varnames:
      - GG18
      - Lindell
      - EddsaTSS
    TSSEvent:
      description: The TSS Node event payload.
      properties:
        event_id:
          description: The event ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        created_timestamp:
          description: "The time when the event occurred, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        node_id:
          description: The event publisher's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          type: string
        event_type:
          $ref: '#/components/schemas/TSSEventType'
        data:
          $ref: '#/components/schemas/TSSEventData'
      required:
      - event_type
      type: object
    TSSEventType:
      description: The event type.
      enum:
      - ping
      - request.keygen.created
      - request.keygen.updated
      - request.keygen.failed
      - request.keygen.succeeded
      - request.keyreshare.created
      - request.keyreshare.updated
      - request.keyreshare.failed
      - request.keyreshare.succeeded
      - request.keysign.created
      - request.keysign.updated
      - request.keysign.failed
      - request.keysign.succeeded
      - request.keysharesign.created
      - request.keysharesign.updated
      - request.keysharesign.failed
      - request.keysharesign.succeeded
      example: request.keygen.succeeded
      type: string
    TSSEventData:
      discriminator:
        mapping:
          KeyGen: '#/components/schemas/TSSKeyGenEventData'
          KeyReshare: '#/components/schemas/TSSKeyReshareEventData'
          KeySign: '#/components/schemas/TSSKeySignEventData'
          KeyShareSign: '#/components/schemas/TSSKeyShareSignEventData'
        propertyName: data_type
      oneOf:
      - $ref: '#/components/schemas/TSSKeyGenEventData'
      - $ref: '#/components/schemas/TSSKeyReshareEventData'
      - $ref: '#/components/schemas/TSSKeySignEventData'
      - $ref: '#/components/schemas/TSSKeyShareSignEventData'
    TSSEventDataType:
      description: |2-

        The data type of the event. - `KeyGen`: The key gen event data. - `KeyReshare`: The key reshare event data. - `KeySign`: The key sign event data. - `KeyShareSign`: The key share sign event data.
      enum:
      - KeyGen
      - KeyReshare
      - KeySign
      - KeyShareSign
      example: KeyGen
      type: string
    TSSBaseRequestEventData:
      properties:
        data_type:
          $ref: '#/components/schemas/TSSEventDataType'
        request_id:
          description: The request ID.
          example: 20231213122855000000000000000000:1
          type: string
        request_type:
          $ref: '#/components/schemas/TSSRequestTypeEenum'
        request_status:
          $ref: '#/components/schemas/TSSStatus'
        extra_info:
          description: The extra info.
          example: "{\"org\": {\"org_id\": \"1234567890\"}}"
          type: string
        failed_reason:
          description: The failed reason.
          type: string
      required:
      - data_type
      type: object
    TSSKeyGenEventData:
      allOf:
      - $ref: '#/components/schemas/TSSBaseRequestEventData'
      - properties:
          request_detail:
            $ref: '#/components/schemas/TSSKeyGenRequest'
          result:
            $ref: '#/components/schemas/TSSGroup'
        type: object
    TSSKeyReshareEventData:
      allOf:
      - $ref: '#/components/schemas/TSSBaseRequestEventData'
      - properties:
          request_detail:
            $ref: '#/components/schemas/TSSKeyReshareRequest'
          result:
            $ref: '#/components/schemas/TSSGroup'
        type: object
    TSSKeySignEventData:
      allOf:
      - $ref: '#/components/schemas/TSSBaseRequestEventData'
      - properties:
          request_detail:
            $ref: '#/components/schemas/TSSKeySignRequest'
          result:
            $ref: '#/components/schemas/TSSSignatures'
        type: object
    TSSKeyShareSignEventData:
      allOf:
      - $ref: '#/components/schemas/TSSBaseRequestEventData'
      - properties:
          request_detail:
            $ref: '#/components/schemas/TSSKeyShareSignRequest'
          result:
            $ref: '#/components/schemas/TSSKeyShareSignSignatures'
        type: object
    TSSCallbackRequest:
      properties:
        request_id:
          description: he unique ID of the callback request.
          example: 20231213122855000000000000000000:1
          type: string
        request_type:
          $ref: '#/components/schemas/TSSCallbackRequestType'
        request_detail:
          description: Details specific to the request type. The structure varies
            depending on the request type.  The content is a JSON-serialized string.
          type: string
        extra_info:
          description: Additional contextual information.  The structure varies depending
            on the request type. The content is a JSON-serialized string.
          type: string
      type: object
    TSSCallbackRequestType:
      description: |
        The type of the request. Possible values include:

        - 0 : Ping. Used for heartbeat monitoring.
        - 1 : KeyGen. Creating new key shares for your MPC Wallets.
        - 2 : KeySign. Signing transactions or messages.
        - 3 : KeyReshare. Redistributing key shares among participants.
        - 5 : KeyShareSign. Signing messages with key shares.
      enum:
      - 0
      - 1
      - 2
      - 3
      - 5
      example: 1
      type: integer
      x-enum-varnames:
      - PING
      - KEYGEN
      - KEYSIGN
      - KEYRESHARE
      - KEYSHARESIGN
    TSSCallbackResponse:
      properties:
        request_id:
          description: The unique ID of the callback request.
          example: 20231213122855000000000000000000:1
          type: string
        status:
          description: The response status code. 0 indicates success.  Any other value
            indicates that an error occurred while processing the request in the callback
            server.
          example: 0
          type: integer
        action:
          $ref: '#/components/schemas/TSSCallbackActionType'
        error:
          description: "The error message. - When status is not 0, Contains internal\
            \ error messages from the callback server. - When status is 0 and action\
            \ is REJECT, Contains the specific reason for the rejection."
          example: internal error
          type: string
      type: object
    TSSCallbackActionType:
      description: |
        The action to take. Possible values include:

        - `APPROVE` : Approve the request and proceed with the operation.
        - `REJECT` : Deny the request and stop the operation.
      enum:
      - APPROVE
      - REJECT
      example: APPROVE
      type: string
    list_supported_chains_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          confirming_threshold: 15
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          coinbase_maturity: 15
          explorer_address_url: "https://etherscan.io/address/{address}"
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          confirming_threshold: 15
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          coinbase_maturity: 15
          explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        data:
          items:
            $ref: '#/components/schemas/ChainInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_supported_tokens_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          asset_model_type: Account
          symbol: USDT
          chain_id: ETH
          custodial_minimum_deposit_threshold: "0.0001"
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          dust_threshold: "0.00000546"
          can_deposit: true
          fee_token_id: ETH
          token_id: ETH_USDT
          name: Tether USDT
          can_withdraw: true
          decimal: 18
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          asset_model_type: Account
          symbol: USDT
          chain_id: ETH
          custodial_minimum_deposit_threshold: "0.0001"
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          dust_threshold: "0.00000546"
          can_deposit: true
          fee_token_id: ETH
          token_id: ETH_USDT
          name: Tether USDT
          can_withdraw: true
          decimal: 18
      properties:
        data:
          items:
            $ref: '#/components/schemas/ExtendedTokenInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_token_listing_requests_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - feedback: Token has been added to the system
          wallet_subtype: Asset
          chain_id: ETH
          updated_timestamp: 1625184000000
          wallet_type: Custodial
          created_timestamp: 1625097600000
          source: API
          contract_address: 0x6B175474E89094C44Da98b954EedeAC495271d0F
          request_id: 123e4567e89b12d3a456426614174000
          token:
            icon_url: https://d.cobo.com/public/logos/USDT.png
            asset_model_type: Account
            symbol: USDT
            chain_id: ETH
            custodial_minimum_deposit_threshold: "0.0001"
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
            dust_threshold: "0.00000546"
            fee_token_id: ETH
            can_deposit: true
            token_id: ETH_USDT
            name: Tether USDT
            can_withdraw: true
            decimal: 18
          status: Submitted
        - feedback: Token has been added to the system
          wallet_subtype: Asset
          chain_id: ETH
          updated_timestamp: 1625184000000
          wallet_type: Custodial
          created_timestamp: 1625097600000
          source: API
          contract_address: 0x6B175474E89094C44Da98b954EedeAC495271d0F
          request_id: 123e4567e89b12d3a456426614174000
          token:
            icon_url: https://d.cobo.com/public/logos/USDT.png
            asset_model_type: Account
            symbol: USDT
            chain_id: ETH
            custodial_minimum_deposit_threshold: "0.0001"
            token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            asset_id: USDT
            dust_threshold: "0.00000546"
            fee_token_id: ETH
            can_deposit: true
            token_id: ETH_USDT
            name: Tether USDT
            can_withdraw: true
            decimal: 18
          status: Submitted
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenListing'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_token_listing_request_request:
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        chain_id:
          description: The ID of the blockchain where the token is deployed.
          example: ETH
          type: string
        contract_address:
          description: The token's contract address on the specified blockchain.
          example: 0x6B175474E89094C44Da98b954EedeAC495271d0F
          type: string
      required:
      - chain_id
      - contract_address
      - wallet_subtype
      - wallet_type
      type: object
    create_token_listing_request_201_response:
      example:
        request_id: 123e4567e89b12d3a456426614174000
      properties:
        request_id:
          description: "The unique identifier for the token listing request. You can\
            \ use it to track the request status with the [Get token listing request](https://www.cobo.com/developers/v2/api-references/wallets/get-token-listing-request)\
            \ operation."
          example: 123e4567e89b12d3a456426614174000
          type: string
      required:
      - request_id
      type: object
    list_wallets_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
      properties:
        data:
          items:
            $ref: '#/components/schemas/WalletInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    delete_wallet_by_id_201_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to delete the wallet has been successfully submitted.
            - `true`: The request to delete the wallet has been successfully submitted.
            - `false`: The request to delete the wallet has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    list_utxos_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_frozen: false
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_frozen: false
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
      properties:
        data:
          items:
            $ref: '#/components/schemas/UTXO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    batch_check_utxo_request:
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        utxos:
          items:
            $ref: '#/components/schemas/BatchUTXOParam'
          type: array
      required:
      - token_id
      - utxos
      type: object
    batch_check_utxo_201_response:
      example:
        data:
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_frozen: false
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          token_id: BTC
          is_frozen: false
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          value: "0.5"
          confirmed_number: 66716
      properties:
        data:
          items:
            $ref: '#/components/schemas/UTXO'
          type: array
      type: object
    lock_utxos_request_utxos_inner:
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: BTC
          type: string
        tx_hash:
          description: The transaction hash.
          example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      required:
      - token_id
      - tx_hash
      - vout_n
      type: object
    lock_utxos_request:
      properties:
        utxos:
          items:
            $ref: '#/components/schemas/lock_utxos_request_utxos_inner'
          type: array
      required:
      - utxos
      type: object
    lock_utxos_201_response:
      example:
        executed: true
      properties:
        executed:
          description: |
            Whether the locking or unlocking operation has been successfully executed.
            - `true`: The operation has been successfully executed.
            - `false`: The operation has not been executed.
          example: true
          type: boolean
      type: object
    list_addresses_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - path: m/44/0/2/0/0
          address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
          x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          memo: "82840924"
          taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          encoding: ENCODING_P2PKH
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
        - path: m/44/0/2/0/0
          address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
          x_only_pubkey: 0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54
          memo: "82840924"
          taproot_internal_address: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          taproot_script_tree_hash: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
          encoding: ENCODING_P2PKH
          root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          pubkey: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_address_request:
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        count:
          default: 1
          description: The number of addresses to create. This property will be ignored
            if you are generating tweaked Taproot addresses.
          example: 1
          maximum: 50
          minimum: 1
          type: integer
        taproot_script_tree_hashes:
          description: A list of script tree hashes used to generate a tweaked Taproot
            address. This property is required only if you want to generate tweaked
            Taproot addresses.
          items:
            example: 0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b
            type: string
          type: array
        taproot_internal_address:
          description: The original Taproot address to be tweaked. This property is
            required only if you want to generate tweaked Taproot addresses.
          example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
          type: string
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
      required:
      - chain_id
      - count
      type: object
    list_token_balances_for_address_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_address_balances_by_token_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - address: 0x0000000000000000000000000000000000000000
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - address: 0x0000000000000000000000000000000000000000
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    refresh_address_balances_by_token_request:
      properties:
        addresses:
          description: A list of addresses.
          items:
            example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
            type: string
          type: array
      required:
      - addresses
      type: object
    refresh_address_balances_by_token_200_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to refresh address balances has been successfully submitted.
            - `true`: The request to refresh address balances has been successfully submitted.
            - `false`: The request to  refresh address balances has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    check_address_validity_200_response:
      example:
        validity: true
      properties:
        validity:
          description: |
            Whether the address is valid.
            - `true`: The address is valid.
            - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - validity
      type: object
    check_addresses_validity_200_response_inner:
      example:
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        validity: true
      properties:
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
        validity:
          description: |
            Whether the address is valid.
             - `true`: The address is valid.
             - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - address
      - validity
      type: object
    check_address_chains_validity_200_response_inner:
      example:
        chain_id: ETH
        validity: true
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain."
          example: ETH
          type: string
        validity:
          description: |
            Whether the address is valid for the specified chain.
             - `true`: The address is valid.
             - `false`: The address is invalid.
          example: true
          type: boolean
      required:
      - chain_id
      - validity
      type: object
    list_mpc_projects_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
          name: Project name
          threshold: 2
          created_timestamp: 1718619403933
          participants: 3
        - project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
          name: Project name
          threshold: 2
          created_timestamp: 1718619403933
          participants: 3
      properties:
        data:
          items:
            $ref: '#/components/schemas/MPCProject'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_mpc_project_request:
      properties:
        name:
          description: The project name.
          example: Project name
          type: string
        participants:
          description: "The number of key share holders in the project.\n\n**Notes:**\n\
            1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `participants` to 2 or 3. \n\n2. `threshold` must\
            \ be less than or equal to `participants`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation\
            \ in the project.\n\n**Notes:**\n1. Currently, the available [Threshold\
            \ Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `threshold` to 2 or 3. \n\n2. `threshold` must be\
            \ less than or equal to `participants`.\n"
          example: 2
          type: integer
      required:
      - name
      - participants
      - threshold
      type: object
    update_mpc_project_by_id_request:
      properties:
        name:
          description: The project's new name.
          example: New project name
          type: string
      required:
      - name
      type: object
    list_mpc_vaults_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - root_pubkeys:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          name: Vault name
          created_timestamp: 1718619403933
          type: Org-Controlled
          vault_id: YPdbyVaVGqXXjkUsohHw
        - root_pubkeys:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          project_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          name: Vault name
          created_timestamp: 1718619403933
          type: Org-Controlled
          vault_id: YPdbyVaVGqXXjkUsohHw
      properties:
        data:
          items:
            $ref: '#/components/schemas/MPCVault'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_mpc_vault_request:
      properties:
        project_id:
          description: |
            The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).

            **Notes:**
            1. If you set `vault_type` to `OrgControlled`, the value of `project_id` will be ignored.
            2. If you set `vault_type` to `UserControlled`, then `project_id` is required.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The vault name.
          example: My vault
          type: string
        vault_type:
          $ref: '#/components/schemas/MPCVaultType'
      required:
      - name
      - vault_type
      type: object
    update_mpc_vault_by_id_request:
      properties:
        name:
          description: The new name of the vault.
          example: The new name of the vault
          type: string
      required:
      - name
      type: object
    list_key_share_holder_groups_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - key_share_holders:
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          tss_key_share_groups:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          threshold: 2
          created_timestamp: 1718619403933
          type: MainGroup
          participants: 3
          status: Valid
        - key_share_holders:
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          - account_id: auth0|cobo|839305394802991371
            name: Key share holder name
            tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
            online: true
            type: API
            signer: true
            status: Valid
          key_share_holder_group_id: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          tss_key_share_groups:
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          - curve: SECP256K1
            root_pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
            tss_key_share_group_id: mMedDioOKhTlhGyQRzMv
          threshold: 2
          created_timestamp: 1718619403933
          type: MainGroup
          participants: 3
          status: Valid
      properties:
        data:
          items:
            $ref: '#/components/schemas/KeyShareHolderGroup'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_key_share_holder_group_request:
      properties:
        key_share_holder_group_type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        participants:
          description: "The number of key share holders in this key share holder group.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `participants` to 2 or 3. \n\n2. `threshold` must\
            \ be less than or equal to `participants`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format),\
            \ so you can only set `threshold` to 2 or 3. \n\n2. `threshold` must be\
            \ less than or equal to `participants`.\n"
          example: 2
          type: integer
        key_share_holders:
          items:
            $ref: '#/components/schemas/CreateKeyShareHolder'
          type: array
      required:
      - key_share_holder_group_type
      - key_share_holders
      - participants
      - threshold
      type: object
    update_key_share_holder_group_by_id_request:
      properties:
        update_key_share_holder_group_action:
          $ref: '#/components/schemas/UpdateGroupAction'
      required:
      - update_key_share_holder_group_action
      type: object
    delete_key_share_holder_group_by_id_201_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to delete the key share holder group has been successfully submitted.
            - `true`: The request to delete the key share holder group has been successfully submitted.
            - `false`: The request to delete the key share holder group has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    list_tss_requests_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - description: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          created_timestamp: 1701396866000
          tss_request_id: "20240711114129000132315000003970"
          type: Recovery
          source_key_share_holder_group:
            key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          status: Success
        - description: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          created_timestamp: 1701396866000
          tss_request_id: "20240711114129000132315000003970"
          type: Recovery
          source_key_share_holder_group:
            key_share_holder_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            tss_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          target_key_share_holder_group_id: fd9519ae-507b-4605-b108-04d4e5ffcdd3
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/TSSRequest'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_tss_request_request:
      properties:
        type:
          $ref: '#/components/schemas/TSSRequestType'
        target_key_share_holder_group_id:
          description: The target key share holder group ID.
          example: a1bf161f-8b60-4f61-9c35-6434b8654437
          type: string
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        description:
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group
            for a key share holder in the Main Group if their key share has been lost
            (e.g. by losing their phone).
          type: string
      required:
      - target_key_share_holder_group_id
      - type
      type: object
    list_key_share_holders_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
        - account_id: auth0|cobo|839305394802991371
          name: Key share holder name
          tss_node_id: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
          online: true
          type: API
          signer: true
          status: Valid
      properties:
        data:
          items:
            $ref: '#/components/schemas/KeyShareHolder'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_exchanges_200_response_inner:
      description: The information about the supported exchange.
      example:
        exchange_id: binance
        supported_trading_account_types:
        - Spot
        - Asset
      properties:
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        supported_trading_account_types:
          description: The supported trading account types of this exchange.
          example:
          - Spot
          - Asset
          items:
            type: string
          type: array
      required:
      - exchange_id
      - supported_trading_account_types
      type: object
    list_supported_assets_for_exchange_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_asset_balances_for_exchange_wallet_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - trading_account_type: Spot
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
          asset_id: USDT
        - trading_account_type: Spot
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/SubWalletAssetBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    check_loop_transfers_200_response_inner:
      example:
        is_loop: false
        address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      properties:
        address:
          description: The wallet address.
          example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          type: string
        is_loop:
          description: |
            Whether the transaction from the given source to the given destination address can be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.

            - `true`: The transaction can be executed as a Cobo Loop transfer.
            - `false`: The transaction cannot be executed as a Cobo Loop transfer.
          example: false
          type: boolean
      required:
      - validity
      type: object
    create_transfer_transaction_201_response:
      example:
        transaction_id: c986cb3b-1301-412f-9450-13a52c43a95f
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Submitted
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction ID.
          example: c986cb3b-1301-412f-9450-13a52c43a95f
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
      required:
      - request_id
      - status
      - transaction_id
      type: object
    list_transactions_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            estimated_fee_used: "0.1"
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Signature
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          extra:
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          cobo_category:
          - AutoFueling
          - AutoFueling
          category:
          - Payment
          - Payment
          request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
          raw_tx_info:
            utxo_change:
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              value: "0.5"
            selected_utxos:
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
            unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
          fueling_info:
            transaction_id: b0530b27-104f-4338-87de-de01500326ea
            request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
        - is_loop: false
          chain_id: ETH
          confirmed_num: 12
          fee:
            effective_gas_price: "100000000"
            max_priority_fee_per_gas: "1000000000000"
            gas_limit: "21000"
            token_id: ETH
            estimated_fee_used: "0.1"
            gas_used: "100000000"
            max_fee_per_gas: "9000000000000"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            utxo_outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            force_internal: false
            force_external: false
          description: withdrawal to exchange trading account
          block_info:
            block_timestamp: 1717740319
            block_number: 123
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          asset_id: USDT
          source:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            source_type: DepositFromAddress
          confirming_threshold: 15
          type: Deposit
          result:
            result_type: Signature
            signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          extra:
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          - |
            {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          sub_status: PendingDoubleCheck
          cobo_id: "20231213122855000000000000000000"
          created_timestamp: 1610445878970
          initiator_type: API
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          cobo_category:
          - AutoFueling
          - AutoFueling
          category:
          - Payment
          - Payment
          request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
          raw_tx_info:
            utxo_change:
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              value: "0.5"
            selected_utxos:
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
              address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              vout_n: 0
              tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
              value: "0.5"
            raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            used_nonce: 9
            unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type: Resend
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
          fueling_info:
            transaction_id: b0530b27-104f-4338-87de-de01500326ea
            request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
      properties:
        data:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    broadcast_signed_transactions_request:
      properties:
        transaction_ids:
          description: "The transaction IDs of the signed transactions to be broadcast.\
            \ You can retrieve the transactions corresponding to a staking activity\
            \ by calling [Get staking activity details](https://www.cobo.com/developers/v2/api-references/stakings/get-staking-activity-details)."
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
      type: object
    broadcast_signed_transactions_201_response_inner:
      example:
        transaction_id: c986cb3b-1301-412f-9450-13a52c43a95f
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a transaction request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction ID of this broadcast transaction.
          example: c986cb3b-1301-412f-9450-13a52c43a95f
          type: string
      required:
      - request_id
      - transaction_id
      type: object
    list_transaction_approval_details_200_response:
      example:
        data:
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          approver:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          address_owner:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          spender:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          cobo_id: "20231213122855000000000000000000"
          request_id: web_send_by_user_327_1610444045047
        - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          approver:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          address_owner:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          spender:
            result: Approved
            review_threshold: 1
            complete_time: complete_time
            user_details:
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            - result: Approved
              signature: signature
              name: tom
              language: en
              message: message
              extra_message: extra_message
              email: tom@gmail.com
              message_version: 1.0.1
              pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
            initiator: tom@gmail.com
          cobo_id: "20231213122855000000000000000000"
          request_id: web_send_by_user_327_1610444045047
      properties:
        data:
          items:
            $ref: '#/components/schemas/TransactionApprovalDetail'
          type: array
      type: object
    get_token_2XX_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        scope: ""
        token_type: Bearer
        expires_in: 43199
      properties:
        access_token:
          description: The Org Access Token.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: "The type of the tokens, which is Bearer."
          example: Bearer
          type: string
        scope:
          description: "The scope of the Org Access Token to limit the app's access\
            \ to the organization's resources. \n**Note**: Currently this property\
            \ value is empty. The scope of the Org Access Token is based on the permissions\
            \ granted when the app user installs the app.\n"
          example: ""
          type: string
        expires_in:
          description: The time in seconds in which the Org Access Token expires.
          example: 43199
          type: integer
        refresh_token:
          description: "The Refresh Token, used to obtain a new Org Access Token when\
            \ the current Org Access Token expires. The expiration time for Refresh\
            \ Tokens is currently set to 30 days and is subject to change."
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    get_token_4XX_response:
      description: The response of a failed request.
      example:
        error_description: error_description
        error: error
      properties:
        error:
          description: The error name.
          type: string
        error_description:
          description: The error description.
          type: string
      required:
      - error
      - error_description
      type: object
    refresh_token_request:
      properties:
        client_id:
          description: "The client ID, a unique identifier to distinguish Cobo Portal\
            \ Apps. You can get the client ID by retrieving the manifest file after\
            \ publishing the app."
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        grant_type:
          description: The OAuth grant type. Set the value as `refresh_token`.
          example: refresh_token
          type: string
        refresh_token:
          description: The Refresh Token of the current Org Access Token.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    refresh_token_2XX_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        scope: ""
        token_type: Bearer
        expires_in: 43199
      properties:
        access_token:
          description: The new Org Access Token.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: "The type of the tokens, which is Bearer."
          example: Bearer
          type: string
        scope:
          description: |
            The scope of the Org Access Token to limit the app's access to the organization's resources.
            **Note**: Currently this property value is empty. The scope of the Org Access Token is based on the permissions granted when the app user installs the app.
          example: ""
          type: string
        expires_in:
          description: The time in seconds in which the new Org Access Token expires.
          example: 43199
          type: integer
        refresh_token:
          description: "The Refresh Token, used to obtain another Org Access Token\
            \ when the new Org Access Token expires. The expiration time for Refresh\
            \ Tokens is currently set to 30 days and is subject to change."
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    exchange_permission_token_request:
      properties:
        permission_type:
          description: Set the value to `payment_orders_payin`.
          example: payment_orders_payin
          type: string
      required:
      - permission_type
      type: object
    exchange_permission_token_201_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        token_type: token_type
        expires_in: 0
      properties:
        access_token:
          description: The Access Token.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: The token type. This is always `Bearer`.
          type: string
        expires_in:
          description: "The time in seconds until the Access Token expires. This is\
            \ always `3600`, indicating the token expires 1 hour after issuance."
          type: integer
        refresh_token:
          description: The Refresh Token. Use it to obtain a new Access Token when
            the current one expires. The Refresh Token is valid for 7 days.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    refresh_permission_token_request:
      properties:
        refresh_token:
          description: The Refresh Token of the current Access Token.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      required:
      - refresh_token
      type: object
    list_webhook_endpoints_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: My webhook endpoint
          created_timestamp: 1701396866000
          url: https://example.com/webhook
          status: STATUS_ACTIVE
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          endpoint_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          description: My webhook endpoint
          created_timestamp: 1701396866000
          url: https://example.com/webhook
          status: STATUS_ACTIVE
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEndpoint'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_webhook_endpoint_request:
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          type: string
        subscribed_events:
          description: |
            The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - subscribed_events
      - url
      type: object
    update_webhook_endpoint_by_id_request:
      properties:
        subscribed_events:
          description: "The new event types you want to subscribe to for this webhook\
            \ endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types)\
            \ to retrieve all available event types."
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          description: "The new status you want to set the webhook endpoint to. If\
            \ you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked,\
            \ meaning it will no longer receive any webhook events."
          enum:
          - STATUS_INACTIVE
          example: STATUS_INACTIVE
          type: string
        description:
          description: The webhook endpoint description.
          example: My webhook endpoint
          type: string
      type: object
    list_webhook_event_definitions_200_response_inner:
      example:
        event_type: wallets.transaction.created
        description: Occurs when the transaction status is updated
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        description:
          description: The description of the webhook event type.
          example: Occurs when the transaction status is updated
          type: string
      type: object
    trigger_test_webhook_event_request:
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        override_data:
          description: "An object for customization of the webhook event payload.\
            \ You only need to include the fields you want to customize. \n\nThe provided\
            \ fields must match the webhook event data structure, depending on the\
            \ specified event type. For a complete introduction of the webhook event\
            \ data structure, refer to the `data.data` property in the response of\
            \ [List all webhook events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-webhook-events).\n\
            \nIf this property is not provided, a default payload will be returned.\n"
          example:
            chain_id: ETH
            transaction_id: Test-transaction-id
          type: object
      required:
      - event_type
      type: object
    trigger_test_webhook_event_201_response:
      example:
        triggered: true
      properties:
        triggered:
          description: |
            Whether a test webhook event was successfully triggered.
            - `true`: The test webhook event was successfully triggered.
            - `false`: The test webhook event could not be triggered.
          example: true
          type: boolean
      type: object
    list_webhook_events_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              estimated_fee_used: "0.1"
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Signature
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            extra:
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            cobo_category:
            - AutoFueling
            - AutoFueling
            category:
            - Payment
            - Payment
            request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
            raw_tx_info:
              utxo_change:
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                value: "0.5"
              selected_utxos:
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
              unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
            fueling_info:
              transaction_id: b0530b27-104f-4338-87de-de01500326ea
              request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              estimated_fee_used: "0.1"
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Signature
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            extra:
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            data_type: Transaction
            cobo_category:
            - AutoFueling
            - AutoFueling
            category:
            - Payment
            - Payment
            request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
            raw_tx_info:
              utxo_change:
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                value: "0.5"
              selected_utxos:
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
              unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
            fueling_info:
              transaction_id: b0530b27-104f-4338-87de-de01500326ea
              request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          created_timestamp: 1701396866000
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_webhook_event_logs_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - request_body:
            next_retry_timestamp: 1701396866000
            retries_left: 3
            event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
            data:
              is_loop: false
              chain_id: ETH
              confirmed_num: 12
              fee:
                effective_gas_price: "100000000"
                max_priority_fee_per_gas: "1000000000000"
                gas_limit: "21000"
                token_id: ETH
                estimated_fee_used: "0.1"
                gas_used: "100000000"
                max_fee_per_gas: "9000000000000"
                fee_type: EVM_EIP_1559
                fee_used: "0.1"
              initiator: "API Prod Key #1"
              destination:
                account_output:
                  amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                  memo: "82840924"
                destination_type: Address
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                utxo_outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                force_internal: false
                force_external: false
              description: withdrawal to exchange trading account
              block_info:
                block_timestamp: 1717740319
                block_number: 123
                block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
              asset_id: USDT
              source:
                wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
                source_type: DepositFromAddress
              confirming_threshold: 15
              type: Deposit
              result:
                result_type: Signature
                signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              extra:
              - |
                {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
              - |
                {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
              transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              sub_status: PendingDoubleCheck
              cobo_id: "20231213122855000000000000000000"
              created_timestamp: 1610445878970
              initiator_type: API
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              data_type: Transaction
              cobo_category:
              - AutoFueling
              - AutoFueling
              category:
              - Payment
              - Payment
              request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
              raw_tx_info:
                utxo_change:
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  value: "0.5"
                selected_utxos:
                - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                  value: "0.5"
                - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                  value: "0.5"
                raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
                used_nonce: 9
                unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              replacement:
                replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_type: Resend
                replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_type: Resend
              failed_reason: Rejected by signer Cobo TSS
              status: Submitted
              fueling_info:
                transaction_id: b0530b27-104f-4338-87de-de01500326ea
                request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
            created_timestamp: 1701396866000
            type: wallets.transaction.created
            url: https://example.com/webhook
            status: Success
          success: true
          request_headers: "{\"Content-Type\": \"application/json\"}"
          response_body: response_body
          created_timestamp: 1701396866000
          response_time: 100
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          failure_reason: Connect Timeout
          response_status_code: 200
        - request_body:
            next_retry_timestamp: 1701396866000
            retries_left: 3
            event_id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
            data:
              is_loop: false
              chain_id: ETH
              confirmed_num: 12
              fee:
                effective_gas_price: "100000000"
                max_priority_fee_per_gas: "1000000000000"
                gas_limit: "21000"
                token_id: ETH
                estimated_fee_used: "0.1"
                gas_used: "100000000"
                max_fee_per_gas: "9000000000000"
                fee_type: EVM_EIP_1559
                fee_used: "0.1"
              initiator: "API Prod Key #1"
              destination:
                account_output:
                  amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                  memo: "82840924"
                destination_type: Address
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                utxo_outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                force_internal: false
                force_external: false
              description: withdrawal to exchange trading account
              block_info:
                block_timestamp: 1717740319
                block_number: 123
                block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
              asset_id: USDT
              source:
                wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
                source_type: DepositFromAddress
              confirming_threshold: 15
              type: Deposit
              result:
                result_type: Signature
                signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              extra:
              - |
                {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
              - |
                {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
              transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              sub_status: PendingDoubleCheck
              cobo_id: "20231213122855000000000000000000"
              created_timestamp: 1610445878970
              initiator_type: API
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              data_type: Transaction
              cobo_category:
              - AutoFueling
              - AutoFueling
              category:
              - Payment
              - Payment
              request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
              raw_tx_info:
                utxo_change:
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  value: "0.5"
                selected_utxos:
                - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                  value: "0.5"
                - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                  address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                  vout_n: 0
                  tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                  redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                  value: "0.5"
                raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
                used_nonce: 9
                unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              replacement:
                replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
                replaced_by_type: Resend
                replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
                replaced_type: Resend
              failed_reason: Rejected by signer Cobo TSS
              status: Submitted
              fueling_info:
                transaction_id: b0530b27-104f-4338-87de-de01500326ea
                request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
            created_timestamp: 1701396866000
            type: wallets.transaction.created
            url: https://example.com/webhook
            status: Success
          success: true
          request_headers: "{\"Content-Type\": \"application/json\"}"
          response_body: response_body
          created_timestamp: 1701396866000
          response_time: 100
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          failure_reason: Connect Timeout
          response_status_code: 200
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEventLog'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    retry_webhook_event_by_id_201_response:
      example:
        retried: true
      properties:
        retried:
          description: Whether the retry request has been successfully sent.
          example: true
          type: boolean
      type: object
    list_staking_pools_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - protocol: Babylon
          supported_wallet_subtypes:
          - Org-Controlled
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
        - protocol: Babylon
          supported_wallet_subtypes:
          - Org-Controlled
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
      properties:
        data:
          items:
            $ref: '#/components/schemas/PoolSummary'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_staking_estimation_fee_request:
      discriminator:
        mapping:
          Stake: '#/components/schemas/EstimateStakeFee'
          Unstake: '#/components/schemas/EstimateUnstakeFee'
          Withdraw: '#/components/schemas/EstimateWithdrawFee'
          Claim: '#/components/schemas/EstimateClaimFee'
        propertyName: activity_type
      oneOf:
      - $ref: '#/components/schemas/EstimateStakeFee'
      - $ref: '#/components/schemas/EstimateUnstakeFee'
      - $ref: '#/components/schemas/EstimateWithdrawFee'
      - $ref: '#/components/schemas/EstimateClaimFee'
    get_staking_estimation_fee_201_response:
      discriminator:
        mapping:
          ETHBeacon: '#/components/schemas/EthStakeEstimatedFee'
          Babylon: '#/components/schemas/BabylonStakeEstimatedFee'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/EthStakeEstimatedFee'
      - $ref: '#/components/schemas/BabylonStakeEstimatedFee'
    create_stake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateStakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_stake_activity_201_response:
      example:
        activity_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        activity_id:
          description: The activity ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        staking_id:
          description: The ID of the staking position.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - activity_id
      type: object
    list_stakings_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          amounts:
          - amount: "100.00"
            status: Active
          - amount: "100.00"
            status: Active
          token_id: BTC
          updated_timestamp: 1640995200000
          validator_info:
            icon_url: https://example.com/icon.png
            public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            supported_pos_chains:
            - Babylon
            - Cosmos
            - Ethereum
            name: Cobo
            commission_rate: 0.1
            priority: 0
            pool_type: Babylon
          extra:
            unlock_block_height: 871234
            stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            pos_chain: Babylon Chain
            unlock_timestamp: 1640995200000
            pool_type: Babylon
          created_timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          pool_id: babylon_btc_signet
          rewards_info: {}
        - wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          amounts:
          - amount: "100.00"
            status: Active
          - amount: "100.00"
            status: Active
          token_id: BTC
          updated_timestamp: 1640995200000
          validator_info:
            icon_url: https://example.com/icon.png
            public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            supported_pos_chains:
            - Babylon
            - Cosmos
            - Ethereum
            name: Cobo
            commission_rate: 0.1
            priority: 0
            pool_type: Babylon
          extra:
            unlock_block_height: 871234
            stake_address: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            unbond_address: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
            pos_chain: Babylon Chain
            unlock_timestamp: 1640995200000
            pool_type: Babylon
          created_timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          pool_id: babylon_btc_signet
          rewards_info: {}
      properties:
        data:
          items:
            $ref: '#/components/schemas/Stakings'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_unstake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateUnstakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_withdraw_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateWithdrawActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_claim_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateClaimActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    list_staking_activities_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - amount: "100.00"
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          initiator: steve@example.com
          fee:
            max_fee_amount: "0.1"
            token_id: TRON
            fee_type: EVM_EIP_1559
          created_timestamp: 1640995200000
          type: Stake
          pool_id: babylon_btc_signet
          initiator_type: API
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          token_id: BTC
          updated_timestamp: 1640995200000
          extra:
            finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time: 2000
            auto_broadcast: false
            pool_type: Babylon
          request_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          timeline:
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          transaction_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
        - amount: "100.00"
          address: 0xAbCdE123456789aBcDeF123456789aBcDeF12345
          initiator: steve@example.com
          fee:
            max_fee_amount: "0.1"
            token_id: TRON
            fee_type: EVM_EIP_1559
          created_timestamp: 1640995200000
          type: Stake
          pool_id: babylon_btc_signet
          initiator_type: API
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          token_id: BTC
          updated_timestamp: 1640995200000
          extra:
            finality_provider_public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time: 2000
            auto_broadcast: false
            pool_type: Babylon
          request_ids:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          timeline:
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          - transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            action: Submitted
            status: success
            timestamp: 1640995200000
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          transaction_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_babylon_staking_registrations_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - babylon_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          error_message: User rejected
          updated_timestamp: 1677587400000
          btc_address: null
          staked_amount: "500.25"
          created_timestamp: 1677587333000
          id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          staking_id: 3f2840ce-44eb-450b-aa81-d3f84b772efb
          status: Processing
        - babylon_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          error_message: User rejected
          updated_timestamp: 1677587400000
          btc_address: null
          staked_amount: "500.25"
          created_timestamp: 1677587333000
          id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          staking_id: 3f2840ce-44eb-450b-aa81-d3f84b772efb
          status: Processing
      properties:
        data:
          items:
            $ref: '#/components/schemas/BabylonStakingRegistration'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_babylon_staking_registration_request:
      properties:
        staking_id:
          description: The ID of the Phase-1 BTC staking position.
          example: 3f2840ce-44eb-450b-aa81-d3f84b772efb
          type: string
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
      type: object
    create_babylon_staking_registration_201_response:
      example:
        registration_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        registration_id:
          description: "The registration ID, a unique identifier for tracking the\
            \ Babylon Phase-2 registration request. You can use it with the [Get Babylon\
            \ Phase-2 registration details operation](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-phase-2-registration-details)\
            \ to check the registration status."
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      type: object
    list_babylon_eligible_stakings_200_response_data_inner:
      description: The babylon staking position eligible for Phase-2 registration.
      example:
        babylon_address: null
        btc_address:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
          source_type: Org-Controlled
        staked_amount: "1.23456789"
        staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        status: Registered
      properties:
        staking_id:
          description: The ID of the Phase-1 BTC staking position.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        btc_address:
          $ref: '#/components/schemas/StakingSource'
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
        staked_amount:
          description: The current amount of BTC staked.
          example: "1.23456789"
          type: string
        status:
          $ref: '#/components/schemas/BabylonRegistrationStatus'
      type: object
    list_babylon_eligible_stakings_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - babylon_address: null
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          staked_amount: "1.23456789"
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Registered
        - babylon_address: null
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          staked_amount: "1.23456789"
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Registered
      properties:
        data:
          items:
            $ref: '#/components/schemas/list_babylon_eligible_stakings_200_response_data_inner'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_babylon_airdrop_registrations_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - babylon_address: null
          error_message: User rejected
          updated_timestamp: 1677587400000
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          airdrop_amount: "500.25"
          created_timestamp: 1677587333000
          id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          status: Processing
        - babylon_address: null
          error_message: User rejected
          updated_timestamp: 1677587400000
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          airdrop_amount: "500.25"
          created_timestamp: 1677587333000
          id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          status: Processing
      properties:
        data:
          items:
            $ref: '#/components/schemas/BabylonAirdropRegistration'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_babylon_airdrop_registration_request:
      properties:
        btc_address:
          $ref: '#/components/schemas/StakingSource'
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
      type: object
    create_babylon_airdrop_registration_201_response:
      example:
        registration_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        registration_id:
          description: "The registration ID, a unique identifier for tracking the\
            \ airdrop registration request. You can check the registration status\
            \ with the [Get Babylon airdrop registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-airdrop-registration-details)\
            \ operation."
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      type: object
    list_babylon_eligible_airdrops_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - babylon_address: null
          pop:
            btc_address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
            btc_public_key: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
            btc_sign_baby: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
            baby_sign_btc: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
            baby_address: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
            baby_public_key: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
          babylon_points: "1000.50"
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          airdrop_amount: "500.25"
          status: Registered
        - babylon_address: null
          pop:
            btc_address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
            btc_public_key: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
            btc_sign_baby: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
            baby_sign_btc: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
            baby_address: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
            baby_public_key: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
          babylon_points: "1000.50"
          btc_address:
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            source_type: Org-Controlled
          airdrop_amount: "500.25"
          status: Registered
      properties:
        data:
          items:
            $ref: '#/components/schemas/BabylonEligibleAirdrop'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_api_key_info_200_response:
      example:
        callback_url: https://example.com/api/callback
        valid_ips:
        - 127.0.0.1
        - 127.0.0.1
        role_scopes:
        - role_name: API_Spender
          scopes:
            wallet_subtypes:
            - Asset
            - Asset
            wallet_types:
            - Custodial
            - Custodial
            wallet_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            vault_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            project_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - role_name: API_Spender
          scopes:
            wallet_subtypes:
            - Asset
            - Asset
            wallet_types:
            - Custodial
            - Custodial
            wallet_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            vault_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            project_ids:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
        updated_timestamp: 1701396866000
        expired_timestamp: 1701396866000
        curve_type: ED25519
        name: my_api_key
        created_timestamp: 1701396866000
        key: 427b06814cca3359bd0e710c1187833b7f052748a3fdf59888fad4ddc4bd379f
      properties:
        name:
          description: The API key name.
          example: my_api_key
          type: string
        curve_type:
          description: |
            The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include:
            - `ED25519`: Ed25519
            - `SECP256K1`: Secp256k1
          enum:
          - ED25519
          - SECP256K1
          example: ED25519
          type: string
        key:
          description: The API key value.
          example: 427b06814cca3359bd0e710c1187833b7f052748a3fdf59888fad4ddc4bd379f
          type: string
        callback_url:
          description: The URL of the callback endpoint that receives callback messages
            triggered by this API key.
          example: https://example.com/api/callback
          type: string
        valid_ips:
          description: (Applicable to permanent API keys only) The list of IP addresses
            that are allowed to use this API key.
          items:
            example: 127.0.0.1
            type: string
          type: array
        created_timestamp:
          description: "The time when the API key was registered, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        updated_timestamp:
          description: "The time when the API key information was last updated, in\
            \ Unix timestamp format, measured in milliseconds."
          example: 1701396866000
          format: int64
          type: integer
        expired_timestamp:
          description: "The time when the API key expires, in Unix timestamp format,\
            \ measured in milliseconds. For permanent API keys, this property value\
            \ is `null`."
          example: 1701396866000
          format: int64
          type: integer
        role_scopes:
          description: The list of user roles and wallet scopes associated with the
            API key.
          items:
            $ref: '#/components/schemas/RoleScopes'
          type: array
      required:
      - created_timestamp
      - curve_type
      - key
      - name
      - updated_timestamp
      type: object
    list_callback_messages_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          result: ok
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              estimated_fee_used: "0.1"
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Signature
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            extra:
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            cobo_category:
            - AutoFueling
            - AutoFueling
            category:
            - Payment
            - Payment
            request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
            raw_tx_info:
              utxo_change:
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                value: "0.5"
              selected_utxos:
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
              unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
            fueling_info:
              transaction_id: b0530b27-104f-4338-87de-de01500326ea
              request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          updated_timestamp: 1640918000000
          created_timestamp: 1640918000000
          id: 00000000-0000-0000-0000-000000000000
          request_id: "1734602498819"
          url: https://example.com/withdraw_callback
          status: Approved
        - transaction_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          result: ok
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          data:
            is_loop: false
            chain_id: ETH
            confirmed_num: 12
            fee:
              effective_gas_price: "100000000"
              max_priority_fee_per_gas: "1000000000000"
              gas_limit: "21000"
              token_id: ETH
              estimated_fee_used: "0.1"
              gas_used: "100000000"
              max_fee_per_gas: "9000000000000"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              utxo_outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              force_internal: false
              force_external: false
            description: withdrawal to exchange trading account
            block_info:
              block_timestamp: 1717740319
              block_number: 123
              block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            asset_id: USDT
            source:
              wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
              source_type: DepositFromAddress
            confirming_threshold: 15
            type: Deposit
            result:
              result_type: Signature
              signature: 0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            extra:
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            - |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            sub_status: PendingDoubleCheck
            cobo_id: "20231213122855000000000000000000"
            created_timestamp: 1610445878970
            initiator_type: API
            wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
            cobo_category:
            - AutoFueling
            - AutoFueling
            category:
            - Payment
            - Payment
            request_id: 760a1955-e212-4dfb-a8d0-e66312a1a051
            raw_tx_info:
              utxo_change:
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                value: "0.5"
              selected_utxos:
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              - revealed_script: 0x1cc56cbbac4622082221a8768d1d0901
                address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
                vout_n: 0
                tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                redeem_script: 0x1cc56cbbac4622082221a8768d1d0901
                value: "0.5"
              raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
              used_nonce: 9
              unsigned_raw_tx: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_type: Resend
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
            fueling_info:
              transaction_id: b0530b27-104f-4338-87de-de01500326ea
              request_id: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
          updated_timestamp: 1640918000000
          created_timestamp: 1640918000000
          id: 00000000-0000-0000-0000-000000000000
          request_id: "1734602498819"
          url: https://example.com/withdraw_callback
          status: Approved
      properties:
        data:
          items:
            $ref: '#/components/schemas/CallbackMessage'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    retry_callback_message_201_response:
      example:
        retried: true
      properties:
        retried:
          description: |
            Whether the callback message has been successfully resent:
            - `true`: The callback message has been successfully resent.
            - `false`: The callback message has not been successfully resent.
          example: true
          type: boolean
      type: object
    list_address_books_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_subtype: Asset
          address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_name: Example Wallet
          memo: 9d4773eb
          wallet_type: Custodial
          label: test
          encoding: ENCODING_P2PKH
          entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          email: help@cobo.com
          chain_ids:
          - ETH
          - ETH
        - wallet_subtype: Asset
          address: 0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_name: Example Wallet
          memo: 9d4773eb
          wallet_type: Custodial
          label: test
          encoding: ENCODING_P2PKH
          entry_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          email: help@cobo.com
          chain_ids:
          - ETH
          - ETH
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressBook'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    query_guard_pubkey_200_response_addresses_inner:
      example:
        address: 0x0000000000000000000000000000000000000000
        chain_id: ETH
      properties:
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
      required:
      - address
      - chain_id
      type: object
    query_guard_pubkey_200_response:
      example:
        addresses:
        - address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
        - address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
        pubkey: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        status: New
      properties:
        pubkey:
          description: The Cobo Guard's public key.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        status:
          $ref: '#/components/schemas/GuardPubkeyStatus'
        addresses:
          items:
            $ref: '#/components/schemas/query_guard_pubkey_200_response_addresses_inner'
          type: array
      required:
      - binder_id
      type: object
    change_guard_pubkey_200_response:
      example:
        binder_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        binder_id:
          description: The binding ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - binder_id
      type: object
    delete_guard_pubkey_201_response:
      example:
        statement_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        statement_id:
          description: The deleted Cobo Guard binding statement ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - statement_id
      type: object
    create_prime_broker_address_request:
      properties:
        addresses:
          items:
            $ref: '#/components/schemas/query_guard_pubkey_200_response_addresses_inner'
          type: array
      type: object
    create_prime_broker_address_201_response:
      example:
        addresses:
        - address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
        - address: 0x0000000000000000000000000000000000000000
          chain_id: ETH
        pubkey: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        pubkey:
          description: The Cobo Guard's public key.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        addresses:
          items:
            $ref: '#/components/schemas/query_guard_pubkey_200_response_addresses_inner'
          type: array
      required:
      - pubkey
      type: object
    query_approval_statement_200_response:
      example:
        user_id: "168108513539918"
        id: "168108513539918"
        pubkey: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
        status: New
      properties:
        id:
          description: The approval statement ID.
          example: "168108513539918"
          type: string
        user_id:
          description: The user ID of the approver.
          example: "168108513539918"
          type: string
        pubkey:
          description: The Cobo Guard public key of the approver.
          example: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
          type: string
        status:
          $ref: '#/components/schemas/ApprovalStatementStatus'
      type: object
    list_supported_countries_200_response_inner:
      example:
        code2: SG
        zh_hans: 新加坡
        en: Singapore
      properties:
        en:
          description: The English name of the country.
          example: Singapore
          type: string
        zh_hans:
          description: The simplified Chinese name of the country.
          example: 新加坡
          type: string
        code2:
          description: The 2-letter country code (ISO 3166-1 alpha-2).
          example: SG
          type: string
      required:
      - code2
      - en
      - zh_hans
      type: object
    get_transaction_limitation_200_response:
      example:
        vasp_list:
        - vendor_code: NB
          name: ManyAges
          vendor_vasp_id: did:ethr:0x34414c8d5c8ed6f242aa6558ecb500283bab10f4
        - vendor_code: NB
          name: ManyAges
          vendor_vasp_id: did:ethr:0x34414c8d5c8ed6f242aa6558ecb500283bab10f4
        is_threshold_reached: true
        self_custody_wallet_challenge: |
          Hi, please sign this message to confirm that you are the owner of this wallet address.
          The transfer can only proceed after signing.
          - Address: 0x1234567890abcdef1234567890abcdef12345678
          - Nonce: b2860f5c9f201a81bc76f33e991c1f24
          - Timestamp: 1732523887
        connect_wallet_list:
        - metamask
        - metamask
      properties:
        vasp_list:
          description: A list of virtual asset service providers (VASP) you can select
            as the transaction source or destination.
          items:
            $ref: '#/components/schemas/Vasp'
          type: array
        is_threshold_reached:
          description: |
            Indicates whether the transaction amount exceeds a predefined threshold. If exceeded, additional information is required when filling Travel Rule details.
            - `true`: Threshold exceeded.
            - `false`: Threshold not exceeded.
          example: true
          type: boolean
        self_custody_wallet_challenge:
          description: |
            A human-readable, time-sensitive message to be signed by the wallet owner. The message contains key information including the wallet address, a unique nonce, and a timestamp. Signing this message confirms ownership of the wallet and allows the operation to proceed.
          example: |
            Hi, please sign this message to confirm that you are the owner of this wallet address.
            The transfer can only proceed after signing.
            - Address: 0x1234567890abcdef1234567890abcdef12345678
            - Nonce: b2860f5c9f201a81bc76f33e991c1f24
            - Timestamp: 1732523887
          type: string
        connect_wallet_list:
          description: A list of self-custody wallet providers you can select as the
            transaction source or destination.
          items:
            description: A supported wallet type or integration.
            example: metamask
            type: string
          type: array
      type: object
    submit_deposit_travel_rule_info_201_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the Travel Rule information has been successfully submitted.
            - `true`: The information has been successfully submitted.
            - `false`: The information has not been submitted.
          example: true
          type: boolean
      type: object
    list_token_balances_for_fee_station_200_response_data_inner:
      description: The balance information.
      example:
        token_id: ETH
        chain_id: ETH
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens)."
          example: ETH
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains)."
          example: ETH
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
      required:
      - balance
      - token_id
      type: object
    list_token_balances_for_fee_station_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - token_id: ETH
          chain_id: ETH
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - token_id: ETH
          chain_id: ETH
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/list_token_balances_for_fee_station_200_response_data_inner'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_approval_requests_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - initiated_timestamp: 1610445878970
          fields:
          - value_type: INT
            field: amount
            value: "11.23"
          - value_type: INT
            field: amount
            value: "11.23"
          request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          status: Pending
        - initiated_timestamp: 1610445878970
          fields:
          - value_type: INT
            field: amount
            value: "11.23"
          - value_type: INT
            field: amount
            value: "11.23"
          request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          status: Pending
      properties:
        data:
          items:
            $ref: '#/components/schemas/ApprovalRequest'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_approval_request_201_response:
      example:
        approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        approval_id:
          description: The system-generated unique ID of the approval request. You
            can use this ID to query the approval request status or revoke the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - approval_id
      type: object
    revoke_approval_request_request:
      properties:
        initiator_email:
          description: The email of the user who requested the approval.
          example: johnsmith@example.com
          type: string
      required:
      - initiator_email
      type: object
    revoke_approval_request_201_response:
      example:
        approval_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Pending
      properties:
        approval_id:
          description: The system-generated unique ID of the approval request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/ApprovalStatus'
      required:
      - approval_id
      type: object
    list_merchants_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - wallet_id: 123e4567-e89b-12d3-a456-426614174001
          updated_timestamp: 1744689600
          name: Merchant-1
          created_timestamp: 1744689600
          merchant_id: "1"
          developer_fee_rate: "0.01"
        - wallet_id: 123e4567-e89b-12d3-a456-426614174001
          updated_timestamp: 1744689600
          name: Merchant-1
          created_timestamp: 1744689600
          merchant_id: "1"
          developer_fee_rate: "0.01"
      properties:
        data:
          items:
            $ref: '#/components/schemas/Merchant'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_merchant_request:
      properties:
        name:
          description: The merchant name.
          example: Merchant A
          type: string
        wallet_id:
          description: The ID of the wallet linked to the merchant.
          example: 123e4567-e89b-12d3-a456-426614174001
          format: uuid
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to this merchant. Expressed
            as a string in decimal format where "0.1" represents 10%. This fee is
            deducted from the payment amount and only applies to top-up transactions.
          example: "0.1"
          type: string
      required:
      - name
      - wallet_id
      type: object
    update_merchant_by_id_request:
      properties:
        name:
          description: The merchant name.
          example: Merchant B
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to this merchant. Expressed
            as a string in decimal format where "0.1" represents 10%. This fee is
            deducted from the payment amount and only applies to top-up transactions.
          example: "0.1"
          type: string
      type: object
    get_refunds_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - amount: "0.0025"
          refund_type: Merchant
          chain_id: ETH
          initiator: b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b85b81dcc15f920e9d
          merchant_fee_amount: "0.0001"
          to_address: 0x9876543210abcdef1234567890abcdef12345678
          created_timestamp: 1744689600
          merchant_id: M1001
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          refund_id: R20250304-M1001-1001
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          merchant_fee_token_id: ETH_USDT
          request_id: 123e4567-e89b-12d3-a456-426614174004
          order_id: O20250304-M1001-1001
          status: Pending
          charge_merchant_fee: false
        - amount: "0.0025"
          refund_type: Merchant
          chain_id: ETH
          initiator: b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b85b81dcc15f920e9d
          merchant_fee_amount: "0.0001"
          to_address: 0x9876543210abcdef1234567890abcdef12345678
          created_timestamp: 1744689600
          merchant_id: M1001
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          refund_id: R20250304-M1001-1001
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          merchant_fee_token_id: ETH_USDT
          request_id: 123e4567-e89b-12d3-a456-426614174004
          order_id: O20250304-M1001-1001
          status: Pending
          charge_merchant_fee: false
      properties:
        data:
          items:
            $ref: '#/components/schemas/Refund'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_refund_request:
      properties:
        request_id:
          description: The request ID that is used to track a refund request. The
            request ID is provided by you and must be unique.
          example: 123e4567-e89b-12d3-a456-426614174004
          type: string
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        payable_amount:
          description: The amount to refund in cryptocurrency. The amount must be
            a positive integer with up to two decimal places.
          example: "0.25"
          type: string
        to_address:
          description: The address where the refunded cryptocurrency will be sent.
          example: 0x9876543210abcdef1234567890abcdef12345678
          type: string
        token_id:
          description: "The ID of the cryptocurrency used for refund. Supported values:\
            \ \n  - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`,\
            \ `BSC_USDC`\n  - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`,\
            \ `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`\n"
          example: ETH_USDT
          type: string
        refund_type:
          $ref: '#/components/schemas/RefundType'
        order_id:
          description: The ID of the original pay-in order associated with this refund.
            Use this to track refunds against specific payments.
          example: R20250304-M1001-1001
          type: string
        charge_merchant_fee:
          description: "Whether to charge developer fee to the merchant.\n \n  - `true`:\
            \ The fee amount (specified in `merchant_fee_amount`) will be deducted\
            \ from the merchant's balance and added to the developer's balance\n\n\
            \  - `false`: The merchant is not charged any developer fee\n\nWhen enabled,\
            \ ensure both `merchant_fee_amount` and `merchant_fee_token_id` are properly\
            \ specified.\n"
          example: false
          type: boolean
        merchant_fee_amount:
          description: |
            The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. Required when `charge_merchant_fee` is `true`. Must be:
              - A positive integer with up to two decimal places.
              - Less than the refund amount
          example: "0.01"
          type: string
        merchant_fee_token_id:
          description: |
            The ID of the cryptocurrency used for the developer fee. It must be the same as `token_id`. Supported values:
              - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`
              - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
          example: ETH_USDT
          type: string
      required:
      - payable_amount
      - refund_type
      - request_id
      - token_id
      type: object
    update_refund_by_id_request:
      properties:
        to_address:
          description: The address where the refunded cryptocurrency will be sent.
          example: 0x9876543210abcdef1234567890abcdef12345678
          type: string
      required:
      - to_address
      type: object
    list_payment_orders_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - settlement_status: Pending
          chain_id: ETH
          exchange_rate: "0.99"
          created_timestamp: 1744689600
          merchant_id: "1001"
          expired_at: 1711324800
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          fee_amount: "2.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          received_token_amount: "103.0305"
          order_amount: "100.00"
          merchant_order_code: M20240201001
          psp_order_code: P20240201001
          currency: USD
          payable_amount: "103.03"
          order_id: "5001"
          receive_address: 0x1234567890abcdef1234567890abcdef12345678
          status: Pending
        - settlement_status: Pending
          chain_id: ETH
          exchange_rate: "0.99"
          created_timestamp: 1744689600
          merchant_id: "1001"
          expired_at: 1711324800
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          fee_amount: "2.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          received_token_amount: "103.0305"
          order_amount: "100.00"
          merchant_order_code: M20240201001
          psp_order_code: P20240201001
          currency: USD
          payable_amount: "103.03"
          order_id: "5001"
          receive_address: 0x1234567890abcdef1234567890abcdef12345678
          status: Pending
      properties:
        data:
          items:
            $ref: '#/components/schemas/Order'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_payment_order_request:
      properties:
        merchant_id:
          description: The merchant ID.
          example: "1001"
          type: string
        token_id:
          description: "The ID of the cryptocurrency used for payment. Supported values:\
            \ \n  - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`,\
            \ `BSC_USDC`\n  - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`,\
            \ `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`\n"
          example: ETH_USDT
          type: string
        currency:
          default: USD
          description: The fiat currency of the order.
          example: USD
          type: string
        order_amount:
          description: "The base amount of the order in fiat currency, excluding the\
            \ developer fee (specified in `fee_amount`). Values must be greater than\
            \ `0` and contain two decimal places."
          example: "100.00"
          type: string
        fee_amount:
          description: "The developer fee for the order in fiat currency. It is added\
            \ to the base amount (`order_amount`) to determine the final charge. For\
            \ example, if order_amount is \"100.00\" and fee_amount is \"2.00\", the\
            \ customer will be charged \"102.00\" in total, with \"100.00\" being\
            \ settled to the merchant and \"2.00\" settled to the developer. Values\
            \ must be greater than 0 and contain two decimal places."
          example: "2.00"
          type: string
        merchant_order_code:
          description: A unique reference code assigned by the merchant to identify
            this order in their system.
          example: M20240201001
          type: string
        psp_order_code:
          description: A unique reference code assigned by the developer to identify
            this order in their system.
          example: P20240201001
          type: string
        expired_in:
          description: |
            The number of seconds after which the pay-in order will expire. After expiration:
            - The order status becomes final and cannot be changed
            - The `received_token_amount` field will no longer be updated
            - Funds received after expiration will be categorized as late payments and can only be settled from the developer balance.
            - A late payment will trigger a `transactionLate` webhook event.
          example: 1800
          type: integer
        use_dedicated_address:
          description: "Whether to allocate a dedicated address for this order. \n\
            - `true`: A dedicated address will be allocated for this order.\n- `false`:\
            \ A shared address from the address pool will be used.\n"
          example: false
          type: boolean
      required:
      - fee_amount
      - merchant_id
      - order_amount
      - psp_order_code
      - token_id
      type: object
    update_payment_order_request:
      properties:
        expired:
          description: "Whether to manually expire the order. If set to `true`, the\
            \ order status will be updated to `Expired`."
          example: true
          type: boolean
      required:
      - expired
      type: object
    get_exchange_rate_200_response:
      example:
        token_id: ETH_USDT
        rate: "1.00"
        currency: USD
      properties:
        token_id:
          description: "The token ID, which is a unique identifier that specifies\
            \ both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`."
          example: ETH_USDT
          type: string
        currency:
          description: The fiat currency.
          example: USD
          type: string
        rate:
          description: "The current exchange rate between the specified currency pair.\
            \ Expressed as the amount of fiat currency per one unit of cryptocurrency.\
            \ For example, if the cryptocurrency is USDT and the fiat currency is\
            \ USD, a rate of \"0.99\" means 1 USDT = 0.99 USD."
          example: "1.00"
          type: string
      required:
      - currency
      - rate
      - token_id
      type: object
    get_settlement_info_by_ids_200_response:
      example:
        psp_token_balances:
        - settled_amount: "500.00"
          pending_currency_balance: "500.00"
          available_currency_balance: "500.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          created_timestamp: 1744689600
          merchant_id: "123"
          available_amount: "500.00"
          acquiring_type: Order
          pending_amount: "500.00"
        - settled_amount: "500.00"
          pending_currency_balance: "500.00"
          available_currency_balance: "500.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          created_timestamp: 1744689600
          merchant_id: "123"
          available_amount: "500.00"
          acquiring_type: Order
          pending_amount: "500.00"
        token_balances:
        - settled_amount: "500.00"
          pending_currency_balance: "500.00"
          available_currency_balance: "500.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          created_timestamp: 1744689600
          merchant_id: "123"
          available_amount: "500.00"
          acquiring_type: Order
          pending_amount: "500.00"
        - settled_amount: "500.00"
          pending_currency_balance: "500.00"
          available_currency_balance: "500.00"
          token_id: ETH_USDT
          updated_timestamp: 1744689600
          created_timestamp: 1744689600
          merchant_id: "123"
          available_amount: "500.00"
          acquiring_type: Order
          pending_amount: "500.00"
      properties:
        psp_token_balances:
          items:
            $ref: '#/components/schemas/SettlementInfo'
          type: array
        token_balances:
          items:
            $ref: '#/components/schemas/SettlementInfo'
          type: array
      type: object
    list_settlement_requests_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - settlement_request_id: S20250304-1001
          settlements:
          - amount: "500.00"
            chain_id: ETH
            created_timestamp: 1744689600
            merchant_id: M1001
            transactions:
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            settled_amount: "500.00"
            crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
            token_id: ETH_USDT
            updated_timestamp: 1744689600
            payout_channel: Crypto
            currency: USD
            acquiring_type: Order
            status: Pending
            bank_account:
              bank_account_id: 123e4567-e89b-12d3-a456-426614174003
              updated_timestamp: 1744689600
              created_timestamp: 1744689600
              info:
                beneficiary_name: John Doe
                beneficiary_address: "123 Main St, Anytown, USA"
                account_number: "4111111111111111"
                bank_name: ABC Bank
                bank_country: USA
                bank_address: "456 Bank Ave, Cityville, USA"
                swift_or_bic: ABCDEFGH
          - amount: "500.00"
            chain_id: ETH
            created_timestamp: 1744689600
            merchant_id: M1001
            transactions:
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            settled_amount: "500.00"
            crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
            token_id: ETH_USDT
            updated_timestamp: 1744689600
            payout_channel: Crypto
            currency: USD
            acquiring_type: Order
            status: Pending
            bank_account:
              bank_account_id: 123e4567-e89b-12d3-a456-426614174003
              updated_timestamp: 1744689600
              created_timestamp: 1744689600
              info:
                beneficiary_name: John Doe
                beneficiary_address: "123 Main St, Anytown, USA"
                account_number: "4111111111111111"
                bank_name: ABC Bank
                bank_country: USA
                bank_address: "456 Bank Ave, Cityville, USA"
                swift_or_bic: ABCDEFGH
          updated_timestamp: 1744689600
          initiator: api_key_b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b35b81dcc15f520e9d
          created_timestamp: 1744689600
          request_id: SETTLEMENT123
          status: Pending
        - settlement_request_id: S20250304-1001
          settlements:
          - amount: "500.00"
            chain_id: ETH
            created_timestamp: 1744689600
            merchant_id: M1001
            transactions:
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            settled_amount: "500.00"
            crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
            token_id: ETH_USDT
            updated_timestamp: 1744689600
            payout_channel: Crypto
            currency: USD
            acquiring_type: Order
            status: Pending
            bank_account:
              bank_account_id: 123e4567-e89b-12d3-a456-426614174003
              updated_timestamp: 1744689600
              created_timestamp: 1744689600
              info:
                beneficiary_name: John Doe
                beneficiary_address: "123 Main St, Anytown, USA"
                account_number: "4111111111111111"
                bank_name: ABC Bank
                bank_country: USA
                bank_address: "456 Bank Ave, Cityville, USA"
                swift_or_bic: ABCDEFGH
          - amount: "500.00"
            chain_id: ETH
            created_timestamp: 1744689600
            merchant_id: M1001
            transactions:
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            - amount: "0.15"
              token_id: ETH_USDT
              updated_timestamp: 1610445878970
              tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
              to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
              created_timestamp: 1610445878970
              tx_id: tx_123e4567-e89b-12d3-a456-426614174003
              from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
              status: Submitted
            settled_amount: "500.00"
            crypto_address_id: addr_ethusdt_20250429T134512_a8c31f
            token_id: ETH_USDT
            updated_timestamp: 1744689600
            payout_channel: Crypto
            currency: USD
            acquiring_type: Order
            status: Pending
            bank_account:
              bank_account_id: 123e4567-e89b-12d3-a456-426614174003
              updated_timestamp: 1744689600
              created_timestamp: 1744689600
              info:
                beneficiary_name: John Doe
                beneficiary_address: "123 Main St, Anytown, USA"
                account_number: "4111111111111111"
                bank_name: ABC Bank
                bank_country: USA
                bank_address: "456 Bank Ave, Cityville, USA"
                swift_or_bic: ABCDEFGH
          updated_timestamp: 1744689600
          initiator: api_key_b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b35b81dcc15f520e9d
          created_timestamp: 1744689600
          request_id: SETTLEMENT123
          status: Pending
      properties:
        data:
          items:
            $ref: '#/components/schemas/Settlement'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_settlement_request_request:
      properties:
        request_id:
          description: The request ID that is used to track a settlement request.
            The request ID is provided by you and must be unique.
          example: SETTLEMENT123
          type: string
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        payout_channel:
          $ref: '#/components/schemas/PayoutChannel'
        settlement_type:
          $ref: '#/components/schemas/SettlementType'
        settlements:
          items:
            $ref: '#/components/schemas/CreateSettlement'
          type: array
      required:
      - request_id
      - settlements
      type: object
    list_top_up_payers_200_response_data_inner:
      example:
        updated_timestamp: 1744693200
        payer_id: P20250619T0310056d7aa
        created_timestamp: 1744689600
        merchant_id: M1001
        developer_fee_rate: "0.01"
        transactions:
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
        - amount: "0.15"
          token_id: ETH_USDT
          updated_timestamp: 1610445878970
          tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
          to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
          created_timestamp: 1610445878970
          tx_id: tx_123e4567-e89b-12d3-a456-426614174003
          from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
          status: Submitted
      properties:
        merchant_id:
          description: The merchant ID.
          example: M1001
          type: string
        payer_id:
          description: A unique identifier assigned by Cobo to track and identify
            individual payers.
          example: P20250619T0310056d7aa
          type: string
        developer_fee_rate:
          description: The developer fee rate applied to top-up transactions made
            by this payer. Expressed as a decimal string where "0.1" represents 10%.
          example: "0.01"
          type: string
        created_timestamp:
          description: "The creation time of the payer, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744689600
          type: integer
        updated_timestamp:
          description: "The last update time of the payer, represented as a UNIX timestamp\
            \ in seconds."
          example: 1744693200
          type: integer
        transactions:
          description: An array of top-up transactions associated with this payer.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
          type: array
      required:
      - developer_fee_rate
      - merchant_id
      - payer_id
      type: object
    list_top_up_payers_200_response:
      example:
        pagination:
          before: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          total_count: 10000
          after: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
        data:
        - updated_timestamp: 1744693200
          payer_id: P20250619T0310056d7aa
          created_timestamp: 1744689600
          merchant_id: M1001
          developer_fee_rate: "0.01"
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
        - updated_timestamp: 1744693200
          payer_id: P20250619T0310056d7aa
          created_timestamp: 1744689600
          merchant_id: M1001
          developer_fee_rate: "0.01"
          transactions:
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
          - amount: "0.15"
            token_id: ETH_USDT
            updated_timestamp: 1610445878970
            tx_hash: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            to_address: 0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15
            created_timestamp: 1610445878970
            tx_id: tx_123e4567-e89b-12d3-a456-426614174003
            from_address: 0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537
            status: Submitted
      properties:
        data:
          items:
            $ref: '#/components/schemas/list_top_up_payers_200_response_data_inner'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    EstimatedEvmEip1559Fee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      - $ref: '#/components/schemas/FeeReserved'
      required:
      - gas_limit
      - max_fee_per_gas
      - max_priority_fee_per_gas
    EstimatedEvmLegacyFee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeGasLimit'
      - $ref: '#/components/schemas/FeeReserved'
      required:
      - gas_limit
      - gas_price
    EstimatedUtxoFee_slow:
      allOf:
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
      required:
      - fee_amount
      - fee_rate
    EstimatedSOLFee_slow:
      allOf:
      - $ref: '#/components/schemas/SOLComputeUnit'
      - $ref: '#/components/schemas/SOLBase'
      required:
      - base_fee
      - compute_unit_limit
      - compute_unit_price
    EstimatedFILFee_slow:
      allOf:
      - $ref: '#/components/schemas/FILPrice'
      - $ref: '#/components/schemas/FILBase'
      required:
      - gas_base
      - gas_fee_cap
      - gas_limit
      - gas_premium
    Transaction_source:
      discriminator:
        mapping:
          Asset: '#/components/schemas/TransactionCustodialAssetWalletSource'
          Web3: '#/components/schemas/TransactionCustodialWeb3WalletSource'
          Org-Controlled: '#/components/schemas/TransactionMPCWalletSource'
          User-Controlled: '#/components/schemas/TransactionMPCWalletSource'
          Safe{Wallet}: '#/components/schemas/TransactionSmartContractSafeWalletSource'
          Main: '#/components/schemas/TransactionExchangeWalletSource'
          Sub: '#/components/schemas/TransactionExchangeWalletSource'
          DepositFromAddress: '#/components/schemas/TransactionDepositFromAddressSource'
          DepositFromWallet: '#/components/schemas/TransactionDepositFromWalletSource'
          DepositFromLoop: '#/components/schemas/TransactionDepositFromLoopSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/TransactionCustodialAssetWalletSource'
      - $ref: '#/components/schemas/TransactionCustodialWeb3WalletSource'
      - $ref: '#/components/schemas/TransactionMPCWalletSource'
      - $ref: '#/components/schemas/TransactionSmartContractSafeWalletSource'
      - $ref: '#/components/schemas/TransactionExchangeWalletSource'
      - $ref: '#/components/schemas/TransactionDepositFromAddressSource'
      - $ref: '#/components/schemas/TransactionDepositFromWalletSource'
      - $ref: '#/components/schemas/TransactionDepositFromLoopSource'
    Transaction_destination:
      discriminator:
        mapping:
          Address: '#/components/schemas/TransactionTransferToAddressDestination'
          CustodialWallet: '#/components/schemas/TransactionTransferToWalletDestination'
          ExchangeWallet: '#/components/schemas/TransactionTransferToWalletDestination'
          EVM_Contract: '#/components/schemas/TransactionEvmContractDestination'
          SOL_Contract: '#/components/schemas/TransactionSolContractDestination'
          COSMOS_Contract: '#/components/schemas/TransactionCosmosContractDestination'
          EVM_EIP_191_Signature: '#/components/schemas/TransactionMessageSignEIP191Destination'
          EVM_EIP_712_Signature: '#/components/schemas/TransactionMessageSignEIP712Destination'
          BTC_BIP_137_Signature: '#/components/schemas/TransactionBIP137Destination'
          BTC_BIP_322_Signature: '#/components/schemas/TransactionBIP322Destination'
          COSMOS_ADR_36_Signature: '#/components/schemas/TransactionCosmosAdr36Destination'
          Raw_Message_Signature: '#/components/schemas/TransactionRawMessageSignDestination'
          DepositToAddress: '#/components/schemas/TransactionDepositToAddressDestination'
          DepositToWallet: '#/components/schemas/TransactionDepositToWalletDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/TransactionTransferToAddressDestination'
      - $ref: '#/components/schemas/TransactionTransferToWalletDestination'
      - $ref: '#/components/schemas/TransactionEvmContractDestination'
      - $ref: '#/components/schemas/TransactionSolContractDestination'
      - $ref: '#/components/schemas/TransactionCosmosContractDestination'
      - $ref: '#/components/schemas/TransactionMessageSignEIP191Destination'
      - $ref: '#/components/schemas/TransactionMessageSignEIP712Destination'
      - $ref: '#/components/schemas/TransactionRawMessageSignDestination'
      - $ref: '#/components/schemas/TransactionDepositToAddressDestination'
      - $ref: '#/components/schemas/TransactionDepositToWalletDestination'
      - $ref: '#/components/schemas/TransactionBIP137Destination'
      - $ref: '#/components/schemas/TransactionBIP322Destination'
      - $ref: '#/components/schemas/TransactionCosmosAdr36Destination'
    Transaction_replacement:
      example:
        replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        replaced_by_type: Resend
        replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replaced_type: Resend
      properties:
        replaced_by_type:
          $ref: '#/components/schemas/ReplaceType'
        replaced_by_transaction_id:
          description: The ID of the transaction that this transaction was replaced
            by.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_by_transaction_hash:
          description: The hash of the transaction that this transaction was replaced
            by.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        replaced_type:
          $ref: '#/components/schemas/ReplaceType'
        replaced_transaction_id:
          description: The ID of the transaction that this transaction replaced.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_transaction_hash:
          description: The hash of the transaction that this transaction replaced.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
      type: object
    TransactionDepositToAddressDestination_tx_info:
      properties:
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      type: object
    TransactionTransferToAddressDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      type: object
    TransactionTransferToAddressDestination_utxo_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      type: object
    TransactionRbf_source:
      discriminator:
        mapping:
          Web3: '#/components/schemas/CustodialWeb3TransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcTransferSource'
      - $ref: '#/components/schemas/CustodialWeb3TransferSource'
    AddressTransferDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      type: object
    AddressTransferDestination_utxo_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      type: object
    AddressesEventData_allOf_addresses:
      allOf:
      - properties:
          wallet_id:
            description: The wallet ID.
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
        required:
        - wallet_id
        type: object
      - $ref: '#/components/schemas/AddressInfo'
    EthStakingExtra_allOf_beacon_validators:
      properties:
        pubkey:
          description: The public key of the validator.
          example: 0x123456789abcdef
          type: string
        status:
          $ref: '#/components/schemas/AmountStatus'
        apy:
          description: The annual percentage yield (APY) of the validator.
          example: 0.02
          type: number
        staked_amount:
          description: The staked amount.
          example: "100.00"
          type: string
        rewards_received:
          description: The rewards received.
          example: "10.00"
          type: string
        updated_timestamp:
          description: "The time when the validator's status was last updated, in\
            \ Unix timestamp format and measured in milliseconds."
          example: 1640995200000
          format: int64
          type: integer
      type: object
    Activity_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakingActivityDetailExtra'
          ETHBeacon: '#/components/schemas/EthStakingActivityDetailExtra'
          CoreBTC: '#/components/schemas/CoreStakingActivityDetailExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakingActivityDetailExtra'
      - $ref: '#/components/schemas/EthStakingActivityDetailExtra'
      - $ref: '#/components/schemas/CoreStakingActivityDetailExtra'
    CreateStakeActivity_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakeExtra'
          ETHBeacon: '#/components/schemas/EthStakeExtra'
          CoreBTC: '#/components/schemas/CoreStakeExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakeExtra'
      - $ref: '#/components/schemas/EthStakeExtra'
      - $ref: '#/components/schemas/CoreStakeExtra'
    CreateUnstakeActivity_extra:
      description: Additional protocol-specific information required for the unstaking
        operation. The required fields vary depending on the staking protocol.
      discriminator:
        mapping:
          ETHBeacon: '#/components/schemas/EthUnstakeExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/EthUnstakeExtra'
    AmountDetails_inner:
      example:
        amount: "100.00"
        status: Active
      properties:
        status:
          $ref: '#/components/schemas/AmountStatus'
        amount:
          description: The staking amount.
          example: "100.00"
          type: string
      required:
      - amount
      - status
      type: object
    PoolDetails_allOf_validators_info:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonValidator'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonValidator'
    Stakings_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakingExtra'
          ETHBeacon: '#/components/schemas/EthStakingExtra'
          CoreBTC: '#/components/schemas/CoreStakingExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakingExtra'
      - $ref: '#/components/schemas/EthStakingExtra'
      - $ref: '#/components/schemas/CoreStakingExtra'
    TravelRuleDepositExchangesOrVASP_entity_info:
      discriminator:
        mapping:
          LEGAL: '#/components/schemas/TravelRuleDepositLegalEntity'
          NATURAL: '#/components/schemas/TravelRuleDepositNaturalEntity'
        propertyName: selected_entity_type
      oneOf:
      - $ref: '#/components/schemas/TravelRuleDepositLegalEntity'
      - $ref: '#/components/schemas/TravelRuleDepositNaturalEntity'
    TravelRuleDepositRequest_travel_rule_info:
      discriminator:
        mapping:
          EXCHANGES_OR_VASP: '#/components/schemas/TravelRuleDepositExchangesOrVASP'
          SELF_CUSTODY_WALLET: '#/components/schemas/SelfCustodyWallet'
        propertyName: destination_wallet_type
      oneOf:
      - $ref: '#/components/schemas/TravelRuleDepositExchangesOrVASP'
      - $ref: '#/components/schemas/SelfCustodyWallet'
    TravelRuleWithdrawExchangesOrVASP_entity_info:
      discriminator:
        mapping:
          LEGAL: '#/components/schemas/TravelRuleWithdrawLegalEntity'
          NATURAL: '#/components/schemas/TravelRuleWithdrawNaturalEntity'
        propertyName: selected_entity_type
      oneOf:
      - $ref: '#/components/schemas/TravelRuleWithdrawLegalEntity'
      - $ref: '#/components/schemas/TravelRuleWithdrawNaturalEntity'
    TravelRuleWithdrawRequest_travel_rule_info:
      discriminator:
        mapping:
          EXCHANGES_OR_VASP: '#/components/schemas/TravelRuleWithdrawExchangesOrVASP'
          SELF_CUSTODY_WALLET: '#/components/schemas/SelfCustodyWallet'
        propertyName: destination_wallet_type
      oneOf:
      - $ref: '#/components/schemas/SelfCustodyWallet'
      - $ref: '#/components/schemas/TravelRuleWithdrawExchangesOrVASP'
    GraphQLError_locations_inner:
      properties:
        line:
          description: The line number in the query where the error occurred.
          type: integer
        column:
          description: The column number in the query where the error occurred.
          type: integer
      type: object
    PolicyAction_content:
      description: The definition of the quorum action. This property is applicable
        only when `action_type` is `Quorum`.
      example:
        user_ids:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        roles:
        - admin
        - admin
        threshold: 15
        type: PART_APPROVAL
      properties:
        type:
          description: "The quorum type. Possible values include: \n  - `FULL_APPROVAL`:\
            \ Requires approval from all participants.\n  - `PART_APPROVAL`: Requires\
            \ approval from a specified number of participants.\n"
          enum:
          - FULL_APPROVAL
          - PART_APPROVAL
          example: PART_APPROVAL
          type: string
        roles:
          description: "The roles included in the quorum. Possible values include\
            \ `admin`, `spender`, `operator`, and `approver`."
          items:
            example: admin
            type: string
          type: array
        user_ids:
          description: The ID of the users included in the quorum.
          items:
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
          type: array
        threshold:
          description: The number of approvers required to meet the quorum.
          example: 15
          format: int32
          type: integer
      required:
      - type
      type: object
  securitySchemes:
    CoboAuth:
      description: |
        The API key. For more details, refer to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key).

        In the API playground, enter your [API secret](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-secret), and your API key will be accordingly calculated.
      in: header
      name: BIZ-API-KEY
      type: apiKey
    CoboSignature:
      description: "This field contains the EDDSA(ED25519) signature, generated using\
        \ `HTTP_METHOD`, `HTTP_REQUEST_PATH`, `TIMESTAMP`, and `PARAMS`."
      in: header
      name: BIZ-API-SIGNATURE
      type: apiKey
    CoboNonce:
      description: "The UNIX EPOCH timestamp when calling the API, in milliseconds."
      in: header
      name: BIZ-API-NONCE
      type: apiKey
    OAuth2:
      description: "The [Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens).\
        \ Use this authorization method only if you are developing Cobo Portal Apps\
        \ for installation and use across different organizations."
      flows:
        authorizationCode:
          authorizationUrl: https://auth.cobo.com/authorize
          scopes:
            address_book.read: Read address book
            api_key.read: Read API key information
            callback.read: Read callback message
            callback.resend: Resend callback message
            wallet.create: Create wallet
            wallet.read: Read wallet information
            wallet.update: Update wallet information
            wallet.delete: Delete wallet information
            wallet.create_address: Create wallet address
            wallet.manage_utxo: Manage UTXO
            mpc_project.create: Create MPC project
            mpc_project.read: Read MPC project information
            mpc_project.update: Update MPC project information
            mpc_vault.create: Create MPC Vault
            mpc_vault.read: Read MPC Vault information
            mpc_vault.update: Update MPC Vault information
            mpc_key_group.create: Create MPC key group
            mpc_key_group.read: Read MPC key group information
            mpc_key_group.update: Update MPC key group information
            mpc_key_group.delete: Delete MPC key group information
            transaction.read: Read transaction information
            transaction.withdraw: Make withdrawals
            transaction.estimate_fee: Estimate transaction fee
            transaction.contract_call: Initiate contract calls
            transaction.message_sign: Initiate message signings
            transaction.stake: Stake assets
            transaction.unstake: Unstake assets
            transaction.unstake_withdraw: Withdraw unstaked assets
            transaction.manage: Manage ongoing transactions
            transaction.update: Update transaction notes
            travel_rule.read: Read travel rule information
            travel_rule.edit: Edit travel rule information
            webhook.read: Read webhook URLs/events
            webhook.edit: Edit webhook URLs
            webhook.resend: Resend webhook events
            payment_orders_payin.create: Create pay-in order
            payment_orders_payin.read: Read pay-in order information
            payment_orders_payin.update: Update pay-in order
            payment_orders_refund.create: Create payment refund order
            payment_orders_refund.read: Read payment refund order information
            payment_settlement.create: Create payment settlement request
            payment_settlement.read: Read payment settlement request information
            payment_merchant.create: Create payment merchant
            payment_merchant.read: Read payment merchant information
            payment_merchant.update: Update payment merchant
          tokenUrl: https://auth.cobo.com/oauth/token
      type: oauth2
