openapi: 3.0.3
info:
  contact:
    email: support@cobo.com
    name: Cobo WaaS
    url: https://www.cobo.com/waas
  description: |
    Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of
    crypto wallet technologies with powerful and flexible access controls.

    # Wallet technologies
    - Custodial Wallet
    - MPC Wallet
    - Smart Contract Wallet (Based on Safe{Wallet}, to be supported later)
    - Exchange Wallet(To be supported later)

    # Risk Control technologies
    - Workflow
    - Access Control List (ACL)

    # Risk Control targets
    - Wallet Management
      - User/team and their permission management
      - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc.
    - Blockchain Interaction
      - Crypto transfer
      - Smart Contract Invocation

    # Important
    HTTPS only. RESTful, resource oriented

    # Get Started
    Set up your APIs or get authorization

    # Authentication and Authorization
    CoboAuth

    # Request and Response
    application/json

    # Error Handling

    ### Common error codes
    | Error Code | Description |
    | -- | -- |
    | `2000` | Internal error |
    | `2002` | Unsupported HTTP method |
    | `2003` | Missing required parameters |
    | `2006` | Illegal parameter format or value |
    | `2010` | Exceeded frequency limit |
    | `2020` | Missing action |
    | `2021` | Missing handler |
    | `2022` | Missing required request header |
    | `2023` | Verification failed |
    | `2024` | Authentication failed |
    | `2025` | Forbidden |
    | `2026` | Too many requests |
    | `2027` | Exceed quota limit |
    | `2028` | Not found |
    | `2029` | Invalid status |
    | `2040` | Duplicated key |

    ### API-specific error codes
    For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v2/wallets.

    # Rate and Usage Limiting

    # Pagination
    # Support
    [Developer Hub](https://cobo.com/developers)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://cobo.com/waas/tos/
  title: Cobo Wallet as a Service 2.0
  version: 1.0.0
servers:
- description: Development environment
  url: https://api.dev.cobo.com/v2
- description: Production environment
  url: https://api.cobo.com/v2
security:
- CoboAuth: []
tags:
- description: Operations related to all wallets.
  name: Wallets
- description: Operations related to mpc wallet.
  name: Wallets - MPC Wallets
- description: Operations related to exchange wallet.
  name: Wallets - Exchange Wallet
- description: Operations related to all transactions.
  name: Transactions
- description: Operations related to webhooks.
  name: Developers - Webhooks
- description: Operations related to staking.
  name: Stakings
- description: Operations related to OAuth.
  name: OAuth
paths:
  /wallets/chains:
    get:
      description: |
        This operation retrieves the metadata of all chains supported by Cobo WaaS 2.0.

        It provides details such as the chain ID, chain symbol, and other relevant information. You can filter the result by chain ID. The chain metadata is publicly available without any permission restrictions.
      operationId: get_chains
      parameters:
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_chains_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List all supported chains
      tags:
      - Wallets
  /wallets/chains/{chain_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified chain.
      operationId: get_chain_by_id
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: ETH
        explode: false
        in: path
        name: chain_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfo'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Get chain information
      tags:
      - Wallets
  /wallets/tokens:
    get:
      description: |
        This operation retrieves the metadata of all tokens supported by Cobo WaaS 2.0.

        It provides details such as token ID, token symbol, and other relevant information. You can filter the result by token ID.  The token metadata is publicly available without any permission restrictions.
      operationId: get_tokens
      parameters:
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List all supported tokens
      tags:
      - Wallets
  /wallets/tokens/{token_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified token.
      operationId: get_token_by_id
      parameters:
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Get token information
      tags:
      - Wallets
  /wallets/supported_chains:
    get:
      description: |
        This operation retrieves all chains supported by a specific wallet type or subtype.
      operationId: get_supported_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_chains_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List wallet supported chains
      tags:
      - Wallets
  /wallets/supported_tokens:
    get:
      description: |
        This operation retrieves all tokens supported by a specific wallet type or subtype. You can filter the result by chain ID.
      operationId: get_supported_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List wallet supported tokens
      tags:
      - Wallets
  /wallets/enabled_chains:
    get:
      description: "This operation retrieves all the chains that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type or subtype. If\
        \ you do not specify a wallet type, this operation returns a combination of\
        \ chains supported by each wallet type.\n"
      operationId: get_enabled_chains
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_chains_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List organization enabled chains
      tags:
      - Wallets
  /wallets/enabled_tokens:
    get:
      description: "This operation retrieves all the tokens that can be used by your\
        \ organization. \n\nYou can filter the result by wallet type, subtype, and\
        \ chain ID. If you do not specify a wallet type, this operation returns a\
        \ combination of chains supported by each wallet type.\n"
      operationId: get_enabled_tokens
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_tokens_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List organization enabled tokens
      tags:
      - Wallets
  /wallets:
    get:
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type, subtype, and vault ID (for MPC Wallets).

        <Note>You must specify either the wallet type or subtype, or both.</Note>
      operationId: list_wallets
      parameters:
      - description: |
          The wallet type.

          - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

          - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

          - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

          - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
        explode: true
        in: query
        name: wallet_type
        required: false
        schema:
          $ref: '#/components/schemas/WalletType'
        style: form
      - description: |
          The wallet subtype.

          - `Asset`: Custodial Wallets (Asset Wallets)

          - `Web3`: Custodial Wallets (Web3 Wallets)

          - `Main`: Exchange Wallets (Main Account)

          - `Sub`: Exchange Wallets (Sub Account)

          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

          - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
        explode: true
        in: query
        name: wallet_subtype
        required: false
        schema:
          $ref: '#/components/schemas/WalletSubtype'
        style: form
      - description: The project ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The MPC vault ID. This parameter is applicable to MPC Wallets
          only.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_wallets_200_response'
          description: Successfully listed wallets
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List all wallets
      tags:
      - Wallets
    post:
      description: |
        This operation creates a wallet with the provided information.
      operationId: create_wallet
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:create
        - mpc_organization_controlled_wallet:create
        - mpc_user_controlled_wallet:create
      summary: Create wallet
      tags:
      - Wallets
  /wallets/{wallet_id}:
    get:
      description: |
        This operation retrieves the detailed information about a specified wallet.
      operationId: get_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successful get a wallet info
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Get wallet information
      tags:
      - Wallets
    put:
      description: |
        This operation updates the information of a specified wallet.

        For Exchange Wallets, you can update the API key, API secret, and other information about your exchange accounts with this operation. For other wallet types, you can only update the wallet name.
      operationId: update_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInfo'
          description: Successfully updated address
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:edit
        - mpc_organization_controlled_wallet:edit
        - mpc_user_controlled_wallet:edit
      summary: Update wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/delete:
    post:
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      operationId: delete_wallet_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_wallet_by_id_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Delete wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/spendables:
    get:
      description: |
        The operation retrieves a list of spendable unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: get_spendable_list
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: false
        schema:
          description: The wallet address.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_spendable_list_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List spendable UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/spendables/lock:
    post:
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: lock_spendable_list
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockSpendablesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_spendable_list_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Lock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/spendables/unlock:
    post:
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      operationId: unlock_spendable_list
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/lockSpendablesBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lock_spendable_list_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Unlock UTXOs
      tags:
      - Wallets
  /wallets/{wallet_id}/max_transferable_value:
    get:
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.
      operationId: get_max_transferable_value
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The fee rate in sats/vByte or fee_price in gwei.
        example: "0.001"
        explode: true
        in: query
        name: fee_rate
        required: true
        schema:
          type: string
        style: form
      - description: The recipient's address.
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: to_address
        required: true
        schema:
          type: string
        style: form
      - description: The sender's address.
        example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        explode: true
        in: query
        name: from_address
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxTransferableValue'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Get maximum transferable value
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses:
    get:
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      operationId: list_addresses
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "A list of wallet addresses, separated by comma."
        example: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97"
        explode: true
        in: query
        name: addresses
        required: false
        schema:
          description: "A list of wallet addresses, separated by comma."
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List wallet addresses
      tags:
      - Wallets
    post:
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: generate_wallet_address
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AddressInfo'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:add
        - mpc_organization_controlled_wallet:add
        - mpc_user_controlled_wallet:add
      summary: Generate new addresses in wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address}:
    get:
      description: |
        This operation retrieves the detailed information about a specified address within a wallet.
      operationId: get_address_by_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_addresses_200_response'
          description: Successfully listed addresses
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Get address information
      tags:
      - Wallets
  /wallets/address/check_validity:
    get:
      description: |
        This operation verifies if a given address is valid for a specific token.
      operationId: check_address_validity
      parameters:
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: true
        schema:
          type: string
        style: form
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: true
        in: query
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check_address_validity_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Check address validity
      tags:
      - Wallets
  /wallets/{wallet_id}/tokens:
    get:
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      operationId: get_wallet_token_balances
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_wallet_token_balances_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: List token balances by wallet
      tags:
      - Wallets
  /wallets/{wallet_id}/addresses/{address}/tokens:
    get:
      description: "The operation retrieves a list of token balances for a specified\
        \ address within an MPC Wallet. \n\n<Note>This operation is applicable to\
        \ MPC Wallets only.</Note>\n"
      operationId: get_wallet_address_token_balances
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The wallet address.
        example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
        explode: false
        in: path
        name: address
        required: true
        schema:
          description: The wallet address.
          type: string
        style: simple
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_wallet_token_balances_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List token balances by address
      tags:
      - Wallets
  /wallets/mpc/cobo_key_holders:
    get:
      description: "This operation retrieves a list of all Cobo key share holders\
        \ and their information. \n\n**Note:** Currently, `type` will only return\
        \ `COBO` and will never return `MOBILE` or `API`.\n"
      operationId: list_cobo_key_holder
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyHolder'
                type: array
          description: Successfully listed MPC Wallets' key share holder information.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      summary: List all Cobo key share holders
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects:
    get:
      description: |
        This operation retrieves a list of all projects.
      operationId: list_mpc_project
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MPCProject'
                type: array
          description: Successfully listed all projects.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List all projects
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a project with the required `name`, `node_count`, and `threshold` specification.
      operationId: create_mpc_project
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully created project.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_user_controlled_project:manage
      summary: Create project
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/projects/{project_id}:
    get:
      description: |
        This operation retrieves detailed information about a project specified by `project_id`.

        You can retrieve `project_id`s by calling [List all projects](/v2/api-references/wallets--mpc-wallet/list-all-mpc-projects).
      operationId: get_mpc_project
      parameters:
      - description: The project ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      summary: Get project information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates the `name` of the project specified by `project_id`.
      operationId: update_mpc_project
      parameters:
      - description: The project ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCProject'
          description: Successfully listed all vaults.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_user_controlled_project:manage
      summary: Update project name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults:
    get:
      description: |
        This operation retrieves a list of all vaults.

        By optionally specifying a `project_id`, you can retrieve a list of all vaults under a single project.
      operationId: list_mpc_vault
      parameters:
      - description: The project ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MPCVault'
                type: array
          description: Successfully listed all vaults.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List all vaults
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a vault with the specified `name`, `vault_type`, and `project_id`.

        **Notes for `project_id`:**
        1. If `vault_type` is `OrgControlled`, the value of `project_id` will be ignored.
        2. If `vault_type` is `UserControlled`, then `project_id` is required.
      operationId: create_mpc_vault
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully created the vault.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_vault:manage
        - mpc_user_controlled_vault:manage
      summary: Create vault
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}:
    get:
      description: |
        This operation retrieves detailed information about the vault specified by `vault_id`.

        You can obtain `vault_id`s by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
      operationId: get_mpc_vault
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully retrieved vault information.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      summary: Get vault information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates the name of the vault specified by `vault_id` to `name`.
      operationId: modify_mpc_vault
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MPCVault'
          description: Successfully modify mpc vault
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_vault:manage
        - mpc_user_controlled_vault:manage
      summary: Update vault name
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_groups:
    get:
      description: |
        This operation retrieves a list of all key share groups under `vault_id`.

        You can optionally filter the results further by specifying a `key_group_type`.
      operationId: list_key_group
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          The selected key share group type to retrieve. Possible values include:
          - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

          - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

          - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

          **Note:** If left empty, all key share group types will be retrieved.
        explode: true
        in: query
        name: key_group_type
        required: false
        schema:
          $ref: '#/components/schemas/KeyGroupType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KeyGroup'
                type: array
          description: Successfully listed key share groups.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List all key share groups
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a key share group under the specified `vault_id` with the specified `group_type`, `node_count`, `threshold`, and `key_holders`.
      operationId: create_key_group
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createKeyGroupBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: mpc vault successfully created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Create key share group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/key_groups/{key_share_group_id}:
    delete:
      description: This operation deletes the key share group specified by `key_group_id`
        under `vault_id`.
      operationId: delete_key_group
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share group ID.
        example: "880311524363903326"
        explode: false
        in: path
        name: key_share_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Resource successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Delete key share group
      tags:
      - Wallets - MPC Wallets
    get:
      description: |
        This operation retrieves detailed information about the key share group specified by `key_group_id` and located under `vault_id`.
      operationId: get_key_group
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share group ID.
        example: "880311524363903326"
        explode: false
        in: path
        name: key_share_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: Successfully get mpc tss group
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      summary: Get key share group information
      tags:
      - Wallets - MPC Wallets
    put:
      description: |
        This operation updates a key share group based on the action specified by `update_key_share_group_action`.

        The key share group to be updated is specified by `key_group_id` and `vault_id`.
      operationId: update_key_group
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The key share group ID.
        example: "880311524363903326"
        explode: false
        in: path
        name: key_share_group_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_key_group_request'
        description: |
          The available actions of key share group update. Possible values include:
          - `UpgradeToMainGroup`: This changes the specified key share group's type to [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyGroup'
          description: Successfully modify mpc tss group
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_key_group:manage
        - mpc_user_controlled_key_group:manage
      summary: Update key share group
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests:
    get:
      description: |
        This operation retrieves a list of TSS requests information under `vault_id`.

        The result is further filtered by the required `target_key_group_id`.
      operationId: list_tss_request
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The target key share group ID of the TSS request.
        example: "880311524363903326"
        explode: true
        in: query
        name: target_key_group_id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TSSRequest'
                type: array
          description: Successfully retrieved TSS request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      summary: List TSS requests
      tags:
      - Wallets - MPC Wallets
    post:
      description: |
        This operation creates a TSS request for `target_key_group_id` under `vault_id` to perform actions specified by `type` such as key generation and recovery.

        **Notes for the optional `used_key_group_id` and `detail_params`:**

        1. `used_key_group_id` is used only when the action `type` is either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share group to be used as the source group to create a new `target_key_group`.

        2. `detail_params` are used only when the action `type` is either `KeyGenFromKeyGroup` or `Recovery`.
      operationId: create_tss_request
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: mpc vault successfully created
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Create TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}:
    get:
      description: |
        This operation retrieves detailed information about a TSS request in `vault_id` specified by `tss_request_id`.

        You can retrieve `tss_request_id`s by calling [List TSS requests](/v2/api-references/wallets--mpc-wallet/list-tss-request-information-by-vault-id).
      operationId: get_tss_request
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The TSS request ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully retrieved TSS request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unknown internal error.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Get TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel:
    post:
      description: |
        This operation cancels the TSS request in `vault_id` specified by `tss_request_id`.

        You can retrieve `tss_request_id`s by calling [List TSS requests](/v2/api-references/wallets--mpc-wallet/list-tss-request-information-by-vault-id).
      operationId: cancel_tss_request
      parameters:
      - description: The vault ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: vault_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The TSS request ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: tss_request_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
          description: Successfully modified the TSS request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_tss_request:manage
        - mpc_user_controlled_tss_request:manage
      summary: Cancel TSS request
      tags:
      - Wallets - MPC Wallets
  /wallets/exchanges/settings:
    get:
      description: Retrieve a list of exchanges.
      operationId: list_exchanges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_exchanges_200_response_inner'
                type: array
          description: Successfully list of exchange sub account ids
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List of exchanges
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/supported_assets:
    get:
      description: Retrieve a list of supported asset.
      operationId: get_exchange_supported_assets
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_exchange_supported_assets_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: List the supported assets by exchange id
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/assets/supported_chains:
    get:
      description: Retrieve a list of supported chains.
      operationId: get_exchange_supported_chains
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: "(This concept applies to Exchange Wallets only) The asset ID.\
          \ An asset is a digital representation of a valuable resource on a blockchain\
          \ network. Exchange Wallets group your holdings by asset, even if the same\
          \ asset exists on different blockchains. For example, if your Exchange Wallet\
          \ has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is\
          \ 2 USDT."
        example: USDT
        explode: true
        in: query
        name: asset_id
        required: true
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChainInfo'
                type: array
          description: Successfully listed chains
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: List the supported chains by exchange id and asset id
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/exchanges/assets:
    get:
      description: Retrieve a list of asset balance in exchange wallet.
      operationId: get_exchange_wallet_asset_balances
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique id of the wallet
        example: SPOT
        explode: true
        in: query
        name: sub_wallet_id
        required: true
        schema:
          type: string
        style: form
      - description: "(This concept applies to Exchange Wallets only) The asset ID.\
          \ An asset is a digital representation of a valuable resource on a blockchain\
          \ network. Exchange Wallets group your holdings by asset, even if the same\
          \ asset exists on different blockchains. For example, if your Exchange Wallet\
          \ has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is\
          \ 2 USDT."
        example: USDT
        explode: true
        in: query
        name: asset_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_exchange_wallet_asset_balances_200_response'
          description: Successfully listed tokens
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: List the asset balance in exchange wallet
      tags:
      - Wallets - Exchange Wallet
  /wallets/{wallet_id}/exchanges/subaccounts:
    get:
      description: Retrieve a list of exchange sub accounts.
      operationId: list_sub_accounts_by_wallet_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: List exchange sub accounts by wallet id
      tags:
      - Wallets - Exchange Wallet
    post:
      description: Link exchange sub accounts.
      operationId: link_sub_accounts_by_wallet_id
      parameters:
      - description: The wallet ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: wallet_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link_sub_accounts_by_wallet_id_request'
        description: Request body for linking subaccounts
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Link exchange sub accounts by wallet id
      tags:
      - Wallets - Exchange Wallet
  /wallets/exchanges/{exchange_id}/subaccounts:
    get:
      description: Retrieve a list of exchange sub accounts.
      operationId: list_sub_accounts_by_apikey
      parameters:
      - description: Exchange ID to query
        explode: false
        in: path
        name: exchange_id
        required: true
        schema:
          $ref: '#/components/schemas/ExchangeId'
        style: simple
      - description: The API Key for the exchange
        example: d8f062da-39f4-4a11-8b9d-12595854237f
        explode: true
        in: query
        name: apikey
        required: false
        schema:
          type: string
        style: form
      - description: The API Secret for the exchange.
        example: 75B4F636193162488A3728B4A5797708
        explode: true
        in: query
        name: secret
        required: false
        schema:
          type: string
        style: form
      - description: The API passphrase for the exchange wallet.
        example: A3DBHJV
        explode: true
        in: query
        name: passphrase
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Sub account id list
                example:
                - f47ac10b-58cc-4372-a567-0e02b2c3d479
                items:
                  type: string
                type: array
          description: Successfully list of exchange sub account ids
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: List exchange sub accounts by apikey
      tags:
      - Wallets - Exchange Wallet
  /transactions/fee_rates:
    get:
      description: |
        This operation retrieves current transaction fee rates on the blockchain based on the specified chain ID.
      operationId: list_fee_rates
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: "The fee rate for the specified chain or token. \n\n\
                  The `max_priority_fee` in the EIP-1559 fee model and the `max_fee_amount`\
                  \ properties in the fixed fee model represent the recommended values\
                  \ from the chain.\n"
                items:
                  $ref: '#/components/schemas/FeeRate'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Get fee rates
      tags:
      - Transactions
  /transactions/estimate_fee:
    post:
      description: |
        This operation estimates the transaction fee rates of a token transfer or a contract call for three different transaction speeds (slow, recommended, and fast), based on factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.
      operationId: estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EstimationFee'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Estimate transaction fee
      tags:
      - Transactions
  /transactions/transfer:
    post:
      description: |
        The operation transfers your assets from a wallet created on Cobo Protal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee.

        A transaction request for tracking is returned upon successful operation.
      operationId: create_transfer_transaction
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - custodial_asset_wallet:withdraw
        - mpc_organization_controlled_wallet:withdraw
        - mpc_user_controlled_wallet:withdraw
      summary: Transfer token
      tags:
      - Transactions
  /transactions/contract_call:
    post:
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        Currently, this operation only applies to blockchains that have a similar architecture to Ethereum.
      operationId: create_contract_call_transaction
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:contract_call
        - mpc_user_controlled_wallet:contract_call
      summary: Call smart contract
      tags:
      - Transactions
  /transactions/message_sign:
    post:
      description: |
        This operation creates a transaction to sign the provided message using cryptographic techniques.

        In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.

        Currently, only MPC Wallets support this type of transaction to sign a message.
      operationId: create_message_sign_transaction
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      - OAuth2:
        - mpc_organization_controlled_wallet:message_sign
        - mpc_user_controlled_wallet:message_sign
      summary: Sign message
      tags:
      - Transactions
  /transactions:
    get:
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      operationId: list_transactions
      parameters:
      - description: The request ID that is used to track a withdrawal request. The
          request ID is provided by you and must be unique within your organization.
        example: web_send_by_user_327_1610444045047
        explode: true
        in: query
        name: request_id
        required: false
        schema:
          type: string
        style: form
      - description: "The Cobo ID, which can be used to track a transaction."
        example: "20231213122855000000000000000000"
        explode: true
        in: query
        name: cobo_id
        required: false
        schema:
          type: string
        style: form
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: transaction_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: The transaction hash.
        example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        explode: true
        in: query
        name: transaction_hash
        required: false
        schema:
          type: string
        style: form
      - description: "The transaction type. Possible values include: \n  - `Deposit`:\
          \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n\
          \  - `TokenApproval`: A transaction that grants permission to access your\
          \ tokens. \n  - `ContractCall`: A transaction that interacts with a smart\
          \ contract.\n  - `TransactionFeePayment`: A transaction that is initiated\
          \ by Fee Station to pay your transaction fee.\n  - `RawMessage`: A transaction\
          \ that signs a message.\n"
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionType'
          type: array
        style: form
      - description: "The transaction status. Possible values include: \n  - `Submitted`:\
          \ The transaction is submitted.\n  - `PendingScreening`: The transaction\
          \ is pending screening by Risk Control. \n  - `PendingAuthorization`: The\
          \ transaction is pending approvals.\n  - `PendingSignature`: The transaction\
          \ is pending signature. \n  - `Broadcasting`: The transaction is being broadcast.\n\
          \  - `Confirming`: The transaction is waiting for the required number of\
          \ confirmations.\n  - `Completed`: The transaction is completed.\n  - `Failed`:\
          \ The transaction failed.\n  - `Rejected`: The transaction is rejected.\n"
        explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionStatus'
          type: array
        style: form
      - description: |
          The type of transaction source. Possible values include:
            - `Address`: An external address.
            - `CustodialWallet`: A Custodial Wallet.
            - `MPCWallet`: An MPC Wallet.
            - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).
            - `ExchangeWallet`: An Exchange Wallet.
            - `FeeStation`: A Fee Station.
        explode: true
        in: query
        name: source_type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionSourceType'
          type: array
        style: form
      - description: The wallet ID of the transaction source.
        example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: source_wallet_id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: The address of the transaction source.
        explode: true
        in: query
        name: source_address
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The transaction destination type. Possible values include:\n\
          \  - `Address`: An external address. \n  - `ContractCall`: A transaction\
          \ that interacts with a smart contract.\n  - `MessageSign`: A transaction\
          \ that signs a message. \n  - `CustodialWallet`: A Custodial Wallet.\n \
          \ - `MPCWallet`: An MPC Wallet.\n  - `SafeWallet`: A Smart Contract Wallets\
          \ (Safe{Wallet}).\n  - `ExchangeWallet`: An Exchange Wallet.\n"
        explode: true
        in: query
        name: destination_type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionDestinationType'
          type: array
        style: form
      - description: The wallet ID of the transaction destination.
        example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: destination_wallet_id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: The address of the transaction destination.
        explode: true
        in: query
        name: destination_address
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "A list of chain IDs, separated by comma. The chain ID is the\
          \ unique identifier of a blockchain. You can retrieve the IDs of all the\
          \ chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: "BTC,ETH"
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: "A list of chain IDs, separated by comma."
          type: string
        style: form
      - description: "A list of token IDs, separated by comma. The token ID is the\
          \ unique identifier of a token. You can retrieve the IDs of all the tokens\
          \ you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: "ETH_USDT,ETH_USDC"
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: "A list of token IDs, separated by comma."
          type: string
        style: form
      - description: "A list of asset IDs, separated by comma. (This concept applies\
          \ to Exchange Wallets only) An asset is a digital representation of a valuable\
          \ resource on a blockchain network. Exchange Wallets group your holdings\
          \ by asset, even if the same asset exists on different blockchains. For\
          \ example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on\
          \ TRON, then your asset balance is 2 USDT."
        example: "USDT,USDC"
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: "A list of asset IDs, separated by comma."
          type: string
        style: form
      - description: The MPC vault ID.
        example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: vault_id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: The MPC project ID.
        example:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: project_id
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: "The time when the transaction was created, in Unix timestamp\
          \ format, measured in milliseconds. You can use this parameter to filter\
          \ transactions created on or after the specified time."
        example: 1635744000
        explode: true
        in: query
        name: min_created_timestamp
        required: false
        schema:
          type: integer
        style: form
      - description: "The time when the transaction was created, in Unix timestamp\
          \ format, measured in milliseconds. You can use this parameter to filter\
          \ transactions created on or before the specified time."
        example: 1635744000
        explode: true
        in: query
        name: max_created_timestamp
        required: false
        schema:
          type: integer
        style: form
      - description: The field used for sorting.
        example: timestamp
        explode: true
        in: query
        name: sort_by
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: |
          The sort direction. Possible values include:
            - `ASC`: Sort the results in ascending order.
            - `DESC`: Sort the results in descending order.
        example: ASC
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ""
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_200_response'
          description: The information about the transactions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      security:
      - CoboAuth: []
      summary: List all transactions
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      operationId: get_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: The information about a transaction.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Get transaction information
      tags:
      - Transactions
  /transactions/{transaction_id}/resend:
    post:
      description: "This operation resends a specified transaction. \n\nResending\
        \ a transaction initiates a new attempt to process the transaction that failed\
        \ previously. A transaction can be resent if its status is `failed`.\n\nA\
        \ transaction request for tracking is returned upon successful operation.\n"
      operationId: resend_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Resend transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/cancel:
    post:
      description: "This operation cancels a specified transaction. A transaction\
        \ can be cancelled if its status is either of the following:\n- `Submitted`\n\
        - `PendingScreening`\n- `PendingAuthorization`\n- `PendingSignature` \n\n\
        A transaction request for tracking is returned upon successful operation.\n"
      operationId: cancel_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Cancel transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/drop:
    post:
      description: "This operation drops a specified transaction. \n\nDropping a transaction\
        \ will trigger a Replace-By-Fee (RBF) transaction, which allows the you to\
        \ replace your unconfirmed transaction with a new one with a higher transaction\
        \ fee. A transaction can be dropped if its status is `Broadcasting` or `Confirming`.\n\
        \nA transaction request for tracking is returned upon successful operation.\n"
      operationId: drop_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Drop transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/speedup:
    post:
      description: "This operation accelerates a specified transaction. \n\nSpeeding\
        \ up a transaction will trigger a Replace-By-Fee (RBF) transaction, which\
        \ allows the you to replace your unconfirmed transaction with a new one with\
        \ a higher transaction fee. A transaction can be accelerated if its status\
        \ is either `Broadcasting` or `Confirming`.\n\nA transaction request for tracking\
        \ is returned upon successful operation.\n"
      operationId: speedup_transaction_by_id
      parameters:
      - description: The transaction ID.
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_transfer_transaction_201_response'
          description: The request was successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - CoboAuth: []
      summary: Speed up transaction
      tags:
      - Transactions
  /oauth/token:
    get:
      description: |
        If the Org has already authorized the App, the App can retrieve an Access Token through this interface.
      operationId: get_token
      parameters:
      - description: A unique ID identifier to distinguish different apps.
        example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
        explode: true
        in: query
        name: client_id
        required: true
        schema:
          type: string
        style: form
      - description: A unique ID identifier to distinguish different orgs.
        example: e3986401-4aec-480a-973d-e775a4518413
        explode: true
        in: query
        name: org_id
        required: true
        schema:
          type: string
        style: form
      - description: Identify different types of authorization.
        example: org_implicit
        explode: true
        in: query
        name: grant_type
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_token_200_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Get Access Token
      tags:
      - OAuth
    post:
      description: |
        Use fefresh token to obtain a new access token.
      operationId: refresh_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh_token_request'
        description: The request body for refreshing a new access token.
        required: true
      responses:
        "200":
          $ref: '#/paths/~1oauth~1token/get/responses/200'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - CoboAuth: []
      summary: Refresh Access Token
      tags:
      - OAuth
  /webhooks/endpoints:
    get:
      description: This operation retrieves the information of all webhook endpoints
        registered under your organization. You can filter the result by endpoint
        status and the subscribed event type.
      operationId: list_webhook_endpoints
      parameters:
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/EndpointStatus'
        style: form
      - explode: true
        in: query
        name: event_type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_webhook_endpoints_200_response'
          description: Successfully listed of webhook endpoints
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests.
      summary: List webhook endpoints
      tags:
      - Developers - Webhooks
    post:
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      security:
      - OAuth2:
        - webhook_url:edit
      summary: Register webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}:
    get:
      description: This operation retrieves the information of a specified webhook
        endpoint.
      operationId: get_webhook_endpoint_by_id
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: The request was successful.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get webhook endpoint information
      tags:
      - Developers - Webhooks
    put:
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: Update webhook endpoint successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - OAuth2:
        - webhook_url:edit
      summary: Update webhook endpoint
      tags:
      - Developers - Webhooks
  /webhooks/events/definitions:
    get:
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get webhook event types
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events:
    get:
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        Note: The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.
      operationId: list_events
      parameters:
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - example: Success
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventStatus'
        style: form
      - example: wallets.transaction.updated
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/WebhookEventType'
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_events_200_response'
          description: A list of webhook events has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List all events
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}:
    get:
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
          description: The webhook event information is successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Retrieve event information
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/logs:
    get:
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: get_webhook_event_logs
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: List event logs
      tags:
      - Developers - Webhooks
  /webhooks/endpoints/{endpoint_id}/events/{event_id}/retry:
    post:
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event
      parameters:
      - description: "The event ID. You can obtain a list of event IDs by calling\
          \ [List all events](/v2/api-references/developers--webhooks/list-all-events)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: "The webhook endpoint ID. You can retrieve a list of webhook\
          \ endpoint IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retry_webhook_event_201_response'
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      security:
      - OAuth2:
        - webhook:resend
      summary: Retry event
      tags:
      - Developers - Webhooks
  /stakings/pools:
    get:
      description: |
        This operation retrieves a list of staking pools currently supported.
      operationId: list_staking_pools
      parameters:
      - description: "The chain ID, which is the unique identifier of a blockchain.\
          \ You can retrieve the IDs of all the chains you can use by calling [List\
          \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
        example: ETH
        explode: true
        in: query
        name: chain_id
        required: false
        schema:
          type: string
        style: form
      - description: "The token ID, which is the unique identifier of a token. You\
          \ can retrieve the IDs of all the tokens you can use by calling [List organization\
          \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
        example: ETH_USDT
        explode: true
        in: query
        name: token_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_staking_pools_200_response'
          description: A list of staking protocols has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List staking pools
      tags:
      - Stakings
  /stakings/pools/{pool_id}:
    get:
      description: |
        This operation retrieves a list of staking pools currently supported.
      operationId: get_staking_pool_by_id
      parameters:
      - description: staking pool id
        example: babylon_btc
        explode: false
        in: path
        name: pool_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolDetails'
          description: A staking pool has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get staking pool details
      tags:
      - Stakings
  /stakings/estimate_fee:
    post:
      description: |
        This endpoint calculates the fee required for a transaction based on factors such as network congestion and transaction complexity.
        Users can provide transaction details in the request body, and the response will contain the estimated fee.
      operationId: get_staking_estimation_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EstimationFee'
                type: array
          description: The request was successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
      summary: Estimate staking transaction fee
      tags:
      - Stakings
  /stakings/activities/stake:
    post:
      description: |
        This operation creates a stake activity.
      operationId: create_stake_activity
      requestBody:
        $ref: '#/components/requestBodies/createStakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create staking activity
      tags:
      - Stakings
  /stakings:
    get:
      description: |
        This operation retrieves a list of current stakings.
      operationId: list_stakings
      parameters:
      - description: staking pool id
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_stakings_200_response'
          description: A list of staking has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List all stakings
      tags:
      - Stakings
  /stakings/{staking_id}:
    get:
      description: |
        This operation retrieves a staking by id.
      operationId: get_staking_by_id
      parameters:
      - description: staking id
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: staking_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_stakings_200_response'
          description: A list of staking has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get staking by id
      tags:
      - Stakings
  /stakings/activities/unstake:
    post:
      description: |
        This operation creates a unstake activity.
      operationId: create_unstake_activity
      requestBody:
        $ref: '#/components/requestBodies/createUnstakeActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create unstake activity
      tags:
      - Stakings
  /stakings/activities/withdraw:
    post:
      description: |
        This operation creates a withdraw activity.
      operationId: create_withdraw_activity
      requestBody:
        $ref: '#/components/requestBodies/createWithdrawActivityBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_stake_activity_201_response'
          description: Successfully created a staking activity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: Create withdraw request
      tags:
      - Stakings
  /stakings/activities:
    get:
      description: |
        This operation retrieves a list staking activities.
      operationId: list_activities
      parameters:
      - description: staking pool id
        example: babylon_btc
        explode: true
        in: query
        name: pool_id
        required: false
        schema:
          type: string
        style: form
      - description: staking id
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: true
        in: query
        name: staking_id
        required: false
        schema:
          type: string
        style: form
      - description: activity type
        example: Stake
        explode: true
        in: query
        name: activity_type
        required: false
        schema:
          $ref: '#/components/schemas/ActivityType'
        style: form
      - description: activity status
        example: Success
        explode: true
        in: query
        name: activity_status
        required: false
        schema:
          $ref: '#/components/schemas/ActivityStatus'
        style: form
      - description: The minimum modified timestamp in Unix epoch seconds
        example: 1635744000000
        explode: true
        in: query
        name: min_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: The maximum modified timestamp in Unix epoch seconds
        example: 1635744000000
        explode: true
        in: query
        name: max_modified_timestamp
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: "activity initiator, maybe email or api key."
        example: vanya@cobo.com
        explode: true
        in: query
        name: initiator
        required: false
        schema:
          type: string
        style: form
      - description: "The maximum number of objects to return. The default value range\
          \ is [1, 50] and can be set endpoint specified."
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` and `after` are both set to empty, the first slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: |
          An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

          If you set both `after` or `before`, only the setting of `before` will take effect.

          If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
        example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_activities_200_response'
          description: A list of staking activities has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
      summary: List activities
      tags:
      - Stakings
  /stakings/activities/{activity_id}:
    get:
      description: |
        This operation retrieves a staking activity details.
      operationId: get_activity_by_id
      parameters:
      - description: activity id
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        explode: false
        in: path
        name: activity_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: A staking activity has been successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request. Your request contains malformed syntax or invalid
            parameters.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized. Please provide valid credentials.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden. You do not have the permission to access the requested
            resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Requested resources not found.
      summary: Get activity details
      tags:
      - Stakings
components:
  parameters:
    sortByParam:
      description: The field used for sorting.
      example: timestamp
      explode: true
      in: query
      name: sort_by
      required: false
      schema:
        default: ""
        type: string
      style: form
    directionParam:
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      example: ASC
      explode: true
      in: query
      name: direction
      required: false
      schema:
        default: ""
        enum:
        - ASC
        - DESC
        type: string
      style: form
    limitParam:
      description: "The maximum number of objects to return. The default value range\
        \ is [1, 50] and can be set endpoint specified."
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        format: int32
        type: integer
      style: form
    beforeParam:
      description: |
        An object ID which serves as a cursor for pagination. For example, if you specify `before` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that end before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

        If you set both `after` or `before`, only the setting of `before` will take effect.

        If the `before` and `after` are both set to empty, the first slice is returned.
      example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
      explode: true
      in: query
      name: before
      required: false
      schema:
        type: string
      style: form
    afterParam:
      description: |
        An object ID which serves as a cursor for pagination. For example, if you specify `after` as `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`, the request will retrieve a list of data objects that start after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

        If you set both `after` or `before`, only the setting of `before` will take effect.

        If the `before` is set to empty and `after` is set to `last`, the last slice is returned.
      example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
      explode: true
      in: query
      name: after
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdParam:
      description: "(This concept applies to Exchange Wallets only) The asset ID.\
        \ An asset is a digital representation of a valuable resource on a blockchain\
        \ network. Exchange Wallets group your holdings by asset, even if the same\
        \ asset exists on different blockchains. For example, if your Exchange Wallet\
        \ has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2\
        \ USDT."
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: false
      schema:
        type: string
      style: form
    optionalAssetIdListParam:
      description: "A list of asset IDs, separated by comma. (This concept applies\
        \ to Exchange Wallets only) An asset is a digital representation of a valuable\
        \ resource on a blockchain network. Exchange Wallets group your holdings by\
        \ asset, even if the same asset exists on different blockchains. For example,\
        \ if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then\
        \ your asset balance is 2 USDT."
      example: "USDT,USDC"
      explode: true
      in: query
      name: asset_ids
      required: false
      schema:
        description: "A list of asset IDs, separated by comma."
        type: string
      style: form
    requiredAssetIdParam:
      description: "(This concept applies to Exchange Wallets only) The asset ID.\
        \ An asset is a digital representation of a valuable resource on a blockchain\
        \ network. Exchange Wallets group your holdings by asset, even if the same\
        \ asset exists on different blockchains. For example, if your Exchange Wallet\
        \ has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2\
        \ USDT."
      example: USDT
      explode: true
      in: query
      name: asset_id
      required: true
      schema:
        type: string
      style: form
    chainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
      example: ETH
      explode: false
      in: path
      name: chain_id
      required: true
      schema:
        type: string
      style: simple
    requiredChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: true
      schema:
        type: string
      style: form
    optionalChainIdParam:
      description: "The chain ID, which is the unique identifier of a blockchain.\
        \ You can retrieve the IDs of all the chains you can use by calling [List\
        \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
      example: ETH
      explode: true
      in: query
      name: chain_id
      required: false
      schema:
        type: string
      style: form
    optionalChainIdListParam:
      description: "A list of chain IDs, separated by comma. The chain ID is the unique\
        \ identifier of a blockchain. You can retrieve the IDs of all the chains you\
        \ can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
      example: "BTC,ETH"
      explode: true
      in: query
      name: chain_ids
      required: false
      schema:
        description: "A list of chain IDs, separated by comma."
        type: string
      style: form
    tokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List organization\
        \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
      example: ETH_USDT
      explode: false
      in: path
      name: token_id
      required: true
      schema:
        type: string
      style: simple
    optionalTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List organization\
        \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: false
      schema:
        type: string
      style: form
    optionalTokenListIdParam:
      description: "A list of token IDs, separated by comma. The token ID is the unique\
        \ identifier of a token. You can retrieve the IDs of all the tokens you can\
        \ use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
      example: "ETH_USDT,ETH_USDC"
      explode: true
      in: query
      name: token_ids
      required: false
      schema:
        description: "A list of token IDs, separated by comma."
        type: string
      style: form
    requiredTokenIdParam:
      description: "The token ID, which is the unique identifier of a token. You can\
        \ retrieve the IDs of all the tokens you can use by calling [List organization\
        \ enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
      example: ETH_USDT
      explode: true
      in: query
      name: token_id
      required: true
      schema:
        type: string
      style: form
    requiredFeeRateParam:
      description: The fee rate in sats/vByte or fee_price in gwei.
      example: "0.001"
      explode: true
      in: query
      name: fee_rate
      required: true
      schema:
        type: string
      style: form
    requiredWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: true
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    optionalWalletTypeParam:
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      explode: true
      in: query
      name: wallet_type
      required: false
      schema:
        $ref: '#/components/schemas/WalletType'
      style: form
    optionalWalletSubtypeParam:
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      explode: true
      in: query
      name: wallet_subtype
      required: false
      schema:
        $ref: '#/components/schemas/WalletSubtype'
      style: form
    walletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: wallet_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalWalletIdParam:
      description: The wallet ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: wallet_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalWalletListIdParam:
      description: "A list of wallet IDs, separated by comma."
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868"
      explode: true
      in: query
      name: wallet_ids
      required: false
      schema:
        description: "A list of wallet IDs, separated by comma."
        type: string
      style: form
    addressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: false
      in: path
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: simple
    requiredAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: true
      schema:
        description: The wallet address.
        type: string
      style: form
    requiredSubWalletIdParam:
      description: Unique id of the wallet
      example: SPOT
      explode: true
      in: query
      name: sub_wallet_id
      required: true
      schema:
        type: string
      style: form
    optionalAddressParam:
      description: The wallet address.
      example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      explode: true
      in: query
      name: address
      required: false
      schema:
        description: The wallet address.
        type: string
      style: form
    toAddressParam:
      description: The recipient's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: to_address
      required: true
      schema:
        type: string
      style: form
    fromAddressParam:
      description: The sender's address.
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
      explode: true
      in: query
      name: from_address
      required: false
      schema:
        type: string
      style: form
    optionalUtxoTxHashParam:
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
      explode: true
      in: query
      name: tx_hash
      required: false
      schema:
        description: The transaction hash of the UTXO.
        type: string
      style: form
    keyGroupIdParam:
      description: The key share group ID.
      example: "880311524363903326"
      explode: false
      in: path
      name: key_share_group_id
      required: true
      schema:
        type: string
      style: simple
    optionalKeyGroupTypeParam:
      description: |
        The selected key share group type to retrieve. Possible values include:
        - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        **Note:** If left empty, all key share group types will be retrieved.
      explode: true
      in: query
      name: key_group_type
      required: false
      schema:
        $ref: '#/components/schemas/KeyGroupType'
      style: form
    projectIdParam:
      description: The project ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: project_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalProjectIdQueryParam:
      description: The project ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: project_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalProjectIdListQueryParam:
      description: The MPC project ID.
      example:
      - f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: project_id
      required: false
      schema:
        items:
          format: uuid
          type: string
        type: array
      style: form
    requiredTargetKeyGroupIdParam:
      description: The target key share group ID of the TSS request.
      example: "880311524363903326"
      explode: true
      in: query
      name: target_key_group_id
      required: true
      schema:
        type: string
      style: form
    tssRequestIdParam:
      description: The TSS request ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: tss_request_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    vaultIdParam:
      description: The vault ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: vault_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    optionalVaultIdQueryParam:
      description: The MPC vault ID. This parameter is applicable to MPC Wallets only.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: vault_id
      required: false
      schema:
        format: uuid
        type: string
      style: form
    optionalVaultIdListQueryParam:
      description: The MPC vault ID.
      example:
      - f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: vault_id
      required: false
      schema:
        items:
          format: uuid
          type: string
        type: array
      style: form
    optionalVaultNameParam:
      description: Unique id of the mpc vault
      example: my vault name
      explode: true
      in: query
      name: vault_name
      required: false
      schema:
        type: string
      style: form
    exchangeIdParam:
      description: Exchange ID to query
      explode: false
      in: path
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: simple
    optionalExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: false
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    requiredExchangeIdParam:
      description: Exchange ID to query
      explode: true
      in: query
      name: exchange_id
      required: true
      schema:
        $ref: '#/components/schemas/ExchangeId'
      style: form
    optionalApikeyParam:
      description: The API Key for the exchange
      example: d8f062da-39f4-4a11-8b9d-12595854237f
      explode: true
      in: query
      name: apikey
      required: false
      schema:
        type: string
      style: form
    optionalSecretParam:
      description: The API Secret for the exchange.
      example: 75B4F636193162488A3728B4A5797708
      explode: true
      in: query
      name: secret
      required: false
      schema:
        type: string
      style: form
    optionalPassphraseParam:
      description: The API passphrase for the exchange wallet.
      example: A3DBHJV
      explode: true
      in: query
      name: passphrase
      required: false
      schema:
        type: string
      style: form
    optionalRequestIdParam:
      description: The request ID that is used to track a withdrawal request. The
        request ID is provided by you and must be unique within your organization.
      example: web_send_by_user_327_1610444045047
      explode: true
      in: query
      name: request_id
      required: false
      schema:
        type: string
      style: form
    optionalCoboIdParam:
      description: "The Cobo ID, which can be used to track a transaction."
      example: "20231213122855000000000000000000"
      explode: true
      in: query
      name: cobo_id
      required: false
      schema:
        type: string
      style: form
    optionalTransactionTypeParam:
      description: The type of a transaction
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/TransactionType'
      style: form
    optionalTransactionTypeListParam:
      description: "The transaction type. Possible values include: \n  - `Deposit`:\
        \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n  -\
        \ `TokenApproval`: A transaction that grants permission to access your tokens.\
        \ \n  - `ContractCall`: A transaction that interacts with a smart contract.\n\
        \  - `TransactionFeePayment`: A transaction that is initiated by Fee Station\
        \ to pay your transaction fee.\n  - `RawMessage`: A transaction that signs\
        \ a message.\n"
      explode: true
      in: query
      name: type
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionType'
        type: array
      style: form
    optionalTransactionStatusParam:
      description: The status of a transaction
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/TransactionStatus'
      style: form
    optionalTransactionStatusListParam:
      description: "The transaction status. Possible values include: \n  - `Submitted`:\
        \ The transaction is submitted.\n  - `PendingScreening`: The transaction is\
        \ pending screening by Risk Control. \n  - `PendingAuthorization`: The transaction\
        \ is pending approvals.\n  - `PendingSignature`: The transaction is pending\
        \ signature. \n  - `Broadcasting`: The transaction is being broadcast.\n \
        \ - `Confirming`: The transaction is waiting for the required number of confirmations.\n\
        \  - `Completed`: The transaction is completed.\n  - `Failed`: The transaction\
        \ failed.\n  - `Rejected`: The transaction is rejected.\n"
      explode: true
      in: query
      name: status
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionStatus'
        type: array
      style: form
    optionalMinCreatedTimestampParam:
      description: "The time when the transaction was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter transactions\
        \ created on or after the specified time."
      example: 1635744000
      explode: true
      in: query
      name: min_created_timestamp
      required: false
      schema:
        type: integer
      style: form
    optionalMaxCreatedTimestampParam:
      description: "The time when the transaction was created, in Unix timestamp format,\
        \ measured in milliseconds. You can use this parameter to filter transactions\
        \ created on or before the specified time."
      example: 1635744000
      explode: true
      in: query
      name: max_created_timestamp
      required: false
      schema:
        type: integer
      style: form
    optionalTransactionSourceTypeListParam:
      description: |
        The type of transaction source. Possible values include:
          - `Address`: An external address.
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
          - `FeeStation`: A Fee Station.
      explode: true
      in: query
      name: source_type
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionSourceType'
        type: array
      style: form
    optionalTransactionSourceAddressListParam:
      description: The wallet ID of the transaction source.
      example:
      - f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: source_wallet_id
      required: false
      schema:
        items:
          format: uuid
          type: string
        type: array
      style: form
    optionalTransactionSourceWalletIdListParam:
      description: The address of the transaction source.
      explode: true
      in: query
      name: source_address
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    optionalTransactionDestinationTypeListParam:
      description: "The transaction destination type. Possible values include:\n \
        \ - `Address`: An external address. \n  - `ContractCall`: A transaction that\
        \ interacts with a smart contract.\n  - `MessageSign`: A transaction that\
        \ signs a message. \n  - `CustodialWallet`: A Custodial Wallet.\n  - `MPCWallet`:\
        \ An MPC Wallet.\n  - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).\n\
        \  - `ExchangeWallet`: An Exchange Wallet.\n"
      explode: true
      in: query
      name: destination_type
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionDestinationType'
        type: array
      style: form
    optionalTransactionDestinationAddressListParam:
      description: The wallet ID of the transaction destination.
      example:
      - f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: destination_wallet_id
      required: false
      schema:
        items:
          format: uuid
          type: string
        type: array
      style: form
    optionalTransactionDestinationWalletIdListParam:
      description: The address of the transaction destination.
      explode: true
      in: query
      name: destination_address
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    transactionIdParam:
      description: The transaction ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: transaction_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    webhookEventIdParam:
      description: "The event ID. You can obtain a list of event IDs by calling [List\
        \ all events](/v2/api-references/developers--webhooks/list-all-events)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: event_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    endpointIdParam:
      description: "The webhook endpoint ID. You can retrieve a list of webhook endpoint\
        \ IDs by calling [List webhook endpoints](/v2/api-references/developers--webhooks/list-webhook-endpoints)."
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: endpoint_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    activityIdRequiredParam:
      description: activity id
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: activity_id
      required: true
      schema:
        type: string
      style: simple
    poolIdRequiredParam:
      description: staking pool id
      example: babylon_btc
      explode: false
      in: path
      name: pool_id
      required: true
      schema:
        type: string
      style: simple
    poolIdOptionalParam:
      description: staking pool id
      example: babylon_btc
      explode: true
      in: query
      name: pool_id
      required: false
      schema:
        type: string
      style: form
    stakingIdRequiredParam:
      description: staking id
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: false
      in: path
      name: staking_id
      required: true
      schema:
        type: string
      style: simple
    stakingIdOptionalParam:
      description: staking id
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      explode: true
      in: query
      name: staking_id
      required: false
      schema:
        type: string
      style: form
    activityTypeOptionalParam:
      description: activity type
      example: Stake
      explode: true
      in: query
      name: activity_type
      required: false
      schema:
        $ref: '#/components/schemas/ActivityType'
      style: form
    activityStatusOptionalParam:
      description: activity status
      example: Success
      explode: true
      in: query
      name: activity_status
      required: false
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      style: form
    activityInitiatorOptionalParam:
      description: "activity initiator, maybe email or api key."
      example: vanya@cobo.com
      explode: true
      in: query
      name: initiator
      required: false
      schema:
        type: string
      style: form
    maxModifiedTimestampOptionalParam:
      description: The maximum modified timestamp in Unix epoch seconds
      example: 1635744000000
      explode: true
      in: query
      name: max_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
    minModifiedTimestampOptionalParam:
      description: The minimum modified timestamp in Unix epoch seconds
      example: 1635744000000
      explode: true
      in: query
      name: min_modified_timestamp
      required: false
      schema:
        format: int64
        type: integer
      style: form
  requestBodies:
    createWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWallet'
      description: The request body to create a wallet
    updateWalletBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_wallet_by_id_request'
      description: The request body.
    createAddressBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/generate_wallet_address_request'
      description: The request body to generates addresses within a specified wallet.
    lockSpendablesBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_spendable_list_request'
      description: The request body of the Lock/Unlock UTXOs operation.
    createKeyGroupBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_key_group_request'
      description: The request body to create a key share group.
    createMpcProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_project_request'
      description: The request body to create a project.
    createTssRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_tss_request_request'
      description: The request body to create a TSS request.
    createMpcVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_mpc_vault_request'
      description: The request body to create a vault.
    updateProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_mpc_project_request'
      description: The request body to update a project's name.
    updateVaultBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/modify_mpc_vault_request'
      description: The request body to update a vault's name.
    createTransferBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
      description: The request body to create a transfer transaction
    createSmartContractCallBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCall'
      description: The request body for making a contract call.
    createMessageSignBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignMessage'
      description: The request body to create a message sign transaction
    estimateFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFee'
      description: The request body to estimate the transaction fee of a token transfer
        or a contract call.
    feeRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
      description: The request body to drop or to speed up transactions
    resendTransactionBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
      description: The request body to resend transactions
    createStakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_request'
      description: The request body to create a staking activity.
    createWithdrawActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_withdraw_activity_request'
      description: The request body to create a withdraw activity.
    createUnstakeActivityBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_unstake_activity_request'
      description: The request body to create a unstake activity.
    estimateStakeActivityFeeBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_staking_estimation_fee_request'
      description: The request body to create a get estimate fee of a staking activity.
    createWebhookEndpointBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_webhook_endpoint_request'
      description: The request body to register a webhook endpoint.
    updateWebhookBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_webhook_endpoint_request'
      description: The request body to update a webhook endpoint.
  responses:
    badRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad request. Your request contains malformed syntax or invalid
        parameters.
    unauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized. Please provide valid credentials.
    forbiddenError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden. You do not have the permission to access the requested
        resource.
    notFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Requested resources not found.
    tooManyRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Too many requests.
    serviceUnavailableError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unknown internal error.
    getChainsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_chains_200_response'
      description: The request was successful.
    getChainByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
      description: The request was successful.
    getAssetsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_exchange_supported_assets_200_response'
      description: The request was successful.
    getTokensResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_tokens_200_response'
      description: The request was successful.
    getTokenByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
      description: The request was successful.
    getTokenBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_wallet_token_balances_200_response'
      description: The request was successful.
    getAssetBalancesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_exchange_wallet_asset_balances_200_response'
      description: Successfully listed tokens
    getWalletsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_wallets_200_response'
      description: Successfully listed wallets
    getWalletByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successful get a wallet info
    createWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: The request was successful.
    updateWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
      description: Successfully updated address
    deleteWalletResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_wallet_by_id_200_response'
      description: The request was successful.
    spendableListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/get_spendable_list_200_response'
      description: The request was successful.
    lockSpendableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lock_spendable_list_200_response'
      description: The request was successful.
    maxTransferableValueResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
      description: The request was successful.
    getAddressesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_addresses_200_response'
      description: Successfully listed addresses
    createAddressResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AddressInfo'
            type: array
      description: The request was successful.
    getAddressValidityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/check_address_validity_200_response'
      description: The request was successful.
    createKeyGroupsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: mpc vault successfully created
    createMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully created project.
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully created the vault.
    getCoboKeyHoldersResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyHolder'
            type: array
      description: Successfully listed MPC Wallets' key share holder information.
    getKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully get mpc tss group
    getKeyGroupsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/KeyGroup'
            type: array
      description: Successfully listed key share groups.
    getMpcProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
      description: Successfully listed all vaults.
    getMpcProjectsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/MPCProject'
            type: array
      description: Successfully listed all projects.
    getTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully retrieved TSS request.
    getMpcVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully retrieved vault information.
    getMpcVaultsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/MPCVault'
            type: array
      description: Successfully listed all vaults.
    deleteKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully deleted the specified key share group.
    putKeyGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
      description: Successfully modify mpc tss group
    putTssRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
      description: Successfully modified the TSS request.
    putVaultResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
      description: Successfully modify mpc vault
    getSubAccountIdsResponse:
      content:
        application/json:
          schema:
            description: Sub account id list
            example:
            - f47ac10b-58cc-4372-a567-0e02b2c3d479
            items:
              type: string
            type: array
      description: Successfully list of exchange sub account ids
    getChainFeeResponse:
      content:
        application/json:
          schema:
            description: "The fee rate for the specified chain or token. \n\nThe `max_priority_fee`\
              \ in the EIP-1559 fee model and the `max_fee_amount` properties in the\
              \ fixed fee model represent the recommended values from the chain.\n"
            items:
              $ref: '#/components/schemas/FeeRate'
            type: array
      description: The request was successful.
    getTransactionsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_transactions_200_response'
      description: The information about the transactions.
    getTransactionByIdResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
      description: The information about a transaction.
    estimateFeeResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/EstimationFee'
            type: array
      description: The request was successful.
    transactionFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionTransferFee'
      description: Successful get a transaction detail
    createTransactionRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_transfer_transaction_201_response'
      description: The request was successful.
    createWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
      description: The request was successful.
    getWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
      description: The request was successful.
    listWebhookEndpointsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_webhook_endpoints_200_response'
      description: Successfully listed of webhook endpoints
    updateWebhookEndpointResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
      description: Update webhook endpoint successfully.
    listWebhookEventsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_events_200_response'
      description: A list of webhook events has been successfully retrieved.
    getWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
      description: The webhook event information is successfully retrieved.
    getWebhookEventDefinitionsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/list_webhook_event_definitions_200_response_inner'
            type: array
      description: The request was successful.
    retryWebhookEventResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/retry_webhook_event_201_response'
      description: The request was successful.
    getWebhookEventLogsResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/WebhookEventLog'
            type: array
      description: The request was successful.
    listStakingPoolsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_staking_pools_200_response'
      description: A list of staking protocols has been successfully retrieved.
    createActivityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_stake_activity_201_response'
      description: Successfully created a staking activity.
    activityDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Activity'
      description: A staking activity has been successfully retrieved.
    stakingsDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
      description: A staking has been successfully retrieved.
    poolDetailsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
      description: A staking pool has been successfully retrieved.
    listStakingsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_stakings_200_response'
      description: A list of staking has been successfully retrieved.
    listActivitiesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list_activities_200_response'
      description: A list of staking activities has been successfully retrieved.
  schemas:
    Pagination:
      description: The pagination information of the returned data.
      example:
        before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        total_count: 10000
        after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
      properties:
        before:
          description: "An object ID which serves as a cursor for pagination. For\
            \ example, if the value of `before` is `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`,\
            \ the returned data ends before the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`."
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: string
        after:
          description: "An object ID which serves as a cursor for pagination. For\
            \ example, if the value of `after` is `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`,\
            \ the returned data starts after the object with the object ID `8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f`."
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: string
        total_count:
          description: The total count of the result set
          example: 10000
          type: number
      required:
      - after
      - before
      - total_count
      type: object
    ErrorResponse:
      description: The response of a failed request.
      example:
        error_message: error_message
        error_id: 0b6ddf19083c4bd1a9ca01bec44b24dd
        error_code: 0
      properties:
        error_code:
          description: The error code.
          type: integer
        error_message:
          description: The error description.
          type: string
        error_id:
          description: The error log ID. You can provide the error ID when submitting
            a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
          type: string
      required:
      - error_code
      - error_id
      - error_message
      type: object
    AssetInfo:
      description: The asset information.
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        display_code: USDT
        description: Tether USDT
        asset_id: USDT
      properties:
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        display_code:
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
          type: string
        description:
          description: The description of the asset.
          example: Tether USDT
          type: string
        icon_url:
          description: The URL of the asset icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
      required:
      - asset_id
      type: object
    TokenInfo:
      description: The token information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        chain_id:
          description: The ID of the chain on which the token operates.
          example: ETH
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        symbol:
          description: "The token symbol, which is the abbreviated name of a token."
          example: USDT
          type: string
        name:
          description: "The token name, which is the full name of a token."
          example: Tether USDT
          type: string
        decimal:
          description: The token decimal.
          example: 18
          type: integer
        icon_url:
          description: The URL of the token icon.
          example: https://d.cobo.com/public/logos/USDT.png
          type: string
        token_address:
          description: "The token address, if applicable."
          example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          type: string
        fee_token_id:
          description: The fee token ID. A fee token is the token with which you pay
            transaction fees.
          example: ETH
          type: string
        can_deposit:
          description: Whether deposits are enabled for this token.
          example: true
          type: boolean
        can_withdraw:
          description: Whether withdrawals are enabled for this token.
          example: true
          type: boolean
      required:
      - chain_id
      - token_id
      type: object
    ExtendedTokenInfo:
      allOf:
      - properties:
          can_deposit:
            default: false
            description: |
              Whether the token can be deposited.

              - `true`: The token can be deposited.

              - `false`: The token cannot be deposited.
            example: false
            type: boolean
          can_withdraw:
            default: false
            description: |
              Whether the token can be withdrawn.

              - `true`: The token can be withdrawn.

              - `false`: The token cannot be withdrawn.
            example: false
            type: boolean
        type: object
      - $ref: '#/components/schemas/TokenInfo'
      description: "The token information, including whether the token can be deposited\
        \ or withdrawn."
      example:
        icon_url: https://d.cobo.com/public/logos/USDT.png
        symbol: USDT
        token_id: ETH_USDT
        chain_id: ETH
        name: Tether USDT
        can_withdraw: true
        token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
        asset_id: USDT
        can_deposit: true
        decimal: 18
        fee_token_id: ETH
      type: object
    ChainInfo:
      description: The chain information.
      example:
        icon_url: https://d.cobo.com/public/logos/ETH.png
        symbol: ETH
        chain_id: ETH
        require_memo: false
        explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
        explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
          example: ETH
          type: string
        symbol:
          description: "The chain symbol, which is the abbreviated name of a chain."
          example: ETH
          type: string
        icon_url:
          description: The URL of the chain icon.
          example: https://d.cobo.com/public/logos/ETH.png
          type: string
        explorer_tx_url:
          description: The transaction URL pattern on the blockchain explorer. You
            can use it to concatenate the transaction URLs.
          example: "https://etherscan.io/tx/{txn_id}"
          type: string
        explorer_address_url:
          description: The address URL pattern on the blockchain explorer. You can
            use it to concatenate the address URLs.
          example: "https://etherscan.io/address/{address}"
          type: string
        require_memo:
          description: Whether the chain requires a memo.
          example: false
          type: boolean
      required:
      - chain_id
      type: object
    WalletType:
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      enum:
      - Custodial
      - MPC
      - SmartContract
      - Exchange
      example: Custodial
      type: string
    WalletSubtype:
      description: |
        The wallet type. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3  Wallets).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
      enum:
      - Asset
      - Web3
      - Main
      - Sub
      - Org-Controlled
      - User-Controlled
      - "Safe{Wallet}"
      example: Asset
      type: string
    SmartContractWalletType:
      default: SafeWallet
      description: The Smart Contract Wallet type.
      enum:
      - SafeWallet
      example: SafeWallet
      type: string
    SmartContractWalletOperationType:
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
      enum:
      - CoboSafe
      example: CoboSafe
      type: string
    ExchangeId:
      description: |
        The ID of the exchange:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
      enum:
      - binance
      - okx
      - deribit
      - bybit
      - gate
      example: binance
      type: string
    TokenBalance:
      description: The balance information.
      example:
        token_id: BTC
        balance:
          total: "100.0"
          pending: "10.5"
          available: "80.5"
          locked: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: BTC
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance_balance'
      required:
      - balance
      - token_id
      type: object
    AssetBalance:
      description: The data for token balance information.
      example:
        balance: "{}"
        asset_id: USDT
      properties:
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          pattern: "^[A-Z0-9]+$"
          type: string
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
      required:
      - asset_id
      - balance
      type: object
    SafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - properties:
            chain_id:
              description: The ID of the chain on which the wallet operates.
              example: ETH
              type: string
            label:
              description: The wallet label.
              example: My Wallet
              type: string
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: The Smart Contract Wallet address.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: The signers of the Smart Contract Wallet.
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: 'The minimum number of confirmations required for the Smart
              Contract Wallet. '
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: The address of Cobo Safe.
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/SafeWallet_allOf_initiator'
        required:
        - smart_contract_wallet_type
        type: object
    CustodialWalletInfo:
      description: The basic information of a wallet.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_subtype: Asset
        org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name: Example Wallet
        wallet_type: Custodial
      properties:
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
        org_id:
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - name
      - org_id
      - wallet_id
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    MPCWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          vault_id:
            description: The ID of the owning vault.
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    SmartContractWalletInfo:
      discriminator:
        mapping:
          Safe: '#/components/schemas/SafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/SafeWallet'
      title: Smart Contract Wallets
    ExchangeWalletInfo:
      allOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - properties:
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          parent_wallet_id:
            description: The wallet ID of the Main Account associated with the Sub
              Account. This property is returned only if you are creating or querying
              an Exchange Wallet (Sub Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            format: uuid
            type: string
          sub_accounts:
            items:
              $ref: '#/components/schemas/ExchangeWalletInfo_allOf_sub_accounts'
            type: array
        required:
        - apikey
        - exchange_id
        type: object
      title: Exchange Wallets
    WalletInfo:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
        propertyName: wallet_type
      oneOf:
      - $ref: '#/components/schemas/CustodialWalletInfo'
      - $ref: '#/components/schemas/MPCWalletInfo'
      - $ref: '#/components/schemas/SmartContractWalletInfo'
      - $ref: '#/components/schemas/ExchangeWalletInfo'
    CreatedWallet:
      discriminator:
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWallet'
          MPC: '#/components/schemas/CreateMpcWallet'
          SmartContract: '#/components/schemas/CreateSmartContractWallet'
          Exchange: '#/components/schemas/CreateExchangeWallet'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/CreateCustodialWallet'
      - $ref: '#/components/schemas/CreateMpcWallet'
      - $ref: '#/components/schemas/CreateSmartContractWallet'
      - $ref: '#/components/schemas/CreateExchangeWallet'
    UTXO:
      description: The UTXO information.
      example:
        is_locked: false
        address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        is_coinbase: false
        vout_n: 0
        tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        confirmed_number: 66716
        token_balances:
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        tx_hash:
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
        address:
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          type: string
        token_balances:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
        is_coinbase:
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
          type: boolean
        is_locked:
          description: Whether the UTXO is locked.
          example: false
          type: boolean
        confirmed_number:
          description: The number of confirmations for the UTXO.
          example: 66716
          type: integer
      type: object
    MaxTransferableValue:
      description: "The maximum amount you can transfer from the wallet or the specified\
        \ wallet address, along with the corresponding transaction fee."
      example:
        token_id: ETH
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          token_id: ETH
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
        max_transferable_value: "3.0"
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH
          type: string
        max_transferable_value:
          description: The maximum amount you can transfer from the wallet or the
            specified wallet address.
          example: "3.0"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      type: object
    AddressInfo:
      description: The address information.
      example:
        path: m/44'/60'/0'/0
        address: 0x0000000000000000000000000000000000000000
        token_id: ETH_USDT
        address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        memo: "82840924"
        encoding: ENCODING_P2PKH
        pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        address_id:
          description: The address ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        memo:
          description: The memo code.
          example: "82840924"
          type: string
        path:
          description: The derivation path of the address.
          example: m/44'/60'/0'/0
          type: string
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          description: The public key of the address.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
      required:
      - address
      - address_id
      - token_id
      type: object
    AddressEncoding:
      description: The address encoding formats. This property only applies to blockchains
        that have a similar architecture to Bitcoin.
      enum:
      - ENCODING_P2PKH
      - ENCODING_P2SH_P2WPKH
      - ENCODING_BECH32
      - ENCODING_P2PKH_UNCOMPRESSED
      - ENCODING_P2SH_P2MS
      - ENCODING_P2SH_P2WSH_P2MS
      - ENCODING_P2TR
      example: ENCODING_P2PKH
      type: string
    CreateCustodialWallet:
      description: The information of Custodial Wallets.
      example:
        wallet_subtype: Asset
        name: My WaaS 2.0 Wallet
        wallet_type: Custodial
      properties:
        name:
          description: The wallet name.
          example: My WaaS 2.0 Wallet
          type: string
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
      required:
      - name
      - wallet_subtype
      - wallet_type
      title: Custodial Wallets
      type: object
    CreateMpcWallet:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWallet'
      - properties:
          vault_id:
            description: The ID of the owning vault.
            type: string
        required:
        - vault_id
        type: object
      title: MPC Wallets
    CreateSmartContractWallet:
      discriminator:
        mapping:
          Safe: '#/components/schemas/CreateSafeWallet'
        propertyName: smart_contract_wallet_type
      oneOf:
      - $ref: '#/components/schemas/CreateSafeWallet'
      title: Smart Contract Wallets
    CreateSafeWallet:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - properties:
            label:
              description: The wallet label.
              example: ETH
              type: string
            chain_id:
              description: The ID of the chain that the wallet operates on.
              example: ETH
              type: string
          required:
          - chain_id
          type: object
      - properties:
          smart_contract_wallet_type:
            $ref: '#/components/schemas/SmartContractWalletType'
          safe_address:
            description: "The address of the Smart Contract Wallet. If this is not\
              \ provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe\
              \ for you. In that case, the `threshold` and `signers` properties are\
              \ required."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          signers:
            description: "The signers of the Smart Contract Wallet. This property\
              \ is required when creating a new Safe{Wallet}."
            items:
              example: 0x1234567890123456789012345678901234567890
              format: address
              pattern: "^0x[a-fA-F0-9]{40}$"
              type: string
            type: array
          threshold:
            description: "The minimum number of confirmations required for the Smart\
              \ Contract Wallet. This property is required when creating a new Safe{Wallet}."
            example: 2
            minimum: 1
            type: integer
          cobo_safe_address:
            description: "The address of Cobo Safe. If you are importing an existing\
              \ Safe{Wallet}, Cobo Safe must have been created and enabled."
            example: 0x1234567890123456789012345678901234567890
            format: address
            pattern: "^0x[a-fA-F0-9]{40}$"
            type: string
          initiator:
            $ref: '#/components/schemas/CreateSafeWallet_allOf_initiator'
        required:
        - smart_contract_wallet_type
        type: object
    CreateExchangeWallet:
      allOf:
      - $ref: '#/components/schemas/CreateCustodialWallet'
      - properties:
          exchange_id:
            $ref: '#/components/schemas/ExchangeId'
          apikey:
            description: The API key of your exchange account.
            example: d8f062da-39f4-4a11-8b9d-12595854237f
            type: string
          secret:
            description: The API secret of your exchange account.
            example: 75B4F636193162488A3728B4A5797708
            type: string
          passphrase:
            description: The passphrase of your exchange account.
            example: sXASDKWKLLsWWEE
            type: string
          ga_code:
            description: The GA code for the exchange.
            example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            type: string
          main_wallet_id:
            description: The ID of the Exchange Wallet (Main Account).
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            type: string
        required:
        - apikey
        - exchange_id
        - secret
        type: object
      title: Exchange Wallets
    CurveType:
      enum:
      - SECP256K1
      - ED25519
      example: ED25519
      type: string
    KeyGroup:
      description: The data for key share group information.
      example:
        tss_group_ids:
        - group_id: mMedDioOKhTlhGyQRzMv
          curve: ED25519
        - group_id: mMedDioOKhTlhGyQRzMv
          curve: ED25519
        create_timestamp: 0
        threshold: 2
        id: "880311524363903326"
        node_count: 3
        type: MainGroup
        key_holders:
        - name: Key share holder name
          tss_node_id: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijklm
          online: true
          type: Cobo
          status: Valid
        - name: Key share holder name
          tss_node_id: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijklm
          online: true
          type: Cobo
          status: Valid
        status: Valid
      properties:
        id:
          description: The key share group ID.
          example: "880311524363903326"
          type: string
        type:
          $ref: '#/components/schemas/KeyGroupType'
        tss_group_ids:
          items:
            $ref: '#/components/schemas/TSSGroupId'
          type: array
        key_holders:
          items:
            $ref: '#/components/schemas/KeyHolder'
          type: array
        node_count:
          description: The number of key share holders in this key share group.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to approve each operation
            in this key share group.
          example: 2
          type: integer
        status:
          $ref: '#/components/schemas/KeyGroupStatus'
        create_timestamp:
          format: int64
          type: integer
      type: object
    KeyGroupStatus:
      enum:
      - New
      - Valid
      - Unavailable
      example: Valid
      type: string
    KeyGroupType:
      enum:
      - MainGroup
      - SigningGroup
      - RecoveryGroup
      example: MainGroup
      type: string
    KeyHolder:
      description: The data for MPC Wallets' key share holder information.
      example:
        name: Key share holder name
        tss_node_id: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijklm
        online: true
        type: Cobo
        status: Valid
      properties:
        name:
          description: The key share holder name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          description: Key share holder's TSS Node ID.
          example: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijklm
          type: string
        online:
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
          type: boolean
        status:
          $ref: '#/components/schemas/KeyHolderStatus'
      type: object
    KeyHolderStatus:
      enum:
      - Valid
      - NotConfigured
      - NotActivated
      - Changed
      example: Valid
      type: string
    KeyHolderType:
      enum:
      - Cobo
      - Mobile
      - API
      example: Cobo
      type: string
    MPCVault:
      description: The data for vault information.
      example:
        root_pubkeys:
        - curve: ED25519
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        - curve: ED25519
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        create_timestamp: 1718619403933.53
        name: Vault name
        id: YPdbyVaVGqXXjkUsohHw
        type: OrgControlled
      properties:
        id:
          description: The vault ID.
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        name:
          description: The vault name.
          example: Vault name
          type: string
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          items:
            $ref: '#/components/schemas/RootPubkey'
          type: array
        create_timestamp:
          description: "The vault's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          example: 1718619403933.53
          format: int64
          type: number
      type: object
    MPCVaultType:
      enum:
      - OrgControlled
      - UserControlled
      example: OrgControlled
      type: string
    MPCProject:
      description: The data for project information.
      example:
        create_timestamp: 0
        org_id: f3b4a616-9c43-462e-8cb4-343e304fee64
        name: Project name
        threshold: 2
        id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        node_count: 3
      properties:
        id:
          description: The project ID.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        org_id:
          description: The organization ID.
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          type: string
        name:
          description: The project name.
          example: Project name
          type: string
        node_count:
          description: The number of key share holders in the project.
          example: 3
          type: integer
        threshold:
          description: The number of key share holders required to sign an operation
            in the project.
          example: 2
          type: integer
        create_timestamp:
          description: "The project's creation time in Unix timestamp format, measured\
            \ in milliseconds."
          format: int64
          type: integer
      type: object
    RootPubkey:
      description: The data for MPC Root Extended Public Key information.
      example:
        curve: ED25519
        pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        pubkey:
          description: "The vault's [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key)."
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSGroupId:
      description: The data for the TSS group ID.
      example:
        group_id: mMedDioOKhTlhGyQRzMv
        curve: ED25519
      properties:
        group_id:
          description: The TSS group ID.
          example: mMedDioOKhTlhGyQRzMv
          type: string
        curve:
          $ref: '#/components/schemas/CurveType'
      type: object
    TSSRequest:
      description: The data for the TSS request information.
      example:
        id: YPdbyVaVGqXXjkUsohHw
        type: KeyGen
        status: Success
      properties:
        id:
          description: The TSS request ID.
          example: YPdbyVaVGqXXjkUsohHw
          type: string
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
      type: object
    TSSRequestStatus:
      description: |
        The TSS request status. Possible values include:
        - `PendingKeyHolderConfirmation`: The action done to the TSS request is currently pending enough key share holders to approve.

        - `KeyHolderConfirmationFailed`: Key share holders failed to approve the the action to be done to the TSS request.

        - `KeyGenerating`: The key share is currently being generated for the action to be done to the TSS request.

        - `KeyGeneratingFailed`: The key share generation process has failed for the action to be done to the TSS request.

        - `Success`: The action done to the TSS request has been completed successfully.
      enum:
      - PendingKeyHolderConfirmation
      - KeyHolderConfirmationFailed
      - KeyGenerating
      - KeyGeneratingFailed
      - Success
      example: Success
      type: string
    TSSRequestType:
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create a [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) and a [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `Recovery`: This is a request to create a new [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) from the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if the old Main Group has been lost.
      enum:
      - KeyGen
      - KeyGenFromKeyGroup
      - Recovery
      example: KeyGen
      type: string
    FeeType:
      default: EVM_EIP_1559
      description: "The fee model. Possible values include:\n- `Fixed`: The fixed\
        \ fee model. \n- `EVM_EIP_1559`: The EIP-1559 fee model.\n- `EVM_Legacy`:\
        \ The legacy fee model.\n- `UTXO`: The fee model used in UTXO-based blockchains,\
        \ such as Bitcoin.\n"
      enum:
      - Fixed
      - EVM_EIP_1559
      - EVM_Legacy
      - UTXO
      example: EVM_EIP_1559
      type: string
    FeeAmount:
      description: The maximum transaction fee.
      properties:
        max_fee_amount:
          description: The maximum fee that you are willing to pay for the transaction.
            The transaction will fail if the transaction fee exceeds the maximum fee.
          example: "0.1"
          type: string
      required:
      - max_fee_amount
      type: object
    FeeData:
      properties:
        gas_limit:
          default: "21000"
          description: The gas limit. It represents the maximum number of gas units
            that you are willing to pay for the execution of a transaction or Ethereum
            Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          example: "21000"
          type: string
      required:
      - gas_limit
      type: object
    EvmEip1559FeeBasePrice:
      description: "The transaction fee price based on the EIP-1559 fee model, which\
        \ equals the base fee price plus the maximum priority fee."
      example:
        base_fee: "0.9"
        max_priority_fee: "0.1"
      properties:
        max_priority_fee:
          description: "The maximum priority fee, in gwei. The maximum priority fee\
            \ represents the highest amount of miner tips that you are willing to\
            \ pay for your transaction."
          example: "0.1"
          type: string
        base_fee:
          description: "The base fee price of the chain, in gwei."
          example: "0.9"
          type: string
      required:
      - base_fee
      - max_priority_fee
      title: EIP-1559
      type: object
    EvmLegacyFeeBasePrice:
      description: "The transaction fee price based on the legacy fee model, which\
        \ equals the gas price."
      properties:
        gas_price:
          description: "The gas price, in gwei. The gas price represents the amount\
            \ of ETH that must be paid to validators for processing transactions."
          example: "1"
          type: string
      required:
      - gas_price
      type: object
    UtxoFeeBasePrice:
      description: "The transaction fee price for UTXO-based chains (such as Bitcoin),\
        \ which equals the fee rate."
      properties:
        fee_rate:
          description: The fee rate in sat/vByte. The fee rate represents the satoshis
            you are willing to pay for each byte of data that your transaction will
            consume on the blockchain.
          example: "50"
          type: string
      required:
      - fee_rate
      type: object
    EvmEip1559FeePrice:
      description: The transaction fee price based on the EIP-1559 fee model.
      example:
        fast:
          base_fee: "0.9"
          max_priority_fee: "0.1"
        token_id: ETH
        slow:
          base_fee: "0.9"
          max_priority_fee: "0.1"
        fee_type: EVM_EIP_1559
        recommended:
          base_fee: "0.9"
          max_priority_fee: "0.1"
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        recommended:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        fast:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      required:
      - fee_type
      - recommended
      title: EIP-1559
      type: object
    EvmLegacyFeePrice:
      description: The transaction fee price based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        recommended:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        fast:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      required:
      - fee_type
      - recommended
      title: Legacy
      type: object
    UtxoFeePrice:
      description: The transaction fee price for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: BTC
          type: string
        slow:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
        recommended:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
        fast:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
      required:
      - fee_type
      - recommended
      title: UTXO
      type: object
    FixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH_USDT
            type: string
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The transaction fee that you are willing to pay based on the fixed
        fee model for come blockchains. The fee can vary between different chains.
      required:
      - fee_type
      - token_id
      title: Fixed
      type: object
    EvmEip1559Fee:
      description: The estimated transaction fee based on the EIP-1559 fee model.
      example:
        fast:
          base_fee: "0.9"
          gas_limit: "21000"
          max_priority_fee: "0.1"
        token_id: ETH
        slow:
          base_fee: "0.9"
          gas_limit: "21000"
          max_priority_fee: "0.1"
        fee_type: EVM_EIP_1559
        recommended:
          base_fee: "0.9"
          gas_limit: "21000"
          max_priority_fee: "0.1"
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
        recommended:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
        fast:
          $ref: '#/components/schemas/EvmEip1559Fee_slow'
      required:
      - fee_type
      - recommended
      title: EIP-1559
      type: object
    EvmLegacyFee:
      description: The estimated transaction fee based on the legacy fee model.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
        recommended:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
        fast:
          $ref: '#/components/schemas/EvmLegacyFee_slow'
      required:
      - fee_type
      - recommended
      title: Legacy
      type: object
    UtxoFee:
      description: The estimated transaction fee for UTXO-based chains.
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          description: The token ID of the transaction fee.
          example: ETH
          type: string
        slow:
          $ref: '#/components/schemas/UtxoFee_slow'
        recommended:
          $ref: '#/components/schemas/UtxoFee_slow'
        fast:
          $ref: '#/components/schemas/UtxoFee_slow'
      required:
      - fee_type
      - recommended
      title: UTXO
      type: object
    FeeRate:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeePrice'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeePrice'
          UTXO: '#/components/schemas/UtxoFeePrice'
          Fixed: '#/components/schemas/FixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559FeePrice'
      - $ref: '#/components/schemas/EvmLegacyFeePrice'
      - $ref: '#/components/schemas/UtxoFeePrice'
      - $ref: '#/components/schemas/FixedFee'
    EstimationFee:
      discriminator:
        mapping:
          Fixed: '#/components/schemas/FixedFee'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EvmLegacyFee'
          UTXO: '#/components/schemas/UtxoFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559Fee'
      - $ref: '#/components/schemas/EvmLegacyFee'
      - $ref: '#/components/schemas/UtxoFee'
      - $ref: '#/components/schemas/FixedFee'
    EvmEip1559TransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: |
        The transaction fee is calculated by multiplying the sum of the base fee price and the maximum priority fee by the gas units used by the transaction. This can be expressed as: Transaction fee = (base fee price + maximum priority fee) * gas units used. The gas units used must be smaller than the gas limit.
      example:
        base_fee: "0.9"
        gas_limit: "21000"
        token_id: ETH
        max_priority_fee: "0.1"
        fee_type: EVM_EIP_1559
      required:
      - fee_type
      - token_id
      title: EIP-1559
      type: object
    EvmLegacyTransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: |
        The transaction fee is calculated by multiplying the gas price (fee price) by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). The gas units used must be smaller than the gas limit.
      required:
      - fee_type
      - token_id
      title: Legacy
      type: object
    UtxoTransactionFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: BTC
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
      description: |
        The transaction fee is calculated by multiplying the fee rate (fee price) by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. The transaction will fail if the transaction fee exceeds the maximum fee.
      required:
      - fee_type
      - token_id
      title: UTXO
      type: object
    TransactionTransferFee:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559TransactionFee'
          EVM_Legacy: '#/components/schemas/EvmLegacyTransactionFee'
          UTXO: '#/components/schemas/UtxoTransactionFee'
          Fixed: '#/components/schemas/FixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/EvmEip1559TransactionFee'
      - $ref: '#/components/schemas/EvmLegacyTransactionFee'
      - $ref: '#/components/schemas/UtxoTransactionFee'
      - $ref: '#/components/schemas/FixedFee'
    Transaction:
      description: The information about a transaction.
      example:
        is_loop: false
        updated_time: 1610445878970
        chain_id: ETH
        confirmed_num: 12
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          gas_used: "100000000"
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
          fee_used: "0.1"
        initiator: "API Prod Key #1"
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          token_id: ETH_USDT
          utxo_outputs:
            outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          asset_id: USDT
        force_internal: false
        block_number: 123
        description: withdrawal to exchange trading account
        source:
          utxo_inputs:
          - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          source_type: ExternalAddress
          account_input:
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        confirming_threshold: 15
        type: Deposit
        force_external: false
        block_time: 1717740319
        transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        created_time: 1610445878970
        sub_status: PendingDoubleCheck
        block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
        cobo_id: "20231213122855000000000000000000"
        nonce: 9
        initiator_type: API
        category:
        - Payment
        - Payment
        request_id: web_send_by_user_327_1610444045047
        replacement:
          replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          type: Resend
          replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        failed_reason: Rejected by signer Cobo TSS
        status: Submitted
      properties:
        transaction_id:
          description: The transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        cobo_id:
          description: "The Cobo ID, which can be used to track a transaction."
          example: "20231213122855000000000000000000"
          type: string
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
          type: string
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          description: The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        source:
          $ref: '#/components/schemas/Transaction_source'
        destination:
          $ref: '#/components/schemas/Transaction_destination'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          description: The transaction initiator.
          example: "API Prod Key #1"
          type: string
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          description: The number of confirmations this transaction has received.
          example: 12
          format: int32
          type: number
        confirming_threshold:
          description: The minimum number of confirmations required to deem a transaction
            secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
          format: int32
          type: integer
        block_number:
          description: The block number.
          example: 123
          format: int64
          type: integer
        block_time:
          description: "The time when the block was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1717740319
          format: int64
          type: integer
        block_hash:
          description: The block hash.
          example: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          type: string
        nonce:
          description: The transaction nonce.
          example: 9
          type: integer
        transaction_hash:
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        replacement:
          $ref: '#/components/schemas/Transaction_replacement'
        category:
          description: A custom transaction category for you to identify your transfers
            more easily.
          items:
            $ref: '#/components/schemas/TransactionCategory'
          type: array
        description:
          description: The description for your transaction.
          example: withdrawal to exchange trading account
          type: string
        force_internal:
          description: "Whether the transfer request must be executed as an off-chain\
            \ transfer. \n  - `true`: The transfer request must be executed an off-chain\
            \ transfer. \n  - `false`: The transfer may not be executed as an off-chain\
            \ transfer.\n"
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transfer must be executed as an on-chain transfer.
              - `true`: The transfer must be executed as an on-chain transfer.
              - `false`: The transfer may not be executed as an on-chain transfer.
          example: false
          type: boolean
        is_loop:
          description: |
            Whether the transfer is a Loop transfer. For more information about Loop, see [the website](https://loop.top/).

            - `true`: The transfer is a Loop transfer.
            - `false`: The transfer is not a Loop transfer.
          example: false
          type: boolean
        created_time:
          description: "The time when the transaction was created, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: number
        updated_time:
          description: "The time when the transaction was updated, in Unix timestamp\
            \ format, measured in milliseconds."
          example: 1610445878970
          format: int64
          type: number
      required:
      - created_time
      - destination
      - initiator_type
      - source
      - status
      - transaction_id
      - transaction_type
      - updated_time
      type: object
    TransactionApprover:
      description: The approver data for transaction.
      properties:
        name:
          description: The approver name of the transaction.
          example: "Approver #1"
          type: string
        status:
          description: The approval status.
          enum:
          - Pending
          - Approved
          - Rejected
          example: Pending
          type: string
      type: object
    TransactionTokenAmount:
      description: The data for transaction asset information.
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        amount:
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          example: "1.5"
          format: float
          type: string
      required:
      - amount
      - asset_id
      type: object
    TransactionCategory:
      description: A custom transaction category for you to identify your transfers
        more easily.
      example: Payment
      type: string
    TransactionDetails:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          initiator:
            description: Transaction initiator
            example: "API Prod Key #1"
            type: string
          approvers:
            items:
              $ref: '#/components/schemas/TransactionApprover'
            type: array
          signers:
            items:
              $ref: '#/components/schemas/TransactionSigner'
            type: array
          nonce:
            description: Transaction nonce
            example: 9
            type: integer
          replaced_by:
            description: Replace by transaction hash
            example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            type: string
          fee:
            $ref: '#/components/schemas/TransactionTransferFee'
          fueled_by:
            description: Fueled by address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
          confirmed_num:
            description: Transaction confirmed number
            example: 12
            type: number
          confirming_threshold:
            description: "Number of confirmations required for a transaction, such\
              \ as 15 for ETH chain."
            example: 15
            format: int32
            type: integer
          token_approval:
            $ref: '#/components/schemas/TransactionTokeApproval'
          message:
            description: Transaction raw message
            example: this to certify that am owner this wallet address
            type: string
          algorithm:
            description: Transaction message signing algorithm
            type: string
          timeline:
            items:
              $ref: '#/components/schemas/TransactionTimeline'
            type: array
        type: object
    TransactionInitiatorType:
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
      enum:
      - API
      - Web
      - App
      - External
      example: API
      type: string
    TransactionSigner:
      description: The signer data for transaction.
      properties:
        signer:
          description: The signer name of the transaction.
          example: Cobo TSS
          type: string
        status:
          description: The signing status.
          enum:
          - Pending
          - Signed
          - Timeout
          - Rejected
          example: Signed
          type: string
        failed_reason:
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
          type: string
      type: object
    TransactionStatus:
      description: "The transaction status. Possible values include: \n  - `Submitted`:\
        \ The transaction is submitted.\n  - `PendingScreening`: The transaction is\
        \ pending screening by Risk Control. \n  - `PendingAuthorization`: The transaction\
        \ is pending approvals.\n  - `PendingSignature`: The transaction is pending\
        \ signature. \n  - `Broadcasting`: The transaction is being broadcast.\n \
        \ - `Confirming`: The transaction is waiting for the required number of confirmations.\n\
        \  - `Completed`: The transaction is completed.\n  - `Failed`: The transaction\
        \ failed.\n  - `Rejected`: The transaction is rejected.\n"
      enum:
      - Submitted
      - PendingScreening
      - PendingAuthorization
      - Queued
      - PendingSignature
      - Broadcasting
      - Confirming
      - Completed
      - Failed
      - Rejected
      example: Submitted
      type: string
    TransactionSubStatus:
      description: "The transaction sub-status. Possible values include: \n  - `PendingDoubleCheck`:\
        \ The transaction is pending a double check. \n  - `RejectedDoubleCheck`:\
        \ The transaction is rejected because it failed a double check.\n  - `PendingSpenderCheck`:\
        \ The transaction is pending a spender check.\n  - `RejectedSpenderAuth`:\
        \ The transaction is rejected because it is rejected by the spender.\n  -\
        \ `RejectedTravelRule`: The transaction is rejected because it failed to comply\
        \ with the Travel Rule.\n  - `RejectedKYT`: The transaction is rejected because\
        \ it did not pass the Know Your Transaction (KYT) compliance checks.\n  -\
        \ `PendingRiskControlCheck`: The transaction is pending for a Risk Control\
        \ check.\n  - `RejectedRiskControlCheck`: The transaction is rejected because\
        \ it failed the Risk Control check.\n  - `PendingApproverCheck`: The transaction\
        \ is pending approval from the approver.\n  - `RejectedApproverAuth`: The\
        \ transaction is rejected by the approver.\n  - `RejectedCoboCheck`: The transaction\
        \ is rejected because it failed the internal check by Cobo.\n  - `RejectedWhiteList`:\
        \ The transaction is rejected because the sender or receiver is not included\
        \ in a whitelist.\n  - `PendingWaitSigner`: The transaction is pending signature.\n\
        \  - `FailedBySigner`: The transaction failed during the signing process.\n\
        \  - `FailedBroadcasting`: The transaction failed to be broadcast to the blockchain\
        \ network.\n"
      enum:
      - RejectedKYT
      - RejectedTravelRule
      - PendingDoubleCheck
      - PendingSpenderCheck
      - PendingRiskControlCheck
      - PendingApproverCheck
      - RejectedCoboCheck
      - RejectedWhiteList
      - RejectedDoubleCheck
      - RejectedSpenderAuth
      - RejectedRiskControlCheck
      - RejectedApproverAuth
      - PendingWaitSigner
      - FailedBySigner
      - FailedBroadcasting
      example: PendingDoubleCheck
      type: string
    TransactionTimeline:
      description: The data for transaction timeline information.
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          description: Whether the timeline status finished
          example: true
          type: boolean
        finished_time:
          description: Timeline status finished time
          example: 1610445878970
          type: number
      type: object
    TransactionTokeApproval:
      allOf:
      - $ref: '#/components/schemas/TokenInfo'
      - description: The data for transaction token approval information.
        properties:
          amount:
            description: |
              Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
            example: 1.5
            format: float
            type: number
          spender:
            description: Spender address
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        type: object
    TransactionType:
      description: "The transaction type. Possible values include: \n  - `Deposit`:\
        \ A deposit transaction.\n  - `Withdrawal`: A withdrawal transaction.\n  -\
        \ `TokenApproval`: A transaction that grants permission to access your tokens.\
        \ \n  - `ContractCall`: A transaction that interacts with a smart contract.\n\
        \  - `TransactionFeePayment`: A transaction that is initiated from Fee Station\
        \ to pay your transaction fees.\n  - `RawMessage`: A transaction that signs\
        \ a message.\n"
      enum:
      - Deposit
      - Withdrawal
      - TokenApproval
      - ContractCall
      - TransactionFeePayment
      - RawMessage
      example: Deposit
      type: string
    MpcSigningGroup:
      description: The information about the Signing Group of an MPC Wallet.
      example:
        used_node_ids:
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        used_key_group_id:
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        used_node_ids:
          description: The ID of the TSS Nodes that are required to participate in
            the signature.
          items:
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            type: string
          type: array
      type: object
    TransactionAddressType:
      description: |
        The address type. Possible values include:
          - `CustodialAssetWallet`: Custodial Wallets (Asset Wallets).
          - `CustodialWeb3Wallet`: Custodial Wallets (Web3 Wallets).
          - `MPCClientControlledWallet`: MPC Wallets (Organization-Controlled).
          - `MPCUserControlledWallet`: MPC Wallets (User-Controlled).
          - `SafeContractWallet`: Smart Contract Wallets (Safe{Wallet}).
          - `ExchangeAccount`: Exchange Wallets.
          - `FeeStation`: A Fee Station.
          - `ExternalAddress`: An external address.
      enum:
      - CustodialAssetWallet
      - CustodialWeb3Wallet
      - MPCClientControlledWallet
      - MPCUserControlledWallet
      - SafeContractWallet
      - ExchangeAccount
      - FeeStation
      - ExternalAddress
      example: CustodialAssetWallet
      type: string
    TransactionSourceType:
      description: |
        The transaction source. Possible values include:
          - `Address`: An external address.
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Safe{Wallet}.
          - `ExchangeWallet`: An Exchange Wallet.
          - `FeeStation`: A Fee Station.
      enum:
      - Address
      - CustodialWallet
      - MPCWallet
      - SafeWallet
      - ExchangeWallet
      - FeeStation
      example: ExternalAddress
      type: string
    TransactionAddressSource:
      description: The information about the transaction source.
      example:
        utxo_inputs:
        - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        source_type: ExternalAddress
        account_input:
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        account_input:
          $ref: '#/components/schemas/TransactionAddressSource_account_input'
        utxo_inputs:
          items:
            $ref: '#/components/schemas/TransactionAddressSource_utxo_inputs_inner'
          type: array
      required:
      - source_type
      title: External addresses
      type: object
    TransactionFeeStationWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The Wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Fee Station
      type: object
    TransactionCustodialWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Custodial Wallets
      type: object
    TransactionMPCWalletSource:
      description: The information about the transaction source. Specify either the
        `account_input` property or the `utxo_inputs` property.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
        account_input:
          $ref: '#/components/schemas/TransactionMPCWalletSource_account_input'
        utxo_inputs:
          items:
            $ref: '#/components/schemas/TransactionMPCWalletSource_utxo_inputs_inner'
          type: array
      required:
      - mpc_used_key_group
      - source_type
      - wallet_id
      title: MPC Wallets
      type: object
    TransactionSafeWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        delegate:
          $ref: '#/components/schemas/TransactionSafeWalletSource_delegate'
      required:
      - delegate
      - source_type
      - wallet_id
      title: Smart Contract Wallets
      type: object
    TransactionExchangeWalletSource:
      description: The information about the transaction source.
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        sub_wallet_id:
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
          type: string
      required:
      - exchange_id
      - source_type
      - wallet_id
      title: Exchange Wallets
      type: object
    TransactionDestinationType:
      description: "The transaction destination type. Possible values include:\n \
        \ - `Address`: An external address. \n  - `ContractCall`: A smart contract.\n\
        \  - `MessageSign`: A message to be signed. \n  - `CustodialWallet`: A Custodial\
        \ Wallet.\n  - `MPCWallet`: An MPC Wallet.\n  - `SafeWallet`: A Smart Contract\
        \ Wallet (Safe{Wallet}).\n  - `ExchangeWallet`: An Exchange Wallet.\n"
      enum:
      - Address
      - ContractCall
      - MessageSign
      - CustodialWallet
      - MPCWallet
      - SafeWallet
      - ExchangeWallet
      example: Address
      type: string
    TransactionAddressDestination:
      description: The information about the transaction destination.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        token_id: ETH_USDT
        utxo_outputs:
          outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            script: 76a914fb37342f6275b13936799def06f2DEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            script: 76a914fb37342f6275b13936799def06f2DEMO
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        asset_id: USDT
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        account_output:
          $ref: '#/components/schemas/TransactionAddressDestination_account_output'
        utxo_outputs:
          $ref: '#/components/schemas/TransactionAddressDestination_utxo_outputs'
      required:
      - destination_type
      - token_id
      title: External addresses
      type: object
    TransactionContractCallDestination:
      description: The information about the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        value:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: !!binary |-
            VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
          format: byte
          type: string
      required:
      - address
      - calldata
      - destination_type
      - value
      title: Smart contracts
      type: object
    TransactionMessageSignDestination:
      description: The information about the message as the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          description: The raw data to be signed that are encoded in Base64.
          example: YWFhYQ==
          type: string
        structured_data:
          description: The structured data to be signed that are encoded in JSON.
          example: |
            {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
          type: string
      required:
      - destination_type
      title: Messages
      type: object
    TransactionCustodialWalletDestination:
      description: The information about the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transaction amount. For exmaole, if you trade 1.5 ETH, then the amount is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      - destination_type
      - token_id
      - wallet_id
      title: Custodial Wallets
      type: object
    TransactionMPCWalletDestination:
      description: The information about the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      - destination_type
      - token_id
      - wallet_id
      title: MPC Wallets
      type: object
    TransactionSafeWalletDestination:
      description: The information about the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: "1.5"
          type: string
      required:
      - address
      - amount
      - destination_type
      - token_id
      - wallet_id
      title: Smart Contract Wallets
      type: object
    TransactionExchangeWalletDestination:
      description: The information about the Exchange Wallet as the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        sub_wallet_id:
          description: The exchange trading account or the sub-wallet ID.
          example: Asset
          type: string
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        asset_id:
          description: "(This concept applies to Exchange Wallets only) The asset\
            \ ID. An asset is a digital representation of a valuable resource on a\
            \ blockchain network. Exchange Wallets group your holdings by asset, even\
            \ if the same asset exists on different blockchains. For example, if your\
            \ Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your\
            \ asset balance is 2 USDT."
          example: USDT
          type: string
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - amount
      - asset_id
      - destination_type
      - exchange_id
      - wallet_id
      title: Exchange Wallets
      type: object
    TransactionFixedFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          token_id:
            description: The token ID of the transaction fee.
            example: ETH_USDT
            type: string
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/FeeAmount'
      description: The transaction fee actually charged by the chain that uses the
        fixed fee model.
      required:
      - fee_type
      title: Fixed
      type: object
    TransactionEvmEip1559Fee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The number of gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: "The transaction fee actually charged by the chain that uses the\
        \ EIP-1559 fee model. \nThe transaction fee is calculated by multiplying the\
        \ sum of the base fee price and the priority fee by the used gas. This can\
        \ be expressed as: Transaction fee = (base fee price + maximum priority fee)\
        \ * used gas.\n"
      example:
        base_fee: "0.9"
        gas_limit: "21000"
        gas_used: "100000000"
        max_priority_fee: "0.1"
        fee_type: EVM_EIP_1559
        fee_used: "0.1"
      required:
      - fee_type
      title: EIP-1559
      type: object
    TransactionEvmLegacyFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
          gas_used:
            description: The gas units used in the transaction.
            example: "100000000"
            type: string
        type: object
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      description: "The transaction fee actually charged by the chain that uses the\
        \ legacy fee model. \nThe transaction fee is calculated by multiplying the\
        \ gas fee price by the used gas. This can be expressed as: Transaction fee\
        \ = (gas price) * used gas.\n"
      required:
      - fee_type
      title: Legacy
      type: object
    TransactionUtxoFee:
      allOf:
      - properties:
          fee_type:
            $ref: '#/components/schemas/FeeType'
          fee_used:
            description: The transaction fee.
            example: "0.1"
            type: string
        type: object
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
      description: |
        TThe transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.
        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.
      required:
      - fee_type
      title: UTXO
      type: object
    TransactionFee:
      discriminator:
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
        propertyName: fee_type
      oneOf:
      - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
      - $ref: '#/components/schemas/TransactionEvmLegacyFee'
      - $ref: '#/components/schemas/TransactionUtxoFee'
      - $ref: '#/components/schemas/TransactionFixedFee'
    TransactionRbf:
      description: the information about the request to drop or to speed up transactions.
      example:
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          token_id: ETH
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      required:
      - request_id
      type: object
    TransactionResend:
      description: The information about the request to resend transactions.
      example:
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      required:
      - request_id
      type: object
    BaseTransferSource:
      description: The information about the transaction source.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: Asset
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
      required:
      - source_type
      - wallet_id
      title: Custodial Wallets
      type: object
    AddressTransferSource:
      allOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - properties:
          address:
            description: The wallet address.
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            type: string
        required:
        - address
        type: object
    MpcTransferSource:
      allOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - properties:
          account_input:
            $ref: '#/components/schemas/TransactionMPCWalletSource_account_input'
          utxo_inputs:
            $ref: '#/components/schemas/MpcTransferSource_allOf_utxo_inputs'
          mpc_used_key_group:
            $ref: '#/components/schemas/MpcSigningGroup'
        required:
        - mpc_used_key_group
        type: object
      title: MPC Wallets
    SafeTransferSource:
      allOf:
      - $ref: '#/components/schemas/AddressTransferSource'
      - properties:
          delegate:
            $ref: '#/components/schemas/SafeTransferSource_allOf_delegate'
        required:
        - delegate
        type: object
      title: Smart Contract Wallets
    ExchangeTransferSource:
      allOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - properties:
          sub_wallet_id:
            description: The exchange trading account or the sub-wallet ID.
            example: Asset
            type: string
        required:
        - sub_wallet_id
        type: object
      title: Exchange Wallets
    TransferSource:
      discriminator:
        mapping:
          Asset: '#/components/schemas/BaseTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          Safe{Wallet}: '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/BaseTransferSource'
      - $ref: '#/components/schemas/MpcTransferSource'
      - $ref: '#/components/schemas/SafeTransferSource'
      - $ref: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      description: |
        The information about the transaction destination. Specify either the `account_output` property or the `utxo_outputs` property.
      example:
        account_output:
          amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          memo: "82840924"
        destination_type: Address
        utxo_outputs:
          outputs:
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            script: 76a914fb37342f6275b13936799def06f2DEMO
          - amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            script: 76a914fb37342f6275b13936799def06f2DEMO
          change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal: false
        force_external: false
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          $ref: '#/components/schemas/AddressTransferDestination_account_output'
        utxo_outputs:
          $ref: '#/components/schemas/AddressTransferDestination_utxo_outputs'
        force_internal:
          description: "Whether the transfer request must be executed as an off-chain\
            \ transfer. \n  - `true`: The transfer request must be executed an off-chain\
            \ transfer. \n  - `false`: The transfer may not be executed as an off-chain\
            \ transfer.\n"
          example: false
          type: boolean
        force_external:
          description: |
            Whether the transfer must be executed as an on-chain transfer.
            - `true`: The transfer must be executed as an on-chain transfer.
            - `false`: The transfer may not be executed as an on-chain transfer.
          example: false
          type: boolean
      required:
      - destination_type
      title: Addresses
      type: object
    ExchangeTransferDestination:
      description: The information about the transaction destination.
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        sub_wallet_id:
          description: The exchange trading account or the sub-wallet ID.
          example: Asset
          type: string
        amount:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
      required:
      - destination_type
      - sub_wallet_id
      - wallet_id
      title: Exchange Wallets
      type: object
    TransferDestinationType:
      description: |
        The transaction destination type. Possible values include:
        - `Address`: An external address.
        - `ExchangeWallet`: An Exchange Wallet.
      enum:
      - Address
      - ExchangeWallet
      example: Address
      type: string
    TransferDestination:
      discriminator:
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/AddressTransferDestination'
      - $ref: '#/components/schemas/ExchangeTransferDestination'
    Transfer:
      description: The information about a token transfer.
      example:
        token_id: ETH_USDT
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          token_id: ETH
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          utxo_outputs:
            outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        description: Transfer from wallet
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        category_names:
        - Trading
        - Trading
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          description: The custom category for you to identify your transactions.
          items:
            example: Trading
            type: string
          type: array
        description:
          description: The description of the transfer.
          example: Transfer from wallet
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      required:
      - destination
      - request_id
      - request_type
      - source
      - token_id
      title: Transfer
      type: object
    SignMessage:
      description: The information about a transaction that signs a message. You can
        provide the message either as raw data or as structured data.
      example:
        chain_id: ETH
        destination:
          structured_data: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          message: YWFhYQ==
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          mpc_used_key_group:
            used_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
          example: ETH
          pattern: "^[A-Z]+$"
          type: string
        source:
          $ref: '#/components/schemas/SignMessage_source'
        destination:
          $ref: '#/components/schemas/SignMessage_destination'
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      type: object
    EstimateFee:
      discriminator:
        mapping:
          Transfer: '#/components/schemas/EstimateFeeTransfer'
          Call: '#/components/schemas/EstimateFeeContractCall'
        propertyName: request_type
      oneOf:
      - $ref: '#/components/schemas/EstimateFeeTransfer'
      - $ref: '#/components/schemas/EstimateFeeContractCall'
    EstimateFeeTransfer:
      description: The information about a token transfer.
      example:
        request_type: Transfer
        token_id: ETH_USDT
        destination:
          account_output:
            amount: "1.5"
            address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo: "82840924"
          destination_type: Address
          utxo_outputs:
            outputs:
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            - amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              script: 76a914fb37342f6275b13936799def06f2DEMO
            change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          force_internal: false
          force_external: false
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Asset
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          description: |
            The request type. Possible values include:
              - `Transfer`: A request to transfer tokens.
              - `ContractCall`: A request to interact with a smart contract.
              - `MessageSign`: A request to sign a message.
          enum:
          - Transfer
          - ContractCall
          - MessageSign
          example: Transfer
          type: string
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          description: "The token ID of the transaction fee. You can retrieve token\
            \ IDs by using the [Get fee rates](/api-references/v2/transactions/get-fee-rates)\
            \ operation."
          example: ETH_USDT
          type: string
        destination:
          $ref: '#/components/schemas/TransferDestination'
      required:
      - destination
      - request_id
      - request_type
      - source
      - token_id
      title: Transfer
      type: object
    EstimateFeeContractCall:
      description: The information about a transaction that interacts with a smart
        contract
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        request_type:
          $ref: '#/components/schemas/EstimateFeeTransfer/properties/request_type'
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/EstimateFeeContractCall_destination'
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      title: Contract call
      type: object
    BaseContractCallSource:
      description: The information about the transaction source.
      properties:
        source_type:
          description: |
            The type of the wallet. Possible values include:
            - `Org-Controlled`: MPC Wallets (Organization-Controlled).
            - `User-Controlled`: MPC Wallets (User-Controlled).
            - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
          enum:
          - Org-Controlled
          - User-Controlled
          - "Safe{Wallet}"
          example: Org-Controlled
          type: string
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      required:
      - address
      - source_type
      - wallet_id
      type: object
    MpcContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      - properties:
          mpc_used_key_group:
            $ref: '#/components/schemas/MpcSigningGroup'
        required:
        - mpc_used_key_group
        type: object
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        mpc_used_key_group:
          used_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source_type: Org-Controlled
      title: MPC Wallets
    SafeContractCallSource:
      allOf:
      - $ref: '#/components/schemas/BaseContractCallSource'
      - properties:
          delegate:
            $ref: '#/components/schemas/SafeContractCallSource_allOf_delegate'
        required:
        - delegate
        type: object
      title: Smart Contract Wallets
    ContractCallSource:
      discriminator:
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          Safe{Wallet}: '#/components/schemas/SafeContractCallSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/MpcContractCallSource'
      - $ref: '#/components/schemas/SafeContractCallSource'
    ContractCall:
      description: The information about a transaction that interacts with a smart
        contract
      example:
        chain_id: ETH
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          token_id: ETH
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
        destination:
          address: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
          calldata: !!binary |-
            VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
          value: "1.5"
        source:
          wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          mpc_used_key_group:
            used_node_ids:
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          source_type: Org-Controlled
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        chain_id:
          description: "The chain ID, which is the unique identifier of a blockchain.\
            \ You can retrieve the IDs of all the chains you can use by calling [List\
            \ organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains)."
          example: ETH
          type: string
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/EstimateFeeContractCall_destination'
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      required:
      - chain_id
      - destination
      - request_id
      - request_type
      - source
      title: Contract call
      type: object
    WebhookEvent:
      description: The webhook event payload.
      example:
        next_retry_timestamp: 1701396866000
        retries_left: 3
        data:
          is_loop: false
          updated_time: 1610445878970
          chain_id: ETH
          confirmed_num: 12
          fee:
            base_fee: "0.9"
            gas_limit: "21000"
            gas_used: "100000000"
            max_priority_fee: "0.1"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            token_id: ETH_USDT
            utxo_outputs:
              outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            asset_id: USDT
          force_internal: false
          block_number: 123
          description: withdrawal to exchange trading account
          source:
            utxo_inputs:
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            source_type: ExternalAddress
            account_input:
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          confirming_threshold: 15
          type: Deposit
          force_external: false
          block_time: 1717740319
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          created_time: 1610445878970
          sub_status: PendingDoubleCheck
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          cobo_id: "20231213122855000000000000000000"
          nonce: 9
          initiator_type: API
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
        created_timestamp: 1701396866000
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        type: wallets.transaction.created
        url: https://example.com/webhook
        status: Success
      properties:
        id:
          description: The event ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        created_timestamp:
          description: "The time when the event occurred, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          type: integer
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/Transaction'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          example: 1701396866000
          type: integer
        retries_left:
          description: The number of retries left. This field is only present if the
            event status is `Retrying`.
          example: 3
          type: integer
      required:
      - created_timestamp
      - data
      - id
      - type
      - url
      type: object
    WebhookEventType:
      description: |-
        The event type.
          - wallets.transaction.created: This event occurs when a transaction is created.
          - wallets.transaction.updated: This event occurs when a transaction is created or when there is an update of the transaction status.
          - wallets.transaction.failed: This event occurs when a transaction fails.
          - wallets.transaction.succeeded: This event occurs when a transaction has been successfully completed.
      enum:
      - wallets.transaction.created
      - wallets.transaction.updated
      - wallets.transaction.failed
      - wallets.transaction.succeeded
      example: wallets.transaction.created
      type: string
    WebhookEventStatus:
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
      enum:
      - Success
      - Retrying
      - Failed
      example: Success
      type: string
    WebhookEventLog:
      description: The webhook event log.
      example:
        request_body:
          next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            is_loop: false
            updated_time: 1610445878970
            chain_id: ETH
            confirmed_num: 12
            fee:
              base_fee: "0.9"
              gas_limit: "21000"
              gas_used: "100000000"
              max_priority_fee: "0.1"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              token_id: ETH_USDT
              utxo_outputs:
                outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              asset_id: USDT
            force_internal: false
            block_number: 123
            description: withdrawal to exchange trading account
            source:
              utxo_inputs:
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              source_type: ExternalAddress
              account_input:
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirming_threshold: 15
            type: Deposit
            force_external: false
            block_time: 1717740319
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            created_time: 1610445878970
            sub_status: PendingDoubleCheck
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            cobo_id: "20231213122855000000000000000000"
            nonce: 9
            initiator_type: API
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        success: true
        request_headers: "{\"Content-Type\": \"application/json\"}"
        response_body: "{}"
        created_timestamp: 1701396866000
        response_time: 100
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        failure_reason: Connect Timeout
        response_status_code: 200
      properties:
        id:
          description: The event log ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        created_timestamp:
          description: "The time when the log was created, in Unix timestamp format,\
            \ measured in milliseconds."
          example: 1701396866000
          type: integer
        request_headers:
          description: The request headers of the webhook event.
          example: "{\"Content-Type\": \"application/json\"}"
          type: object
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          description: The response body of the webhook event.
          type: object
        response_status_code:
          description: The response status code of the webhook event.
          example: 200
          type: integer
        response_time:
          description: "The response time of the webhook event, in milliseconds."
          example: 100
          type: integer
        success:
          description: Whether the webhook event has been successfully delivered.
          example: true
          type: boolean
        failure_reason:
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
          type: string
      required:
      - created_timestamp
      - id
      - request_body
      - request_headers
      - status
      - success
      type: object
    Endpoint:
      description: The information about a webhook endpoint.
      example:
        subscribed_events:
        - wallets.transaction.created
        - wallets.transaction.created
        description: My webhook endpoint
        created_timestamp: 1701396866
        id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url: https://example.com/webhook
        status: STATUS_ACTIVE
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          maxLength: 500
          type: string
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: "The time when the endpoint was registered, in Unix timestamp\
            \ format, measured in seconds."
          example: 1701396866
          type: integer
        id:
          description: The webhook endpoint ID.
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/EndpointStatus'
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - created_timestamp
      - id
      - status
      - subscribed_events
      - url
      type: object
    EndpointStatus:
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
      enum:
      - STATUS_ACTIVE
      - STATUS_INACTIVE
      - STATUS_PENDING_ACTIVE
      - STATUS_PENDING_INACTIVE
      - STATUS_PENDING_UPDATE
      - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      type: string
    BaseStakeExtra:
      description: Base stake extra.
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
      required:
      - pool_type
      type: object
    BabylonStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra for babylon.
        properties:
          finality_provider_public_key:
            description: The public key of finality provider.
            example: "0000000000000000000000000000000000000000000000000000000000000000"
            pattern: "^[0-9a-fA-F]{64}$"
            type: string
          stake_block_time:
            description: The stake block time.
            example: 2000
            format: int64
            type: integer
        required:
        - finality_provider_public_key
        - lock_time
        type: object
    EigenLayerLstStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of eigen layer lst token.
        properties:
          operator:
            description: The operator address.
            example: 0xdAC17F958D2ee523a2206206994597C13D831ec7
            type: string
        required:
        - id
        type: object
    EigenLayerNativeStakeExtra:
      allOf:
      - $ref: '#/components/schemas/BaseStakeExtra'
      - description: The stake extra of eigen layer native ETH.
        properties:
          fee_recipient:
            description: "The fee recipient address, if not provided the staker address\
              \ will be used."
            example: 30
            format: int32
            type: number
        type: object
    Activity:
      description: The staking activity.
      example:
        created_time: 1640995200000
        updated_time: 1640995200000
        amount: "100.00"
        address: 0x0000000000000000000000000000000000000000
        tx_ids:
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        - 0011039d-27fb-49ba-b172-6e0aa80e37ec
        initiator: vanya@cobo.com
        fee:
          base_fee: "0.9"
          gas_limit: "21000"
          token_id: ETH
          max_priority_fee: "0.1"
          fee_type: EVM_EIP_1559
        type: Stake
        pool_id: babylon_btc
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        status: Success
      properties:
        id:
          description: The unique id of the activity.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        initiator:
          description: The initiator of the activity.
          example: vanya@cobo.com
          type: string
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          description: The id of the wallet to stake.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        pool_id:
          description: The id of the staking pool.
          example: babylon_btc
          type: string
        staking_id:
          description: The id of the related staking.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: The amount of the activity.
          example: "100.00"
          type: string
        tx_ids:
          description: The related txs of the activity.
          items:
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            type: string
          type: array
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        created_time:
          description: The time when the activity was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_time:
          description: The time when the activity was last updated.
          example: 1640995200000
          format: int64
          type: integer
      required:
      - amount
      - created_at
      - pool_id
      - stake_id
      - status
      - updated_at
      type: object
    ActivityInitiator:
      properties:
        initiator:
          description: The initiator of the staking activity.
          example: vanya@cobo.com
          type: string
      type: object
    CreateStakeActivity:
      properties:
        wallet_id:
          description: The id of the wallet to stake.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        pool_id:
          description: The id of the staking pool
          example: babylon_btc
          type: string
        amount:
          description: The amount to stake
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
        extra:
          $ref: '#/components/schemas/CreateStakeActivity_extra'
      required:
      - address
      - amount
      - extra
      - fee
      - pool_id
      - request_id
      - wallet_id
      type: object
    CreateWithdrawActivity:
      properties:
        staking_id:
          description: The id of the related staking.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: The amount to stake
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      required:
      - fee
      - staking_id
      type: object
    CreateUnstakeActivity:
      properties:
        staking_id:
          description: The id of the related staking.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        amount:
          description: The amount to stake
          example: "100.00"
          type: string
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
      required:
      - fee
      - staking_id
      type: object
    ActivityStatus:
      description: The status of activity.
      enum:
      - Success
      - Processing
      - Failed
      example: Success
      type: string
    ActivityType:
      description: The type of activity.
      enum:
      - Stake
      - Unstake
      - Withdraw
      - Claim
      - Delegate
      - Undelegate
      example: Stake
      type: string
    AmountDetails:
      description: The staking amount details.
      items:
        $ref: '#/components/schemas/AmountDetails_inner'
      type: array
    BabylonValidator:
      description: The babylon validator information.
      example:
        icon_url: https://example.com/icon.png
        public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        supported_pos_chains:
        - Babylon
        - Cosmos
        name: Cobo
        commission_rate: 0.1
        priority: 0
      properties:
        icon_url:
          description: The URL of the validator's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        name:
          description: The name of validator.
          example: Cobo
          type: string
        priority:
          description: The priority of validator.
          example: 0
          type: number
        public_key:
          description: The public key of validator.
          example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          type: string
        commission_rate:
          description: The commission rate of validator.
          example: 0.1
          format: float
          type: number
        supported_pos_chains:
          description: The list of supported pos chains.
          example:
          - Babylon
          - Cosmos
          items:
            enum:
            - Babylon
            - Cosmos
            type: string
          type: array
      required:
      - commission_rate
      - icon_url
      - name
      - public_key
      - supported_pos_chains
      type: object
    EigenlayerValidator:
      description: The EigenLayer validator info.
      properties:
        icon_url:
          description: The URL of the validator's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        name:
          description: The name of validator.
          example: Cobo
          type: string
        priority:
          description: The priority of validator.
          example: 0
          type: number
        address:
          description: The address of validator.
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
          type: string
        commission_rate:
          description: The commission of validator.
          example: 0.1
          format: float
          type: number
      required:
      - address
      - icon_url
      - name
      type: object
    PoolDetails:
      allOf:
      - $ref: '#/components/schemas/PoolSummary'
      - description: The detail of the staking protocol.
        properties:
          pool_type:
            $ref: '#/components/schemas/StakingPoolType'
          min_amount:
            description: The minimum amount to stake.
            example: "0.01"
            type: string
          max_amount:
            description: The maximum amount to stake.
            example: "100.00"
            type: string
          min_stake_period:
            description: The minimum staking period in days.
            example: 30
            format: int32
            type: number
          max_stake_period:
            description: The maximum staking period in days.
            example: 1000
            format: int32
            type: number
          validators_info:
            description: The list of validators.
            items:
              $ref: '#/components/schemas/PoolDetails_allOf_validators_info'
            type: array
        required:
        - validators_info
        type: object
      example:
        validators_info:
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          name: Cobo
          commission_rate: 0.1
          priority: 0
        - icon_url: https://example.com/icon.png
          public_key: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
          supported_pos_chains:
          - Babylon
          - Cosmos
          name: Cobo
          commission_rate: 0.1
          priority: 0
        chain_id: Bitcoin
        min_amount: "0.01"
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
        protocol: Babylon
        token_id: BTC
        supported_wallet_types:
        - MPC
        max_amount: "100.00"
        max_stake_period: 1000
        id: babylon_btc
        pool_type: Babylon
        min_stake_period: 30
    PoolSummary:
      description: The summary of the staking pool.
      example:
        protocol: Babylon
        chain_id: Bitcoin
        token_id: BTC
        supported_wallet_types:
        - MPC
        id: babylon_btc
        est_apr: 0.05
        protocol_icon_url: https://example.com/icon.png
      properties:
        id:
          description: The unique protocol id.
          example: babylon_btc
          type: string
        chain_id:
          description: The unique chain id.
          example: Bitcoin
          type: string
        protocol:
          description: The name of the protocol.
          example: Babylon
          type: string
        protocol_icon_url:
          description: The URL of the protocol's icon.
          example: https://example.com/icon.png
          format: url
          type: string
        supported_wallet_types:
          description: The list of available wallet types.
          example:
          - MPC
          items:
            $ref: '#/components/schemas/WalletType'
          type: array
        token_id:
          description: The unique token id.
          example: BTC
          type: string
        est_apr:
          description: The estimated APR.
          example: 0.05
          format: float
          type: number
      required:
      - chain_id
      - est_apr
      - id
      - protocol
      - protocol_icon_url
      - supported_wallet_types
      - token_id
      type: object
    Stakings:
      description: The staking info.
      example:
        unlock_block_height: 871234
        created_time: 1640995200000
        updated_time: 1640995200000
        address: 0x0000000000000000000000000000000000000000
        initiator: Vanya@cobo.com
        pos_chain: Babylon Chain
        pool_id: babylon_btc
        unlock_time: 1640995200000
        rewards_info: {}
        wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        amounts:
        - amount: "100.00"
          activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: active
        - amount: "100.00"
          activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: active
        validator_info:
          icon_url: https://example.com/logo.png
          public_key: "0000000000000000000000000000000000000000000000000000000000000000"
          address: 0x0000000000000000000000000000000000000000
          name: Cobo
          commission_rate: "0.1"
        id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        id:
          description: The unique id of the stake.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        wallet_id:
          description: The unique wallet id.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        address:
          description: The staker wallet address.
          example: 0x0000000000000000000000000000000000000000
          type: string
        amounts:
          description: The staking amount details.
          items:
            $ref: '#/components/schemas/AmountDetails_inner'
          type: array
        initiator:
          description: The initiator of the stake.
          example: Vanya@cobo.com
          type: string
        unlock_time:
          description: The unlock time.
          example: 1640995200000
          format: int64
          type: integer
        unlock_block_height:
          description: The unlock block height.
          example: 871234
          format: int64
          type: integer
        pool_id:
          description: The unique pool id.
          example: babylon_btc
          type: string
        pos_chain:
          description: The pos chain of the stake.
          example: Babylon Chain
          type: string
        rewards_info:
          description: The rewards info of the stake.
          example: {}
          type: object
        created_time:
          description: The time when the stake was created.
          example: 1640995200000
          format: int64
          type: integer
        updated_time:
          description: The time when the stake was last updated.
          example: 1640995200000
          format: int64
          type: integer
        validator_info:
          $ref: '#/components/schemas/Stakings_validator_info'
      required:
      - address
      - amounts
      - created_time
      - id
      - pool_id
      - status
      - updated_time
      - validator_info
      - wallet_id
      type: object
    StakingPoolType:
      enum:
      - Babylon
      - EigenLayerNativeETH
      - EigenLayerLst
      example: Babylon
      type: string
      x-enumDescriptions:
        Babylon: The Babylon staking protocol.
        EigenLayerNativeETH: The Eigen Layer staking pool for native ETH.
        EigenLayerLst: The Eigen Layer staking pool for lst token.
    BaseEstimateStakingFee:
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
      type: object
    EstimateStakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateStakeActivity'
    EstimateUnstakeFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateUnstakeActivity'
    EstimateWithdrawFee:
      allOf:
      - $ref: '#/components/schemas/BaseEstimateStakingFee'
      - $ref: '#/components/schemas/CreateWithdrawActivity'
    get_chains_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
        - icon_url: https://d.cobo.com/public/logos/ETH.png
          symbol: ETH
          chain_id: ETH
          require_memo: false
          explorer_tx_url: "https://etherscan.io/tx/{txn_id}"
          explorer_address_url: "https://etherscan.io/address/{address}"
      properties:
        data:
          items:
            $ref: '#/components/schemas/ChainInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_tokens_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          symbol: USDT
          token_id: ETH_USDT
          chain_id: ETH
          name: Tether USDT
          can_withdraw: true
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          can_deposit: true
          decimal: 18
          fee_token_id: ETH
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          symbol: USDT
          token_id: ETH_USDT
          chain_id: ETH
          name: Tether USDT
          can_withdraw: true
          token_address: 0xdAC17F958D2ee523a2206206994597C13D831ec7
          asset_id: USDT
          can_deposit: true
          decimal: 18
          fee_token_id: ETH
      properties:
        data:
          items:
            $ref: '#/components/schemas/ExtendedTokenInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    list_wallets_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
        - wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          wallet_subtype: Asset
          org_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          name: Example Wallet
          wallet_type: Custodial
      properties:
        data:
          items:
            $ref: '#/components/schemas/WalletInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    update_wallet_by_id_request:
      properties:
        name:
          description: The wallet name.
          example: Example Wallet
          type: string
        apikey:
          description: The API key of your exchange account. This property is required
            when updating the information of an Exchange Wallet.
          example: d8f062da-39f4-4a11-8b9d-12595854237f
          type: string
        secret:
          description: The API secret of your exchange account. This property is required
            when updating the information of an Exchange Wallet.
          example: 75B4F636193162488A3728B4A5797708
          type: string
        passphrase:
          description: The passphrase of your exchange account. This property is required
            when updating the information of an Exchange Wallet.
          example: sXASDKWKLLsWWEE
          type: string
        ga_code:
          description: The GA code for the exchange.
          example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
          type: string
        main_wallet_id:
          description: The ID of the Exchange Wallet (Main Account).
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
      type: object
    delete_wallet_by_id_200_response:
      example:
        submitted: true
      properties:
        submitted:
          description: |
            Whether the request to delete the wallet has been successfully submitted.
            - `true`: The request to delete the wallet has been successfully submitted.
            - `false`: The request to delete the wallet has not been submitted.
          example: true
          type: boolean
      required:
      - submitted
      type: object
    get_spendable_list_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          confirmed_number: 66716
          token_balances:
          - token_id: BTC
            balance:
              total: "100.0"
              pending: "10.5"
              available: "80.5"
              locked: "3.0"
          - token_id: BTC
            balance:
              total: "100.0"
              pending: "10.5"
              available: "80.5"
              locked: "3.0"
        - is_locked: false
          address: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
          is_coinbase: false
          vout_n: 0
          tx_hash: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
          confirmed_number: 66716
          token_balances:
          - token_id: BTC
            balance:
              total: "100.0"
              pending: "10.5"
              available: "80.5"
              locked: "3.0"
          - token_id: BTC
            balance:
              total: "100.0"
              pending: "10.5"
              available: "80.5"
              locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/UTXO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    lock_spendable_list_request:
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: BTC
          type: string
        tx_hash:
          description: The transaction hash.
          example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      required:
      - token_id
      - tx_hash
      - vout_n
      type: object
    lock_spendable_list_200_response:
      example:
        executed: true
      properties:
        executed:
          description: |
            Whether the locking or unlocking operation has been successfully executed.
            - `true`: The operation has been successfully executed.
            - `false`: The operation has not been executed.
          example: true
          type: boolean
      type: object
    list_addresses_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - path: m/44'/60'/0'/0
          address: 0x0000000000000000000000000000000000000000
          token_id: ETH_USDT
          address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          memo: "82840924"
          encoding: ENCODING_P2PKH
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        - path: m/44'/60'/0'/0
          address: 0x0000000000000000000000000000000000000000
          token_id: ETH_USDT
          address_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
          memo: "82840924"
          encoding: ENCODING_P2PKH
          pubkey: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
      properties:
        data:
          items:
            $ref: '#/components/schemas/AddressInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    generate_wallet_address_request:
      properties:
        token_id:
          description: "The token ID, which is the unique identifier of a token. You\
            \ can retrieve the IDs of all the tokens you can use by calling [List\
            \ organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens)."
          example: ETH_USDT
          pattern: "^[A-Z]+(_[A-Z0-9]+)?$"
          type: string
        count:
          default: 1
          description: The number of addresses to create.
          example: 1
          maximum: 50
          minimum: 1
          type: integer
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
      required:
      - count
      - token_id
      type: object
    check_address_validity_200_response:
      example:
        validity: true
      properties:
        validity:
          description: |
            Whether the address is valid.
            - `true`: The address is valid.
            - `false`: the address is invalid.
          example: true
          type: boolean
      required:
      - validity
      type: object
    get_wallet_token_balances_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
        - token_id: BTC
          balance:
            total: "100.0"
            pending: "10.5"
            available: "80.5"
            locked: "3.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/TokenBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_mpc_project_request:
      properties:
        name:
          description: The project name.
          example: Project name
          type: string
        node_count:
          description: "The number of key share holders in the project.\n\n**Notes:**\n\
            1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (`threshold`-`node_count`), so you can\
            \ only set `node_count` to 2 or 3. \n\n2. `threshold` must be less than\
            \ or equal to `node_count`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation\
            \ in the project.\n\n**Notes:**\n1. Currently, the available [Threshold\
            \ Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (`threshold`-`node_count`), so you can\
            \ only set `threshold` to 2 or 3. \n\n2. `threshold` must be less than\
            \ or equal to `node_count`.\n"
          example: 2
          type: integer
      required:
      - name
      - node_count
      - threshold
      type: object
    update_mpc_project_request:
      properties:
        name:
          description: The project's new name.
          example: New project name
          type: string
      required:
      - name
      type: object
    create_mpc_vault_request:
      properties:
        project_id:
          description: |
            The project ID.

            **Notes:**
            1. If `vault_type` is `OrgControlled`, the value of `project_id` will be ignored.
            2. If `vault_type` is `UserControlled`, then `project_id` is required.
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        name:
          description: The name of the new vault.
          example: Name of new vault
          type: string
        vault_type:
          $ref: '#/components/schemas/MPCVaultType'
      required:
      - name
      - vault_type
      type: object
    modify_mpc_vault_request:
      properties:
        name:
          description: The new name of the vault.
          example: The new name of the vault
          type: string
      required:
      - name
      type: object
    create_key_group_request_key_holders_inner:
      description: "When creating MainKeyGroup and SigningKeyGroup, the Cobo key share\
        \ holder will be added automatically."
      properties:
        name:
          description: Key share holder's name.
          example: Key share holder name
          type: string
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          description: The TSS Node ID.
          example: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijklm
          type: string
      type: object
    create_key_group_request:
      properties:
        group_type:
          $ref: '#/components/schemas/KeyGroupType'
        node_count:
          description: "The number of key share holders in this key share group.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (`threshold`-`node_count`), so you can\
            \ only set `node_count` to 2 or 3. \n\n2. `threshold` must be less than\
            \ or equal to `node_count`.\n"
          example: 3
          type: integer
        threshold:
          description: "The number of key share holders required to sign an operation.\n\
            \n**Notes:**\n1. Currently, the available [Threshold Signature Schemes\
            \ (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ are 2-2, 2-3, and 3-3 schemes (`threshold`-`node_count`), so you can\
            \ only set `threshold` to 2 or 3. \n\n2. `threshold` must be less than\
            \ or equal to `node_count`.\n"
          example: 2
          type: integer
        key_holders:
          items:
            $ref: '#/components/schemas/create_key_group_request_key_holders_inner'
          type: array
      required:
      - group_type
      - key_holders
      - node_count
      - threshold
      type: object
    update_key_group_request:
      properties:
        update_key_share_group_action:
          description: The available action of key group update.
          enum:
          - UpgradeToMainGroup
          example: UpgradeToMainGroup
          type: string
      required:
      - update_key_share_group_action
      type: object
    create_tss_request_request_detail_params:
      properties:
        node_ids:
          description: "The TSS Node IDs participating in creating a new key share\
            \ group when the action `type` is either `KeyGenFromKeyGroup` or `Recovery`.\
            \ \n\n**Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss)\
            \ such as the 2-2, 2-3, and 3-3 schemes (`threshold`-`node_count`), for\
            \ `used_node_ids`, you only need to fill in 1 Cobo TSS Node ID and enough\
            \ non-Cobo TSS Node IDs to satisfy the number of approvers specified in\
            \ `threshold`.\n"
          example:
          - 1AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijkl
          - 2AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghijkl
          items:
            type: string
          type: array
      type: object
    create_tss_request_request:
      properties:
        type:
          $ref: '#/components/schemas/TSSRequestType'
        target_key_group_id:
          description: The target key share group ID.
          example: "123456789012345678"
          type: string
        source_key_group_id:
          description: |
            The used key share group ID.

            **Note:** `used_key_group_id` is used only when the action `type` is either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share group to be used as the source group to create a new `target_key_group`.
          example: "987654321098765432"
          type: string
        detail_params:
          $ref: '#/components/schemas/create_tss_request_request_detail_params'
      required:
      - target_key_group_id
      - type
      type: object
    list_exchanges_200_response_inner:
      description: Settings details for the exchange
      example:
        exchange_id: binance
        subtitle: Sub Account & Trading Account
        supported_sub_wallet_ids:
        - SPOT
        - FUTURE
      properties:
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        subtitle:
          description: Introduction of the supported features of this exchange.
          example: Sub Account & Trading Account
          type: string
        supported_sub_wallet_ids:
          description: The trading accounts(sub_wallet_ids) supported for this exchange.
          example:
          - SPOT
          - FUTURE
          items:
            type: string
          type: array
      required:
      - exchange_id
      - supported_sub_wallet_ids
      type: object
    get_exchange_supported_assets_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
        - icon_url: https://d.cobo.com/public/logos/USDT.png
          display_code: USDT
          description: Tether USDT
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetInfo'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_exchange_wallet_asset_balances_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - balance: "{}"
          asset_id: USDT
        - balance: "{}"
          asset_id: USDT
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssetBalance'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    link_sub_accounts_by_wallet_id_request:
      properties:
        wallet_id:
          description: The ID of main account wallet.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        sub_account_ids:
          description: The ID list of sub accounts.
          example:
          - f47ac10b-58cc-4372-a567-0e02b2c3d479
          items:
            type: string
          type: array
      type: object
    create_transfer_transaction_201_response:
      example:
        transaction_id: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        request_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        status: Submitted
      properties:
        request_id:
          description: The request ID that is used to track a withdrawal request.
            The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          type: string
        transaction_id:
          description: The transaction ID.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
      required:
      - request_id
      - status
      - transaction_id
      type: object
    list_transactions_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - is_loop: false
          updated_time: 1610445878970
          chain_id: ETH
          confirmed_num: 12
          fee:
            base_fee: "0.9"
            gas_limit: "21000"
            gas_used: "100000000"
            max_priority_fee: "0.1"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            token_id: ETH_USDT
            utxo_outputs:
              outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            asset_id: USDT
          force_internal: false
          block_number: 123
          description: withdrawal to exchange trading account
          source:
            utxo_inputs:
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            source_type: ExternalAddress
            account_input:
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          confirming_threshold: 15
          type: Deposit
          force_external: false
          block_time: 1717740319
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          created_time: 1610445878970
          sub_status: PendingDoubleCheck
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          cobo_id: "20231213122855000000000000000000"
          nonce: 9
          initiator_type: API
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
        - is_loop: false
          updated_time: 1610445878970
          chain_id: ETH
          confirmed_num: 12
          fee:
            base_fee: "0.9"
            gas_limit: "21000"
            gas_used: "100000000"
            max_priority_fee: "0.1"
            fee_type: EVM_EIP_1559
            fee_used: "0.1"
          initiator: "API Prod Key #1"
          destination:
            account_output:
              amount: "1.5"
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              memo: "82840924"
            destination_type: Address
            token_id: ETH_USDT
            utxo_outputs:
              outputs:
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              - amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                script: 76a914fb37342f6275b13936799def06f2DEMO
              change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
            asset_id: USDT
          force_internal: false
          block_number: 123
          description: withdrawal to exchange trading account
          source:
            utxo_inputs:
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
            source_type: ExternalAddress
            account_input:
              address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          confirming_threshold: 15
          type: Deposit
          force_external: false
          block_time: 1717740319
          transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          created_time: 1610445878970
          sub_status: PendingDoubleCheck
          block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
          cobo_id: "20231213122855000000000000000000"
          nonce: 9
          initiator_type: API
          category:
          - Payment
          - Payment
          request_id: web_send_by_user_327_1610444045047
          replacement:
            replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            type: Resend
            replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          failed_reason: Rejected by signer Cobo TSS
          status: Submitted
      properties:
        data:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_token_200_response:
      example:
        access_token: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
        refresh_token: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
        scope: ""
        token_type: Bearer
        expires_in: 43199
      properties:
        access_token:
          description: The token that can be used to access protected resources.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        token_type:
          description: The type of the token issued.
          example: Bearer
          type: string
        scope:
          description: The scope of the access token.
          example: ""
          type: string
        expires_in:
          description: The time in seconds before the access token expires.
          example: 43199
          type: integer
        refresh_token:
          description: The token that can be used to obtain a new access token.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    refresh_token_request:
      properties:
        client_id:
          description: The token that can be used to access protected resources.
          example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
          type: string
        grant_type:
          description: The type of the token issued.
          example: Bearer
          type: string
        refresh_token:
          description: The token that can be used to obtain a new access token.
          example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
          type: string
      type: object
    list_webhook_endpoints_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          description: My webhook endpoint
          created_timestamp: 1701396866
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          url: https://example.com/webhook
          status: STATUS_ACTIVE
        - subscribed_events:
          - wallets.transaction.created
          - wallets.transaction.created
          description: My webhook endpoint
          created_timestamp: 1701396866
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          url: https://example.com/webhook
          status: STATUS_ACTIVE
      properties:
        data:
          items:
            $ref: '#/components/schemas/Endpoint'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_webhook_endpoint_request:
      properties:
        url:
          description: The webhook endpoint URL.
          example: https://example.com/webhook
          format: url
          type: string
        subscribed_events:
          description: |
            The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        description:
          description: The description of the webhook endpoint.
          example: My webhook endpoint
          type: string
      required:
      - subscribed_events
      - url
      type: object
    update_webhook_endpoint_request:
      properties:
        subscribed_events:
          description: "The new event types you want to subscribe to for this webhook\
            \ endpoint. You can call [Get webhook event types](/v2/api-references/developers--webhooks/get-webhook-event-types)\
            \ to retrieve all available event types."
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          description: "The new status you want to set the webhook endpoint to. If\
            \ you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked,\
            \ meaning it will no longer receive any webhook events."
          enum:
          - STATUS_INACTIVE
          example: STATUS_INACTIVE
          type: string
        description:
          description: The webhook endpoint description.
          example: My webhook endpoint
          type: string
      type: object
    list_webhook_event_definitions_200_response_inner:
      example:
        event_type: wallets.transaction.created
        description: Occurs when the transaction status is updated
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        description:
          description: The description of the webhook event type.
          example: Occurs when the transaction status is updated
          type: string
      type: object
    list_events_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            is_loop: false
            updated_time: 1610445878970
            chain_id: ETH
            confirmed_num: 12
            fee:
              base_fee: "0.9"
              gas_limit: "21000"
              gas_used: "100000000"
              max_priority_fee: "0.1"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              token_id: ETH_USDT
              utxo_outputs:
                outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              asset_id: USDT
            force_internal: false
            block_number: 123
            description: withdrawal to exchange trading account
            source:
              utxo_inputs:
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              source_type: ExternalAddress
              account_input:
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirming_threshold: 15
            type: Deposit
            force_external: false
            block_time: 1717740319
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            created_time: 1610445878970
            sub_status: PendingDoubleCheck
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            cobo_id: "20231213122855000000000000000000"
            nonce: 9
            initiator_type: API
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
        - next_retry_timestamp: 1701396866000
          retries_left: 3
          data:
            is_loop: false
            updated_time: 1610445878970
            chain_id: ETH
            confirmed_num: 12
            fee:
              base_fee: "0.9"
              gas_limit: "21000"
              gas_used: "100000000"
              max_priority_fee: "0.1"
              fee_type: EVM_EIP_1559
              fee_used: "0.1"
            initiator: "API Prod Key #1"
            destination:
              account_output:
                amount: "1.5"
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
                memo: "82840924"
              destination_type: Address
              token_id: ETH_USDT
              utxo_outputs:
                outputs:
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                - amount: "1.5"
                  address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  script: 76a914fb37342f6275b13936799def06f2DEMO
                change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              asset_id: USDT
            force_internal: false
            block_number: 123
            description: withdrawal to exchange trading account
            source:
              utxo_inputs:
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              - tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
              source_type: ExternalAddress
              account_input:
                address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirming_threshold: 15
            type: Deposit
            force_external: false
            block_time: 1717740319
            transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            created_time: 1610445878970
            sub_status: PendingDoubleCheck
            block_hash: 0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735
            cobo_id: "20231213122855000000000000000000"
            nonce: 9
            initiator_type: API
            category:
            - Payment
            - Payment
            request_id: web_send_by_user_327_1610444045047
            replacement:
              replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
              type: Resend
              replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            failed_reason: Rejected by signer Cobo TSS
            status: Submitted
          created_timestamp: 1701396866000
          id: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          type: wallets.transaction.created
          url: https://example.com/webhook
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    retry_webhook_event_201_response:
      example:
        retried: true
      properties:
        retried:
          description: Whether the retry request has been successfully sent.
          example: true
          type: boolean
      type: object
    list_staking_pools_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - protocol: Babylon
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
        - protocol: Babylon
          chain_id: Bitcoin
          token_id: BTC
          supported_wallet_types:
          - MPC
          id: babylon_btc
          est_apr: 0.05
          protocol_icon_url: https://example.com/icon.png
      properties:
        data:
          items:
            $ref: '#/components/schemas/PoolSummary'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    get_staking_estimation_fee_request:
      discriminator:
        mapping:
          Stake: '#/components/schemas/EstimateStakeFee'
          Unstake: '#/components/schemas/EstimateUnstakeFee'
          Withdraw: '#/components/schemas/EstimateWithdrawFee'
        propertyName: activity_type
      oneOf:
      - $ref: '#/components/schemas/EstimateStakeFee'
      - $ref: '#/components/schemas/EstimateUnstakeFee'
      - $ref: '#/components/schemas/EstimateWithdrawFee'
    create_stake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateStakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_stake_activity_201_response:
      example:
        activity_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        staking_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        activity_id:
          description: The id of the activity
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
        staking_id:
          description: The id of the related staking
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - activity_id
      type: object
    list_stakings_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - unlock_block_height: 871234
          created_time: 1640995200000
          updated_time: 1640995200000
          address: 0x0000000000000000000000000000000000000000
          initiator: Vanya@cobo.com
          pos_chain: Babylon Chain
          pool_id: babylon_btc
          unlock_time: 1640995200000
          rewards_info: {}
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          amounts:
          - amount: "100.00"
            activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            status: active
          - amount: "100.00"
            activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            status: active
          validator_info:
            icon_url: https://example.com/logo.png
            public_key: "0000000000000000000000000000000000000000000000000000000000000000"
            address: 0x0000000000000000000000000000000000000000
            name: Cobo
            commission_rate: "0.1"
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        - unlock_block_height: 871234
          created_time: 1640995200000
          updated_time: 1640995200000
          address: 0x0000000000000000000000000000000000000000
          initiator: Vanya@cobo.com
          pos_chain: Babylon Chain
          pool_id: babylon_btc
          unlock_time: 1640995200000
          rewards_info: {}
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          amounts:
          - amount: "100.00"
            activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            status: active
          - amount: "100.00"
            activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            status: active
          validator_info:
            icon_url: https://example.com/logo.png
            public_key: "0000000000000000000000000000000000000000000000000000000000000000"
            address: 0x0000000000000000000000000000000000000000
            name: Cobo
            commission_rate: "0.1"
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
      properties:
        data:
          items:
            $ref: '#/components/schemas/Stakings'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    create_unstake_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateUnstakeActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    create_withdraw_activity_request:
      allOf:
      - $ref: '#/components/schemas/CreateWithdrawActivity'
      - $ref: '#/components/schemas/ActivityInitiator'
    list_activities_200_response:
      example:
        pagination:
          before: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
          total_count: 10000
          after: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        data:
        - created_time: 1640995200000
          updated_time: 1640995200000
          amount: "100.00"
          address: 0x0000000000000000000000000000000000000000
          tx_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          initiator: vanya@cobo.com
          fee:
            base_fee: "0.9"
            gas_limit: "21000"
            token_id: ETH
            max_priority_fee: "0.1"
            fee_type: EVM_EIP_1559
          type: Stake
          pool_id: babylon_btc
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
        - created_time: 1640995200000
          updated_time: 1640995200000
          amount: "100.00"
          address: 0x0000000000000000000000000000000000000000
          tx_ids:
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          - 0011039d-27fb-49ba-b172-6e0aa80e37ec
          initiator: vanya@cobo.com
          fee:
            base_fee: "0.9"
            gas_limit: "21000"
            token_id: ETH
            max_priority_fee: "0.1"
            fee_type: EVM_EIP_1559
          type: Stake
          pool_id: babylon_btc
          wallet_id: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          staking_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          status: Success
      properties:
        data:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    TokenBalance_balance:
      description: The balance details.
      example:
        total: "100.0"
        pending: "10.5"
        available: "80.5"
        locked: "3.0"
      properties:
        total:
          description: "The total balance, which is the sum of the available, pending,\
            \ and locked balances."
          example: "100.0"
          type: string
        available:
          description: The balance free to use.
          example: "80.5"
          type: string
        pending:
          default: "0"
          description: The balance that is currently pending confirmation.
          example: "10.5"
          type: string
        locked:
          default: "0"
          description: The balance that is currently not accessible to transactions.
          example: "3.0"
          type: string
      required:
      - available
      - total
      type: object
    SafeWallet_allOf_initiator:
      properties:
        wallet_id:
          description: 'The initiator''s wallet ID. '
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: 'The initiator''s wallet type. '
          example: MPC
          type: string
        wallet_address:
          description: 'The initiator''s wallet address. '
          example: 0x1234567890123456789012345678901234567890
          type: string
      type: object
    ExchangeWalletInfo_allOf_sub_accounts:
      properties:
        wallet_id:
          description: The wallet ID of the Sub Account. This property is returned
            only if you are creating or querying an Exchange Wallet (Main Account).
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        account_id:
          description: "The Sub Account ID. It can be an email address, a user name,\
            \ or a custom account ID. This property is returned only if you are creating\
            \ or querying an Exchange Wallet (Main Account)."
          example: sub01@xx.com
          type: string
      required:
      - account_id
      - wallet_id
      type: object
    CreateSafeWallet_allOf_initiator:
      properties:
        wallet_id:
          description: "The initiator's wallet ID. This property is required when\
            \ creating a new Safe{Wallet}."
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: "The initiator's wallet type. This property is required when\
            \ creating a new Safe{Wallet}."
          example: MPC
          type: string
        wallet_address:
          description: "The initiator's wallet address. This property is required\
            \ when creating a new Safe{Wallet}."
          example: 0x1234567890123456789012345678901234567890
          type: string
      type: object
    EvmEip1559Fee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
      example:
        base_fee: "0.9"
        gas_limit: "21000"
        max_priority_fee: "0.1"
    EvmLegacyFee_slow:
      allOf:
      - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
      - $ref: '#/components/schemas/FeeData'
    UtxoFee_slow:
      allOf:
      - $ref: '#/components/schemas/UtxoFeeBasePrice'
      - $ref: '#/components/schemas/FeeAmount'
    Transaction_source:
      discriminator:
        mapping:
          Address: '#/components/schemas/TransactionAddressSource'
          FeeStation: '#/components/schemas/TransactionFeeStationWalletSource'
          CustodialWallet: '#/components/schemas/TransactionCustodialWalletSource'
          MPCWallet: '#/components/schemas/TransactionMPCWalletSource'
          SafeWallet: '#/components/schemas/TransactionSafeWalletSource'
          ExchangeWallet: '#/components/schemas/TransactionExchangeWalletSource'
        propertyName: source_type
      oneOf:
      - $ref: '#/components/schemas/TransactionAddressSource'
      - $ref: '#/components/schemas/TransactionCustodialWalletSource'
      - $ref: '#/components/schemas/TransactionMPCWalletSource'
      - $ref: '#/components/schemas/TransactionSafeWalletSource'
      - $ref: '#/components/schemas/TransactionExchangeWalletSource'
      - $ref: '#/components/schemas/TransactionFeeStationWalletSource'
    Transaction_destination:
      discriminator:
        mapping:
          Address: '#/components/schemas/TransactionAddressDestination'
          ContractCall: '#/components/schemas/TransactionContractCallDestination'
          MessageSign: '#/components/schemas/TransactionMessageSignDestination'
          CustodialWallet: '#/components/schemas/TransactionCustodialWalletDestination'
          MPCWallet: '#/components/schemas/TransactionMPCWalletDestination'
          SafeWallet: '#/components/schemas/TransactionSafeWalletDestination'
          ExchangeWallet: '#/components/schemas/TransactionExchangeWalletDestination'
        propertyName: destination_type
      oneOf:
      - $ref: '#/components/schemas/TransactionAddressDestination'
      - $ref: '#/components/schemas/TransactionContractCallDestination'
      - $ref: '#/components/schemas/TransactionMessageSignDestination'
      - $ref: '#/components/schemas/TransactionCustodialWalletDestination'
      - $ref: '#/components/schemas/TransactionMPCWalletDestination'
      - $ref: '#/components/schemas/TransactionSafeWalletDestination'
      - $ref: '#/components/schemas/TransactionExchangeWalletDestination'
    Transaction_replacement:
      example:
        replaced_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replaced_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        replaced_by_transaction_id: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        type: Resend
        replaced_by_transaction_hash: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
      properties:
        type:
          description: "The transaction replacement type. Possible values include:\
            \ \n  - `Cancel`: To cancel a transaction.\n  - `Drop`: To drop a transaction.\n\
            \  - `Resend`: To resend a transaction.\n  - `SpeedUp`: To speed up a\
            \ transaction.\n"
          enum:
          - Cancel
          - Drop
          - Resend
          - SpeedUp
          example: Resend
          type: string
        replaced_by_transaction_id:
          description: The ID of the replacement transaction that this transaction
            was replaced by.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_by_transaction_hash:
          description: The hash of the replacement transaction that this transaction
            was replaced by.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
        replaced_transaction_id:
          description: The ID of the transaction that this transaction replaced.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
          format: uuid
          type: string
        replaced_transaction_hash:
          description: The hash of the transaction that this transaction replaced.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
          type: string
      type: object
    TransactionAddressSource_account_input:
      example:
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
      properties:
        address:
          description: The source address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      type: object
    TransactionAddressSource_utxo_inputs_inner:
      example:
        tx_hash: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
      properties:
        tx_hash:
          description: The transaction hash of UTXO that are consumed in the transaction.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
      type: object
    TransactionMPCWalletSource_account_input:
      properties:
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
      type: object
    TransactionMPCWalletSource_utxo_inputs_inner:
      properties:
        tx_hash:
          description: The transaction hash of UTXOs that are consumed in the transaction.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
      type: object
    TransactionSafeWalletSource_delegate:
      properties:
        wallet_id:
          description: "The wallet ID of the Delegate. This is required for initiating\
            \ a transfer from Smart Contract Wallets (Safe{Wallet}). "
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: "The wallet type of the Delegate. This is required for initiating\
            \ a transfer from Smart Contract Wallets (Safe{Wallet})."
          example: MPC
          type: string
        wallet_address:
          description: "The wallet address of the Delegate. This is required for initiating\
            \ a transfer from Smart Contract Wallets (Safe{Wallet})."
          example: 0x1234567890123456789012345678901234567890
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      type: object
    TransactionAddressDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: "1.5"
          type: string
      type: object
    TransactionAddressDestination_utxo_outputs_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        script: 76a914fb37342f6275b13936799def06f2DEMO
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: "1.5"
          type: string
        script:
          description: The script of the output. It is a programmable code fragment
            that defines the conditions under which the UTXO can be spent.
          example: 76a914fb37342f6275b13936799def06f2DEMO
          type: string
      type: object
    TransactionAddressDestination_utxo_outputs:
      example:
        outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          script: 76a914fb37342f6275b13936799def06f2DEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          script: 76a914fb37342f6275b13936799def06f2DEMO
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        outputs:
          items:
            $ref: '#/components/schemas/TransactionAddressDestination_utxo_outputs_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
      type: object
    MpcTransferSource_allOf_utxo_inputs_included_inputs:
      properties:
        tx_hash:
          description: The transaction hash of UTXO to be consumed in the transaction.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      type: object
    MpcTransferSource_allOf_utxo_inputs_excluded_inputs:
      properties:
        tx_hash:
          description: The transaction hash of UTXO not to be consumed in the transaction.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
          type: string
        vout_n:
          description: The output index of the UTXO.
          example: 0
          type: integer
      type: object
    MpcTransferSource_allOf_utxo_inputs:
      properties:
        included_inputs:
          items:
            $ref: '#/components/schemas/MpcTransferSource_allOf_utxo_inputs_included_inputs'
          type: array
        excluded_inputs:
          items:
            $ref: '#/components/schemas/MpcTransferSource_allOf_utxo_inputs_excluded_inputs'
          type: array
      type: object
    SafeTransferSource_allOf_delegate:
      properties:
        wallet_id:
          description: "The wallet ID of the Delegate. This is required when initiating\
            \ a transfer from Smart Contract Wallets (Safe{Wallet}). "
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: "The wallet type of the Delegate. This is required when initiating\
            \ a transfer from Smart Contract Wallets (Safe{Wallet})."
          example: MPC
          type: string
        wallet_address:
          description: "The wallet address of the Delegate. This is required when\
            \ initiating a transfer from Smart Contract Wallets (Safe{Wallet})."
          example: 0x1234567890123456789012345678901234567890
          type: string
      type: object
    AddressTransferDestination_account_output:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo: "82840924"
      properties:
        address:
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        memo:
          description: "The memo that identifies a transaction in order to credit\
            \ the correct account. For transfers out of Cobo Portal, it is highly\
            \ recommended to include a memo for the chains such as XRP, EOS, XLM,\
            \ IOST, BNB_BNB, ATOM, LUNA, and TON."
          example: "82840924"
          type: string
        amount:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
      type: object
    AddressTransferDestination_utxo_outputs_outputs_inner:
      example:
        amount: "1.5"
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        script: 76a914fb37342f6275b13936799def06f2DEMO
      properties:
        address:
          description: The external address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
        amount:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        script:
          description: The script of the output. It is a programmable code fragment
            that defines the conditions under which the UTXO can be spent.
          example: 76a914fb37342f6275b13936799def06f2DEMO
          type: string
      type: object
    AddressTransferDestination_utxo_outputs:
      example:
        outputs:
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          script: 76a914fb37342f6275b13936799def06f2DEMO
        - amount: "1.5"
          address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          script: 76a914fb37342f6275b13936799def06f2DEMO
        change_address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
      properties:
        outputs:
          items:
            $ref: '#/components/schemas/AddressTransferDestination_utxo_outputs_outputs_inner'
          type: array
        change_address:
          description: The address used to receive the remaining funds or change from
            the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
          type: string
      type: object
    SignMessage_source:
      description: The information about the transaction source.
      example:
        wallet_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        mpc_used_key_group:
          used_node_ids:
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          - cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          used_key_group_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
      properties:
        wallet_id:
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          format: uuid
          type: string
        address:
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      type: object
    SignMessage_destination:
      description: The information about the transaction destination.
      example:
        structured_data: |
          {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
        message: YWFhYQ==
      properties:
        message:
          description: "The raw data of the message to be signed, encoded in Base64\
            \ format."
          example: YWFhYQ==
          type: string
        structured_data:
          additionalProperties: true
          description: "The structured data of the message to be signed, encoded in\
            \ JSON format."
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
          type: object
      type: object
    EstimateFeeContractCall_destination:
      description: The information about the transaction destination.
      example:
        address: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
        calldata: !!binary |-
          VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
        value: "1.5"
      properties:
        address:
          description: The destination address.
          example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
          type: string
        value:
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: "1.5"
          type: string
        calldata:
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: !!binary |-
            VTNkaFoyZGxjaUJ5YjJOcmN3PT0=
          format: byte
          type: string
      type: object
    SafeContractCallSource_allOf_delegate:
      properties:
        wallet_id:
          description: "The wallet ID of the Delegate. This is required for initiating\
            \ a transfer from a Smart Contract Wallet (Safe{Wallet})."
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        wallet_type:
          description: "The wallet type of the Delegate. This is required for initiating\
            \ a transfer from a Smart Contract Wallet (Safe{Wallet})."
          example: MPC
          type: string
        wallet_address:
          description: "The wallet address of the Delegate. This is required for initiating\
            \ a transfer from a Smart Contract Wallet (Safe{Wallet})."
          example: 0x1234567890123456789012345678901234567890
          type: string
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
      type: object
    CreateStakeActivity_extra:
      discriminator:
        mapping:
          Babylon: '#/components/schemas/BabylonStakeExtra'
          EigenLayerNativeETH: '#/components/schemas/EigenLayerLstStakeExtra'
          EigenLayerLST: '#/components/schemas/EigenLayerNativeStakeExtra'
        propertyName: pool_type
      oneOf:
      - $ref: '#/components/schemas/BabylonStakeExtra'
      - $ref: '#/components/schemas/EigenLayerLstStakeExtra'
      - $ref: '#/components/schemas/EigenLayerNativeStakeExtra'
    AmountDetails_inner:
      example:
        amount: "100.00"
        activity_id: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        status: active
      properties:
        status:
          description: The staking status.
          example: active
          type: string
        amount:
          description: The staking amount.
          example: "100.00"
          type: string
        activity_id:
          description: The related staking activity ID.
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          type: string
      required:
      - amount
      - status
      type: object
    PoolDetails_allOf_validators_info:
      oneOf:
      - $ref: '#/components/schemas/BabylonValidator'
      - $ref: '#/components/schemas/EigenlayerValidator'
    Stakings_validator_info:
      description: The validator info of the stake.
      example:
        icon_url: https://example.com/logo.png
        public_key: "0000000000000000000000000000000000000000000000000000000000000000"
        address: 0x0000000000000000000000000000000000000000
        name: Cobo
        commission_rate: "0.1"
      properties:
        icon_url:
          example: https://example.com/logo.png
          type: string
        public_key:
          example: "0000000000000000000000000000000000000000000000000000000000000000"
          type: string
        name:
          example: Cobo
          type: string
        address:
          example: 0x0000000000000000000000000000000000000000
          type: string
        commission_rate:
          example: "0.1"
          type: string
      type: object
  securitySchemes:
    CoboAuth:
      description: The API key.
      in: header
      name: BIZ-API-KEY
      type: apiKey
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://auth.cobo.com/authorize
          scopes:
            custodial_asset_wallet:create: Create access to custodial asset wallets
            custodial_asset_wallet:add: Generate address access to custodial asset
              wallets
            custodial_asset_wallet:edit: Change wallet name access to custodial asset
              wallets
            custodial_asset_wallet:withdraw: Withdraw access to custodial asset wallets
            mpc_organization_controlled_wallet:create: Create access to MPC organization-controlled
              wallets
            mpc_organization_controlled_wallet:add: Generate address access to MPC
              organization-controlled wallets
            mpc_organization_controlled_wallet:edit: Change wallet name access to
              MPC organization-controlled wallets
            mpc_organization_controlled_wallet:withdraw: Withdraw access to MPC organization-controlled
              wallets
            mpc_organization_controlled_wallet:contract_call: Contract call access
              to MPC organization-controlled wallets
            mpc_organization_controlled_wallet:message_sign: Message sign access to
              MPC organization-controlled wallets
            mpc_organization_controlled_vault:manage: Create/Edit access to MPC organization-controlled
              vaults
            mpc_organization_controlled_key_group:manage: Create/Edit/Delete access
              to MPC organization-controlled key groups
            mpc_organization_controlled_tss_request:manage: Create/Cancel access to
              MPC organization-controlled tss requests
            mpc_user_controlled_wallet:create: Create access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:add: Generate address access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:edit: Change wallet name access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:withdraw: Withdraw access to MPC user-controlled
              wallets
            mpc_user_controlled_wallet:contract_call: Contract call access to MPC
              user-controlled wallets
            mpc_user_controlled_wallet:message_sign: Message sign access to MPC user-controlled
              wallets
            mpc_user_controlled_project:manage: Create/Edit access to MPC user-controlled
              projects
            mpc_user_controlled_vault:manage: Create/Edit access to MPC user-controlled
              vaults
            mpc_user_controlled_key_group:manage: Create/Edit/Delete access to MPC
              user-controlled key groups
            mpc_user_controlled_tss_request:manage: Create/Cancel access to MPC user-controlled
              tss requests
            webhook:resend: Resend access to webhook events
            webhook_url:edit: Create/Edit access to webhook urls
          tokenUrl: https://auth.cobo.com/oauth/token
      type: oauth2
