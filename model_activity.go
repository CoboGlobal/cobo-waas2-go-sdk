/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Activity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Activity{}

// Activity The staking activity.
type Activity struct {
	// The unique id of the activity.
	Id *string `json:"id,omitempty"`
	// The initiator of the activity.
	Initiator *string `json:"initiator,omitempty"`
	Type *ActivityType `json:"type,omitempty"`
	// The id of the wallet to stake.
	WalletId *string `json:"wallet_id,omitempty"`
	// The staker wallet address.
	Address *string `json:"address,omitempty"`
	// The id of the staking pool.
	PoolId string `json:"pool_id"`
	// The id of the related staking.
	StakingId *string `json:"staking_id,omitempty"`
	// The amount of the activity.
	Amount string `json:"amount"`
	// The related txs of the activity.
	TxIds []string `json:"tx_ids,omitempty"`
	Fee *TransactionTransferFee `json:"fee,omitempty"`
	Status ActivityStatus `json:"status"`
	// The time when the activity was created.
	CreatedTime *int64 `json:"created_time,omitempty"`
	// The time when the activity was last updated.
	UpdatedTime *int64 `json:"updated_time,omitempty"`
}

type _Activity Activity

// NewActivity instantiates a new Activity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivity(poolId string, amount string, status ActivityStatus) *Activity {
	this := Activity{}
	this.PoolId = poolId
	this.Amount = amount
	this.Status = status
	return &this
}

// NewActivityWithDefaults instantiates a new Activity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityWithDefaults() *Activity {
	this := Activity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Activity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Activity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Activity) SetId(v string) {
	o.Id = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *Activity) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *Activity) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *Activity) SetInitiator(v string) {
	o.Initiator = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Activity) GetType() ActivityType {
	if o == nil || IsNil(o.Type) {
		var ret ActivityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Activity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActivityType and assigns it to the Type field.
func (o *Activity) SetType(v ActivityType) {
	o.Type = &v
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *Activity) GetWalletId() string {
	if o == nil || IsNil(o.WalletId) {
		var ret string
		return ret
	}
	return *o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.WalletId) {
		return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *Activity) HasWalletId() bool {
	if o != nil && !IsNil(o.WalletId) {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given string and assigns it to the WalletId field.
func (o *Activity) SetWalletId(v string) {
	o.WalletId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Activity) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Activity) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Activity) SetAddress(v string) {
	o.Address = &v
}

// GetPoolId returns the PoolId field value
func (o *Activity) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *Activity) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *Activity) SetPoolId(v string) {
	o.PoolId = v
}

// GetStakingId returns the StakingId field value if set, zero value otherwise.
func (o *Activity) GetStakingId() string {
	if o == nil || IsNil(o.StakingId) {
		var ret string
		return ret
	}
	return *o.StakingId
}

// GetStakingIdOk returns a tuple with the StakingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetStakingIdOk() (*string, bool) {
	if o == nil || IsNil(o.StakingId) {
		return nil, false
	}
	return o.StakingId, true
}

// HasStakingId returns a boolean if a field has been set.
func (o *Activity) HasStakingId() bool {
	if o != nil && !IsNil(o.StakingId) {
		return true
	}

	return false
}

// SetStakingId gets a reference to the given string and assigns it to the StakingId field.
func (o *Activity) SetStakingId(v string) {
	o.StakingId = &v
}

// GetAmount returns the Amount field value
func (o *Activity) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Activity) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Activity) SetAmount(v string) {
	o.Amount = v
}

// GetTxIds returns the TxIds field value if set, zero value otherwise.
func (o *Activity) GetTxIds() []string {
	if o == nil || IsNil(o.TxIds) {
		var ret []string
		return ret
	}
	return o.TxIds
}

// GetTxIdsOk returns a tuple with the TxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetTxIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TxIds) {
		return nil, false
	}
	return o.TxIds, true
}

// HasTxIds returns a boolean if a field has been set.
func (o *Activity) HasTxIds() bool {
	if o != nil && !IsNil(o.TxIds) {
		return true
	}

	return false
}

// SetTxIds gets a reference to the given []string and assigns it to the TxIds field.
func (o *Activity) SetTxIds(v []string) {
	o.TxIds = v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *Activity) GetFee() TransactionTransferFee {
	if o == nil || IsNil(o.Fee) {
		var ret TransactionTransferFee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetFeeOk() (*TransactionTransferFee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *Activity) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given TransactionTransferFee and assigns it to the Fee field.
func (o *Activity) SetFee(v TransactionTransferFee) {
	o.Fee = &v
}

// GetStatus returns the Status field value
func (o *Activity) GetStatus() ActivityStatus {
	if o == nil {
		var ret ActivityStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Activity) GetStatusOk() (*ActivityStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Activity) SetStatus(v ActivityStatus) {
	o.Status = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Activity) GetCreatedTime() int64 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int64
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetCreatedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Activity) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int64 and assigns it to the CreatedTime field.
func (o *Activity) SetCreatedTime(v int64) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *Activity) GetUpdatedTime() int64 {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret int64
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetUpdatedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *Activity) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given int64 and assigns it to the UpdatedTime field.
func (o *Activity) SetUpdatedTime(v int64) {
	o.UpdatedTime = &v
}

func (o Activity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Activity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WalletId) {
		toSerialize["wallet_id"] = o.WalletId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["pool_id"] = o.PoolId
	if !IsNil(o.StakingId) {
		toSerialize["staking_id"] = o.StakingId
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.TxIds) {
		toSerialize["tx_ids"] = o.TxIds
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	return toSerialize, nil
}

func (o *Activity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_id",
		"amount",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivity := _Activity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivity)

	if err != nil {
		return err
	}

	*o = Activity(varActivity)

	return err
}

type NullableActivity struct {
	value *Activity
	isSet bool
}

func (v NullableActivity) Get() *Activity {
	return v.value
}

func (v *NullableActivity) Set(val *Activity) {
	v.value = val
	v.isSet = true
}

func (v NullableActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivity(val *Activity) *NullableActivity {
	return &NullableActivity{value: val, isSet: true}
}

func (v NullableActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


