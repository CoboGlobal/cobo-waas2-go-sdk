/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// KeyGroupType the model 'KeyGroupType'
type KeyGroupType string

// List of KeyGroupType
const (
	KEYGROUPTYPE_MAIN_KEY_GROUP KeyGroupType = "MainKeyGroup"
	KEYGROUPTYPE_SIGNING_KEY_GROUP KeyGroupType = "SigningKeyGroup"
	KEYGROUPTYPE_RECOVERY_KEY_GROUP KeyGroupType = "RecoveryKeyGroup"
)

// All allowed values of KeyGroupType enum
var AllowedKeyGroupTypeEnumValues = []KeyGroupType{
	"MainKeyGroup",
	"SigningKeyGroup",
	"RecoveryKeyGroup",
}

func (v *KeyGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyGroupType(value)
	for _, existing := range AllowedKeyGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyGroupType", value)
}

// NewKeyGroupTypeFromValue returns a pointer to a valid KeyGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyGroupTypeFromValue(v string) (*KeyGroupType, error) {
	ev := KeyGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyGroupType: valid values are %v", v, AllowedKeyGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyGroupType) IsValid() bool {
	for _, existing := range AllowedKeyGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyGroupType value
func (v KeyGroupType) Ptr() *KeyGroupType {
	return &v
}

type NullableKeyGroupType struct {
	value *KeyGroupType
	isSet bool
}

func (v NullableKeyGroupType) Get() *KeyGroupType {
	return v.value
}

func (v *NullableKeyGroupType) Set(val *KeyGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyGroupType(val *KeyGroupType) *NullableKeyGroupType {
	return &NullableKeyGroupType{value: val, isSet: true}
}

func (v NullableKeyGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

