/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModifyMpcVaultRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyMpcVaultRequest{}

// ModifyMpcVaultRequest struct for ModifyMpcVaultRequest
type ModifyMpcVaultRequest struct {
	// The new name of vault
	Name string `json:"name"`
}

type _ModifyMpcVaultRequest ModifyMpcVaultRequest

// NewModifyMpcVaultRequest instantiates a new ModifyMpcVaultRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyMpcVaultRequest(name string) *ModifyMpcVaultRequest {
	this := ModifyMpcVaultRequest{}
	this.Name = name
	return &this
}

// NewModifyMpcVaultRequestWithDefaults instantiates a new ModifyMpcVaultRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyMpcVaultRequestWithDefaults() *ModifyMpcVaultRequest {
	this := ModifyMpcVaultRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ModifyMpcVaultRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModifyMpcVaultRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModifyMpcVaultRequest) SetName(v string) {
	o.Name = v
}

func (o ModifyMpcVaultRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyMpcVaultRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *ModifyMpcVaultRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyMpcVaultRequest := _ModifyMpcVaultRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyMpcVaultRequest)

	if err != nil {
		return err
	}

	*o = ModifyMpcVaultRequest(varModifyMpcVaultRequest)

	return err
}

type NullableModifyMpcVaultRequest struct {
	value *ModifyMpcVaultRequest
	isSet bool
}

func (v NullableModifyMpcVaultRequest) Get() *ModifyMpcVaultRequest {
	return v.value
}

func (v *NullableModifyMpcVaultRequest) Set(val *ModifyMpcVaultRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyMpcVaultRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyMpcVaultRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyMpcVaultRequest(val *ModifyMpcVaultRequest) *NullableModifyMpcVaultRequest {
	return &NullableModifyMpcVaultRequest{value: val, isSet: true}
}

func (v NullableModifyMpcVaultRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyMpcVaultRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


