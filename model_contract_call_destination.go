/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the ContractCallDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractCallDestination{}

// ContractCallDestination struct for ContractCallDestination
type ContractCallDestination struct {
	// To address
	AddressStr *string `json:"address_str,omitempty"`
	// Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5) 
	Value *string `json:"value,omitempty"`
	// calldata for this transaction. Commonly used as part of contract interaction. 
	Calldata *string `json:"calldata,omitempty"`
}

// NewContractCallDestination instantiates a new ContractCallDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractCallDestination() *ContractCallDestination {
	this := ContractCallDestination{}
	return &this
}

// NewContractCallDestinationWithDefaults instantiates a new ContractCallDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractCallDestinationWithDefaults() *ContractCallDestination {
	this := ContractCallDestination{}
	return &this
}

// GetAddressStr returns the AddressStr field value if set, zero value otherwise.
func (o *ContractCallDestination) GetAddressStr() string {
	if o == nil || IsNil(o.AddressStr) {
		var ret string
		return ret
	}
	return *o.AddressStr
}

// GetAddressStrOk returns a tuple with the AddressStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractCallDestination) GetAddressStrOk() (*string, bool) {
	if o == nil || IsNil(o.AddressStr) {
		return nil, false
	}
	return o.AddressStr, true
}

// HasAddressStr returns a boolean if a field has been set.
func (o *ContractCallDestination) HasAddressStr() bool {
	if o != nil && !IsNil(o.AddressStr) {
		return true
	}

	return false
}

// SetAddressStr gets a reference to the given string and assigns it to the AddressStr field.
func (o *ContractCallDestination) SetAddressStr(v string) {
	o.AddressStr = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ContractCallDestination) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractCallDestination) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ContractCallDestination) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ContractCallDestination) SetValue(v string) {
	o.Value = &v
}

// GetCalldata returns the Calldata field value if set, zero value otherwise.
func (o *ContractCallDestination) GetCalldata() string {
	if o == nil || IsNil(o.Calldata) {
		var ret string
		return ret
	}
	return *o.Calldata
}

// GetCalldataOk returns a tuple with the Calldata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractCallDestination) GetCalldataOk() (*string, bool) {
	if o == nil || IsNil(o.Calldata) {
		return nil, false
	}
	return o.Calldata, true
}

// HasCalldata returns a boolean if a field has been set.
func (o *ContractCallDestination) HasCalldata() bool {
	if o != nil && !IsNil(o.Calldata) {
		return true
	}

	return false
}

// SetCalldata gets a reference to the given string and assigns it to the Calldata field.
func (o *ContractCallDestination) SetCalldata(v string) {
	o.Calldata = &v
}

func (o ContractCallDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractCallDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressStr) {
		toSerialize["address_str"] = o.AddressStr
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Calldata) {
		toSerialize["calldata"] = o.Calldata
	}
	return toSerialize, nil
}

type NullableContractCallDestination struct {
	value *ContractCallDestination
	isSet bool
}

func (v NullableContractCallDestination) Get() *ContractCallDestination {
	return v.value
}

func (v *NullableContractCallDestination) Set(val *ContractCallDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableContractCallDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableContractCallDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractCallDestination(val *ContractCallDestination) *NullableContractCallDestination {
	return &NullableContractCallDestination{value: val, isSet: true}
}

func (v NullableContractCallDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractCallDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


