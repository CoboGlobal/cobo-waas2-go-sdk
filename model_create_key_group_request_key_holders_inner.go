/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the CreateKeyGroupRequestKeyHoldersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateKeyGroupRequestKeyHoldersInner{}

// CreateKeyGroupRequestKeyHoldersInner When creating MainKeyGroup and SigningKeyGroup, the cobo key holder will be added automatically
type CreateKeyGroupRequestKeyHoldersInner struct {
	Name *string `json:"name,omitempty"`
	Type *KeyHolderType `json:"type,omitempty"`
	// The ID of the tss node.
	TssNodeId *string `json:"tss_node_id,omitempty"`
}

// NewCreateKeyGroupRequestKeyHoldersInner instantiates a new CreateKeyGroupRequestKeyHoldersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateKeyGroupRequestKeyHoldersInner() *CreateKeyGroupRequestKeyHoldersInner {
	this := CreateKeyGroupRequestKeyHoldersInner{}
	return &this
}

// NewCreateKeyGroupRequestKeyHoldersInnerWithDefaults instantiates a new CreateKeyGroupRequestKeyHoldersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateKeyGroupRequestKeyHoldersInnerWithDefaults() *CreateKeyGroupRequestKeyHoldersInner {
	this := CreateKeyGroupRequestKeyHoldersInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateKeyGroupRequestKeyHoldersInner) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetType() KeyHolderType {
	if o == nil || IsNil(o.Type) {
		var ret KeyHolderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetTypeOk() (*KeyHolderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyHolderType and assigns it to the Type field.
func (o *CreateKeyGroupRequestKeyHoldersInner) SetType(v KeyHolderType) {
	o.Type = &v
}

// GetTssNodeId returns the TssNodeId field value if set, zero value otherwise.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetTssNodeId() string {
	if o == nil || IsNil(o.TssNodeId) {
		var ret string
		return ret
	}
	return *o.TssNodeId
}

// GetTssNodeIdOk returns a tuple with the TssNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) GetTssNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TssNodeId) {
		return nil, false
	}
	return o.TssNodeId, true
}

// HasTssNodeId returns a boolean if a field has been set.
func (o *CreateKeyGroupRequestKeyHoldersInner) HasTssNodeId() bool {
	if o != nil && !IsNil(o.TssNodeId) {
		return true
	}

	return false
}

// SetTssNodeId gets a reference to the given string and assigns it to the TssNodeId field.
func (o *CreateKeyGroupRequestKeyHoldersInner) SetTssNodeId(v string) {
	o.TssNodeId = &v
}

func (o CreateKeyGroupRequestKeyHoldersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateKeyGroupRequestKeyHoldersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TssNodeId) {
		toSerialize["tss_node_id"] = o.TssNodeId
	}
	return toSerialize, nil
}

type NullableCreateKeyGroupRequestKeyHoldersInner struct {
	value *CreateKeyGroupRequestKeyHoldersInner
	isSet bool
}

func (v NullableCreateKeyGroupRequestKeyHoldersInner) Get() *CreateKeyGroupRequestKeyHoldersInner {
	return v.value
}

func (v *NullableCreateKeyGroupRequestKeyHoldersInner) Set(val *CreateKeyGroupRequestKeyHoldersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateKeyGroupRequestKeyHoldersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateKeyGroupRequestKeyHoldersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateKeyGroupRequestKeyHoldersInner(val *CreateKeyGroupRequestKeyHoldersInner) *NullableCreateKeyGroupRequestKeyHoldersInner {
	return &NullableCreateKeyGroupRequestKeyHoldersInner{value: val, isSet: true}
}

func (v NullableCreateKeyGroupRequestKeyHoldersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateKeyGroupRequestKeyHoldersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


