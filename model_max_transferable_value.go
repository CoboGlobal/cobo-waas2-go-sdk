/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the MaxTransferableValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxTransferableValue{}

// MaxTransferableValue The maximum amount you can transfer from the wallet or the specified wallet address, along with the corresponding transaction fee.
type MaxTransferableValue struct {
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
	TokenId *string `json:"token_id,omitempty"`
	// The maximum amount you can transfer from the wallet or the specified wallet address.
	MaxTransferableValue *string `json:"max_transferable_value,omitempty"`
	Fee *TransactionTransferFee `json:"fee,omitempty"`
}

// NewMaxTransferableValue instantiates a new MaxTransferableValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxTransferableValue() *MaxTransferableValue {
	this := MaxTransferableValue{}
	return &this
}

// NewMaxTransferableValueWithDefaults instantiates a new MaxTransferableValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxTransferableValueWithDefaults() *MaxTransferableValue {
	this := MaxTransferableValue{}
	return &this
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *MaxTransferableValue) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxTransferableValue) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *MaxTransferableValue) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *MaxTransferableValue) SetTokenId(v string) {
	o.TokenId = &v
}

// GetMaxTransferableValue returns the MaxTransferableValue field value if set, zero value otherwise.
func (o *MaxTransferableValue) GetMaxTransferableValue() string {
	if o == nil || IsNil(o.MaxTransferableValue) {
		var ret string
		return ret
	}
	return *o.MaxTransferableValue
}

// GetMaxTransferableValueOk returns a tuple with the MaxTransferableValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxTransferableValue) GetMaxTransferableValueOk() (*string, bool) {
	if o == nil || IsNil(o.MaxTransferableValue) {
		return nil, false
	}
	return o.MaxTransferableValue, true
}

// HasMaxTransferableValue returns a boolean if a field has been set.
func (o *MaxTransferableValue) HasMaxTransferableValue() bool {
	if o != nil && !IsNil(o.MaxTransferableValue) {
		return true
	}

	return false
}

// SetMaxTransferableValue gets a reference to the given string and assigns it to the MaxTransferableValue field.
func (o *MaxTransferableValue) SetMaxTransferableValue(v string) {
	o.MaxTransferableValue = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *MaxTransferableValue) GetFee() TransactionTransferFee {
	if o == nil || IsNil(o.Fee) {
		var ret TransactionTransferFee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxTransferableValue) GetFeeOk() (*TransactionTransferFee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *MaxTransferableValue) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given TransactionTransferFee and assigns it to the Fee field.
func (o *MaxTransferableValue) SetFee(v TransactionTransferFee) {
	o.Fee = &v
}

func (o MaxTransferableValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxTransferableValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.MaxTransferableValue) {
		toSerialize["max_transferable_value"] = o.MaxTransferableValue
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	return toSerialize, nil
}

type NullableMaxTransferableValue struct {
	value *MaxTransferableValue
	isSet bool
}

func (v NullableMaxTransferableValue) Get() *MaxTransferableValue {
	return v.value
}

func (v *NullableMaxTransferableValue) Set(val *MaxTransferableValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxTransferableValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxTransferableValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxTransferableValue(val *MaxTransferableValue) *NullableMaxTransferableValue {
	return &NullableMaxTransferableValue{value: val, isSet: true}
}

func (v NullableMaxTransferableValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxTransferableValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


