/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the LockSpendableListRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LockSpendableListRequest{}

// LockSpendableListRequest struct for LockSpendableListRequest
type LockSpendableListRequest struct {
	TxHashes []string `json:"tx_hashes,omitempty"`
	// True if to lock the UTXOs, False to unlock.
	IsLocked *bool `json:"is_locked,omitempty"`
}

// NewLockSpendableListRequest instantiates a new LockSpendableListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockSpendableListRequest() *LockSpendableListRequest {
	this := LockSpendableListRequest{}
	return &this
}

// NewLockSpendableListRequestWithDefaults instantiates a new LockSpendableListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockSpendableListRequestWithDefaults() *LockSpendableListRequest {
	this := LockSpendableListRequest{}
	return &this
}

// GetTxHashes returns the TxHashes field value if set, zero value otherwise.
func (o *LockSpendableListRequest) GetTxHashes() []string {
	if o == nil || IsNil(o.TxHashes) {
		var ret []string
		return ret
	}
	return o.TxHashes
}

// GetTxHashesOk returns a tuple with the TxHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockSpendableListRequest) GetTxHashesOk() ([]string, bool) {
	if o == nil || IsNil(o.TxHashes) {
		return nil, false
	}
	return o.TxHashes, true
}

// HasTxHashes returns a boolean if a field has been set.
func (o *LockSpendableListRequest) HasTxHashes() bool {
	if o != nil && !IsNil(o.TxHashes) {
		return true
	}

	return false
}

// SetTxHashes gets a reference to the given []string and assigns it to the TxHashes field.
func (o *LockSpendableListRequest) SetTxHashes(v []string) {
	o.TxHashes = v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *LockSpendableListRequest) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockSpendableListRequest) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *LockSpendableListRequest) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *LockSpendableListRequest) SetIsLocked(v bool) {
	o.IsLocked = &v
}

func (o LockSpendableListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LockSpendableListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TxHashes) {
		toSerialize["tx_hashes"] = o.TxHashes
	}
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	return toSerialize, nil
}

type NullableLockSpendableListRequest struct {
	value *LockSpendableListRequest
	isSet bool
}

func (v NullableLockSpendableListRequest) Get() *LockSpendableListRequest {
	return v.value
}

func (v *NullableLockSpendableListRequest) Set(val *LockSpendableListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLockSpendableListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLockSpendableListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockSpendableListRequest(val *LockSpendableListRequest) *NullableLockSpendableListRequest {
	return &NullableLockSpendableListRequest{value: val, isSet: true}
}

func (v NullableLockSpendableListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockSpendableListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


