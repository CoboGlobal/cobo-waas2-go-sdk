/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimateStakeFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimateStakeFee{}

// EstimateStakeFee struct for EstimateStakeFee
type EstimateStakeFee struct {
	ActivityType *ActivityType `json:"activity_type,omitempty"`
	// The id of the wallet to stake.
	WalletId string `json:"wallet_id"`
	// The staker wallet address.
	Address string `json:"address"`
	// The id of the staking pool
	PoolId string `json:"pool_id"`
	// The amount to stake
	Amount string `json:"amount"`
	Fee TransactionTransferFee `json:"fee"`
	Extra CreateStakeActivityExtra `json:"extra"`
}

type _EstimateStakeFee EstimateStakeFee

// NewEstimateStakeFee instantiates a new EstimateStakeFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateStakeFee(walletId string, address string, poolId string, amount string, fee TransactionTransferFee, extra CreateStakeActivityExtra) *EstimateStakeFee {
	this := EstimateStakeFee{}
	this.WalletId = walletId
	this.Address = address
	this.PoolId = poolId
	this.Amount = amount
	this.Fee = fee
	this.Extra = extra
	return &this
}

// NewEstimateStakeFeeWithDefaults instantiates a new EstimateStakeFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateStakeFeeWithDefaults() *EstimateStakeFee {
	this := EstimateStakeFee{}
	return &this
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *EstimateStakeFee) GetActivityType() ActivityType {
	if o == nil || IsNil(o.ActivityType) {
		var ret ActivityType
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetActivityTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *EstimateStakeFee) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given ActivityType and assigns it to the ActivityType field.
func (o *EstimateStakeFee) SetActivityType(v ActivityType) {
	o.ActivityType = &v
}

// GetWalletId returns the WalletId field value
func (o *EstimateStakeFee) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *EstimateStakeFee) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddress returns the Address field value
func (o *EstimateStakeFee) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *EstimateStakeFee) SetAddress(v string) {
	o.Address = v
}

// GetPoolId returns the PoolId field value
func (o *EstimateStakeFee) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *EstimateStakeFee) SetPoolId(v string) {
	o.PoolId = v
}

// GetAmount returns the Amount field value
func (o *EstimateStakeFee) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *EstimateStakeFee) SetAmount(v string) {
	o.Amount = v
}

// GetFee returns the Fee field value
func (o *EstimateStakeFee) GetFee() TransactionTransferFee {
	if o == nil {
		var ret TransactionTransferFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetFeeOk() (*TransactionTransferFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *EstimateStakeFee) SetFee(v TransactionTransferFee) {
	o.Fee = v
}

// GetExtra returns the Extra field value
func (o *EstimateStakeFee) GetExtra() CreateStakeActivityExtra {
	if o == nil {
		var ret CreateStakeActivityExtra
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *EstimateStakeFee) GetExtraOk() (*CreateStakeActivityExtra, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extra, true
}

// SetExtra sets field value
func (o *EstimateStakeFee) SetExtra(v CreateStakeActivityExtra) {
	o.Extra = v
}

func (o EstimateStakeFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimateStakeFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityType) {
		toSerialize["activity_type"] = o.ActivityType
	}
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address"] = o.Address
	toSerialize["pool_id"] = o.PoolId
	toSerialize["amount"] = o.Amount
	toSerialize["fee"] = o.Fee
	toSerialize["extra"] = o.Extra
	return toSerialize, nil
}

func (o *EstimateStakeFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"address",
		"pool_id",
		"amount",
		"fee",
		"extra",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimateStakeFee := _EstimateStakeFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimateStakeFee)

	if err != nil {
		return err
	}

	*o = EstimateStakeFee(varEstimateStakeFee)

	return err
}

type NullableEstimateStakeFee struct {
	value *EstimateStakeFee
	isSet bool
}

func (v NullableEstimateStakeFee) Get() *EstimateStakeFee {
	return v.value
}

func (v *NullableEstimateStakeFee) Set(val *EstimateStakeFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateStakeFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateStakeFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateStakeFee(val *EstimateStakeFee) *NullableEstimateStakeFee {
	return &NullableEstimateStakeFee{value: val, isSet: true}
}

func (v NullableEstimateStakeFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateStakeFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


