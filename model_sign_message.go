/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignMessage{}

// SignMessage The data for create a message-signing transaction.
type SignMessage struct {
	// Unique id of the request.
	RequestId string `json:"request_id"`
	RequestType string `json:"request_type"`
	// The blockchain on which the token operates.
	ChainId string `json:"chain_id"`
	Source *SignMessageSource `json:"source,omitempty"`
	Destination *SignMessageDestination `json:"destination,omitempty"`
}

type _SignMessage SignMessage

// NewSignMessage instantiates a new SignMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignMessage(requestId string, requestType string, chainId string) *SignMessage {
	this := SignMessage{}
	this.RequestId = requestId
	this.RequestType = requestType
	this.ChainId = chainId
	return &this
}

// NewSignMessageWithDefaults instantiates a new SignMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignMessageWithDefaults() *SignMessage {
	this := SignMessage{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *SignMessage) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *SignMessage) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *SignMessage) SetRequestId(v string) {
	o.RequestId = v
}

// GetRequestType returns the RequestType field value
func (o *SignMessage) GetRequestType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value
// and a boolean to check if the value has been set.
func (o *SignMessage) GetRequestTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestType, true
}

// SetRequestType sets field value
func (o *SignMessage) SetRequestType(v string) {
	o.RequestType = v
}

// GetChainId returns the ChainId field value
func (o *SignMessage) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SignMessage) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SignMessage) SetChainId(v string) {
	o.ChainId = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SignMessage) GetSource() SignMessageSource {
	if o == nil || IsNil(o.Source) {
		var ret SignMessageSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetSourceOk() (*SignMessageSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SignMessage) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given SignMessageSource and assigns it to the Source field.
func (o *SignMessage) SetSource(v SignMessageSource) {
	o.Source = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *SignMessage) GetDestination() SignMessageDestination {
	if o == nil || IsNil(o.Destination) {
		var ret SignMessageDestination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignMessage) GetDestinationOk() (*SignMessageDestination, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *SignMessage) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given SignMessageDestination and assigns it to the Destination field.
func (o *SignMessage) SetDestination(v SignMessageDestination) {
	o.Destination = &v
}

func (o SignMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId
	toSerialize["request_type"] = o.RequestType
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	return toSerialize, nil
}

func (o *SignMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
		"request_type",
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignMessage := _SignMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignMessage)

	if err != nil {
		return err
	}

	*o = SignMessage(varSignMessage)

	return err
}

type NullableSignMessage struct {
	value *SignMessage
	isSet bool
}

func (v NullableSignMessage) Get() *SignMessage {
	return v.value
}

func (v *NullableSignMessage) Set(val *SignMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSignMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSignMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignMessage(val *SignMessage) *NullableSignMessage {
	return &NullableSignMessage{value: val, isSet: true}
}

func (v NullableSignMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


