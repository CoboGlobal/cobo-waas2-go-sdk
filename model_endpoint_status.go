/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// EndpointStatus The webhook endpoint status. Possible values include: - `STATUS_ACTIVE`: The endpoint is currently in use. - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events. - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use. - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events. - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated. - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected. 
type EndpointStatus string

// List of EndpointStatus
const (
	ENDPOINTSTATUS_ACTIVE EndpointStatus = "STATUS_ACTIVE"
	ENDPOINTSTATUS_INACTIVE EndpointStatus = "STATUS_INACTIVE"
	ENDPOINTSTATUS_PENDING_ACTIVE EndpointStatus = "STATUS_PENDING_ACTIVE"
	ENDPOINTSTATUS_PENDING_INACTIVE EndpointStatus = "STATUS_PENDING_INACTIVE"
	ENDPOINTSTATUS_PENDING_UPDATE EndpointStatus = "STATUS_PENDING_UPDATE"
	ENDPOINTSTATUS_REJECT_ACTIVE EndpointStatus = "STATUS_REJECT_ACTIVE"
)

// All allowed values of EndpointStatus enum
var AllowedEndpointStatusEnumValues = []EndpointStatus{
	"STATUS_ACTIVE",
	"STATUS_INACTIVE",
	"STATUS_PENDING_ACTIVE",
	"STATUS_PENDING_INACTIVE",
	"STATUS_PENDING_UPDATE",
	"STATUS_REJECT_ACTIVE",
}

func (v *EndpointStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	*v = EndpointStatus(value)
	return nil
}

// NewEndpointStatusFromValue returns a pointer to a valid EndpointStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointStatusFromValue(v string) (*EndpointStatus, error) {
	ev := EndpointStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointStatus: valid values are %v", v, AllowedEndpointStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointStatus) IsValid() bool {
	for _, existing := range AllowedEndpointStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointStatus value
func (v EndpointStatus) Ptr() *EndpointStatus {
	return &v
}

type NullableEndpointStatus struct {
	value *EndpointStatus
	isSet bool
}

func (v NullableEndpointStatus) Get() *EndpointStatus {
	return v.value
}

func (v *NullableEndpointStatus) Set(val *EndpointStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointStatus(val *EndpointStatus) *NullableEndpointStatus {
	return &NullableEndpointStatus{value: val, isSet: true}
}

func (v NullableEndpointStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

