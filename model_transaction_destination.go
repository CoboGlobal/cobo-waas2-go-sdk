/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TransactionDestination - struct for TransactionDestination
type TransactionDestination struct {
	BaseTransactionAddress *BaseTransactionAddress
	BaseWalletTransactionAddress *BaseWalletTransactionAddress
	ExchangeWalletTransactionAddress *ExchangeWalletTransactionAddress
}

// BaseTransactionAddressAsTransactionDestination is a convenience function that returns BaseTransactionAddress wrapped in TransactionDestination
func BaseTransactionAddressAsTransactionDestination(v *BaseTransactionAddress) TransactionDestination {
	return TransactionDestination{
		BaseTransactionAddress: v,
	}
}

// BaseWalletTransactionAddressAsTransactionDestination is a convenience function that returns BaseWalletTransactionAddress wrapped in TransactionDestination
func BaseWalletTransactionAddressAsTransactionDestination(v *BaseWalletTransactionAddress) TransactionDestination {
	return TransactionDestination{
		BaseWalletTransactionAddress: v,
	}
}

// ExchangeWalletTransactionAddressAsTransactionDestination is a convenience function that returns ExchangeWalletTransactionAddress wrapped in TransactionDestination
func ExchangeWalletTransactionAddressAsTransactionDestination(v *ExchangeWalletTransactionAddress) TransactionDestination {
	return TransactionDestination{
		ExchangeWalletTransactionAddress: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionDestination) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CustodialAssetWallet'
	if jsonDict["source_type"] == "CustodialAssetWallet" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CustodialWeb3Wallet'
	if jsonDict["source_type"] == "CustodialWeb3Wallet" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExchangeAccount'
	if jsonDict["source_type"] == "ExchangeAccount" {
		// try to unmarshal JSON data into ExchangeWalletTransactionAddress
		err = json.Unmarshal(data, &dst.ExchangeWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.ExchangeWalletTransactionAddress, return on the first match
		} else {
			dst.ExchangeWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as ExchangeWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExternalAddress'
	if jsonDict["source_type"] == "ExternalAddress" {
		// try to unmarshal JSON data into BaseTransactionAddress
		err = json.Unmarshal(data, &dst.BaseTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseTransactionAddress, return on the first match
		} else {
			dst.BaseTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GasStation'
	if jsonDict["source_type"] == "GasStation" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MPCClientControlledWallet'
	if jsonDict["source_type"] == "MPCClientControlledWallet" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MPCUserControlledWallet'
	if jsonDict["source_type"] == "MPCUserControlledWallet" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SafeContractWallet'
	if jsonDict["source_type"] == "SafeContractWallet" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BaseTransactionAddress'
	if jsonDict["source_type"] == "BaseTransactionAddress" {
		// try to unmarshal JSON data into BaseTransactionAddress
		err = json.Unmarshal(data, &dst.BaseTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseTransactionAddress, return on the first match
		} else {
			dst.BaseTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BaseWalletTransactionAddress'
	if jsonDict["source_type"] == "BaseWalletTransactionAddress" {
		// try to unmarshal JSON data into BaseWalletTransactionAddress
		err = json.Unmarshal(data, &dst.BaseWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.BaseWalletTransactionAddress, return on the first match
		} else {
			dst.BaseWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as BaseWalletTransactionAddress: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExchangeWalletTransactionAddress'
	if jsonDict["source_type"] == "ExchangeWalletTransactionAddress" {
		// try to unmarshal JSON data into ExchangeWalletTransactionAddress
		err = json.Unmarshal(data, &dst.ExchangeWalletTransactionAddress)
		if err == nil {
			return nil // data stored in dst.ExchangeWalletTransactionAddress, return on the first match
		} else {
			dst.ExchangeWalletTransactionAddress = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as ExchangeWalletTransactionAddress: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionDestination) MarshalJSON() ([]byte, error) {
	if src.BaseTransactionAddress != nil {
		return json.Marshal(&src.BaseTransactionAddress)
	}

	if src.BaseWalletTransactionAddress != nil {
		return json.Marshal(&src.BaseWalletTransactionAddress)
	}

	if src.ExchangeWalletTransactionAddress != nil {
		return json.Marshal(&src.ExchangeWalletTransactionAddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BaseTransactionAddress != nil {
		return obj.BaseTransactionAddress
	}

	if obj.BaseWalletTransactionAddress != nil {
		return obj.BaseWalletTransactionAddress
	}

	if obj.ExchangeWalletTransactionAddress != nil {
		return obj.ExchangeWalletTransactionAddress
	}

	// all schemas are nil
	return nil
}

type NullableTransactionDestination struct {
	value *TransactionDestination
	isSet bool
}

func (v NullableTransactionDestination) Get() *TransactionDestination {
	return v.value
}

func (v *NullableTransactionDestination) Set(val *TransactionDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDestination(val *TransactionDestination) *NullableTransactionDestination {
	return &NullableTransactionDestination{value: val, isSet: true}
}

func (v NullableTransactionDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


