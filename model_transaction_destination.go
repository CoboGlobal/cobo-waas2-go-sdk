/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TransactionDestination - struct for TransactionDestination
type TransactionDestination struct {
	TransactionAddressDestination *TransactionAddressDestination
	TransactionContractCallDestination *TransactionContractCallDestination
	TransactionCustodialWalletDestination *TransactionCustodialWalletDestination
	TransactionExchangeWalletDestination *TransactionExchangeWalletDestination
	TransactionMPCWalletDestination *TransactionMPCWalletDestination
	TransactionMessageSignDestination *TransactionMessageSignDestination
	TransactionSafeWalletDestination *TransactionSafeWalletDestination
}

// TransactionAddressDestinationAsTransactionDestination is a convenience function that returns TransactionAddressDestination wrapped in TransactionDestination
func TransactionAddressDestinationAsTransactionDestination(v *TransactionAddressDestination) TransactionDestination {
	return TransactionDestination{
		TransactionAddressDestination: v,
	}
}

// TransactionContractCallDestinationAsTransactionDestination is a convenience function that returns TransactionContractCallDestination wrapped in TransactionDestination
func TransactionContractCallDestinationAsTransactionDestination(v *TransactionContractCallDestination) TransactionDestination {
	return TransactionDestination{
		TransactionContractCallDestination: v,
	}
}

// TransactionCustodialWalletDestinationAsTransactionDestination is a convenience function that returns TransactionCustodialWalletDestination wrapped in TransactionDestination
func TransactionCustodialWalletDestinationAsTransactionDestination(v *TransactionCustodialWalletDestination) TransactionDestination {
	return TransactionDestination{
		TransactionCustodialWalletDestination: v,
	}
}

// TransactionExchangeWalletDestinationAsTransactionDestination is a convenience function that returns TransactionExchangeWalletDestination wrapped in TransactionDestination
func TransactionExchangeWalletDestinationAsTransactionDestination(v *TransactionExchangeWalletDestination) TransactionDestination {
	return TransactionDestination{
		TransactionExchangeWalletDestination: v,
	}
}

// TransactionMPCWalletDestinationAsTransactionDestination is a convenience function that returns TransactionMPCWalletDestination wrapped in TransactionDestination
func TransactionMPCWalletDestinationAsTransactionDestination(v *TransactionMPCWalletDestination) TransactionDestination {
	return TransactionDestination{
		TransactionMPCWalletDestination: v,
	}
}

// TransactionMessageSignDestinationAsTransactionDestination is a convenience function that returns TransactionMessageSignDestination wrapped in TransactionDestination
func TransactionMessageSignDestinationAsTransactionDestination(v *TransactionMessageSignDestination) TransactionDestination {
	return TransactionDestination{
		TransactionMessageSignDestination: v,
	}
}

// TransactionSafeWalletDestinationAsTransactionDestination is a convenience function that returns TransactionSafeWalletDestination wrapped in TransactionDestination
func TransactionSafeWalletDestinationAsTransactionDestination(v *TransactionSafeWalletDestination) TransactionDestination {
	return TransactionDestination{
		TransactionSafeWalletDestination: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionDestination) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Address'
	if jsonDict["destination_type"] == "Address" {
		// try to unmarshal JSON data into TransactionAddressDestination
		err = json.Unmarshal(data, &dst.TransactionAddressDestination)
		if err == nil {
			return nil // data stored in dst.TransactionAddressDestination, return on the first match
		} else {
			dst.TransactionAddressDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionAddressDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ContractCall'
	if jsonDict["destination_type"] == "ContractCall" {
		// try to unmarshal JSON data into TransactionContractCallDestination
		err = json.Unmarshal(data, &dst.TransactionContractCallDestination)
		if err == nil {
			return nil // data stored in dst.TransactionContractCallDestination, return on the first match
		} else {
			dst.TransactionContractCallDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionContractCallDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CustodialWallet'
	if jsonDict["destination_type"] == "CustodialWallet" {
		// try to unmarshal JSON data into TransactionCustodialWalletDestination
		err = json.Unmarshal(data, &dst.TransactionCustodialWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionCustodialWalletDestination, return on the first match
		} else {
			dst.TransactionCustodialWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionCustodialWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExchangeWallet'
	if jsonDict["destination_type"] == "ExchangeWallet" {
		// try to unmarshal JSON data into TransactionExchangeWalletDestination
		err = json.Unmarshal(data, &dst.TransactionExchangeWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionExchangeWalletDestination, return on the first match
		} else {
			dst.TransactionExchangeWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionExchangeWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MPCWallet'
	if jsonDict["destination_type"] == "MPCWallet" {
		// try to unmarshal JSON data into TransactionMPCWalletDestination
		err = json.Unmarshal(data, &dst.TransactionMPCWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionMPCWalletDestination, return on the first match
		} else {
			dst.TransactionMPCWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionMPCWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MessageSign'
	if jsonDict["destination_type"] == "MessageSign" {
		// try to unmarshal JSON data into TransactionMessageSignDestination
		err = json.Unmarshal(data, &dst.TransactionMessageSignDestination)
		if err == nil {
			return nil // data stored in dst.TransactionMessageSignDestination, return on the first match
		} else {
			dst.TransactionMessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionMessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SafeWallet'
	if jsonDict["destination_type"] == "SafeWallet" {
		// try to unmarshal JSON data into TransactionSafeWalletDestination
		err = json.Unmarshal(data, &dst.TransactionSafeWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionSafeWalletDestination, return on the first match
		} else {
			dst.TransactionSafeWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionSafeWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionAddressDestination'
	if jsonDict["destination_type"] == "TransactionAddressDestination" {
		// try to unmarshal JSON data into TransactionAddressDestination
		err = json.Unmarshal(data, &dst.TransactionAddressDestination)
		if err == nil {
			return nil // data stored in dst.TransactionAddressDestination, return on the first match
		} else {
			dst.TransactionAddressDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionAddressDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionContractCallDestination'
	if jsonDict["destination_type"] == "TransactionContractCallDestination" {
		// try to unmarshal JSON data into TransactionContractCallDestination
		err = json.Unmarshal(data, &dst.TransactionContractCallDestination)
		if err == nil {
			return nil // data stored in dst.TransactionContractCallDestination, return on the first match
		} else {
			dst.TransactionContractCallDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionContractCallDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionCustodialWalletDestination'
	if jsonDict["destination_type"] == "TransactionCustodialWalletDestination" {
		// try to unmarshal JSON data into TransactionCustodialWalletDestination
		err = json.Unmarshal(data, &dst.TransactionCustodialWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionCustodialWalletDestination, return on the first match
		} else {
			dst.TransactionCustodialWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionCustodialWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionExchangeWalletDestination'
	if jsonDict["destination_type"] == "TransactionExchangeWalletDestination" {
		// try to unmarshal JSON data into TransactionExchangeWalletDestination
		err = json.Unmarshal(data, &dst.TransactionExchangeWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionExchangeWalletDestination, return on the first match
		} else {
			dst.TransactionExchangeWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionExchangeWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionMPCWalletDestination'
	if jsonDict["destination_type"] == "TransactionMPCWalletDestination" {
		// try to unmarshal JSON data into TransactionMPCWalletDestination
		err = json.Unmarshal(data, &dst.TransactionMPCWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionMPCWalletDestination, return on the first match
		} else {
			dst.TransactionMPCWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionMPCWalletDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionMessageSignDestination'
	if jsonDict["destination_type"] == "TransactionMessageSignDestination" {
		// try to unmarshal JSON data into TransactionMessageSignDestination
		err = json.Unmarshal(data, &dst.TransactionMessageSignDestination)
		if err == nil {
			return nil // data stored in dst.TransactionMessageSignDestination, return on the first match
		} else {
			dst.TransactionMessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionMessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionSafeWalletDestination'
	if jsonDict["destination_type"] == "TransactionSafeWalletDestination" {
		// try to unmarshal JSON data into TransactionSafeWalletDestination
		err = json.Unmarshal(data, &dst.TransactionSafeWalletDestination)
		if err == nil {
			return nil // data stored in dst.TransactionSafeWalletDestination, return on the first match
		} else {
			dst.TransactionSafeWalletDestination = nil
			return fmt.Errorf("failed to unmarshal TransactionDestination as TransactionSafeWalletDestination: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionDestination) MarshalJSON() ([]byte, error) {
	if src.TransactionAddressDestination != nil {
		return json.Marshal(&src.TransactionAddressDestination)
	}

	if src.TransactionContractCallDestination != nil {
		return json.Marshal(&src.TransactionContractCallDestination)
	}

	if src.TransactionCustodialWalletDestination != nil {
		return json.Marshal(&src.TransactionCustodialWalletDestination)
	}

	if src.TransactionExchangeWalletDestination != nil {
		return json.Marshal(&src.TransactionExchangeWalletDestination)
	}

	if src.TransactionMPCWalletDestination != nil {
		return json.Marshal(&src.TransactionMPCWalletDestination)
	}

	if src.TransactionMessageSignDestination != nil {
		return json.Marshal(&src.TransactionMessageSignDestination)
	}

	if src.TransactionSafeWalletDestination != nil {
		return json.Marshal(&src.TransactionSafeWalletDestination)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransactionAddressDestination != nil {
		return obj.TransactionAddressDestination
	}

	if obj.TransactionContractCallDestination != nil {
		return obj.TransactionContractCallDestination
	}

	if obj.TransactionCustodialWalletDestination != nil {
		return obj.TransactionCustodialWalletDestination
	}

	if obj.TransactionExchangeWalletDestination != nil {
		return obj.TransactionExchangeWalletDestination
	}

	if obj.TransactionMPCWalletDestination != nil {
		return obj.TransactionMPCWalletDestination
	}

	if obj.TransactionMessageSignDestination != nil {
		return obj.TransactionMessageSignDestination
	}

	if obj.TransactionSafeWalletDestination != nil {
		return obj.TransactionSafeWalletDestination
	}

	// all schemas are nil
	return nil
}

type NullableTransactionDestination struct {
	value *TransactionDestination
	isSet bool
}

func (v NullableTransactionDestination) Get() *TransactionDestination {
	return v.value
}

func (v *NullableTransactionDestination) Set(val *TransactionDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDestination(val *TransactionDestination) *NullableTransactionDestination {
	return &NullableTransactionDestination{value: val, isSet: true}
}

func (v NullableTransactionDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


