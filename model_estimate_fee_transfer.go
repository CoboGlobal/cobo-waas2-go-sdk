/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimateFeeTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimateFeeTransfer{}

// EstimateFeeTransfer The information about a token transfer.
type EstimateFeeTransfer struct {
	// The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
	RequestId string `json:"request_id"`
	// The request type. Possible values include:   - `Transfer`: A request to transfer tokens.   - `ContractCall`: A request to interact with a smart contract.   - `MessageSign`: A request to sign a message. 
	RequestType string `json:"request_type"`
	Source TransferSource `json:"source"`
	// The token ID of the transaction fee. You can retrieve token IDs by using the [Get fee rates](/api-references/v2/transactions/get-fee-rates) operation.
	TokenId string `json:"token_id"`
	Destination TransferDestination `json:"destination"`
}

type _EstimateFeeTransfer EstimateFeeTransfer

// NewEstimateFeeTransfer instantiates a new EstimateFeeTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateFeeTransfer(requestId string, requestType string, source TransferSource, tokenId string, destination TransferDestination) *EstimateFeeTransfer {
	this := EstimateFeeTransfer{}
	this.RequestId = requestId
	this.RequestType = requestType
	this.Source = source
	this.TokenId = tokenId
	this.Destination = destination
	return &this
}

// NewEstimateFeeTransferWithDefaults instantiates a new EstimateFeeTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateFeeTransferWithDefaults() *EstimateFeeTransfer {
	this := EstimateFeeTransfer{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *EstimateFeeTransfer) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeTransfer) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *EstimateFeeTransfer) SetRequestId(v string) {
	o.RequestId = v
}

// GetRequestType returns the RequestType field value
func (o *EstimateFeeTransfer) GetRequestType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeTransfer) GetRequestTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestType, true
}

// SetRequestType sets field value
func (o *EstimateFeeTransfer) SetRequestType(v string) {
	o.RequestType = v
}

// GetSource returns the Source field value
func (o *EstimateFeeTransfer) GetSource() TransferSource {
	if o == nil {
		var ret TransferSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeTransfer) GetSourceOk() (*TransferSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EstimateFeeTransfer) SetSource(v TransferSource) {
	o.Source = v
}

// GetTokenId returns the TokenId field value
func (o *EstimateFeeTransfer) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeTransfer) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *EstimateFeeTransfer) SetTokenId(v string) {
	o.TokenId = v
}

// GetDestination returns the Destination field value
func (o *EstimateFeeTransfer) GetDestination() TransferDestination {
	if o == nil {
		var ret TransferDestination
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeTransfer) GetDestinationOk() (*TransferDestination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *EstimateFeeTransfer) SetDestination(v TransferDestination) {
	o.Destination = v
}

func (o EstimateFeeTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimateFeeTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId
	toSerialize["request_type"] = o.RequestType
	toSerialize["source"] = o.Source
	toSerialize["token_id"] = o.TokenId
	toSerialize["destination"] = o.Destination
	return toSerialize, nil
}

func (o *EstimateFeeTransfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
		"request_type",
		"source",
		"token_id",
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimateFeeTransfer := _EstimateFeeTransfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimateFeeTransfer)

	if err != nil {
		return err
	}

	*o = EstimateFeeTransfer(varEstimateFeeTransfer)

	return err
}

type NullableEstimateFeeTransfer struct {
	value *EstimateFeeTransfer
	isSet bool
}

func (v NullableEstimateFeeTransfer) Get() *EstimateFeeTransfer {
	return v.value
}

func (v *NullableEstimateFeeTransfer) Set(val *EstimateFeeTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateFeeTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateFeeTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateFeeTransfer(val *EstimateFeeTransfer) *NullableEstimateFeeTransfer {
	return &NullableEstimateFeeTransfer{value: val, isSet: true}
}

func (v NullableEstimateFeeTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateFeeTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


