/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TransactionSubStatus Enumeration representing the sub-status of a transaction.
type TransactionSubStatus string

// List of TransactionSubStatus
const (
	TRANSACTIONSUBSTATUS_REJECTED_KYT TransactionSubStatus = "RejectedKYT"
	TRANSACTIONSUBSTATUS_REJECTED_TRAVEL_RULE TransactionSubStatus = "RejectedTravelRule"
	TRANSACTIONSUBSTATUS_PENDING_DOUBLE_CHECK TransactionSubStatus = "PendingDoubleCheck"
	TRANSACTIONSUBSTATUS_PENDING_SPENDER_CHECK TransactionSubStatus = "PendingSpenderCheck"
	TRANSACTIONSUBSTATUS_PENDING_RISK_CONTROL_CHECK TransactionSubStatus = "PendingRiskControlCheck"
	TRANSACTIONSUBSTATUS_PENDING_APPROVER_CHECK TransactionSubStatus = "PendingApproverCheck"
	TRANSACTIONSUBSTATUS_REJECTED_COBO_CHECK TransactionSubStatus = "RejectedCoboCheck"
	TRANSACTIONSUBSTATUS_REJECTED_WHITE_LIST TransactionSubStatus = "RejectedWhiteList"
	TRANSACTIONSUBSTATUS_REJECTED_DOUBLE_CHECK TransactionSubStatus = "RejectedDoubleCheck"
	TRANSACTIONSUBSTATUS_REJECTED_SPENDER_AUTH TransactionSubStatus = "RejectedSpenderAuth"
	TRANSACTIONSUBSTATUS_REJECTED_RISK_CONTROL_CHECK TransactionSubStatus = "RejectedRiskControlCheck"
	TRANSACTIONSUBSTATUS_REJECTED_APPROVER_AUTH TransactionSubStatus = "RejectedApproverAuth"
	TRANSACTIONSUBSTATUS_PENDING_WAIT_SIGNER TransactionSubStatus = "PendingWaitSigner"
	TRANSACTIONSUBSTATUS_FAILED_BY_SIGNER TransactionSubStatus = "FailedBySigner"
	TRANSACTIONSUBSTATUS_FAILED_BROADCASTING TransactionSubStatus = "FailedBroadcasting"
)

// All allowed values of TransactionSubStatus enum
var AllowedTransactionSubStatusEnumValues = []TransactionSubStatus{
	"RejectedKYT",
	"RejectedTravelRule",
	"PendingDoubleCheck",
	"PendingSpenderCheck",
	"PendingRiskControlCheck",
	"PendingApproverCheck",
	"RejectedCoboCheck",
	"RejectedWhiteList",
	"RejectedDoubleCheck",
	"RejectedSpenderAuth",
	"RejectedRiskControlCheck",
	"RejectedApproverAuth",
	"PendingWaitSigner",
	"FailedBySigner",
	"FailedBroadcasting",
}

func (v *TransactionSubStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionSubStatus(value)
	for _, existing := range AllowedTransactionSubStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionSubStatus", value)
}

// NewTransactionSubStatusFromValue returns a pointer to a valid TransactionSubStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionSubStatusFromValue(v string) (*TransactionSubStatus, error) {
	ev := TransactionSubStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionSubStatus: valid values are %v", v, AllowedTransactionSubStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionSubStatus) IsValid() bool {
	for _, existing := range AllowedTransactionSubStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionSubStatus value
func (v TransactionSubStatus) Ptr() *TransactionSubStatus {
	return &v
}

type NullableTransactionSubStatus struct {
	value *TransactionSubStatus
	isSet bool
}

func (v NullableTransactionSubStatus) Get() *TransactionSubStatus {
	return v.value
}

func (v *NullableTransactionSubStatus) Set(val *TransactionSubStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSubStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSubStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSubStatus(val *TransactionSubStatus) *NullableTransactionSubStatus {
	return &NullableTransactionSubStatus{value: val, isSet: true}
}

func (v NullableTransactionSubStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSubStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

