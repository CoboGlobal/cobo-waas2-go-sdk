/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the UpdateWalletByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWalletByIdRequest{}

// UpdateWalletByIdRequest struct for UpdateWalletByIdRequest
type UpdateWalletByIdRequest struct {
	Name *string `json:"name,omitempty"`
	// The API Key for the exchange.
	Apikey *string `json:"apikey,omitempty"`
	// The API Secret for the exchange.
	Secret *string `json:"secret,omitempty"`
	// The passphrase for the exchange.
	Passphrase *string `json:"passphrase,omitempty"`
	// The ga_code for the exchange.
	GaCode *string `json:"ga_code,omitempty"`
	// The unique identifier associated with the exchange sub-account. It can be an email address, username, or a custom account ID.
	SubAccountIds []string `json:"sub_account_ids,omitempty"`
}

// NewUpdateWalletByIdRequest instantiates a new UpdateWalletByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWalletByIdRequest() *UpdateWalletByIdRequest {
	this := UpdateWalletByIdRequest{}
	return &this
}

// NewUpdateWalletByIdRequestWithDefaults instantiates a new UpdateWalletByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWalletByIdRequestWithDefaults() *UpdateWalletByIdRequest {
	this := UpdateWalletByIdRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateWalletByIdRequest) SetName(v string) {
	o.Name = &v
}

// GetApikey returns the Apikey field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetApikey() string {
	if o == nil || IsNil(o.Apikey) {
		var ret string
		return ret
	}
	return *o.Apikey
}

// GetApikeyOk returns a tuple with the Apikey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetApikeyOk() (*string, bool) {
	if o == nil || IsNil(o.Apikey) {
		return nil, false
	}
	return o.Apikey, true
}

// HasApikey returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasApikey() bool {
	if o != nil && !IsNil(o.Apikey) {
		return true
	}

	return false
}

// SetApikey gets a reference to the given string and assigns it to the Apikey field.
func (o *UpdateWalletByIdRequest) SetApikey(v string) {
	o.Apikey = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UpdateWalletByIdRequest) SetSecret(v string) {
	o.Secret = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *UpdateWalletByIdRequest) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetGaCode returns the GaCode field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetGaCode() string {
	if o == nil || IsNil(o.GaCode) {
		var ret string
		return ret
	}
	return *o.GaCode
}

// GetGaCodeOk returns a tuple with the GaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetGaCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GaCode) {
		return nil, false
	}
	return o.GaCode, true
}

// HasGaCode returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasGaCode() bool {
	if o != nil && !IsNil(o.GaCode) {
		return true
	}

	return false
}

// SetGaCode gets a reference to the given string and assigns it to the GaCode field.
func (o *UpdateWalletByIdRequest) SetGaCode(v string) {
	o.GaCode = &v
}

// GetSubAccountIds returns the SubAccountIds field value if set, zero value otherwise.
func (o *UpdateWalletByIdRequest) GetSubAccountIds() []string {
	if o == nil || IsNil(o.SubAccountIds) {
		var ret []string
		return ret
	}
	return o.SubAccountIds
}

// GetSubAccountIdsOk returns a tuple with the SubAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWalletByIdRequest) GetSubAccountIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SubAccountIds) {
		return nil, false
	}
	return o.SubAccountIds, true
}

// HasSubAccountIds returns a boolean if a field has been set.
func (o *UpdateWalletByIdRequest) HasSubAccountIds() bool {
	if o != nil && !IsNil(o.SubAccountIds) {
		return true
	}

	return false
}

// SetSubAccountIds gets a reference to the given []string and assigns it to the SubAccountIds field.
func (o *UpdateWalletByIdRequest) SetSubAccountIds(v []string) {
	o.SubAccountIds = v
}

func (o UpdateWalletByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWalletByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Apikey) {
		toSerialize["apikey"] = o.Apikey
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.GaCode) {
		toSerialize["ga_code"] = o.GaCode
	}
	if !IsNil(o.SubAccountIds) {
		toSerialize["sub_account_ids"] = o.SubAccountIds
	}
	return toSerialize, nil
}

type NullableUpdateWalletByIdRequest struct {
	value *UpdateWalletByIdRequest
	isSet bool
}

func (v NullableUpdateWalletByIdRequest) Get() *UpdateWalletByIdRequest {
	return v.value
}

func (v *NullableUpdateWalletByIdRequest) Set(val *UpdateWalletByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWalletByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWalletByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWalletByIdRequest(val *UpdateWalletByIdRequest) *NullableUpdateWalletByIdRequest {
	return &NullableUpdateWalletByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateWalletByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWalletByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


