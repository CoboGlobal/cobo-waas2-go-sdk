/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateCustodialWalletParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCustodialWalletParams{}

// UpdateCustodialWalletParams The information of Custodial Wallets.
type UpdateCustodialWalletParams struct {
	WalletType WalletType `json:"wallet_type"`
	// The wallet name.
	Name *string `json:"name,omitempty"`
}

type _UpdateCustodialWalletParams UpdateCustodialWalletParams

// NewUpdateCustodialWalletParams instantiates a new UpdateCustodialWalletParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCustodialWalletParams(walletType WalletType) *UpdateCustodialWalletParams {
	this := UpdateCustodialWalletParams{}
	this.WalletType = walletType
	return &this
}

// NewUpdateCustodialWalletParamsWithDefaults instantiates a new UpdateCustodialWalletParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCustodialWalletParamsWithDefaults() *UpdateCustodialWalletParams {
	this := UpdateCustodialWalletParams{}
	return &this
}

// GetWalletType returns the WalletType field value
func (o *UpdateCustodialWalletParams) GetWalletType() WalletType {
	if o == nil {
		var ret WalletType
		return ret
	}

	return o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value
// and a boolean to check if the value has been set.
func (o *UpdateCustodialWalletParams) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletType, true
}

// SetWalletType sets field value
func (o *UpdateCustodialWalletParams) SetWalletType(v WalletType) {
	o.WalletType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateCustodialWalletParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustodialWalletParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateCustodialWalletParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateCustodialWalletParams) SetName(v string) {
	o.Name = &v
}

func (o UpdateCustodialWalletParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCustodialWalletParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_type"] = o.WalletType
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *UpdateCustodialWalletParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCustodialWalletParams := _UpdateCustodialWalletParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCustodialWalletParams)

	if err != nil {
		return err
	}

	*o = UpdateCustodialWalletParams(varUpdateCustodialWalletParams)

	return err
}

type NullableUpdateCustodialWalletParams struct {
	value *UpdateCustodialWalletParams
	isSet bool
}

func (v NullableUpdateCustodialWalletParams) Get() *UpdateCustodialWalletParams {
	return v.value
}

func (v *NullableUpdateCustodialWalletParams) Set(val *UpdateCustodialWalletParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCustodialWalletParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCustodialWalletParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCustodialWalletParams(val *UpdateCustodialWalletParams) *NullableUpdateCustodialWalletParams {
	return &NullableUpdateCustodialWalletParams{value: val, isSet: true}
}

func (v NullableUpdateCustodialWalletParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCustodialWalletParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


