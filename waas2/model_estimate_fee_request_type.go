/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package waas2

import (
	"encoding/json"
	"fmt"
)

// EstimateFeeRequestType The request type. Possible values include:   - `Transfer`: A request to transfer tokens.   - `ContractCall`: A request to interact with a smart contract. 
type EstimateFeeRequestType string

// List of EstimateFeeRequestType
const (
	ESTIMATEFEEREQUESTTYPE_TRANSFER EstimateFeeRequestType = "Transfer"
	ESTIMATEFEEREQUESTTYPE_CONTRACT_CALL EstimateFeeRequestType = "ContractCall"
)

// All allowed values of EstimateFeeRequestType enum
var AllowedEstimateFeeRequestTypeEnumValues = []EstimateFeeRequestType{
	"Transfer",
	"ContractCall",
}

func (v *EstimateFeeRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EstimateFeeRequestType(value)
	for _, existing := range AllowedEstimateFeeRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = EstimateFeeRequestType("unknown")
    return nil
}

// NewEstimateFeeRequestTypeFromValue returns a pointer to a valid EstimateFeeRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEstimateFeeRequestTypeFromValue(v string) (*EstimateFeeRequestType, error) {
	ev := EstimateFeeRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EstimateFeeRequestType: valid values are %v", v, AllowedEstimateFeeRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EstimateFeeRequestType) IsValid() bool {
	for _, existing := range AllowedEstimateFeeRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EstimateFeeRequestType value
func (v EstimateFeeRequestType) Ptr() *EstimateFeeRequestType {
	return &v
}

type NullableEstimateFeeRequestType struct {
	value *EstimateFeeRequestType
	isSet bool
}

func (v NullableEstimateFeeRequestType) Get() *EstimateFeeRequestType {
	return v.value
}

func (v *NullableEstimateFeeRequestType) Set(val *EstimateFeeRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateFeeRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateFeeRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateFeeRequestType(val *EstimateFeeRequestType) *NullableEstimateFeeRequestType {
	return &NullableEstimateFeeRequestType{value: val, isSet: true}
}

func (v NullableEstimateFeeRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateFeeRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

