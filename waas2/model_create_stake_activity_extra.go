/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package waas2

import (
	"encoding/json"
	"fmt"
)

// CreateStakeActivityExtra - struct for CreateStakeActivityExtra
type CreateStakeActivityExtra struct {
	BabylonStakeExtra *BabylonStakeExtra
	EigenLayerLstStakeExtra *EigenLayerLstStakeExtra
	EigenLayerNativeStakeExtra *EigenLayerNativeStakeExtra
}

// BabylonStakeExtraAsCreateStakeActivityExtra is a convenience function that returns BabylonStakeExtra wrapped in CreateStakeActivityExtra
func BabylonStakeExtraAsCreateStakeActivityExtra(v *BabylonStakeExtra) CreateStakeActivityExtra {
	return CreateStakeActivityExtra{
		BabylonStakeExtra: v,
	}
}

// EigenLayerLstStakeExtraAsCreateStakeActivityExtra is a convenience function that returns EigenLayerLstStakeExtra wrapped in CreateStakeActivityExtra
func EigenLayerLstStakeExtraAsCreateStakeActivityExtra(v *EigenLayerLstStakeExtra) CreateStakeActivityExtra {
	return CreateStakeActivityExtra{
		EigenLayerLstStakeExtra: v,
	}
}

// EigenLayerNativeStakeExtraAsCreateStakeActivityExtra is a convenience function that returns EigenLayerNativeStakeExtra wrapped in CreateStakeActivityExtra
func EigenLayerNativeStakeExtraAsCreateStakeActivityExtra(v *EigenLayerNativeStakeExtra) CreateStakeActivityExtra {
	return CreateStakeActivityExtra{
		EigenLayerNativeStakeExtra: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateStakeActivityExtra) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Babylon'
	if jsonDict["pool_type"] == "Babylon" {
		// try to unmarshal JSON data into BabylonStakeExtra
		err = json.Unmarshal(data, &dst.BabylonStakeExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakeExtra, return on the first match
		} else {
			dst.BabylonStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as BabylonStakeExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EigenLayerLST'
	if jsonDict["pool_type"] == "EigenLayerLST" {
		// try to unmarshal JSON data into EigenLayerNativeStakeExtra
		err = json.Unmarshal(data, &dst.EigenLayerNativeStakeExtra)
		if err == nil {
			return nil // data stored in dst.EigenLayerNativeStakeExtra, return on the first match
		} else {
			dst.EigenLayerNativeStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as EigenLayerNativeStakeExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EigenLayerNativeETH'
	if jsonDict["pool_type"] == "EigenLayerNativeETH" {
		// try to unmarshal JSON data into EigenLayerLstStakeExtra
		err = json.Unmarshal(data, &dst.EigenLayerLstStakeExtra)
		if err == nil {
			return nil // data stored in dst.EigenLayerLstStakeExtra, return on the first match
		} else {
			dst.EigenLayerLstStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as EigenLayerLstStakeExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BabylonStakeExtra'
	if jsonDict["pool_type"] == "BabylonStakeExtra" {
		// try to unmarshal JSON data into BabylonStakeExtra
		err = json.Unmarshal(data, &dst.BabylonStakeExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakeExtra, return on the first match
		} else {
			dst.BabylonStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as BabylonStakeExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EigenLayerLstStakeExtra'
	if jsonDict["pool_type"] == "EigenLayerLstStakeExtra" {
		// try to unmarshal JSON data into EigenLayerLstStakeExtra
		err = json.Unmarshal(data, &dst.EigenLayerLstStakeExtra)
		if err == nil {
			return nil // data stored in dst.EigenLayerLstStakeExtra, return on the first match
		} else {
			dst.EigenLayerLstStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as EigenLayerLstStakeExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EigenLayerNativeStakeExtra'
	if jsonDict["pool_type"] == "EigenLayerNativeStakeExtra" {
		// try to unmarshal JSON data into EigenLayerNativeStakeExtra
		err = json.Unmarshal(data, &dst.EigenLayerNativeStakeExtra)
		if err == nil {
			return nil // data stored in dst.EigenLayerNativeStakeExtra, return on the first match
		} else {
			dst.EigenLayerNativeStakeExtra = nil
			return fmt.Errorf("failed to unmarshal CreateStakeActivityExtra as EigenLayerNativeStakeExtra: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateStakeActivityExtra) MarshalJSON() ([]byte, error) {
	if src.BabylonStakeExtra != nil {
		return json.Marshal(&src.BabylonStakeExtra)
	}

	if src.EigenLayerLstStakeExtra != nil {
		return json.Marshal(&src.EigenLayerLstStakeExtra)
	}

	if src.EigenLayerNativeStakeExtra != nil {
		return json.Marshal(&src.EigenLayerNativeStakeExtra)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateStakeActivityExtra) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BabylonStakeExtra != nil {
		return obj.BabylonStakeExtra
	}

	if obj.EigenLayerLstStakeExtra != nil {
		return obj.EigenLayerLstStakeExtra
	}

	if obj.EigenLayerNativeStakeExtra != nil {
		return obj.EigenLayerNativeStakeExtra
	}

	// all schemas are nil
	return nil
}

type NullableCreateStakeActivityExtra struct {
	value *CreateStakeActivityExtra
	isSet bool
}

func (v NullableCreateStakeActivityExtra) Get() *CreateStakeActivityExtra {
	return v.value
}

func (v *NullableCreateStakeActivityExtra) Set(val *CreateStakeActivityExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStakeActivityExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStakeActivityExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStakeActivityExtra(val *CreateStakeActivityExtra) *NullableCreateStakeActivityExtra {
	return &NullableCreateStakeActivityExtra{value: val, isSet: true}
}

func (v NullableCreateStakeActivityExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStakeActivityExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


