/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package waas2

import (
	"encoding/json"
	"fmt"
)

// AmountStatus The status of staking amount.
type AmountStatus string

// List of AmountStatus
const (
	AMOUNTSTATUS_STAKE_IN_PROGRESS AmountStatus = "StakeInProgress"
	AMOUNTSTATUS_ACTIVE AmountStatus = "Active"
	AMOUNTSTATUS_REJECTED AmountStatus = "Rejected"
	AMOUNTSTATUS_LIMIT_EXCEEDED AmountStatus = "LimitExceeded"
	AMOUNTSTATUS_INVALID AmountStatus = "Invalid"
	AMOUNTSTATUS_UNSTAKE_IN_PROGRESS AmountStatus = "UnstakeInProgress"
	AMOUNTSTATUS_WITHDRAWABLE AmountStatus = "Withdrawable"
	AMOUNTSTATUS_WITHDRAW_IN_PROGRESS AmountStatus = "WithdrawInProgress"
	AMOUNTSTATUS_CLOSED AmountStatus = "Closed"
)

// All allowed values of AmountStatus enum
var AllowedAmountStatusEnumValues = []AmountStatus{
	"StakeInProgress",
	"Active",
	"Rejected",
	"LimitExceeded",
	"Invalid",
	"UnstakeInProgress",
	"Withdrawable",
	"WithdrawInProgress",
	"Closed",
}

func (v *AmountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmountStatus(value)
	for _, existing := range AllowedAmountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = AmountStatus("unknown")
    return nil
}

// NewAmountStatusFromValue returns a pointer to a valid AmountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmountStatusFromValue(v string) (*AmountStatus, error) {
	ev := AmountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmountStatus: valid values are %v", v, AllowedAmountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmountStatus) IsValid() bool {
	for _, existing := range AllowedAmountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AmountStatus value
func (v AmountStatus) Ptr() *AmountStatus {
	return &v
}

type NullableAmountStatus struct {
	value *AmountStatus
	isSet bool
}

func (v NullableAmountStatus) Get() *AmountStatus {
	return v.value
}

func (v *NullableAmountStatus) Set(val *AmountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountStatus(val *AmountStatus) *NullableAmountStatus {
	return &NullableAmountStatus{value: val, isSet: true}
}

func (v NullableAmountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

