/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmEip1559Fee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmEip1559Fee{}

// EvmEip1559Fee The estimated transaction fee based on the EIP-1559 fee model.
type EvmEip1559Fee struct {
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId *string `json:"token_id,omitempty"`
	Slow *EvmEip1559FeeSlow `json:"slow,omitempty"`
	Recommended EvmEip1559FeeSlow `json:"recommended"`
	Fast *EvmEip1559FeeSlow `json:"fast,omitempty"`
}

type _EvmEip1559Fee EvmEip1559Fee

// NewEvmEip1559Fee instantiates a new EvmEip1559Fee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmEip1559Fee(feeType FeeType, recommended EvmEip1559FeeSlow) *EvmEip1559Fee {
	this := EvmEip1559Fee{}
	this.FeeType = feeType
	this.Recommended = recommended
	return &this
}

// NewEvmEip1559FeeWithDefaults instantiates a new EvmEip1559Fee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmEip1559FeeWithDefaults() *EvmEip1559Fee {
	this := EvmEip1559Fee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetFeeType returns the FeeType field value
func (o *EvmEip1559Fee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559Fee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *EvmEip1559Fee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *EvmEip1559Fee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmEip1559Fee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *EvmEip1559Fee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *EvmEip1559Fee) SetTokenId(v string) {
	o.TokenId = &v
}

// GetSlow returns the Slow field value if set, zero value otherwise.
func (o *EvmEip1559Fee) GetSlow() EvmEip1559FeeSlow {
	if o == nil || IsNil(o.Slow) {
		var ret EvmEip1559FeeSlow
		return ret
	}
	return *o.Slow
}

// GetSlowOk returns a tuple with the Slow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmEip1559Fee) GetSlowOk() (*EvmEip1559FeeSlow, bool) {
	if o == nil || IsNil(o.Slow) {
		return nil, false
	}
	return o.Slow, true
}

// HasSlow returns a boolean if a field has been set.
func (o *EvmEip1559Fee) HasSlow() bool {
	if o != nil && !IsNil(o.Slow) {
		return true
	}

	return false
}

// SetSlow gets a reference to the given EvmEip1559FeeSlow and assigns it to the Slow field.
func (o *EvmEip1559Fee) SetSlow(v EvmEip1559FeeSlow) {
	o.Slow = &v
}

// GetRecommended returns the Recommended field value
func (o *EvmEip1559Fee) GetRecommended() EvmEip1559FeeSlow {
	if o == nil {
		var ret EvmEip1559FeeSlow
		return ret
	}

	return o.Recommended
}

// GetRecommendedOk returns a tuple with the Recommended field value
// and a boolean to check if the value has been set.
func (o *EvmEip1559Fee) GetRecommendedOk() (*EvmEip1559FeeSlow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recommended, true
}

// SetRecommended sets field value
func (o *EvmEip1559Fee) SetRecommended(v EvmEip1559FeeSlow) {
	o.Recommended = v
}

// GetFast returns the Fast field value if set, zero value otherwise.
func (o *EvmEip1559Fee) GetFast() EvmEip1559FeeSlow {
	if o == nil || IsNil(o.Fast) {
		var ret EvmEip1559FeeSlow
		return ret
	}
	return *o.Fast
}

// GetFastOk returns a tuple with the Fast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmEip1559Fee) GetFastOk() (*EvmEip1559FeeSlow, bool) {
	if o == nil || IsNil(o.Fast) {
		return nil, false
	}
	return o.Fast, true
}

// HasFast returns a boolean if a field has been set.
func (o *EvmEip1559Fee) HasFast() bool {
	if o != nil && !IsNil(o.Fast) {
		return true
	}

	return false
}

// SetFast gets a reference to the given EvmEip1559FeeSlow and assigns it to the Fast field.
func (o *EvmEip1559Fee) SetFast(v EvmEip1559FeeSlow) {
	o.Fast = &v
}

func (o EvmEip1559Fee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmEip1559Fee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_type"] = o.FeeType
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.Slow) {
		toSerialize["slow"] = o.Slow
	}
	toSerialize["recommended"] = o.Recommended
	if !IsNil(o.Fast) {
		toSerialize["fast"] = o.Fast
	}
	return toSerialize, nil
}

func (o *EvmEip1559Fee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_type",
		"recommended",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmEip1559Fee := _EvmEip1559Fee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmEip1559Fee)

	if err != nil {
		return err
	}

	*o = EvmEip1559Fee(varEvmEip1559Fee)

	return err
}

type NullableEvmEip1559Fee struct {
	value *EvmEip1559Fee
	isSet bool
}

func (v NullableEvmEip1559Fee) Get() *EvmEip1559Fee {
	return v.value
}

func (v *NullableEvmEip1559Fee) Set(val *EvmEip1559Fee) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmEip1559Fee) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmEip1559Fee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmEip1559Fee(val *EvmEip1559Fee) *NullableEvmEip1559Fee {
	return &NullableEvmEip1559Fee{value: val, isSet: true}
}

func (v NullableEvmEip1559Fee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmEip1559Fee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


