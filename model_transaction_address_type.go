/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TransactionAddressType Enumeration representing the address type of a transaction.
type TransactionAddressType string

// List of TransactionAddressType
const (
	TRANSACTIONADDRESSTYPE_CUSTODIAL_ASSET_WALLET TransactionAddressType = "CustodialAssetWallet"
	TRANSACTIONADDRESSTYPE_CUSTODIAL_WEB3_WALLET TransactionAddressType = "CustodialWeb3Wallet"
	TRANSACTIONADDRESSTYPE_MPC_CLIENT_CONTROLLED_WALLET TransactionAddressType = "MPCClientControlledWallet"
	TRANSACTIONADDRESSTYPE_MPC_USER_CONTROLLED_WALLET TransactionAddressType = "MPCUserControlledWallet"
	TRANSACTIONADDRESSTYPE_SAFE_CONTRACT_WALLET TransactionAddressType = "SafeContractWallet"
	TRANSACTIONADDRESSTYPE_EXCHANGE_ACCOUNT TransactionAddressType = "ExchangeAccount"
	TRANSACTIONADDRESSTYPE_GAS_STATION TransactionAddressType = "GasStation"
	TRANSACTIONADDRESSTYPE_EXTERNAL_ADDRESS TransactionAddressType = "ExternalAddress"
)

// All allowed values of TransactionAddressType enum
var AllowedTransactionAddressTypeEnumValues = []TransactionAddressType{
	"CustodialAssetWallet",
	"CustodialWeb3Wallet",
	"MPCClientControlledWallet",
	"MPCUserControlledWallet",
	"SafeContractWallet",
	"ExchangeAccount",
	"GasStation",
	"ExternalAddress",
}

func (v *TransactionAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionAddressType(value)
	for _, existing := range AllowedTransactionAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionAddressType", value)
}

// NewTransactionAddressTypeFromValue returns a pointer to a valid TransactionAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionAddressTypeFromValue(v string) (*TransactionAddressType, error) {
	ev := TransactionAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionAddressType: valid values are %v", v, AllowedTransactionAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionAddressType) IsValid() bool {
	for _, existing := range AllowedTransactionAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionAddressType value
func (v TransactionAddressType) Ptr() *TransactionAddressType {
	return &v
}

type NullableTransactionAddressType struct {
	value *TransactionAddressType
	isSet bool
}

func (v NullableTransactionAddressType) Get() *TransactionAddressType {
	return v.value
}

func (v *NullableTransactionAddressType) Set(val *TransactionAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAddressType(val *TransactionAddressType) *NullableTransactionAddressType {
	return &NullableTransactionAddressType{value: val, isSet: true}
}

func (v NullableTransactionAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

