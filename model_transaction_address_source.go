/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionAddressSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionAddressSource{}

// TransactionAddressSource The information about the transaction source.
type TransactionAddressSource struct {
	SourceType TransactionSourceType `json:"source_type"`
	AccountInput *TransactionAddressSourceAccountInput `json:"account_input,omitempty"`
	UtxoInputs []TransactionAddressSourceUtxoInputsInner `json:"utxo_inputs,omitempty"`
}

type _TransactionAddressSource TransactionAddressSource

// NewTransactionAddressSource instantiates a new TransactionAddressSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAddressSource(sourceType TransactionSourceType) *TransactionAddressSource {
	this := TransactionAddressSource{}
	this.SourceType = sourceType
	return &this
}

// NewTransactionAddressSourceWithDefaults instantiates a new TransactionAddressSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAddressSourceWithDefaults() *TransactionAddressSource {
	this := TransactionAddressSource{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *TransactionAddressSource) GetSourceType() TransactionSourceType {
	if o == nil {
		var ret TransactionSourceType
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *TransactionAddressSource) GetSourceTypeOk() (*TransactionSourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *TransactionAddressSource) SetSourceType(v TransactionSourceType) {
	o.SourceType = v
}

// GetAccountInput returns the AccountInput field value if set, zero value otherwise.
func (o *TransactionAddressSource) GetAccountInput() TransactionAddressSourceAccountInput {
	if o == nil || IsNil(o.AccountInput) {
		var ret TransactionAddressSourceAccountInput
		return ret
	}
	return *o.AccountInput
}

// GetAccountInputOk returns a tuple with the AccountInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAddressSource) GetAccountInputOk() (*TransactionAddressSourceAccountInput, bool) {
	if o == nil || IsNil(o.AccountInput) {
		return nil, false
	}
	return o.AccountInput, true
}

// HasAccountInput returns a boolean if a field has been set.
func (o *TransactionAddressSource) HasAccountInput() bool {
	if o != nil && !IsNil(o.AccountInput) {
		return true
	}

	return false
}

// SetAccountInput gets a reference to the given TransactionAddressSourceAccountInput and assigns it to the AccountInput field.
func (o *TransactionAddressSource) SetAccountInput(v TransactionAddressSourceAccountInput) {
	o.AccountInput = &v
}

// GetUtxoInputs returns the UtxoInputs field value if set, zero value otherwise.
func (o *TransactionAddressSource) GetUtxoInputs() []TransactionAddressSourceUtxoInputsInner {
	if o == nil || IsNil(o.UtxoInputs) {
		var ret []TransactionAddressSourceUtxoInputsInner
		return ret
	}
	return o.UtxoInputs
}

// GetUtxoInputsOk returns a tuple with the UtxoInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAddressSource) GetUtxoInputsOk() ([]TransactionAddressSourceUtxoInputsInner, bool) {
	if o == nil || IsNil(o.UtxoInputs) {
		return nil, false
	}
	return o.UtxoInputs, true
}

// HasUtxoInputs returns a boolean if a field has been set.
func (o *TransactionAddressSource) HasUtxoInputs() bool {
	if o != nil && !IsNil(o.UtxoInputs) {
		return true
	}

	return false
}

// SetUtxoInputs gets a reference to the given []TransactionAddressSourceUtxoInputsInner and assigns it to the UtxoInputs field.
func (o *TransactionAddressSource) SetUtxoInputs(v []TransactionAddressSourceUtxoInputsInner) {
	o.UtxoInputs = v
}

func (o TransactionAddressSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionAddressSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	if !IsNil(o.AccountInput) {
		toSerialize["account_input"] = o.AccountInput
	}
	if !IsNil(o.UtxoInputs) {
		toSerialize["utxo_inputs"] = o.UtxoInputs
	}
	return toSerialize, nil
}

func (o *TransactionAddressSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionAddressSource := _TransactionAddressSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionAddressSource)

	if err != nil {
		return err
	}

	*o = TransactionAddressSource(varTransactionAddressSource)

	return err
}

type NullableTransactionAddressSource struct {
	value *TransactionAddressSource
	isSet bool
}

func (v NullableTransactionAddressSource) Get() *TransactionAddressSource {
	return v.value
}

func (v *NullableTransactionAddressSource) Set(val *TransactionAddressSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAddressSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAddressSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAddressSource(val *TransactionAddressSource) *NullableTransactionAddressSource {
	return &NullableTransactionAddressSource{value: val, isSet: true}
}

func (v NullableTransactionAddressSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAddressSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


