/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the FeeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeData{}

// FeeData The estimated fee in fee_coin.
type FeeData struct {
	// The gas limit, which represents the max number of gas units you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. Different operations require varying quantities of gas units.
	GasLimit *string `json:"gas_limit,omitempty"`
}

// NewFeeData instantiates a new FeeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeData() *FeeData {
	this := FeeData{}
	var gasLimit string = "21000"
	this.GasLimit = &gasLimit
	return &this
}

// NewFeeDataWithDefaults instantiates a new FeeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeDataWithDefaults() *FeeData {
	this := FeeData{}
	var gasLimit string = "21000"
	this.GasLimit = &gasLimit
	return &this
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *FeeData) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit) {
		var ret string
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeData) GetGasLimitOk() (*string, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *FeeData) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given string and assigns it to the GasLimit field.
func (o *FeeData) SetGasLimit(v string) {
	o.GasLimit = &v
}

func (o FeeData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	return toSerialize, nil
}

type NullableFeeData struct {
	value *FeeData
	isSet bool
}

func (v NullableFeeData) Get() *FeeData {
	return v.value
}

func (v *NullableFeeData) Set(val *FeeData) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeData) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeData(val *FeeData) *NullableFeeData {
	return &NullableFeeData{value: val, isSet: true}
}

func (v NullableFeeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


