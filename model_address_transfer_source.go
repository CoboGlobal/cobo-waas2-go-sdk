/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressTransferSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressTransferSource{}

// AddressTransferSource struct for AddressTransferSource
type AddressTransferSource struct {
	SourceType WalletSubtype `json:"source_type"`
	// Unique id of the wallet to transfer from.
	WalletId string `json:"wallet_id"`
	// From address
	AddressStr string `json:"address_str"`
}

type _AddressTransferSource AddressTransferSource

// NewAddressTransferSource instantiates a new AddressTransferSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressTransferSource(sourceType WalletSubtype, walletId string, addressStr string) *AddressTransferSource {
	this := AddressTransferSource{}
	this.SourceType = sourceType
	this.WalletId = walletId
	this.AddressStr = addressStr
	return &this
}

// NewAddressTransferSourceWithDefaults instantiates a new AddressTransferSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressTransferSourceWithDefaults() *AddressTransferSource {
	this := AddressTransferSource{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *AddressTransferSource) GetSourceType() WalletSubtype {
	if o == nil {
		var ret WalletSubtype
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *AddressTransferSource) GetSourceTypeOk() (*WalletSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *AddressTransferSource) SetSourceType(v WalletSubtype) {
	o.SourceType = v
}

// GetWalletId returns the WalletId field value
func (o *AddressTransferSource) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *AddressTransferSource) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *AddressTransferSource) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddressStr returns the AddressStr field value
func (o *AddressTransferSource) GetAddressStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressStr
}

// GetAddressStrOk returns a tuple with the AddressStr field value
// and a boolean to check if the value has been set.
func (o *AddressTransferSource) GetAddressStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressStr, true
}

// SetAddressStr sets field value
func (o *AddressTransferSource) SetAddressStr(v string) {
	o.AddressStr = v
}

func (o AddressTransferSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressTransferSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address_str"] = o.AddressStr
	return toSerialize, nil
}

func (o *AddressTransferSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"wallet_id",
		"address_str",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressTransferSource := _AddressTransferSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressTransferSource)

	if err != nil {
		return err
	}

	*o = AddressTransferSource(varAddressTransferSource)

	return err
}

type NullableAddressTransferSource struct {
	value *AddressTransferSource
	isSet bool
}

func (v NullableAddressTransferSource) Get() *AddressTransferSource {
	return v.value
}

func (v *NullableAddressTransferSource) Set(val *AddressTransferSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTransferSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTransferSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTransferSource(val *AddressTransferSource) *NullableAddressTransferSource {
	return &NullableAddressTransferSource{value: val, isSet: true}
}

func (v NullableAddressTransferSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTransferSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


