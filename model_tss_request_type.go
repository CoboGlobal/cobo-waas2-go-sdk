/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// TSSRequestType The type of tss request, keygen is key generation
type TSSRequestType string

// List of TSSRequestType
const (
	TSSREQUESTTYPE_KEY_GEN TSSRequestType = "KeyGen"
	TSSREQUESTTYPE_KEY_GEN_FROM_KEY_GROUP TSSRequestType = "KeyGenFromKeyGroup"
	TSSREQUESTTYPE_RECOVERY TSSRequestType = "Recovery"
)

// All allowed values of TSSRequestType enum
var AllowedTSSRequestTypeEnumValues = []TSSRequestType{
	"KeyGen",
	"KeyGenFromKeyGroup",
	"Recovery",
}

func (v *TSSRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSRequestType(value)
	for _, existing := range AllowedTSSRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TSSRequestType", value)
}

// NewTSSRequestTypeFromValue returns a pointer to a valid TSSRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSRequestTypeFromValue(v string) (*TSSRequestType, error) {
	ev := TSSRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSRequestType: valid values are %v", v, AllowedTSSRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSRequestType) IsValid() bool {
	for _, existing := range AllowedTSSRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSRequestType value
func (v TSSRequestType) Ptr() *TSSRequestType {
	return &v
}

type NullableTSSRequestType struct {
	value *TSSRequestType
	isSet bool
}

func (v NullableTSSRequestType) Get() *TSSRequestType {
	return v.value
}

func (v *NullableTSSRequestType) Set(val *TSSRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSRequestType(val *TSSRequestType) *NullableTSSRequestType {
	return &NullableTSSRequestType{value: val, isSet: true}
}

func (v NullableTSSRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

