/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the TransactionMPCWalletSourceUtxoInputsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionMPCWalletSourceUtxoInputsInner{}

// TransactionMPCWalletSourceUtxoInputsInner struct for TransactionMPCWalletSourceUtxoInputsInner
type TransactionMPCWalletSourceUtxoInputsInner struct {
	// The transaction hash of UTXOs that are consumed in the transaction.
	TxHash *string `json:"tx_hash,omitempty"`
}

// NewTransactionMPCWalletSourceUtxoInputsInner instantiates a new TransactionMPCWalletSourceUtxoInputsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionMPCWalletSourceUtxoInputsInner() *TransactionMPCWalletSourceUtxoInputsInner {
	this := TransactionMPCWalletSourceUtxoInputsInner{}
	return &this
}

// NewTransactionMPCWalletSourceUtxoInputsInnerWithDefaults instantiates a new TransactionMPCWalletSourceUtxoInputsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionMPCWalletSourceUtxoInputsInnerWithDefaults() *TransactionMPCWalletSourceUtxoInputsInner {
	this := TransactionMPCWalletSourceUtxoInputsInner{}
	return &this
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *TransactionMPCWalletSourceUtxoInputsInner) GetTxHash() string {
	if o == nil || IsNil(o.TxHash) {
		var ret string
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMPCWalletSourceUtxoInputsInner) GetTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *TransactionMPCWalletSourceUtxoInputsInner) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given string and assigns it to the TxHash field.
func (o *TransactionMPCWalletSourceUtxoInputsInner) SetTxHash(v string) {
	o.TxHash = &v
}

func (o TransactionMPCWalletSourceUtxoInputsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionMPCWalletSourceUtxoInputsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TxHash) {
		toSerialize["tx_hash"] = o.TxHash
	}
	return toSerialize, nil
}

type NullableTransactionMPCWalletSourceUtxoInputsInner struct {
	value *TransactionMPCWalletSourceUtxoInputsInner
	isSet bool
}

func (v NullableTransactionMPCWalletSourceUtxoInputsInner) Get() *TransactionMPCWalletSourceUtxoInputsInner {
	return v.value
}

func (v *NullableTransactionMPCWalletSourceUtxoInputsInner) Set(val *TransactionMPCWalletSourceUtxoInputsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionMPCWalletSourceUtxoInputsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionMPCWalletSourceUtxoInputsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionMPCWalletSourceUtxoInputsInner(val *TransactionMPCWalletSourceUtxoInputsInner) *NullableTransactionMPCWalletSourceUtxoInputsInner {
	return &NullableTransactionMPCWalletSourceUtxoInputsInner{value: val, isSet: true}
}

func (v NullableTransactionMPCWalletSourceUtxoInputsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionMPCWalletSourceUtxoInputsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


