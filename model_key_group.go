/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the KeyGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyGroup{}

// KeyGroup The data for key share group information.
type KeyGroup struct {
	// The key share group ID.
	Id *string `json:"id,omitempty"`
	Type *KeyGroupType `json:"type,omitempty"`
	TssGroupIds []TSSGroupId `json:"tss_group_ids,omitempty"`
	KeyHolders []KeyHolder `json:"key_holders,omitempty"`
	// The number of key share holders in this key share group.
	NodeCount *int32 `json:"node_count,omitempty"`
	// The number of key share holders required to approve each operation in this key share group.
	Threshold *int32 `json:"threshold,omitempty"`
	Status *KeyGroupStatus `json:"status,omitempty"`
	CreateTimestamp *int64 `json:"create_timestamp,omitempty"`
}

// NewKeyGroup instantiates a new KeyGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyGroup() *KeyGroup {
	this := KeyGroup{}
	return &this
}

// NewKeyGroupWithDefaults instantiates a new KeyGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyGroupWithDefaults() *KeyGroup {
	this := KeyGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyGroup) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyGroup) GetType() KeyGroupType {
	if o == nil || IsNil(o.Type) {
		var ret KeyGroupType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetTypeOk() (*KeyGroupType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyGroup) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyGroupType and assigns it to the Type field.
func (o *KeyGroup) SetType(v KeyGroupType) {
	o.Type = &v
}

// GetTssGroupIds returns the TssGroupIds field value if set, zero value otherwise.
func (o *KeyGroup) GetTssGroupIds() []TSSGroupId {
	if o == nil || IsNil(o.TssGroupIds) {
		var ret []TSSGroupId
		return ret
	}
	return o.TssGroupIds
}

// GetTssGroupIdsOk returns a tuple with the TssGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetTssGroupIdsOk() ([]TSSGroupId, bool) {
	if o == nil || IsNil(o.TssGroupIds) {
		return nil, false
	}
	return o.TssGroupIds, true
}

// HasTssGroupIds returns a boolean if a field has been set.
func (o *KeyGroup) HasTssGroupIds() bool {
	if o != nil && !IsNil(o.TssGroupIds) {
		return true
	}

	return false
}

// SetTssGroupIds gets a reference to the given []TSSGroupId and assigns it to the TssGroupIds field.
func (o *KeyGroup) SetTssGroupIds(v []TSSGroupId) {
	o.TssGroupIds = v
}

// GetKeyHolders returns the KeyHolders field value if set, zero value otherwise.
func (o *KeyGroup) GetKeyHolders() []KeyHolder {
	if o == nil || IsNil(o.KeyHolders) {
		var ret []KeyHolder
		return ret
	}
	return o.KeyHolders
}

// GetKeyHoldersOk returns a tuple with the KeyHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetKeyHoldersOk() ([]KeyHolder, bool) {
	if o == nil || IsNil(o.KeyHolders) {
		return nil, false
	}
	return o.KeyHolders, true
}

// HasKeyHolders returns a boolean if a field has been set.
func (o *KeyGroup) HasKeyHolders() bool {
	if o != nil && !IsNil(o.KeyHolders) {
		return true
	}

	return false
}

// SetKeyHolders gets a reference to the given []KeyHolder and assigns it to the KeyHolders field.
func (o *KeyGroup) SetKeyHolders(v []KeyHolder) {
	o.KeyHolders = v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *KeyGroup) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *KeyGroup) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *KeyGroup) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *KeyGroup) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *KeyGroup) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *KeyGroup) SetThreshold(v int32) {
	o.Threshold = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyGroup) GetStatus() KeyGroupStatus {
	if o == nil || IsNil(o.Status) {
		var ret KeyGroupStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetStatusOk() (*KeyGroupStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given KeyGroupStatus and assigns it to the Status field.
func (o *KeyGroup) SetStatus(v KeyGroupStatus) {
	o.Status = &v
}

// GetCreateTimestamp returns the CreateTimestamp field value if set, zero value otherwise.
func (o *KeyGroup) GetCreateTimestamp() int64 {
	if o == nil || IsNil(o.CreateTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGroup) GetCreateTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreateTimestamp) {
		return nil, false
	}
	return o.CreateTimestamp, true
}

// HasCreateTimestamp returns a boolean if a field has been set.
func (o *KeyGroup) HasCreateTimestamp() bool {
	if o != nil && !IsNil(o.CreateTimestamp) {
		return true
	}

	return false
}

// SetCreateTimestamp gets a reference to the given int64 and assigns it to the CreateTimestamp field.
func (o *KeyGroup) SetCreateTimestamp(v int64) {
	o.CreateTimestamp = &v
}

func (o KeyGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TssGroupIds) {
		toSerialize["tss_group_ids"] = o.TssGroupIds
	}
	if !IsNil(o.KeyHolders) {
		toSerialize["key_holders"] = o.KeyHolders
	}
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreateTimestamp) {
		toSerialize["create_timestamp"] = o.CreateTimestamp
	}
	return toSerialize, nil
}

type NullableKeyGroup struct {
	value *KeyGroup
	isSet bool
}

func (v NullableKeyGroup) Get() *KeyGroup {
	return v.value
}

func (v *NullableKeyGroup) Set(val *KeyGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyGroup(val *KeyGroup) *NullableKeyGroup {
	return &NullableKeyGroup{value: val, isSet: true}
}

func (v NullableKeyGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


