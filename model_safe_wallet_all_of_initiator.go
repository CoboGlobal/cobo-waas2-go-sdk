/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the SafeWalletAllOfInitiator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SafeWalletAllOfInitiator{}

// SafeWalletAllOfInitiator struct for SafeWalletAllOfInitiator
type SafeWalletAllOfInitiator struct {
	// The wallet id of the initiator. This is required when user want to create a new safe wallet.
	WalletId *string `json:"wallet_id,omitempty"`
	// The wallet type of the initiator. This is required when user want to create a new safe wallet.
	WalletType *string `json:"wallet_type,omitempty"`
	// The wallet address of the initiator. This is required when user want to create a new safe wallet.
	WalletAddress *string `json:"wallet_address,omitempty"`
}

// NewSafeWalletAllOfInitiator instantiates a new SafeWalletAllOfInitiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeWalletAllOfInitiator() *SafeWalletAllOfInitiator {
	this := SafeWalletAllOfInitiator{}
	return &this
}

// NewSafeWalletAllOfInitiatorWithDefaults instantiates a new SafeWalletAllOfInitiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeWalletAllOfInitiatorWithDefaults() *SafeWalletAllOfInitiator {
	this := SafeWalletAllOfInitiator{}
	return &this
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *SafeWalletAllOfInitiator) GetWalletId() string {
	if o == nil || IsNil(o.WalletId) {
		var ret string
		return ret
	}
	return *o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeWalletAllOfInitiator) GetWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.WalletId) {
		return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *SafeWalletAllOfInitiator) HasWalletId() bool {
	if o != nil && !IsNil(o.WalletId) {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given string and assigns it to the WalletId field.
func (o *SafeWalletAllOfInitiator) SetWalletId(v string) {
	o.WalletId = &v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *SafeWalletAllOfInitiator) GetWalletType() string {
	if o == nil || IsNil(o.WalletType) {
		var ret string
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeWalletAllOfInitiator) GetWalletTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *SafeWalletAllOfInitiator) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given string and assigns it to the WalletType field.
func (o *SafeWalletAllOfInitiator) SetWalletType(v string) {
	o.WalletType = &v
}

// GetWalletAddress returns the WalletAddress field value if set, zero value otherwise.
func (o *SafeWalletAllOfInitiator) GetWalletAddress() string {
	if o == nil || IsNil(o.WalletAddress) {
		var ret string
		return ret
	}
	return *o.WalletAddress
}

// GetWalletAddressOk returns a tuple with the WalletAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeWalletAllOfInitiator) GetWalletAddressOk() (*string, bool) {
	if o == nil || IsNil(o.WalletAddress) {
		return nil, false
	}
	return o.WalletAddress, true
}

// HasWalletAddress returns a boolean if a field has been set.
func (o *SafeWalletAllOfInitiator) HasWalletAddress() bool {
	if o != nil && !IsNil(o.WalletAddress) {
		return true
	}

	return false
}

// SetWalletAddress gets a reference to the given string and assigns it to the WalletAddress field.
func (o *SafeWalletAllOfInitiator) SetWalletAddress(v string) {
	o.WalletAddress = &v
}

func (o SafeWalletAllOfInitiator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SafeWalletAllOfInitiator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WalletId) {
		toSerialize["wallet_id"] = o.WalletId
	}
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	if !IsNil(o.WalletAddress) {
		toSerialize["wallet_address"] = o.WalletAddress
	}
	return toSerialize, nil
}

type NullableSafeWalletAllOfInitiator struct {
	value *SafeWalletAllOfInitiator
	isSet bool
}

func (v NullableSafeWalletAllOfInitiator) Get() *SafeWalletAllOfInitiator {
	return v.value
}

func (v *NullableSafeWalletAllOfInitiator) Set(val *SafeWalletAllOfInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeWalletAllOfInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeWalletAllOfInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeWalletAllOfInitiator(val *SafeWalletAllOfInitiator) *NullableSafeWalletAllOfInitiator {
	return &NullableSafeWalletAllOfInitiator{value: val, isSet: true}
}

func (v NullableSafeWalletAllOfInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeWalletAllOfInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


