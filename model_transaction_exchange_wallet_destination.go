/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionExchangeWalletDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionExchangeWalletDestination{}

// TransactionExchangeWalletDestination The information about the Exchange Wallet as the transaction destination.
type TransactionExchangeWalletDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	ExchangeId ExchangeId `json:"exchange_id"`
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	// The exchange trading account or the sub-wallet ID.
	SubWalletId *string `json:"sub_wallet_id,omitempty"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
	TokenId *string `json:"token_id,omitempty"`
	// (This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.
	AssetId string `json:"asset_id"`
	// The destination address.
	Address *string `json:"address,omitempty"`
	// The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.
	Memo *string `json:"memo,omitempty"`
	// The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`. 
	Amount string `json:"amount"`
}

type _TransactionExchangeWalletDestination TransactionExchangeWalletDestination

// NewTransactionExchangeWalletDestination instantiates a new TransactionExchangeWalletDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionExchangeWalletDestination(destinationType TransactionDestinationType, exchangeId ExchangeId, walletId string, assetId string, amount string) *TransactionExchangeWalletDestination {
	this := TransactionExchangeWalletDestination{}
	this.DestinationType = destinationType
	this.ExchangeId = exchangeId
	this.WalletId = walletId
	this.AssetId = assetId
	this.Amount = amount
	return &this
}

// NewTransactionExchangeWalletDestinationWithDefaults instantiates a new TransactionExchangeWalletDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionExchangeWalletDestinationWithDefaults() *TransactionExchangeWalletDestination {
	this := TransactionExchangeWalletDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionExchangeWalletDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionExchangeWalletDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetExchangeId returns the ExchangeId field value
func (o *TransactionExchangeWalletDestination) GetExchangeId() ExchangeId {
	if o == nil {
		var ret ExchangeId
		return ret
	}

	return o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetExchangeIdOk() (*ExchangeId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeId, true
}

// SetExchangeId sets field value
func (o *TransactionExchangeWalletDestination) SetExchangeId(v ExchangeId) {
	o.ExchangeId = v
}

// GetWalletId returns the WalletId field value
func (o *TransactionExchangeWalletDestination) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *TransactionExchangeWalletDestination) SetWalletId(v string) {
	o.WalletId = v
}

// GetSubWalletId returns the SubWalletId field value if set, zero value otherwise.
func (o *TransactionExchangeWalletDestination) GetSubWalletId() string {
	if o == nil || IsNil(o.SubWalletId) {
		var ret string
		return ret
	}
	return *o.SubWalletId
}

// GetSubWalletIdOk returns a tuple with the SubWalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetSubWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubWalletId) {
		return nil, false
	}
	return o.SubWalletId, true
}

// HasSubWalletId returns a boolean if a field has been set.
func (o *TransactionExchangeWalletDestination) HasSubWalletId() bool {
	if o != nil && !IsNil(o.SubWalletId) {
		return true
	}

	return false
}

// SetSubWalletId gets a reference to the given string and assigns it to the SubWalletId field.
func (o *TransactionExchangeWalletDestination) SetSubWalletId(v string) {
	o.SubWalletId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TransactionExchangeWalletDestination) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TransactionExchangeWalletDestination) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TransactionExchangeWalletDestination) SetTokenId(v string) {
	o.TokenId = &v
}

// GetAssetId returns the AssetId field value
func (o *TransactionExchangeWalletDestination) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *TransactionExchangeWalletDestination) SetAssetId(v string) {
	o.AssetId = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TransactionExchangeWalletDestination) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TransactionExchangeWalletDestination) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TransactionExchangeWalletDestination) SetAddress(v string) {
	o.Address = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *TransactionExchangeWalletDestination) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *TransactionExchangeWalletDestination) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *TransactionExchangeWalletDestination) SetMemo(v string) {
	o.Memo = &v
}

// GetAmount returns the Amount field value
func (o *TransactionExchangeWalletDestination) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionExchangeWalletDestination) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionExchangeWalletDestination) SetAmount(v string) {
	o.Amount = v
}

func (o TransactionExchangeWalletDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionExchangeWalletDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["exchange_id"] = o.ExchangeId
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.SubWalletId) {
		toSerialize["sub_wallet_id"] = o.SubWalletId
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *TransactionExchangeWalletDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"exchange_id",
		"wallet_id",
		"asset_id",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionExchangeWalletDestination := _TransactionExchangeWalletDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionExchangeWalletDestination)

	if err != nil {
		return err
	}

	*o = TransactionExchangeWalletDestination(varTransactionExchangeWalletDestination)

	return err
}

type NullableTransactionExchangeWalletDestination struct {
	value *TransactionExchangeWalletDestination
	isSet bool
}

func (v NullableTransactionExchangeWalletDestination) Get() *TransactionExchangeWalletDestination {
	return v.value
}

func (v *NullableTransactionExchangeWalletDestination) Set(val *TransactionExchangeWalletDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionExchangeWalletDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionExchangeWalletDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionExchangeWalletDestination(val *TransactionExchangeWalletDestination) *NullableTransactionExchangeWalletDestination {
	return &NullableTransactionExchangeWalletDestination{value: val, isSet: true}
}

func (v NullableTransactionExchangeWalletDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionExchangeWalletDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


