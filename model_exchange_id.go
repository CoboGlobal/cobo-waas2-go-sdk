/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// ExchangeId The exchange identifier.
type ExchangeId string

// List of ExchangeId
const (
	EXCHANGEID_BINANCE ExchangeId = "binance"
	EXCHANGEID_OKX ExchangeId = "okx"
	EXCHANGEID_DERIBIT ExchangeId = "deribit"
	EXCHANGEID_BYBIT ExchangeId = "bybit"
	EXCHANGEID_GATE ExchangeId = "gate"
)

// All allowed values of ExchangeId enum
var AllowedExchangeIdEnumValues = []ExchangeId{
	"binance",
	"okx",
	"deribit",
	"bybit",
	"gate",
}

func (v *ExchangeId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExchangeId(value)
	for _, existing := range AllowedExchangeIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExchangeId", value)
}

// NewExchangeIdFromValue returns a pointer to a valid ExchangeId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExchangeIdFromValue(v string) (*ExchangeId, error) {
	ev := ExchangeId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExchangeId: valid values are %v", v, AllowedExchangeIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExchangeId) IsValid() bool {
	for _, existing := range AllowedExchangeIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExchangeId value
func (v ExchangeId) Ptr() *ExchangeId {
	return &v
}

type NullableExchangeId struct {
	value *ExchangeId
	isSet bool
}

func (v NullableExchangeId) Get() *ExchangeId {
	return v.value
}

func (v *NullableExchangeId) Set(val *ExchangeId) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeId) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeId(val *ExchangeId) *NullableExchangeId {
	return &NullableExchangeId{value: val, isSet: true}
}

func (v NullableExchangeId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

