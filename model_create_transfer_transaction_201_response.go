/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
)

// checks if the CreateTransferTransaction201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTransferTransaction201Response{}

// CreateTransferTransaction201Response struct for CreateTransferTransaction201Response
type CreateTransferTransaction201Response struct {
	// Unique id of the request.
	RequestId *string `json:"request_id,omitempty"`
	// The transaction id of of the request.
	TransactionId *string `json:"transaction_id,omitempty"`
	Status *TransactionStatus `json:"status,omitempty"`
}

// NewCreateTransferTransaction201Response instantiates a new CreateTransferTransaction201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTransferTransaction201Response() *CreateTransferTransaction201Response {
	this := CreateTransferTransaction201Response{}
	return &this
}

// NewCreateTransferTransaction201ResponseWithDefaults instantiates a new CreateTransferTransaction201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTransferTransaction201ResponseWithDefaults() *CreateTransferTransaction201Response {
	this := CreateTransferTransaction201Response{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *CreateTransferTransaction201Response) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransferTransaction201Response) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *CreateTransferTransaction201Response) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *CreateTransferTransaction201Response) SetRequestId(v string) {
	o.RequestId = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *CreateTransferTransaction201Response) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransferTransaction201Response) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *CreateTransferTransaction201Response) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *CreateTransferTransaction201Response) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CreateTransferTransaction201Response) GetStatus() TransactionStatus {
	if o == nil || IsNil(o.Status) {
		var ret TransactionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransferTransaction201Response) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CreateTransferTransaction201Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TransactionStatus and assigns it to the Status field.
func (o *CreateTransferTransaction201Response) SetStatus(v TransactionStatus) {
	o.Status = &v
}

func (o CreateTransferTransaction201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTransferTransaction201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCreateTransferTransaction201Response struct {
	value *CreateTransferTransaction201Response
	isSet bool
}

func (v NullableCreateTransferTransaction201Response) Get() *CreateTransferTransaction201Response {
	return v.value
}

func (v *NullableCreateTransferTransaction201Response) Set(val *CreateTransferTransaction201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransferTransaction201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransferTransaction201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransferTransaction201Response(val *CreateTransferTransaction201Response) *NullableCreateTransferTransaction201Response {
	return &NullableCreateTransferTransaction201Response{value: val, isSet: true}
}

func (v NullableCreateTransferTransaction201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransferTransaction201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


