/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TravelRuleWithdrawNaturalEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TravelRuleWithdrawNaturalEntity{}

// TravelRuleWithdrawNaturalEntity Required fields for NATURAL entities.
type TravelRuleWithdrawNaturalEntity struct {
	SelectedEntityType SelectedEntityType `json:"selected_entity_type"`
	// The first name of the user.
	FirstName string `json:"first_name"`
	// The last name of the user.
	LastName string `json:"last_name"`
	// The date of birth of the user.
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	// The place of birth of the user.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`
}

type _TravelRuleWithdrawNaturalEntity TravelRuleWithdrawNaturalEntity

// NewTravelRuleWithdrawNaturalEntity instantiates a new TravelRuleWithdrawNaturalEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTravelRuleWithdrawNaturalEntity(selectedEntityType SelectedEntityType, firstName string, lastName string) *TravelRuleWithdrawNaturalEntity {
	this := TravelRuleWithdrawNaturalEntity{}
	this.SelectedEntityType = selectedEntityType
	this.FirstName = firstName
	this.LastName = lastName
	return &this
}

// NewTravelRuleWithdrawNaturalEntityWithDefaults instantiates a new TravelRuleWithdrawNaturalEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTravelRuleWithdrawNaturalEntityWithDefaults() *TravelRuleWithdrawNaturalEntity {
	this := TravelRuleWithdrawNaturalEntity{}
	return &this
}

// GetSelectedEntityType returns the SelectedEntityType field value
func (o *TravelRuleWithdrawNaturalEntity) GetSelectedEntityType() SelectedEntityType {
	if o == nil {
		var ret SelectedEntityType
		return ret
	}

	return o.SelectedEntityType
}

// GetSelectedEntityTypeOk returns a tuple with the SelectedEntityType field value
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawNaturalEntity) GetSelectedEntityTypeOk() (*SelectedEntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectedEntityType, true
}

// SetSelectedEntityType sets field value
func (o *TravelRuleWithdrawNaturalEntity) SetSelectedEntityType(v SelectedEntityType) {
	o.SelectedEntityType = v
}

// GetFirstName returns the FirstName field value
func (o *TravelRuleWithdrawNaturalEntity) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawNaturalEntity) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *TravelRuleWithdrawNaturalEntity) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *TravelRuleWithdrawNaturalEntity) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawNaturalEntity) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *TravelRuleWithdrawNaturalEntity) SetLastName(v string) {
	o.LastName = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *TravelRuleWithdrawNaturalEntity) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawNaturalEntity) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *TravelRuleWithdrawNaturalEntity) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *TravelRuleWithdrawNaturalEntity) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *TravelRuleWithdrawNaturalEntity) GetPlaceOfBirth() string {
	if o == nil || IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawNaturalEntity) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *TravelRuleWithdrawNaturalEntity) HasPlaceOfBirth() bool {
	if o != nil && !IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *TravelRuleWithdrawNaturalEntity) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

func (o TravelRuleWithdrawNaturalEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TravelRuleWithdrawNaturalEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["selected_entity_type"] = o.SelectedEntityType
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.PlaceOfBirth) {
		toSerialize["place_of_birth"] = o.PlaceOfBirth
	}
	return toSerialize, nil
}

func (o *TravelRuleWithdrawNaturalEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selected_entity_type",
		"first_name",
		"last_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTravelRuleWithdrawNaturalEntity := _TravelRuleWithdrawNaturalEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTravelRuleWithdrawNaturalEntity)

	if err != nil {
		return err
	}

	*o = TravelRuleWithdrawNaturalEntity(varTravelRuleWithdrawNaturalEntity)

	return err
}

type NullableTravelRuleWithdrawNaturalEntity struct {
	value *TravelRuleWithdrawNaturalEntity
	isSet bool
}

func (v NullableTravelRuleWithdrawNaturalEntity) Get() *TravelRuleWithdrawNaturalEntity {
	return v.value
}

func (v *NullableTravelRuleWithdrawNaturalEntity) Set(val *TravelRuleWithdrawNaturalEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTravelRuleWithdrawNaturalEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTravelRuleWithdrawNaturalEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTravelRuleWithdrawNaturalEntity(val *TravelRuleWithdrawNaturalEntity) *NullableTravelRuleWithdrawNaturalEntity {
	return &NullableTravelRuleWithdrawNaturalEntity{value: val, isSet: true}
}

func (v NullableTravelRuleWithdrawNaturalEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTravelRuleWithdrawNaturalEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


