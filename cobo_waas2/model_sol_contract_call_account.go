/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolContractCallAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolContractCallAccount{}

// SolContractCallAccount The information about the account involved in a Solana instruction.
type SolContractCallAccount struct {
	// The public key of the account. If the account is a signer of this transaction, this property must be the same as the value of the `source.address` property. 
	Pubkey string `json:"pubkey"`
	// Whether the account is the signer of this transaction: - `true`: The account is a signer. - `false`: The account is not a signer. 
	IsSigner bool `json:"is_signer"`
	// Whether the account can be modified by the instruction: - `true`: The account can be modified by the instruction. - `false`: The account cannot be modified by the instruction. 
	IsWritable bool `json:"is_writable"`
}

type _SolContractCallAccount SolContractCallAccount

// NewSolContractCallAccount instantiates a new SolContractCallAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolContractCallAccount(pubkey string, isSigner bool, isWritable bool) *SolContractCallAccount {
	this := SolContractCallAccount{}
	this.Pubkey = pubkey
	this.IsSigner = isSigner
	this.IsWritable = isWritable
	return &this
}

// NewSolContractCallAccountWithDefaults instantiates a new SolContractCallAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolContractCallAccountWithDefaults() *SolContractCallAccount {
	this := SolContractCallAccount{}
	return &this
}

// GetPubkey returns the Pubkey field value
func (o *SolContractCallAccount) GetPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value
// and a boolean to check if the value has been set.
func (o *SolContractCallAccount) GetPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pubkey, true
}

// SetPubkey sets field value
func (o *SolContractCallAccount) SetPubkey(v string) {
	o.Pubkey = v
}

// GetIsSigner returns the IsSigner field value
func (o *SolContractCallAccount) GetIsSigner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSigner
}

// GetIsSignerOk returns a tuple with the IsSigner field value
// and a boolean to check if the value has been set.
func (o *SolContractCallAccount) GetIsSignerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSigner, true
}

// SetIsSigner sets field value
func (o *SolContractCallAccount) SetIsSigner(v bool) {
	o.IsSigner = v
}

// GetIsWritable returns the IsWritable field value
func (o *SolContractCallAccount) GetIsWritable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWritable
}

// GetIsWritableOk returns a tuple with the IsWritable field value
// and a boolean to check if the value has been set.
func (o *SolContractCallAccount) GetIsWritableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWritable, true
}

// SetIsWritable sets field value
func (o *SolContractCallAccount) SetIsWritable(v bool) {
	o.IsWritable = v
}

func (o SolContractCallAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolContractCallAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pubkey"] = o.Pubkey
	toSerialize["is_signer"] = o.IsSigner
	toSerialize["is_writable"] = o.IsWritable
	return toSerialize, nil
}

func (o *SolContractCallAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pubkey",
		"is_signer",
		"is_writable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolContractCallAccount := _SolContractCallAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolContractCallAccount)

	if err != nil {
		return err
	}

	*o = SolContractCallAccount(varSolContractCallAccount)

	return err
}

type NullableSolContractCallAccount struct {
	value *SolContractCallAccount
	isSet bool
}

func (v NullableSolContractCallAccount) Get() *SolContractCallAccount {
	return v.value
}

func (v *NullableSolContractCallAccount) Set(val *SolContractCallAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableSolContractCallAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableSolContractCallAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolContractCallAccount(val *SolContractCallAccount) *NullableSolContractCallAccount {
	return &NullableSolContractCallAccount{value: val, isSet: true}
}

func (v NullableSolContractCallAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolContractCallAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


