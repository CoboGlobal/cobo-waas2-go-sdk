/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// DispositionType The type of a disposition operation.
type DispositionType string

// List of DispositionType
const (
	DISPOSITIONTYPE_UNFREEZE DispositionType = "Unfreeze"
	DISPOSITIONTYPE_REFUND DispositionType = "Refund"
	DISPOSITIONTYPE_ISOLATE DispositionType = "Isolate"
)

// All allowed values of DispositionType enum
var AllowedDispositionTypeEnumValues = []DispositionType{
	"Unfreeze",
	"Refund",
	"Isolate",
}

func (v *DispositionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DispositionType(value)
	for _, existing := range AllowedDispositionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = DispositionType("unknown")
	return nil
}

// NewDispositionTypeFromValue returns a pointer to a valid DispositionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDispositionTypeFromValue(v string) (*DispositionType, error) {
	ev := DispositionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DispositionType: valid values are %v", v, AllowedDispositionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DispositionType) IsValid() bool {
	for _, existing := range AllowedDispositionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DispositionType value
func (v DispositionType) Ptr() *DispositionType {
	return &v
}

type NullableDispositionType struct {
	value *DispositionType
	isSet bool
}

func (v NullableDispositionType) Get() *DispositionType {
	return v.value
}

func (v *NullableDispositionType) Set(val *DispositionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDispositionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDispositionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispositionType(val *DispositionType) *NullableDispositionType {
	return &NullableDispositionType{value: val, isSet: true}
}

func (v NullableDispositionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispositionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

