/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WalletBalanceSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletBalanceSnapshot{}

// WalletBalanceSnapshot The snapshot information.
type WalletBalanceSnapshot struct {
	// The snapshot ID.
	SnapshotId int32 `json:"snapshot_id"`
	// The snapshot name.
	SnapshotName *string `json:"snapshot_name,omitempty"`
}

type _WalletBalanceSnapshot WalletBalanceSnapshot

// NewWalletBalanceSnapshot instantiates a new WalletBalanceSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletBalanceSnapshot(snapshotId int32) *WalletBalanceSnapshot {
	this := WalletBalanceSnapshot{}
	this.SnapshotId = snapshotId
	return &this
}

// NewWalletBalanceSnapshotWithDefaults instantiates a new WalletBalanceSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletBalanceSnapshotWithDefaults() *WalletBalanceSnapshot {
	this := WalletBalanceSnapshot{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *WalletBalanceSnapshot) GetSnapshotId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshot) GetSnapshotIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *WalletBalanceSnapshot) SetSnapshotId(v int32) {
	o.SnapshotId = v
}

// GetSnapshotName returns the SnapshotName field value if set, zero value otherwise.
func (o *WalletBalanceSnapshot) GetSnapshotName() string {
	if o == nil || IsNil(o.SnapshotName) {
		var ret string
		return ret
	}
	return *o.SnapshotName
}

// GetSnapshotNameOk returns a tuple with the SnapshotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshot) GetSnapshotNameOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotName) {
		return nil, false
	}
	return o.SnapshotName, true
}

// HasSnapshotName returns a boolean if a field has been set.
func (o *WalletBalanceSnapshot) HasSnapshotName() bool {
	if o != nil && !IsNil(o.SnapshotName) {
		return true
	}

	return false
}

// SetSnapshotName gets a reference to the given string and assigns it to the SnapshotName field.
func (o *WalletBalanceSnapshot) SetSnapshotName(v string) {
	o.SnapshotName = &v
}

func (o WalletBalanceSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletBalanceSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot_id"] = o.SnapshotId
	if !IsNil(o.SnapshotName) {
		toSerialize["snapshot_name"] = o.SnapshotName
	}
	return toSerialize, nil
}

func (o *WalletBalanceSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletBalanceSnapshot := _WalletBalanceSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWalletBalanceSnapshot)

	if err != nil {
		return err
	}

	*o = WalletBalanceSnapshot(varWalletBalanceSnapshot)

	return err
}

type NullableWalletBalanceSnapshot struct {
	value *WalletBalanceSnapshot
	isSet bool
}

func (v NullableWalletBalanceSnapshot) Get() *WalletBalanceSnapshot {
	return v.value
}

func (v *NullableWalletBalanceSnapshot) Set(val *WalletBalanceSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletBalanceSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletBalanceSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletBalanceSnapshot(val *WalletBalanceSnapshot) *NullableWalletBalanceSnapshot {
	return &NullableWalletBalanceSnapshot{value: val, isSet: true}
}

func (v NullableWalletBalanceSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletBalanceSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


