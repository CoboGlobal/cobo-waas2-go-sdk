/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KeyShareHolderType The key share holder's TSS Node type. Possible values include:  - `Cobo`: The TSS Node is generated and held by Cobo.  - `Mobile`: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).  - `API`: The TSS Node is generated and held by a [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment). 
type KeyShareHolderType string

// List of KeyShareHolderType
const (
	KEYSHAREHOLDERTYPE_COBO KeyShareHolderType = "Cobo"
	KEYSHAREHOLDERTYPE_MOBILE KeyShareHolderType = "Mobile"
	KEYSHAREHOLDERTYPE_API KeyShareHolderType = "API"
)

// All allowed values of KeyShareHolderType enum
var AllowedKeyShareHolderTypeEnumValues = []KeyShareHolderType{
	"Cobo",
	"Mobile",
	"API",
}

func (v *KeyShareHolderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyShareHolderType(value)
	for _, existing := range AllowedKeyShareHolderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = KeyShareHolderType("unknown")
    return nil
}

// NewKeyShareHolderTypeFromValue returns a pointer to a valid KeyShareHolderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyShareHolderTypeFromValue(v string) (*KeyShareHolderType, error) {
	ev := KeyShareHolderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyShareHolderType: valid values are %v", v, AllowedKeyShareHolderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyShareHolderType) IsValid() bool {
	for _, existing := range AllowedKeyShareHolderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyShareHolderType value
func (v KeyShareHolderType) Ptr() *KeyShareHolderType {
	return &v
}

type NullableKeyShareHolderType struct {
	value *KeyShareHolderType
	isSet bool
}

func (v NullableKeyShareHolderType) Get() *KeyShareHolderType {
	return v.value
}

func (v *NullableKeyShareHolderType) Set(val *KeyShareHolderType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyShareHolderType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyShareHolderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyShareHolderType(val *KeyShareHolderType) *NullableKeyShareHolderType {
	return &NullableKeyShareHolderType{value: val, isSet: true}
}

func (v NullableKeyShareHolderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyShareHolderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

