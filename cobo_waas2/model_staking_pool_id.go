/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// StakingPoolId The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token. Currently, `berachain_bgt` and `berachain_bgt_testnet` are not supported.
type StakingPoolId string

// List of StakingPoolId
const (
	STAKINGPOOLID_BABYLON_BTC_SIGNET StakingPoolId = "babylon_btc_signet"
	STAKINGPOOLID_BABYLON_BTC StakingPoolId = "babylon_btc"
	STAKINGPOOLID_BEACON_ETH StakingPoolId = "beacon_eth"
	STAKINGPOOLID_BEACON_ETH_HOLESKY StakingPoolId = "beacon_eth_holesky"
	STAKINGPOOLID_CORE_BTC StakingPoolId = "core_btc"
	STAKINGPOOLID_CORE_XTN StakingPoolId = "core_xtn"
	STAKINGPOOLID_SKY_FARM_ETH_USDC StakingPoolId = "sky_farm_eth_usdc"
	STAKINGPOOLID_BITHIVE_SIGNET StakingPoolId = "bithive_signet"
	STAKINGPOOLID_BITHIVE StakingPoolId = "bithive"
	STAKINGPOOLID_BEACON_BERA StakingPoolId = "beacon_bera"
	STAKINGPOOLID_BEACON_BERA_TESTNET StakingPoolId = "beacon_bera_testnet"
	STAKINGPOOLID_BERACHAIN_BGT StakingPoolId = "berachain_bgt"
	STAKINGPOOLID_BERACHAIN_BGT_TESTNET StakingPoolId = "berachain_bgt_testnet"
)

// All allowed values of StakingPoolId enum
var AllowedStakingPoolIdEnumValues = []StakingPoolId{
	"babylon_btc_signet",
	"babylon_btc",
	"beacon_eth",
	"beacon_eth_holesky",
	"core_btc",
	"core_xtn",
	"sky_farm_eth_usdc",
	"bithive_signet",
	"bithive",
	"beacon_bera",
	"beacon_bera_testnet",
	"berachain_bgt",
	"berachain_bgt_testnet",
}

func (v *StakingPoolId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StakingPoolId(value)
	for _, existing := range AllowedStakingPoolIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = StakingPoolId("unknown")
	return nil
}

// NewStakingPoolIdFromValue returns a pointer to a valid StakingPoolId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStakingPoolIdFromValue(v string) (*StakingPoolId, error) {
	ev := StakingPoolId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StakingPoolId: valid values are %v", v, AllowedStakingPoolIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StakingPoolId) IsValid() bool {
	for _, existing := range AllowedStakingPoolIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StakingPoolId value
func (v StakingPoolId) Ptr() *StakingPoolId {
	return &v
}

type NullableStakingPoolId struct {
	value *StakingPoolId
	isSet bool
}

func (v NullableStakingPoolId) Get() *StakingPoolId {
	return v.value
}

func (v *NullableStakingPoolId) Set(val *StakingPoolId) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingPoolId) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingPoolId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingPoolId(val *StakingPoolId) *NullableStakingPoolId {
	return &NullableStakingPoolId{value: val, isSet: true}
}

func (v NullableStakingPoolId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingPoolId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

