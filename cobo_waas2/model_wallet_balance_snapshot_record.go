/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WalletBalanceSnapshotRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletBalanceSnapshotRecord{}

// WalletBalanceSnapshotRecord The token snapshot detail information.
type WalletBalanceSnapshotRecord struct {
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	WalletType *WalletType `json:"wallet_type,omitempty"`
	// The wallet name.
	WalletName *string `json:"wallet_name,omitempty"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The balance of the token.
	Balance string `json:"balance"`
}

type _WalletBalanceSnapshotRecord WalletBalanceSnapshotRecord

// NewWalletBalanceSnapshotRecord instantiates a new WalletBalanceSnapshotRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletBalanceSnapshotRecord(walletId string, tokenId string, balance string) *WalletBalanceSnapshotRecord {
	this := WalletBalanceSnapshotRecord{}
	this.WalletId = walletId
	this.TokenId = tokenId
	this.Balance = balance
	return &this
}

// NewWalletBalanceSnapshotRecordWithDefaults instantiates a new WalletBalanceSnapshotRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletBalanceSnapshotRecordWithDefaults() *WalletBalanceSnapshotRecord {
	this := WalletBalanceSnapshotRecord{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *WalletBalanceSnapshotRecord) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshotRecord) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *WalletBalanceSnapshotRecord) SetWalletId(v string) {
	o.WalletId = v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *WalletBalanceSnapshotRecord) GetWalletType() WalletType {
	if o == nil || IsNil(o.WalletType) {
		var ret WalletType
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshotRecord) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *WalletBalanceSnapshotRecord) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given WalletType and assigns it to the WalletType field.
func (o *WalletBalanceSnapshotRecord) SetWalletType(v WalletType) {
	o.WalletType = &v
}

// GetWalletName returns the WalletName field value if set, zero value otherwise.
func (o *WalletBalanceSnapshotRecord) GetWalletName() string {
	if o == nil || IsNil(o.WalletName) {
		var ret string
		return ret
	}
	return *o.WalletName
}

// GetWalletNameOk returns a tuple with the WalletName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshotRecord) GetWalletNameOk() (*string, bool) {
	if o == nil || IsNil(o.WalletName) {
		return nil, false
	}
	return o.WalletName, true
}

// HasWalletName returns a boolean if a field has been set.
func (o *WalletBalanceSnapshotRecord) HasWalletName() bool {
	if o != nil && !IsNil(o.WalletName) {
		return true
	}

	return false
}

// SetWalletName gets a reference to the given string and assigns it to the WalletName field.
func (o *WalletBalanceSnapshotRecord) SetWalletName(v string) {
	o.WalletName = &v
}

// GetTokenId returns the TokenId field value
func (o *WalletBalanceSnapshotRecord) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshotRecord) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *WalletBalanceSnapshotRecord) SetTokenId(v string) {
	o.TokenId = v
}

// GetBalance returns the Balance field value
func (o *WalletBalanceSnapshotRecord) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *WalletBalanceSnapshotRecord) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *WalletBalanceSnapshotRecord) SetBalance(v string) {
	o.Balance = v
}

func (o WalletBalanceSnapshotRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletBalanceSnapshotRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	if !IsNil(o.WalletName) {
		toSerialize["wallet_name"] = o.WalletName
	}
	toSerialize["token_id"] = o.TokenId
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *WalletBalanceSnapshotRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"token_id",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletBalanceSnapshotRecord := _WalletBalanceSnapshotRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWalletBalanceSnapshotRecord)

	if err != nil {
		return err
	}

	*o = WalletBalanceSnapshotRecord(varWalletBalanceSnapshotRecord)

	return err
}

type NullableWalletBalanceSnapshotRecord struct {
	value *WalletBalanceSnapshotRecord
	isSet bool
}

func (v NullableWalletBalanceSnapshotRecord) Get() *WalletBalanceSnapshotRecord {
	return v.value
}

func (v *NullableWalletBalanceSnapshotRecord) Set(val *WalletBalanceSnapshotRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletBalanceSnapshotRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletBalanceSnapshotRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletBalanceSnapshotRecord(val *WalletBalanceSnapshotRecord) *NullableWalletBalanceSnapshotRecord {
	return &NullableWalletBalanceSnapshotRecord{value: val, isSet: true}
}

func (v NullableWalletBalanceSnapshotRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletBalanceSnapshotRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


