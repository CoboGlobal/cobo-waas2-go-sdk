/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PolicyFieldValueType The field value type. Possible values include:  - `INT`: The field value is an integer. - `Float2`: The field value is a float with two decimal places. 
type PolicyFieldValueType string

// List of PolicyFieldValueType
const (
	POLICYFIELDVALUETYPE_INT PolicyFieldValueType = "INT"
	POLICYFIELDVALUETYPE_FLOAT2 PolicyFieldValueType = "Float2"
)

// All allowed values of PolicyFieldValueType enum
var AllowedPolicyFieldValueTypeEnumValues = []PolicyFieldValueType{
	"INT",
	"Float2",
}

func (v *PolicyFieldValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyFieldValueType(value)
	for _, existing := range AllowedPolicyFieldValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PolicyFieldValueType("unknown")
	return nil
}

// NewPolicyFieldValueTypeFromValue returns a pointer to a valid PolicyFieldValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyFieldValueTypeFromValue(v string) (*PolicyFieldValueType, error) {
	ev := PolicyFieldValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyFieldValueType: valid values are %v", v, AllowedPolicyFieldValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyFieldValueType) IsValid() bool {
	for _, existing := range AllowedPolicyFieldValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyFieldValueType value
func (v PolicyFieldValueType) Ptr() *PolicyFieldValueType {
	return &v
}

type NullablePolicyFieldValueType struct {
	value *PolicyFieldValueType
	isSet bool
}

func (v NullablePolicyFieldValueType) Get() *PolicyFieldValueType {
	return v.value
}

func (v *NullablePolicyFieldValueType) Set(val *PolicyFieldValueType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyFieldValueType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyFieldValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyFieldValueType(val *PolicyFieldValueType) *NullablePolicyFieldValueType {
	return &NullablePolicyFieldValueType{value: val, isSet: true}
}

func (v NullablePolicyFieldValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyFieldValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

