/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TokenizationSolWrappedTokenPermissionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationSolWrappedTokenPermissionParams{}

// TokenizationSolWrappedTokenPermissionParams Role-based permission settings for Solana wrapped token. The owner is automatically set to the address that calls the initialize function (typically the issuance wallet) and cannot be specified here. Only wrapper and pauser roles can be configured during initialization.
type TokenizationSolWrappedTokenPermissionParams struct {
	// List of Solana wallet addresses that can perform wrap/unwrap operations. Multiple addresses can be assigned this role.
	Wrapper []string `json:"wrapper,omitempty"`
	// List of Solana wallet addresses that can pause/unpause the contract. Multiple addresses can be assigned this role.
	Pauser []string `json:"pauser,omitempty"`
}

// NewTokenizationSolWrappedTokenPermissionParams instantiates a new TokenizationSolWrappedTokenPermissionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationSolWrappedTokenPermissionParams() *TokenizationSolWrappedTokenPermissionParams {
	this := TokenizationSolWrappedTokenPermissionParams{}
	return &this
}

// NewTokenizationSolWrappedTokenPermissionParamsWithDefaults instantiates a new TokenizationSolWrappedTokenPermissionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationSolWrappedTokenPermissionParamsWithDefaults() *TokenizationSolWrappedTokenPermissionParams {
	this := TokenizationSolWrappedTokenPermissionParams{}
	return &this
}

// GetWrapper returns the Wrapper field value if set, zero value otherwise.
func (o *TokenizationSolWrappedTokenPermissionParams) GetWrapper() []string {
	if o == nil || IsNil(o.Wrapper) {
		var ret []string
		return ret
	}
	return o.Wrapper
}

// GetWrapperOk returns a tuple with the Wrapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolWrappedTokenPermissionParams) GetWrapperOk() ([]string, bool) {
	if o == nil || IsNil(o.Wrapper) {
		return nil, false
	}
	return o.Wrapper, true
}

// HasWrapper returns a boolean if a field has been set.
func (o *TokenizationSolWrappedTokenPermissionParams) HasWrapper() bool {
	if o != nil && !IsNil(o.Wrapper) {
		return true
	}

	return false
}

// SetWrapper gets a reference to the given []string and assigns it to the Wrapper field.
func (o *TokenizationSolWrappedTokenPermissionParams) SetWrapper(v []string) {
	o.Wrapper = v
}

// GetPauser returns the Pauser field value if set, zero value otherwise.
func (o *TokenizationSolWrappedTokenPermissionParams) GetPauser() []string {
	if o == nil || IsNil(o.Pauser) {
		var ret []string
		return ret
	}
	return o.Pauser
}

// GetPauserOk returns a tuple with the Pauser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolWrappedTokenPermissionParams) GetPauserOk() ([]string, bool) {
	if o == nil || IsNil(o.Pauser) {
		return nil, false
	}
	return o.Pauser, true
}

// HasPauser returns a boolean if a field has been set.
func (o *TokenizationSolWrappedTokenPermissionParams) HasPauser() bool {
	if o != nil && !IsNil(o.Pauser) {
		return true
	}

	return false
}

// SetPauser gets a reference to the given []string and assigns it to the Pauser field.
func (o *TokenizationSolWrappedTokenPermissionParams) SetPauser(v []string) {
	o.Pauser = v
}

func (o TokenizationSolWrappedTokenPermissionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationSolWrappedTokenPermissionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Wrapper) {
		toSerialize["wrapper"] = o.Wrapper
	}
	if !IsNil(o.Pauser) {
		toSerialize["pauser"] = o.Pauser
	}
	return toSerialize, nil
}

type NullableTokenizationSolWrappedTokenPermissionParams struct {
	value *TokenizationSolWrappedTokenPermissionParams
	isSet bool
}

func (v NullableTokenizationSolWrappedTokenPermissionParams) Get() *TokenizationSolWrappedTokenPermissionParams {
	return v.value
}

func (v *NullableTokenizationSolWrappedTokenPermissionParams) Set(val *TokenizationSolWrappedTokenPermissionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationSolWrappedTokenPermissionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationSolWrappedTokenPermissionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationSolWrappedTokenPermissionParams(val *TokenizationSolWrappedTokenPermissionParams) *NullableTokenizationSolWrappedTokenPermissionParams {
	return &NullableTokenizationSolWrappedTokenPermissionParams{value: val, isSet: true}
}

func (v NullableTokenizationSolWrappedTokenPermissionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationSolWrappedTokenPermissionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


