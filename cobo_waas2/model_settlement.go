/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Settlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settlement{}

// Settlement struct for Settlement
type Settlement struct {
	// The settlement request ID generated by Cobo.
	SettlementRequestId string `json:"settlement_request_id"`
	// The request ID provided by you when creating the settlement request.
	RequestId string `json:"request_id"`
	Status SettleRequestStatus `json:"status"`
	Settlements []SettlementDetail `json:"settlements"`
	// The creation time of the settlement request, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the settlement request, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	//  The initiator of this settlement request. Can return either an API key or the Payment Management App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID. 
	Initiator *string `json:"initiator,omitempty"`
}

type _Settlement Settlement

// NewSettlement instantiates a new Settlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlement(settlementRequestId string, requestId string, status SettleRequestStatus, settlements []SettlementDetail) *Settlement {
	this := Settlement{}
	this.SettlementRequestId = settlementRequestId
	this.RequestId = requestId
	this.Status = status
	this.Settlements = settlements
	return &this
}

// NewSettlementWithDefaults instantiates a new Settlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementWithDefaults() *Settlement {
	this := Settlement{}
	return &this
}

// GetSettlementRequestId returns the SettlementRequestId field value
func (o *Settlement) GetSettlementRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettlementRequestId
}

// GetSettlementRequestIdOk returns a tuple with the SettlementRequestId field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetSettlementRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettlementRequestId, true
}

// SetSettlementRequestId sets field value
func (o *Settlement) SetSettlementRequestId(v string) {
	o.SettlementRequestId = v
}

// GetRequestId returns the RequestId field value
func (o *Settlement) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *Settlement) SetRequestId(v string) {
	o.RequestId = v
}

// GetStatus returns the Status field value
func (o *Settlement) GetStatus() SettleRequestStatus {
	if o == nil {
		var ret SettleRequestStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetStatusOk() (*SettleRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Settlement) SetStatus(v SettleRequestStatus) {
	o.Status = v
}

// GetSettlements returns the Settlements field value
func (o *Settlement) GetSettlements() []SettlementDetail {
	if o == nil {
		var ret []SettlementDetail
		return ret
	}

	return o.Settlements
}

// GetSettlementsOk returns a tuple with the Settlements field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetSettlementsOk() ([]SettlementDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settlements, true
}

// SetSettlements sets field value
func (o *Settlement) SetSettlements(v []SettlementDetail) {
	o.Settlements = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *Settlement) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *Settlement) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *Settlement) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *Settlement) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *Settlement) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *Settlement) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *Settlement) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *Settlement) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *Settlement) SetInitiator(v string) {
	o.Initiator = &v
}

func (o Settlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["settlement_request_id"] = o.SettlementRequestId
	toSerialize["request_id"] = o.RequestId
	toSerialize["status"] = o.Status
	toSerialize["settlements"] = o.Settlements
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *Settlement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"settlement_request_id",
		"request_id",
		"status",
		"settlements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettlement := _Settlement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettlement)

	if err != nil {
		return err
	}

	*o = Settlement(varSettlement)

	return err
}

type NullableSettlement struct {
	value *Settlement
	isSet bool
}

func (v NullableSettlement) Get() *Settlement {
	return v.value
}

func (v *NullableSettlement) Set(val *Settlement) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlement) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlement(val *Settlement) *NullableSettlement {
	return &NullableSettlement{value: val, isSet: true}
}

func (v NullableSettlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


