/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationTokenStandard The standard of token to create.
type TokenizationTokenStandard string

// List of TokenizationTokenStandard
const (
	TOKENIZATIONTOKENSTANDARD_ERC20 TokenizationTokenStandard = "ERC20"
)

// All allowed values of TokenizationTokenStandard enum
var AllowedTokenizationTokenStandardEnumValues = []TokenizationTokenStandard{
	"ERC20",
}

func (v *TokenizationTokenStandard) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationTokenStandard(value)
	for _, existing := range AllowedTokenizationTokenStandardEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationTokenStandard("unknown")
	return nil
}

// NewTokenizationTokenStandardFromValue returns a pointer to a valid TokenizationTokenStandard
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationTokenStandardFromValue(v string) (*TokenizationTokenStandard, error) {
	ev := TokenizationTokenStandard(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationTokenStandard: valid values are %v", v, AllowedTokenizationTokenStandardEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationTokenStandard) IsValid() bool {
	for _, existing := range AllowedTokenizationTokenStandardEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationTokenStandard value
func (v TokenizationTokenStandard) Ptr() *TokenizationTokenStandard {
	return &v
}

type NullableTokenizationTokenStandard struct {
	value *TokenizationTokenStandard
	isSet bool
}

func (v NullableTokenizationTokenStandard) Get() *TokenizationTokenStandard {
	return v.value
}

func (v *NullableTokenizationTokenStandard) Set(val *TokenizationTokenStandard) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenStandard) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenStandard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenStandard(val *TokenizationTokenStandard) *NullableTokenizationTokenStandard {
	return &NullableTokenizationTokenStandard{value: val, isSet: true}
}

func (v NullableTokenizationTokenStandard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenStandard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

