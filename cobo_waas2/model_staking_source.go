/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// StakingSource - struct for StakingSource
type StakingSource struct {
	MpcStakeSource *MpcStakeSource
}

// MpcStakeSourceAsStakingSource is a convenience function that returns MpcStakeSource wrapped in StakingSource
func MpcStakeSourceAsStakingSource(v *MpcStakeSource) StakingSource {
	return StakingSource{
		MpcStakeSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StakingSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Org-Controlled'
	if jsonDict["source_type"] == "Org-Controlled" {
		// try to unmarshal JSON data into MpcStakeSource
		err = json.Unmarshal(data, &dst.MpcStakeSource)
		if err == nil {
			return nil // data stored in dst.MpcStakeSource, return on the first match
		} else {
			dst.MpcStakeSource = nil
			return fmt.Errorf("failed to unmarshal StakingSource as MpcStakeSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MpcStakeSource'
	if jsonDict["source_type"] == "MpcStakeSource" {
		// try to unmarshal JSON data into MpcStakeSource
		err = json.Unmarshal(data, &dst.MpcStakeSource)
		if err == nil {
			return nil // data stored in dst.MpcStakeSource, return on the first match
		} else {
			dst.MpcStakeSource = nil
			return fmt.Errorf("failed to unmarshal StakingSource as MpcStakeSource: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StakingSource) MarshalJSON() ([]byte, error) {
	if src.MpcStakeSource != nil {
		return json.Marshal(&src.MpcStakeSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StakingSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MpcStakeSource != nil {
		return obj.MpcStakeSource
	}

	// all schemas are nil
	return nil
}

type NullableStakingSource struct {
	value *StakingSource
	isSet bool
}

func (v NullableStakingSource) Get() *StakingSource {
	return v.value
}

func (v *NullableStakingSource) Set(val *StakingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingSource(val *StakingSource) *NullableStakingSource {
	return &NullableStakingSource{value: val, isSet: true}
}

func (v NullableStakingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


