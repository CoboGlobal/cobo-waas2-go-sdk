/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BabylonCreateStakingExpansion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BabylonCreateStakingExpansion{}

// BabylonCreateStakingExpansion The staking expansion information specific to the Babylon protocol.
type BabylonCreateStakingExpansion struct {
	// The ID of the Phase-2 BTC staking position.
	StakingId string `json:"staking_id"`
	// The public keys of the finality providers(each key for a BSN chain).
	FinalityProviderPublicKeys []string `json:"finality_provider_public_keys"`
	// The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
	Fee TransactionRequestFee `json:"fee"`
}

type _BabylonCreateStakingExpansion BabylonCreateStakingExpansion

// NewBabylonCreateStakingExpansion instantiates a new BabylonCreateStakingExpansion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonCreateStakingExpansion(stakingId string, finalityProviderPublicKeys []string, fee TransactionRequestFee) *BabylonCreateStakingExpansion {
	this := BabylonCreateStakingExpansion{}
	this.StakingId = stakingId
	this.FinalityProviderPublicKeys = finalityProviderPublicKeys
	this.Fee = fee
	return &this
}

// NewBabylonCreateStakingExpansionWithDefaults instantiates a new BabylonCreateStakingExpansion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonCreateStakingExpansionWithDefaults() *BabylonCreateStakingExpansion {
	this := BabylonCreateStakingExpansion{}
	return &this
}

// GetStakingId returns the StakingId field value
func (o *BabylonCreateStakingExpansion) GetStakingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakingId
}

// GetStakingIdOk returns a tuple with the StakingId field value
// and a boolean to check if the value has been set.
func (o *BabylonCreateStakingExpansion) GetStakingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakingId, true
}

// SetStakingId sets field value
func (o *BabylonCreateStakingExpansion) SetStakingId(v string) {
	o.StakingId = v
}

// GetFinalityProviderPublicKeys returns the FinalityProviderPublicKeys field value
func (o *BabylonCreateStakingExpansion) GetFinalityProviderPublicKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FinalityProviderPublicKeys
}

// GetFinalityProviderPublicKeysOk returns a tuple with the FinalityProviderPublicKeys field value
// and a boolean to check if the value has been set.
func (o *BabylonCreateStakingExpansion) GetFinalityProviderPublicKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinalityProviderPublicKeys, true
}

// SetFinalityProviderPublicKeys sets field value
func (o *BabylonCreateStakingExpansion) SetFinalityProviderPublicKeys(v []string) {
	o.FinalityProviderPublicKeys = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *BabylonCreateStakingExpansion) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonCreateStakingExpansion) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *BabylonCreateStakingExpansion) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *BabylonCreateStakingExpansion) SetRequestId(v string) {
	o.RequestId = &v
}

// GetFee returns the Fee field value
func (o *BabylonCreateStakingExpansion) GetFee() TransactionRequestFee {
	if o == nil {
		var ret TransactionRequestFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *BabylonCreateStakingExpansion) GetFeeOk() (*TransactionRequestFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *BabylonCreateStakingExpansion) SetFee(v TransactionRequestFee) {
	o.Fee = v
}

func (o BabylonCreateStakingExpansion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BabylonCreateStakingExpansion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["staking_id"] = o.StakingId
	toSerialize["finality_provider_public_keys"] = o.FinalityProviderPublicKeys
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	toSerialize["fee"] = o.Fee
	return toSerialize, nil
}

func (o *BabylonCreateStakingExpansion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"staking_id",
		"finality_provider_public_keys",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBabylonCreateStakingExpansion := _BabylonCreateStakingExpansion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBabylonCreateStakingExpansion)

	if err != nil {
		return err
	}

	*o = BabylonCreateStakingExpansion(varBabylonCreateStakingExpansion)

	return err
}

type NullableBabylonCreateStakingExpansion struct {
	value *BabylonCreateStakingExpansion
	isSet bool
}

func (v NullableBabylonCreateStakingExpansion) Get() *BabylonCreateStakingExpansion {
	return v.value
}

func (v *NullableBabylonCreateStakingExpansion) Set(val *BabylonCreateStakingExpansion) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonCreateStakingExpansion) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonCreateStakingExpansion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonCreateStakingExpansion(val *BabylonCreateStakingExpansion) *NullableBabylonCreateStakingExpansion {
	return &NullableBabylonCreateStakingExpansion{value: val, isSet: true}
}

func (v NullableBabylonCreateStakingExpansion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonCreateStakingExpansion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


