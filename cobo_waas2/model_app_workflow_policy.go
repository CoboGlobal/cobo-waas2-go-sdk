/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppWorkflowPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppWorkflowPolicy{}

// AppWorkflowPolicy The information of an app workflow policy entry.
type AppWorkflowPolicy struct {
	Action PolicyAction `json:"action"`
	Conditions []PolicyCondition `json:"conditions,omitempty"`
}

type _AppWorkflowPolicy AppWorkflowPolicy

// NewAppWorkflowPolicy instantiates a new AppWorkflowPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppWorkflowPolicy(action PolicyAction) *AppWorkflowPolicy {
	this := AppWorkflowPolicy{}
	this.Action = action
	return &this
}

// NewAppWorkflowPolicyWithDefaults instantiates a new AppWorkflowPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWorkflowPolicyWithDefaults() *AppWorkflowPolicy {
	this := AppWorkflowPolicy{}
	return &this
}

// GetAction returns the Action field value
func (o *AppWorkflowPolicy) GetAction() PolicyAction {
	if o == nil {
		var ret PolicyAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AppWorkflowPolicy) GetActionOk() (*PolicyAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AppWorkflowPolicy) SetAction(v PolicyAction) {
	o.Action = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *AppWorkflowPolicy) GetConditions() []PolicyCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []PolicyCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppWorkflowPolicy) GetConditionsOk() ([]PolicyCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *AppWorkflowPolicy) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []PolicyCondition and assigns it to the Conditions field.
func (o *AppWorkflowPolicy) SetConditions(v []PolicyCondition) {
	o.Conditions = v
}

func (o AppWorkflowPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppWorkflowPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

func (o *AppWorkflowPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppWorkflowPolicy := _AppWorkflowPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppWorkflowPolicy)

	if err != nil {
		return err
	}

	*o = AppWorkflowPolicy(varAppWorkflowPolicy)

	return err
}

type NullableAppWorkflowPolicy struct {
	value *AppWorkflowPolicy
	isSet bool
}

func (v NullableAppWorkflowPolicy) Get() *AppWorkflowPolicy {
	return v.value
}

func (v *NullableAppWorkflowPolicy) Set(val *AppWorkflowPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAppWorkflowPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAppWorkflowPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppWorkflowPolicy(val *AppWorkflowPolicy) *NullableAppWorkflowPolicy {
	return &NullableAppWorkflowPolicy{value: val, isSet: true}
}

func (v NullableAppWorkflowPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppWorkflowPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


