/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SafeWalletDelegates - struct for SafeWalletDelegates
type SafeWalletDelegates struct {
	SafeWalletDelegatesContractCall *SafeWalletDelegatesContractCall
	SafeWalletDelegatesTransfer *SafeWalletDelegatesTransfer
}

// SafeWalletDelegatesContractCallAsSafeWalletDelegates is a convenience function that returns SafeWalletDelegatesContractCall wrapped in SafeWalletDelegates
func SafeWalletDelegatesContractCallAsSafeWalletDelegates(v *SafeWalletDelegatesContractCall) SafeWalletDelegates {
	return SafeWalletDelegates{
		SafeWalletDelegatesContractCall: v,
	}
}

// SafeWalletDelegatesTransferAsSafeWalletDelegates is a convenience function that returns SafeWalletDelegatesTransfer wrapped in SafeWalletDelegates
func SafeWalletDelegatesTransferAsSafeWalletDelegates(v *SafeWalletDelegatesTransfer) SafeWalletDelegates {
	return SafeWalletDelegates{
		SafeWalletDelegatesTransfer: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SafeWalletDelegates) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ContractCall'
	if jsonDict["request_type"] == "ContractCall" {
		// try to unmarshal JSON data into SafeWalletDelegatesContractCall
		err = json.Unmarshal(data, &dst.SafeWalletDelegatesContractCall)
		if err == nil {
			return nil // data stored in dst.SafeWalletDelegatesContractCall, return on the first match
		} else {
			dst.SafeWalletDelegatesContractCall = nil
			return fmt.Errorf("failed to unmarshal SafeWalletDelegates as SafeWalletDelegatesContractCall: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Transfer'
	if jsonDict["request_type"] == "Transfer" {
		// try to unmarshal JSON data into SafeWalletDelegatesTransfer
		err = json.Unmarshal(data, &dst.SafeWalletDelegatesTransfer)
		if err == nil {
			return nil // data stored in dst.SafeWalletDelegatesTransfer, return on the first match
		} else {
			dst.SafeWalletDelegatesTransfer = nil
			return fmt.Errorf("failed to unmarshal SafeWalletDelegates as SafeWalletDelegatesTransfer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SafeWalletDelegatesContractCall'
	if jsonDict["request_type"] == "SafeWalletDelegatesContractCall" {
		// try to unmarshal JSON data into SafeWalletDelegatesContractCall
		err = json.Unmarshal(data, &dst.SafeWalletDelegatesContractCall)
		if err == nil {
			return nil // data stored in dst.SafeWalletDelegatesContractCall, return on the first match
		} else {
			dst.SafeWalletDelegatesContractCall = nil
			return fmt.Errorf("failed to unmarshal SafeWalletDelegates as SafeWalletDelegatesContractCall: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SafeWalletDelegatesTransfer'
	if jsonDict["request_type"] == "SafeWalletDelegatesTransfer" {
		// try to unmarshal JSON data into SafeWalletDelegatesTransfer
		err = json.Unmarshal(data, &dst.SafeWalletDelegatesTransfer)
		if err == nil {
			return nil // data stored in dst.SafeWalletDelegatesTransfer, return on the first match
		} else {
			dst.SafeWalletDelegatesTransfer = nil
			return fmt.Errorf("failed to unmarshal SafeWalletDelegates as SafeWalletDelegatesTransfer: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SafeWalletDelegates) MarshalJSON() ([]byte, error) {
	if src.SafeWalletDelegatesContractCall != nil {
		return json.Marshal(&src.SafeWalletDelegatesContractCall)
	}

	if src.SafeWalletDelegatesTransfer != nil {
		return json.Marshal(&src.SafeWalletDelegatesTransfer)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SafeWalletDelegates) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SafeWalletDelegatesContractCall != nil {
		return obj.SafeWalletDelegatesContractCall
	}

	if obj.SafeWalletDelegatesTransfer != nil {
		return obj.SafeWalletDelegatesTransfer
	}

	// all schemas are nil
	return nil
}

type NullableSafeWalletDelegates struct {
	value *SafeWalletDelegates
	isSet bool
}

func (v NullableSafeWalletDelegates) Get() *SafeWalletDelegates {
	return v.value
}

func (v *NullableSafeWalletDelegates) Set(val *SafeWalletDelegates) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeWalletDelegates) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeWalletDelegates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeWalletDelegates(val *SafeWalletDelegates) *NullableSafeWalletDelegates {
	return &NullableSafeWalletDelegates{value: val, isSet: true}
}

func (v NullableSafeWalletDelegates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeWalletDelegates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


