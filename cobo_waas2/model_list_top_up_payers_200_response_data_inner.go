/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListTopUpPayers200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTopUpPayers200ResponseDataInner{}

// ListTopUpPayers200ResponseDataInner struct for ListTopUpPayers200ResponseDataInner
type ListTopUpPayers200ResponseDataInner struct {
	// The merchant ID.
	MerchantId string `json:"merchant_id"`
	// A unique identifier assigned by Cobo to track and identify individual payers.
	PayerId string `json:"payer_id"`
	// The developer fee rate applied to top-up transactions made by this payer. Expressed as a decimal string where \"0.1\" represents 10%.
	DeveloperFeeRate string `json:"developer_fee_rate"`
	// The creation time of the payer, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the payer, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// An array of top-up transactions associated with this payer.
	Transactions []PaymentTransaction `json:"transactions,omitempty"`
}

type _ListTopUpPayers200ResponseDataInner ListTopUpPayers200ResponseDataInner

// NewListTopUpPayers200ResponseDataInner instantiates a new ListTopUpPayers200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTopUpPayers200ResponseDataInner(merchantId string, payerId string, developerFeeRate string) *ListTopUpPayers200ResponseDataInner {
	this := ListTopUpPayers200ResponseDataInner{}
	this.MerchantId = merchantId
	this.PayerId = payerId
	this.DeveloperFeeRate = developerFeeRate
	return &this
}

// NewListTopUpPayers200ResponseDataInnerWithDefaults instantiates a new ListTopUpPayers200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTopUpPayers200ResponseDataInnerWithDefaults() *ListTopUpPayers200ResponseDataInner {
	this := ListTopUpPayers200ResponseDataInner{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *ListTopUpPayers200ResponseDataInner) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *ListTopUpPayers200ResponseDataInner) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetPayerId returns the PayerId field value
func (o *ListTopUpPayers200ResponseDataInner) GetPayerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayerId
}

// GetPayerIdOk returns a tuple with the PayerId field value
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetPayerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayerId, true
}

// SetPayerId sets field value
func (o *ListTopUpPayers200ResponseDataInner) SetPayerId(v string) {
	o.PayerId = v
}

// GetDeveloperFeeRate returns the DeveloperFeeRate field value
func (o *ListTopUpPayers200ResponseDataInner) GetDeveloperFeeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperFeeRate
}

// GetDeveloperFeeRateOk returns a tuple with the DeveloperFeeRate field value
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetDeveloperFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperFeeRate, true
}

// SetDeveloperFeeRate sets field value
func (o *ListTopUpPayers200ResponseDataInner) SetDeveloperFeeRate(v string) {
	o.DeveloperFeeRate = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *ListTopUpPayers200ResponseDataInner) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *ListTopUpPayers200ResponseDataInner) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *ListTopUpPayers200ResponseDataInner) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *ListTopUpPayers200ResponseDataInner) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *ListTopUpPayers200ResponseDataInner) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *ListTopUpPayers200ResponseDataInner) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *ListTopUpPayers200ResponseDataInner) GetTransactions() []PaymentTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []PaymentTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTopUpPayers200ResponseDataInner) GetTransactionsOk() ([]PaymentTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *ListTopUpPayers200ResponseDataInner) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []PaymentTransaction and assigns it to the Transactions field.
func (o *ListTopUpPayers200ResponseDataInner) SetTransactions(v []PaymentTransaction) {
	o.Transactions = v
}

func (o ListTopUpPayers200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTopUpPayers200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["payer_id"] = o.PayerId
	toSerialize["developer_fee_rate"] = o.DeveloperFeeRate
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

func (o *ListTopUpPayers200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"payer_id",
		"developer_fee_rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListTopUpPayers200ResponseDataInner := _ListTopUpPayers200ResponseDataInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListTopUpPayers200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = ListTopUpPayers200ResponseDataInner(varListTopUpPayers200ResponseDataInner)

	return err
}

type NullableListTopUpPayers200ResponseDataInner struct {
	value *ListTopUpPayers200ResponseDataInner
	isSet bool
}

func (v NullableListTopUpPayers200ResponseDataInner) Get() *ListTopUpPayers200ResponseDataInner {
	return v.value
}

func (v *NullableListTopUpPayers200ResponseDataInner) Set(val *ListTopUpPayers200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListTopUpPayers200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListTopUpPayers200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTopUpPayers200ResponseDataInner(val *ListTopUpPayers200ResponseDataInner) *NullableListTopUpPayers200ResponseDataInner {
	return &NullableListTopUpPayers200ResponseDataInner{value: val, isSet: true}
}

func (v NullableListTopUpPayers200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTopUpPayers200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


