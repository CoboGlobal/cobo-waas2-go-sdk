/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KeyShareHolderStatus The status of key share holder's TSS Node. Possible values include: - `Valid`: The TSS Node is configured and activated.  - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).  - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).  - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](/api-references/v2/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted. 
type KeyShareHolderStatus string

// List of KeyShareHolderStatus
const (
	KEYSHAREHOLDERSTATUS_VALID KeyShareHolderStatus = "Valid"
	KEYSHAREHOLDERSTATUS_NOT_CONFIGURED KeyShareHolderStatus = "NotConfigured"
	KEYSHAREHOLDERSTATUS_NOT_ACTIVATED KeyShareHolderStatus = "NotActivated"
	KEYSHAREHOLDERSTATUS_CHANGED KeyShareHolderStatus = "Changed"
)

// All allowed values of KeyShareHolderStatus enum
var AllowedKeyShareHolderStatusEnumValues = []KeyShareHolderStatus{
	"Valid",
	"NotConfigured",
	"NotActivated",
	"Changed",
}

func (v *KeyShareHolderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyShareHolderStatus(value)
	for _, existing := range AllowedKeyShareHolderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = KeyShareHolderStatus("unknown")
    return nil
}

// NewKeyShareHolderStatusFromValue returns a pointer to a valid KeyShareHolderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyShareHolderStatusFromValue(v string) (*KeyShareHolderStatus, error) {
	ev := KeyShareHolderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyShareHolderStatus: valid values are %v", v, AllowedKeyShareHolderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyShareHolderStatus) IsValid() bool {
	for _, existing := range AllowedKeyShareHolderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyShareHolderStatus value
func (v KeyShareHolderStatus) Ptr() *KeyShareHolderStatus {
	return &v
}

type NullableKeyShareHolderStatus struct {
	value *KeyShareHolderStatus
	isSet bool
}

func (v NullableKeyShareHolderStatus) Get() *KeyShareHolderStatus {
	return v.value
}

func (v *NullableKeyShareHolderStatus) Set(val *KeyShareHolderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyShareHolderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyShareHolderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyShareHolderStatus(val *KeyShareHolderStatus) *NullableKeyShareHolderStatus {
	return &NullableKeyShareHolderStatus{value: val, isSet: true}
}

func (v NullableKeyShareHolderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyShareHolderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

