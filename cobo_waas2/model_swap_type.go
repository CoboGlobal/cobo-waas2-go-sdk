/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SwapType The type of the swap activity. Possible values include: - `Bridge`: The activity involves bridging tokens across chains. - `Exchange`: The activity involves token-to-token exchange (a swap within the same chain). 
type SwapType string

// List of SwapType
const (
	SWAPTYPE_BRIDGE SwapType = "Bridge"
	SWAPTYPE_EXCHANGE SwapType = "Exchange"
)

// All allowed values of SwapType enum
var AllowedSwapTypeEnumValues = []SwapType{
	"Bridge",
	"Exchange",
}

func (v *SwapType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwapType(value)
	for _, existing := range AllowedSwapTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SwapType("unknown")
	return nil
}

// NewSwapTypeFromValue returns a pointer to a valid SwapType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwapTypeFromValue(v string) (*SwapType, error) {
	ev := SwapType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwapType: valid values are %v", v, AllowedSwapTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwapType) IsValid() bool {
	for _, existing := range AllowedSwapTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwapType value
func (v SwapType) Ptr() *SwapType {
	return &v
}

type NullableSwapType struct {
	value *SwapType
	isSet bool
}

func (v NullableSwapType) Get() *SwapType {
	return v.value
}

func (v *NullableSwapType) Set(val *SwapType) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapType) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapType(val *SwapType) *NullableSwapType {
	return &NullableSwapType{value: val, isSet: true}
}

func (v NullableSwapType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

