/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeeStationTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeStationTransfer{}

// FeeStationTransfer The information about a Fee Station top-up transaction.
type FeeStationTransfer struct {
	// The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	Destination *FeeStationDestination `json:"destination,omitempty"`
}

type _FeeStationTransfer FeeStationTransfer

// NewFeeStationTransfer instantiates a new FeeStationTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeStationTransfer(tokenId string) *FeeStationTransfer {
	this := FeeStationTransfer{}
	this.TokenId = tokenId
	return &this
}

// NewFeeStationTransferWithDefaults instantiates a new FeeStationTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeStationTransferWithDefaults() *FeeStationTransfer {
	this := FeeStationTransfer{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *FeeStationTransfer) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *FeeStationTransfer) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *FeeStationTransfer) SetTokenId(v string) {
	o.TokenId = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *FeeStationTransfer) GetDestination() FeeStationDestination {
	if o == nil || IsNil(o.Destination) {
		var ret FeeStationDestination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeStationTransfer) GetDestinationOk() (*FeeStationDestination, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *FeeStationTransfer) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given FeeStationDestination and assigns it to the Destination field.
func (o *FeeStationTransfer) SetDestination(v FeeStationDestination) {
	o.Destination = &v
}

func (o FeeStationTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeStationTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	return toSerialize, nil
}

func (o *FeeStationTransfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeStationTransfer := _FeeStationTransfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeeStationTransfer)

	if err != nil {
		return err
	}

	*o = FeeStationTransfer(varFeeStationTransfer)

	return err
}

type NullableFeeStationTransfer struct {
	value *FeeStationTransfer
	isSet bool
}

func (v NullableFeeStationTransfer) Get() *FeeStationTransfer {
	return v.value
}

func (v *NullableFeeStationTransfer) Set(val *FeeStationTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeStationTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeStationTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeStationTransfer(val *FeeStationTransfer) *NullableFeeStationTransfer {
	return &NullableFeeStationTransfer{value: val, isSet: true}
}

func (v NullableFeeStationTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeStationTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


