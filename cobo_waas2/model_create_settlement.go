/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the CreateSettlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSettlement{}

// CreateSettlement struct for CreateSettlement
type CreateSettlement struct {
	// The merchant ID.
	MerchantId *string `json:"merchant_id,omitempty"`
	// The ID of the cryptocurrency you want to settle. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId *string `json:"token_id,omitempty"`
	// The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported.
	Currency *string `json:"currency,omitempty"`
	// The settlement amount. - If `token_id` is specified, this represents the settlement amount in the specified cryptocurrency. - If `token_id` is not specified, this represents the settlement amount in the specified fiat currency.
	Amount *string `json:"amount,omitempty"`
	// The ID of the bank account where the settled funds will be deposited.
	BankAccountId *string `json:"bank_account_id,omitempty"`
	SettlementType *SettlementType `json:"settlement_type,omitempty"`
}

// NewCreateSettlement instantiates a new CreateSettlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSettlement() *CreateSettlement {
	this := CreateSettlement{}
	var currency string = "USD"
	this.Currency = &currency
	return &this
}

// NewCreateSettlementWithDefaults instantiates a new CreateSettlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSettlementWithDefaults() *CreateSettlement {
	this := CreateSettlement{}
	var currency string = "USD"
	this.Currency = &currency
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *CreateSettlement) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *CreateSettlement) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *CreateSettlement) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *CreateSettlement) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *CreateSettlement) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *CreateSettlement) SetTokenId(v string) {
	o.TokenId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateSettlement) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateSettlement) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreateSettlement) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreateSettlement) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateSettlement) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreateSettlement) SetAmount(v string) {
	o.Amount = &v
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise.
func (o *CreateSettlement) GetBankAccountId() string {
	if o == nil || IsNil(o.BankAccountId) {
		var ret string
		return ret
	}
	return *o.BankAccountId
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetBankAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountId) {
		return nil, false
	}
	return o.BankAccountId, true
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *CreateSettlement) HasBankAccountId() bool {
	if o != nil && !IsNil(o.BankAccountId) {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given string and assigns it to the BankAccountId field.
func (o *CreateSettlement) SetBankAccountId(v string) {
	o.BankAccountId = &v
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise.
func (o *CreateSettlement) GetSettlementType() SettlementType {
	if o == nil || IsNil(o.SettlementType) {
		var ret SettlementType
		return ret
	}
	return *o.SettlementType
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetSettlementTypeOk() (*SettlementType, bool) {
	if o == nil || IsNil(o.SettlementType) {
		return nil, false
	}
	return o.SettlementType, true
}

// HasSettlementType returns a boolean if a field has been set.
func (o *CreateSettlement) HasSettlementType() bool {
	if o != nil && !IsNil(o.SettlementType) {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given SettlementType and assigns it to the SettlementType field.
func (o *CreateSettlement) SetSettlementType(v SettlementType) {
	o.SettlementType = &v
}

func (o CreateSettlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSettlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.BankAccountId) {
		toSerialize["bank_account_id"] = o.BankAccountId
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlement_type"] = o.SettlementType
	}
	return toSerialize, nil
}

type NullableCreateSettlement struct {
	value *CreateSettlement
	isSet bool
}

func (v NullableCreateSettlement) Get() *CreateSettlement {
	return v.value
}

func (v *NullableCreateSettlement) Set(val *CreateSettlement) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSettlement) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSettlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSettlement(val *CreateSettlement) *NullableCreateSettlement {
	return &NullableCreateSettlement{value: val, isSet: true}
}

func (v NullableCreateSettlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSettlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


