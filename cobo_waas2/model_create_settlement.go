/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSettlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSettlement{}

// CreateSettlement struct for CreateSettlement
type CreateSettlement struct {
	// The merchant ID. Specify this field when `settlement_type` is set to `Merchant`.
	MerchantId *string `json:"merchant_id,omitempty"`
	// The ID of the cryptocurrency you want to settle. Specify this field when `payout_channel` is set to `Crypto`. Supported values: - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId string `json:"token_id"`
	// The amount of cryptocurrency to be settled. When settling merchant balance from orders (`acquiring_type` is `Order` and `settlement_type` is `Merchant`), do not specify this field as the amount will be automatically calculated based on the order amounts. 
	Amount *string `json:"amount,omitempty"`
	// The ID of the crypto address used for crypto payouts. Specify this field when `payout_channel` is set to `Crypto`.  Call [List crypto addresses](https://www.cobo.com/developers/v2/api-references/payment/list-crypto-addresses) to retrieve registered crypto addresses. 
	CryptoAddressId *string `json:"crypto_address_id,omitempty"`
	OrderIds []string `json:"order_ids,omitempty"`
}

type _CreateSettlement CreateSettlement

// NewCreateSettlement instantiates a new CreateSettlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSettlement(tokenId string) *CreateSettlement {
	this := CreateSettlement{}
	this.TokenId = tokenId
	return &this
}

// NewCreateSettlementWithDefaults instantiates a new CreateSettlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSettlementWithDefaults() *CreateSettlement {
	this := CreateSettlement{}
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *CreateSettlement) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *CreateSettlement) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *CreateSettlement) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetTokenId returns the TokenId field value
func (o *CreateSettlement) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *CreateSettlement) SetTokenId(v string) {
	o.TokenId = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreateSettlement) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateSettlement) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreateSettlement) SetAmount(v string) {
	o.Amount = &v
}

// GetCryptoAddressId returns the CryptoAddressId field value if set, zero value otherwise.
func (o *CreateSettlement) GetCryptoAddressId() string {
	if o == nil || IsNil(o.CryptoAddressId) {
		var ret string
		return ret
	}
	return *o.CryptoAddressId
}

// GetCryptoAddressIdOk returns a tuple with the CryptoAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetCryptoAddressIdOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoAddressId) {
		return nil, false
	}
	return o.CryptoAddressId, true
}

// HasCryptoAddressId returns a boolean if a field has been set.
func (o *CreateSettlement) HasCryptoAddressId() bool {
	if o != nil && !IsNil(o.CryptoAddressId) {
		return true
	}

	return false
}

// SetCryptoAddressId gets a reference to the given string and assigns it to the CryptoAddressId field.
func (o *CreateSettlement) SetCryptoAddressId(v string) {
	o.CryptoAddressId = &v
}

// GetOrderIds returns the OrderIds field value if set, zero value otherwise.
func (o *CreateSettlement) GetOrderIds() []string {
	if o == nil || IsNil(o.OrderIds) {
		var ret []string
		return ret
	}
	return o.OrderIds
}

// GetOrderIdsOk returns a tuple with the OrderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSettlement) GetOrderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OrderIds) {
		return nil, false
	}
	return o.OrderIds, true
}

// HasOrderIds returns a boolean if a field has been set.
func (o *CreateSettlement) HasOrderIds() bool {
	if o != nil && !IsNil(o.OrderIds) {
		return true
	}

	return false
}

// SetOrderIds gets a reference to the given []string and assigns it to the OrderIds field.
func (o *CreateSettlement) SetOrderIds(v []string) {
	o.OrderIds = v
}

func (o CreateSettlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSettlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.CryptoAddressId) {
		toSerialize["crypto_address_id"] = o.CryptoAddressId
	}
	if !IsNil(o.OrderIds) {
		toSerialize["order_ids"] = o.OrderIds
	}
	return toSerialize, nil
}

func (o *CreateSettlement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSettlement := _CreateSettlement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSettlement)

	if err != nil {
		return err
	}

	*o = CreateSettlement(varCreateSettlement)

	return err
}

type NullableCreateSettlement struct {
	value *CreateSettlement
	isSet bool
}

func (v NullableCreateSettlement) Get() *CreateSettlement {
	return v.value
}

func (v *NullableCreateSettlement) Set(val *CreateSettlement) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSettlement) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSettlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSettlement(val *CreateSettlement) *NullableCreateSettlement {
	return &NullableCreateSettlement{value: val, isSet: true}
}

func (v NullableCreateSettlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSettlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


