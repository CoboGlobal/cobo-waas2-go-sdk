/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSEventType The event type.
type TSSEventType string

// List of TSSEventType
const (
	TSSEVENTTYPE_PING TSSEventType = "ping"
	TSSEVENTTYPE_REQUEST_KEYGEN_CREATED TSSEventType = "request.keygen.created"
	TSSEVENTTYPE_REQUEST_KEYGEN_UPDATED TSSEventType = "request.keygen.updated"
	TSSEVENTTYPE_REQUEST_KEYGEN_FAILED TSSEventType = "request.keygen.failed"
	TSSEVENTTYPE_REQUEST_KEYGEN_SUCCEEDED TSSEventType = "request.keygen.succeeded"
	TSSEVENTTYPE_REQUEST_KEYRESHARE_CREATED TSSEventType = "request.keyreshare.created"
	TSSEVENTTYPE_REQUEST_KEYRESHARE_UPDATED TSSEventType = "request.keyreshare.updated"
	TSSEVENTTYPE_REQUEST_KEYRESHARE_FAILED TSSEventType = "request.keyreshare.failed"
	TSSEVENTTYPE_REQUEST_KEYRESHARE_SUCCEEDED TSSEventType = "request.keyreshare.succeeded"
	TSSEVENTTYPE_REQUEST_KEYSIGN_CREATED TSSEventType = "request.keysign.created"
	TSSEVENTTYPE_REQUEST_KEYSIGN_UPDATED TSSEventType = "request.keysign.updated"
	TSSEVENTTYPE_REQUEST_KEYSIGN_FAILED TSSEventType = "request.keysign.failed"
	TSSEVENTTYPE_REQUEST_KEYSIGN_SUCCEEDED TSSEventType = "request.keysign.succeeded"
	TSSEVENTTYPE_REQUEST_KEYSHARESIGN_CREATED TSSEventType = "request.keysharesign.created"
	TSSEVENTTYPE_REQUEST_KEYSHARESIGN_UPDATED TSSEventType = "request.keysharesign.updated"
	TSSEVENTTYPE_REQUEST_KEYSHARESIGN_FAILED TSSEventType = "request.keysharesign.failed"
	TSSEVENTTYPE_REQUEST_KEYSHARESIGN_SUCCEEDED TSSEventType = "request.keysharesign.succeeded"
)

// All allowed values of TSSEventType enum
var AllowedTSSEventTypeEnumValues = []TSSEventType{
	"ping",
	"request.keygen.created",
	"request.keygen.updated",
	"request.keygen.failed",
	"request.keygen.succeeded",
	"request.keyreshare.created",
	"request.keyreshare.updated",
	"request.keyreshare.failed",
	"request.keyreshare.succeeded",
	"request.keysign.created",
	"request.keysign.updated",
	"request.keysign.failed",
	"request.keysign.succeeded",
	"request.keysharesign.created",
	"request.keysharesign.updated",
	"request.keysharesign.failed",
	"request.keysharesign.succeeded",
}

func (v *TSSEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSEventType(value)
	for _, existing := range AllowedTSSEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSEventType("unknown")
	return nil
}

// NewTSSEventTypeFromValue returns a pointer to a valid TSSEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSEventTypeFromValue(v string) (*TSSEventType, error) {
	ev := TSSEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSEventType: valid values are %v", v, AllowedTSSEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSEventType) IsValid() bool {
	for _, existing := range AllowedTSSEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSEventType value
func (v TSSEventType) Ptr() *TSSEventType {
	return &v
}

type NullableTSSEventType struct {
	value *TSSEventType
	isSet bool
}

func (v NullableTSSEventType) Get() *TSSEventType {
	return v.value
}

func (v *NullableTSSEventType) Set(val *TSSEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSEventType(val *TSSEventType) *NullableTSSEventType {
	return &NullableTSSEventType{value: val, isSet: true}
}

func (v NullableTSSEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

