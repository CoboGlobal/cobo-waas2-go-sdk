/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the SwapActivityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapActivityDetail{}

// SwapActivityDetail struct for SwapActivityDetail
type SwapActivityDetail struct {
	// The unique identifier of the swap activity.
	ActivityId *string `json:"activity_id,omitempty"`
	SwapType *SwapType `json:"swap_type,omitempty"`
	Status *SwapActivityStatus `json:"status,omitempty"`
	// The request ID of the swap transaction.
	RequestId *string `json:"request_id,omitempty"`
	// The ID of the wallet used to pay.
	WalletId *string `json:"wallet_id,omitempty"`
	// The ID of the token to pay.
	PayTokenId *string `json:"pay_token_id,omitempty"`
	// The ID of the token to receive.
	ReceiveTokenId *string `json:"receive_token_id,omitempty"`
	// The amount of the token to pay.
	PayAmount *string `json:"pay_amount,omitempty"`
	// The amount of the token to receive.
	ReceiveAmount *string `json:"receive_amount,omitempty"`
	// The ID of the token used for paying the service fee.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// The amount of the service fee.
	FeeAmount *string `json:"fee_amount,omitempty"`
	// The initiator of the swap activity.
	Initiator NullableString `json:"initiator,omitempty"`
	InitiatorType *TransactionInitiatorType `json:"initiator_type,omitempty"`
	// The description of the swap activity.
	Description *string `json:"description,omitempty"`
	// The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	NetworkFee *TransactionRequestFee `json:"network_fee,omitempty"`
	// The address of an MPC Wallet or Web3 Wallet that receives the swapped or bridged assets.
	DestinationAddress *string `json:"destination_address,omitempty"`
	Timeline []SwapActivityTimeline `json:"timeline,omitempty"`
	Approvers []SwapActivityApprovers `json:"approvers,omitempty"`
	Signers []SwapActivitySigners `json:"signers,omitempty"`
	ReceivingTransaction *SwapReceivingTransaction `json:"receiving_transaction,omitempty"`
}

// NewSwapActivityDetail instantiates a new SwapActivityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapActivityDetail() *SwapActivityDetail {
	this := SwapActivityDetail{}
	return &this
}

// NewSwapActivityDetailWithDefaults instantiates a new SwapActivityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapActivityDetailWithDefaults() *SwapActivityDetail {
	this := SwapActivityDetail{}
	return &this
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId) {
		var ret string
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetActivityIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityId) {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasActivityId() bool {
	if o != nil && !IsNil(o.ActivityId) {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given string and assigns it to the ActivityId field.
func (o *SwapActivityDetail) SetActivityId(v string) {
	o.ActivityId = &v
}

// GetSwapType returns the SwapType field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetSwapType() SwapType {
	if o == nil || IsNil(o.SwapType) {
		var ret SwapType
		return ret
	}
	return *o.SwapType
}

// GetSwapTypeOk returns a tuple with the SwapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetSwapTypeOk() (*SwapType, bool) {
	if o == nil || IsNil(o.SwapType) {
		return nil, false
	}
	return o.SwapType, true
}

// HasSwapType returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasSwapType() bool {
	if o != nil && !IsNil(o.SwapType) {
		return true
	}

	return false
}

// SetSwapType gets a reference to the given SwapType and assigns it to the SwapType field.
func (o *SwapActivityDetail) SetSwapType(v SwapType) {
	o.SwapType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetStatus() SwapActivityStatus {
	if o == nil || IsNil(o.Status) {
		var ret SwapActivityStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetStatusOk() (*SwapActivityStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SwapActivityStatus and assigns it to the Status field.
func (o *SwapActivityDetail) SetStatus(v SwapActivityStatus) {
	o.Status = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *SwapActivityDetail) SetRequestId(v string) {
	o.RequestId = &v
}

// GetWalletId returns the WalletId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetWalletId() string {
	if o == nil || IsNil(o.WalletId) {
		var ret string
		return ret
	}
	return *o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.WalletId) {
		return nil, false
	}
	return o.WalletId, true
}

// HasWalletId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasWalletId() bool {
	if o != nil && !IsNil(o.WalletId) {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given string and assigns it to the WalletId field.
func (o *SwapActivityDetail) SetWalletId(v string) {
	o.WalletId = &v
}

// GetPayTokenId returns the PayTokenId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetPayTokenId() string {
	if o == nil || IsNil(o.PayTokenId) {
		var ret string
		return ret
	}
	return *o.PayTokenId
}

// GetPayTokenIdOk returns a tuple with the PayTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetPayTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayTokenId) {
		return nil, false
	}
	return o.PayTokenId, true
}

// HasPayTokenId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasPayTokenId() bool {
	if o != nil && !IsNil(o.PayTokenId) {
		return true
	}

	return false
}

// SetPayTokenId gets a reference to the given string and assigns it to the PayTokenId field.
func (o *SwapActivityDetail) SetPayTokenId(v string) {
	o.PayTokenId = &v
}

// GetReceiveTokenId returns the ReceiveTokenId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetReceiveTokenId() string {
	if o == nil || IsNil(o.ReceiveTokenId) {
		var ret string
		return ret
	}
	return *o.ReceiveTokenId
}

// GetReceiveTokenIdOk returns a tuple with the ReceiveTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetReceiveTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiveTokenId) {
		return nil, false
	}
	return o.ReceiveTokenId, true
}

// HasReceiveTokenId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasReceiveTokenId() bool {
	if o != nil && !IsNil(o.ReceiveTokenId) {
		return true
	}

	return false
}

// SetReceiveTokenId gets a reference to the given string and assigns it to the ReceiveTokenId field.
func (o *SwapActivityDetail) SetReceiveTokenId(v string) {
	o.ReceiveTokenId = &v
}

// GetPayAmount returns the PayAmount field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetPayAmount() string {
	if o == nil || IsNil(o.PayAmount) {
		var ret string
		return ret
	}
	return *o.PayAmount
}

// GetPayAmountOk returns a tuple with the PayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetPayAmountOk() (*string, bool) {
	if o == nil || IsNil(o.PayAmount) {
		return nil, false
	}
	return o.PayAmount, true
}

// HasPayAmount returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasPayAmount() bool {
	if o != nil && !IsNil(o.PayAmount) {
		return true
	}

	return false
}

// SetPayAmount gets a reference to the given string and assigns it to the PayAmount field.
func (o *SwapActivityDetail) SetPayAmount(v string) {
	o.PayAmount = &v
}

// GetReceiveAmount returns the ReceiveAmount field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetReceiveAmount() string {
	if o == nil || IsNil(o.ReceiveAmount) {
		var ret string
		return ret
	}
	return *o.ReceiveAmount
}

// GetReceiveAmountOk returns a tuple with the ReceiveAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetReceiveAmountOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiveAmount) {
		return nil, false
	}
	return o.ReceiveAmount, true
}

// HasReceiveAmount returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasReceiveAmount() bool {
	if o != nil && !IsNil(o.ReceiveAmount) {
		return true
	}

	return false
}

// SetReceiveAmount gets a reference to the given string and assigns it to the ReceiveAmount field.
func (o *SwapActivityDetail) SetReceiveAmount(v string) {
	o.ReceiveAmount = &v
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *SwapActivityDetail) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetFeeAmount() string {
	if o == nil || IsNil(o.FeeAmount) {
		var ret string
		return ret
	}
	return *o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetFeeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FeeAmount) {
		return nil, false
	}
	return o.FeeAmount, true
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasFeeAmount() bool {
	if o != nil && !IsNil(o.FeeAmount) {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given string and assigns it to the FeeAmount field.
func (o *SwapActivityDetail) SetFeeAmount(v string) {
	o.FeeAmount = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwapActivityDetail) GetInitiator() string {
	if o == nil || IsNil(o.Initiator.Get()) {
		var ret string
		return ret
	}
	return *o.Initiator.Get()
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwapActivityDetail) GetInitiatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Initiator.Get(), o.Initiator.IsSet()
}

// HasInitiator returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasInitiator() bool {
	if o != nil && o.Initiator.IsSet() {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given NullableString and assigns it to the Initiator field.
func (o *SwapActivityDetail) SetInitiator(v string) {
	o.Initiator.Set(&v)
}
// SetInitiatorNil sets the value for Initiator to be an explicit nil
func (o *SwapActivityDetail) SetInitiatorNil() {
	o.Initiator.Set(nil)
}

// UnsetInitiator ensures that no value is present for Initiator, not even an explicit nil
func (o *SwapActivityDetail) UnsetInitiator() {
	o.Initiator.Unset()
}

// GetInitiatorType returns the InitiatorType field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetInitiatorType() TransactionInitiatorType {
	if o == nil || IsNil(o.InitiatorType) {
		var ret TransactionInitiatorType
		return ret
	}
	return *o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetInitiatorTypeOk() (*TransactionInitiatorType, bool) {
	if o == nil || IsNil(o.InitiatorType) {
		return nil, false
	}
	return o.InitiatorType, true
}

// HasInitiatorType returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasInitiatorType() bool {
	if o != nil && !IsNil(o.InitiatorType) {
		return true
	}

	return false
}

// SetInitiatorType gets a reference to the given TransactionInitiatorType and assigns it to the InitiatorType field.
func (o *SwapActivityDetail) SetInitiatorType(v TransactionInitiatorType) {
	o.InitiatorType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SwapActivityDetail) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *SwapActivityDetail) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *SwapActivityDetail) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetNetworkFee returns the NetworkFee field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetNetworkFee() TransactionRequestFee {
	if o == nil || IsNil(o.NetworkFee) {
		var ret TransactionRequestFee
		return ret
	}
	return *o.NetworkFee
}

// GetNetworkFeeOk returns a tuple with the NetworkFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetNetworkFeeOk() (*TransactionRequestFee, bool) {
	if o == nil || IsNil(o.NetworkFee) {
		return nil, false
	}
	return o.NetworkFee, true
}

// HasNetworkFee returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasNetworkFee() bool {
	if o != nil && !IsNil(o.NetworkFee) {
		return true
	}

	return false
}

// SetNetworkFee gets a reference to the given TransactionRequestFee and assigns it to the NetworkFee field.
func (o *SwapActivityDetail) SetNetworkFee(v TransactionRequestFee) {
	o.NetworkFee = &v
}

// GetDestinationAddress returns the DestinationAddress field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetDestinationAddress() string {
	if o == nil || IsNil(o.DestinationAddress) {
		var ret string
		return ret
	}
	return *o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetDestinationAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationAddress) {
		return nil, false
	}
	return o.DestinationAddress, true
}

// HasDestinationAddress returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasDestinationAddress() bool {
	if o != nil && !IsNil(o.DestinationAddress) {
		return true
	}

	return false
}

// SetDestinationAddress gets a reference to the given string and assigns it to the DestinationAddress field.
func (o *SwapActivityDetail) SetDestinationAddress(v string) {
	o.DestinationAddress = &v
}

// GetTimeline returns the Timeline field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetTimeline() []SwapActivityTimeline {
	if o == nil || IsNil(o.Timeline) {
		var ret []SwapActivityTimeline
		return ret
	}
	return o.Timeline
}

// GetTimelineOk returns a tuple with the Timeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetTimelineOk() ([]SwapActivityTimeline, bool) {
	if o == nil || IsNil(o.Timeline) {
		return nil, false
	}
	return o.Timeline, true
}

// HasTimeline returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasTimeline() bool {
	if o != nil && !IsNil(o.Timeline) {
		return true
	}

	return false
}

// SetTimeline gets a reference to the given []SwapActivityTimeline and assigns it to the Timeline field.
func (o *SwapActivityDetail) SetTimeline(v []SwapActivityTimeline) {
	o.Timeline = v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetApprovers() []SwapActivityApprovers {
	if o == nil || IsNil(o.Approvers) {
		var ret []SwapActivityApprovers
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetApproversOk() ([]SwapActivityApprovers, bool) {
	if o == nil || IsNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasApprovers() bool {
	if o != nil && !IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []SwapActivityApprovers and assigns it to the Approvers field.
func (o *SwapActivityDetail) SetApprovers(v []SwapActivityApprovers) {
	o.Approvers = v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetSigners() []SwapActivitySigners {
	if o == nil || IsNil(o.Signers) {
		var ret []SwapActivitySigners
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetSignersOk() ([]SwapActivitySigners, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []SwapActivitySigners and assigns it to the Signers field.
func (o *SwapActivityDetail) SetSigners(v []SwapActivitySigners) {
	o.Signers = v
}

// GetReceivingTransaction returns the ReceivingTransaction field value if set, zero value otherwise.
func (o *SwapActivityDetail) GetReceivingTransaction() SwapReceivingTransaction {
	if o == nil || IsNil(o.ReceivingTransaction) {
		var ret SwapReceivingTransaction
		return ret
	}
	return *o.ReceivingTransaction
}

// GetReceivingTransactionOk returns a tuple with the ReceivingTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityDetail) GetReceivingTransactionOk() (*SwapReceivingTransaction, bool) {
	if o == nil || IsNil(o.ReceivingTransaction) {
		return nil, false
	}
	return o.ReceivingTransaction, true
}

// HasReceivingTransaction returns a boolean if a field has been set.
func (o *SwapActivityDetail) HasReceivingTransaction() bool {
	if o != nil && !IsNil(o.ReceivingTransaction) {
		return true
	}

	return false
}

// SetReceivingTransaction gets a reference to the given SwapReceivingTransaction and assigns it to the ReceivingTransaction field.
func (o *SwapActivityDetail) SetReceivingTransaction(v SwapReceivingTransaction) {
	o.ReceivingTransaction = &v
}

func (o SwapActivityDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapActivityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityId) {
		toSerialize["activity_id"] = o.ActivityId
	}
	if !IsNil(o.SwapType) {
		toSerialize["swap_type"] = o.SwapType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.WalletId) {
		toSerialize["wallet_id"] = o.WalletId
	}
	if !IsNil(o.PayTokenId) {
		toSerialize["pay_token_id"] = o.PayTokenId
	}
	if !IsNil(o.ReceiveTokenId) {
		toSerialize["receive_token_id"] = o.ReceiveTokenId
	}
	if !IsNil(o.PayAmount) {
		toSerialize["pay_amount"] = o.PayAmount
	}
	if !IsNil(o.ReceiveAmount) {
		toSerialize["receive_amount"] = o.ReceiveAmount
	}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	if !IsNil(o.FeeAmount) {
		toSerialize["fee_amount"] = o.FeeAmount
	}
	if o.Initiator.IsSet() {
		toSerialize["initiator"] = o.Initiator.Get()
	}
	if !IsNil(o.InitiatorType) {
		toSerialize["initiator_type"] = o.InitiatorType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.NetworkFee) {
		toSerialize["network_fee"] = o.NetworkFee
	}
	if !IsNil(o.DestinationAddress) {
		toSerialize["destination_address"] = o.DestinationAddress
	}
	if !IsNil(o.Timeline) {
		toSerialize["timeline"] = o.Timeline
	}
	if !IsNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	if !IsNil(o.ReceivingTransaction) {
		toSerialize["receiving_transaction"] = o.ReceivingTransaction
	}
	return toSerialize, nil
}

type NullableSwapActivityDetail struct {
	value *SwapActivityDetail
	isSet bool
}

func (v NullableSwapActivityDetail) Get() *SwapActivityDetail {
	return v.value
}

func (v *NullableSwapActivityDetail) Set(val *SwapActivityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivityDetail(val *SwapActivityDetail) *NullableSwapActivityDetail {
	return &NullableSwapActivityDetail{value: val, isSet: true}
}

func (v NullableSwapActivityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


