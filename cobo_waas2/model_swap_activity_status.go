/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SwapActivityStatus The status of the swap activity. Possible values include: - `Success`: The activity is successfully completed. - `Processing`: The activity is being processed. - `Failed`: The activity has failed. 
type SwapActivityStatus string

// List of SwapActivityStatus
const (
	SWAPACTIVITYSTATUS_SUCCESS SwapActivityStatus = "Success"
	SWAPACTIVITYSTATUS_PROCESSING SwapActivityStatus = "Processing"
	SWAPACTIVITYSTATUS_FAILED SwapActivityStatus = "Failed"
)

// All allowed values of SwapActivityStatus enum
var AllowedSwapActivityStatusEnumValues = []SwapActivityStatus{
	"Success",
	"Processing",
	"Failed",
}

func (v *SwapActivityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwapActivityStatus(value)
	for _, existing := range AllowedSwapActivityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = SwapActivityStatus("unknown")
    return nil
}

// NewSwapActivityStatusFromValue returns a pointer to a valid SwapActivityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwapActivityStatusFromValue(v string) (*SwapActivityStatus, error) {
	ev := SwapActivityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwapActivityStatus: valid values are %v", v, AllowedSwapActivityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwapActivityStatus) IsValid() bool {
	for _, existing := range AllowedSwapActivityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwapActivityStatus value
func (v SwapActivityStatus) Ptr() *SwapActivityStatus {
	return &v
}

type NullableSwapActivityStatus struct {
	value *SwapActivityStatus
	isSet bool
}

func (v NullableSwapActivityStatus) Get() *SwapActivityStatus {
	return v.value
}

func (v *NullableSwapActivityStatus) Set(val *SwapActivityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivityStatus(val *SwapActivityStatus) *NullableSwapActivityStatus {
	return &NullableSwapActivityStatus{value: val, isSet: true}
}

func (v NullableSwapActivityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

