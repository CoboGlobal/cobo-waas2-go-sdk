/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionSolContractAddressLookupTableAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSolContractAddressLookupTableAccount{}

// TransactionSolContractAddressLookupTableAccount The information about the Solana address lookup table account.
type TransactionSolContractAddressLookupTableAccount struct {
	// The on-chain public key of the address lookup table account (ALT), identifying the specific lookup table.
	AltAccountKey string `json:"alt_account_key"`
	// An array of stored account addresses within the lookup table, which can be referenced in the transaction by index.
	Addresses []string `json:"addresses"`
}

type _TransactionSolContractAddressLookupTableAccount TransactionSolContractAddressLookupTableAccount

// NewTransactionSolContractAddressLookupTableAccount instantiates a new TransactionSolContractAddressLookupTableAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSolContractAddressLookupTableAccount(altAccountKey string, addresses []string) *TransactionSolContractAddressLookupTableAccount {
	this := TransactionSolContractAddressLookupTableAccount{}
	this.AltAccountKey = altAccountKey
	this.Addresses = addresses
	return &this
}

// NewTransactionSolContractAddressLookupTableAccountWithDefaults instantiates a new TransactionSolContractAddressLookupTableAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSolContractAddressLookupTableAccountWithDefaults() *TransactionSolContractAddressLookupTableAccount {
	this := TransactionSolContractAddressLookupTableAccount{}
	return &this
}

// GetAltAccountKey returns the AltAccountKey field value
func (o *TransactionSolContractAddressLookupTableAccount) GetAltAccountKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AltAccountKey
}

// GetAltAccountKeyOk returns a tuple with the AltAccountKey field value
// and a boolean to check if the value has been set.
func (o *TransactionSolContractAddressLookupTableAccount) GetAltAccountKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AltAccountKey, true
}

// SetAltAccountKey sets field value
func (o *TransactionSolContractAddressLookupTableAccount) SetAltAccountKey(v string) {
	o.AltAccountKey = v
}

// GetAddresses returns the Addresses field value
func (o *TransactionSolContractAddressLookupTableAccount) GetAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *TransactionSolContractAddressLookupTableAccount) GetAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *TransactionSolContractAddressLookupTableAccount) SetAddresses(v []string) {
	o.Addresses = v
}

func (o TransactionSolContractAddressLookupTableAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSolContractAddressLookupTableAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alt_account_key"] = o.AltAccountKey
	toSerialize["addresses"] = o.Addresses
	return toSerialize, nil
}

func (o *TransactionSolContractAddressLookupTableAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alt_account_key",
		"addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionSolContractAddressLookupTableAccount := _TransactionSolContractAddressLookupTableAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSolContractAddressLookupTableAccount)

	if err != nil {
		return err
	}

	*o = TransactionSolContractAddressLookupTableAccount(varTransactionSolContractAddressLookupTableAccount)

	return err
}

type NullableTransactionSolContractAddressLookupTableAccount struct {
	value *TransactionSolContractAddressLookupTableAccount
	isSet bool
}

func (v NullableTransactionSolContractAddressLookupTableAccount) Get() *TransactionSolContractAddressLookupTableAccount {
	return v.value
}

func (v *NullableTransactionSolContractAddressLookupTableAccount) Set(val *TransactionSolContractAddressLookupTableAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSolContractAddressLookupTableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSolContractAddressLookupTableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSolContractAddressLookupTableAccount(val *TransactionSolContractAddressLookupTableAccount) *NullableTransactionSolContractAddressLookupTableAccount {
	return &NullableTransactionSolContractAddressLookupTableAccount{value: val, isSet: true}
}

func (v NullableTransactionSolContractAddressLookupTableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSolContractAddressLookupTableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


