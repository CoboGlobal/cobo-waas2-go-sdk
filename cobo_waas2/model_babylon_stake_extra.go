/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BabylonStakeExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BabylonStakeExtra{}

// BabylonStakeExtra struct for BabylonStakeExtra
type BabylonStakeExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The public key of finality provider.
	FinalityProviderPublicKey string `json:"finality_provider_public_key"`
	// The stake block time.
	StakeBlockTime int64 `json:"stake_block_time"`
	// Whether to only sign transactions. Default is `false`, if set to `true`,  the transaction will not be submitted to the blockchain automatically. You can call `Broadcast transactions` to submit the transaction to the blockchain,  Or you can find the signed raw_tx by `Get transaction information` and broadcast it yourself. 
	OnlySign *bool `json:"only_sign,omitempty"`
}

type _BabylonStakeExtra BabylonStakeExtra

// NewBabylonStakeExtra instantiates a new BabylonStakeExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonStakeExtra(poolType StakingPoolType, finalityProviderPublicKey string, stakeBlockTime int64) *BabylonStakeExtra {
	this := BabylonStakeExtra{}
	this.PoolType = poolType
	this.FinalityProviderPublicKey = finalityProviderPublicKey
	this.StakeBlockTime = stakeBlockTime
	return &this
}

// NewBabylonStakeExtraWithDefaults instantiates a new BabylonStakeExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonStakeExtraWithDefaults() *BabylonStakeExtra {
	this := BabylonStakeExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *BabylonStakeExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *BabylonStakeExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *BabylonStakeExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetFinalityProviderPublicKey returns the FinalityProviderPublicKey field value
func (o *BabylonStakeExtra) GetFinalityProviderPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FinalityProviderPublicKey
}

// GetFinalityProviderPublicKeyOk returns a tuple with the FinalityProviderPublicKey field value
// and a boolean to check if the value has been set.
func (o *BabylonStakeExtra) GetFinalityProviderPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalityProviderPublicKey, true
}

// SetFinalityProviderPublicKey sets field value
func (o *BabylonStakeExtra) SetFinalityProviderPublicKey(v string) {
	o.FinalityProviderPublicKey = v
}

// GetStakeBlockTime returns the StakeBlockTime field value
func (o *BabylonStakeExtra) GetStakeBlockTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StakeBlockTime
}

// GetStakeBlockTimeOk returns a tuple with the StakeBlockTime field value
// and a boolean to check if the value has been set.
func (o *BabylonStakeExtra) GetStakeBlockTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakeBlockTime, true
}

// SetStakeBlockTime sets field value
func (o *BabylonStakeExtra) SetStakeBlockTime(v int64) {
	o.StakeBlockTime = v
}

// GetOnlySign returns the OnlySign field value if set, zero value otherwise.
func (o *BabylonStakeExtra) GetOnlySign() bool {
	if o == nil || IsNil(o.OnlySign) {
		var ret bool
		return ret
	}
	return *o.OnlySign
}

// GetOnlySignOk returns a tuple with the OnlySign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonStakeExtra) GetOnlySignOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlySign) {
		return nil, false
	}
	return o.OnlySign, true
}

// HasOnlySign returns a boolean if a field has been set.
func (o *BabylonStakeExtra) HasOnlySign() bool {
	if o != nil && !IsNil(o.OnlySign) {
		return true
	}

	return false
}

// SetOnlySign gets a reference to the given bool and assigns it to the OnlySign field.
func (o *BabylonStakeExtra) SetOnlySign(v bool) {
	o.OnlySign = &v
}

func (o BabylonStakeExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BabylonStakeExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	toSerialize["finality_provider_public_key"] = o.FinalityProviderPublicKey
	toSerialize["stake_block_time"] = o.StakeBlockTime
	if !IsNil(o.OnlySign) {
		toSerialize["only_sign"] = o.OnlySign
	}
	return toSerialize, nil
}

func (o *BabylonStakeExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"finality_provider_public_key",
		"stake_block_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBabylonStakeExtra := _BabylonStakeExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBabylonStakeExtra)

	if err != nil {
		return err
	}

	*o = BabylonStakeExtra(varBabylonStakeExtra)

	return err
}

type NullableBabylonStakeExtra struct {
	value *BabylonStakeExtra
	isSet bool
}

func (v NullableBabylonStakeExtra) Get() *BabylonStakeExtra {
	return v.value
}

func (v *NullableBabylonStakeExtra) Set(val *BabylonStakeExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonStakeExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonStakeExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonStakeExtra(val *BabylonStakeExtra) *NullableBabylonStakeExtra {
	return &NullableBabylonStakeExtra{value: val, isSet: true}
}

func (v NullableBabylonStakeExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonStakeExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


