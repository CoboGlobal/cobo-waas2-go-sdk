/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionFILFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFILFee{}

// TransactionFILFee The transaction fee actually charged by the chain that uses the FIL fee model.  In the Fil fee model, the calculation method for the fee is: fee = gas_fee_cap * gas_limit, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  Switch between the tabs to display the properties for different transaction fee models. 
type TransactionFILFee struct {
	// This is the minimum fee required to include a transaction in a block. It is determined by the network's congestion level, which adjusts to maintain a target block utilization rate. The base fee is burned, reducing the total supply of Filecoin over time.
	GasBase *string `json:"gas_base,omitempty"`
	// An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
	GasPremium *string `json:"gas_premium,omitempty"`
	// The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
	GasFeeCap *string `json:"gas_fee_cap,omitempty"`
	// This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
	GasLimit *string `json:"gas_limit,omitempty"`
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId *string `json:"token_id,omitempty"`
	// The transaction fee.
	FeeUsed *string `json:"fee_used,omitempty"`
	// The estimated transaction fee.
	EstimatedFeeUsed *string `json:"estimated_fee_used,omitempty"`
	// The gas units used in the transaction.
	GasUsed *string `json:"gas_used,omitempty"`
}

type _TransactionFILFee TransactionFILFee

// NewTransactionFILFee instantiates a new TransactionFILFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFILFee(feeType FeeType) *TransactionFILFee {
	this := TransactionFILFee{}
	this.FeeType = feeType
	return &this
}

// NewTransactionFILFeeWithDefaults instantiates a new TransactionFILFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFILFeeWithDefaults() *TransactionFILFee {
	this := TransactionFILFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetGasBase returns the GasBase field value if set, zero value otherwise.
func (o *TransactionFILFee) GetGasBase() string {
	if o == nil || IsNil(o.GasBase) {
		var ret string
		return ret
	}
	return *o.GasBase
}

// GetGasBaseOk returns a tuple with the GasBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetGasBaseOk() (*string, bool) {
	if o == nil || IsNil(o.GasBase) {
		return nil, false
	}
	return o.GasBase, true
}

// HasGasBase returns a boolean if a field has been set.
func (o *TransactionFILFee) HasGasBase() bool {
	if o != nil && !IsNil(o.GasBase) {
		return true
	}

	return false
}

// SetGasBase gets a reference to the given string and assigns it to the GasBase field.
func (o *TransactionFILFee) SetGasBase(v string) {
	o.GasBase = &v
}

// GetGasPremium returns the GasPremium field value if set, zero value otherwise.
func (o *TransactionFILFee) GetGasPremium() string {
	if o == nil || IsNil(o.GasPremium) {
		var ret string
		return ret
	}
	return *o.GasPremium
}

// GetGasPremiumOk returns a tuple with the GasPremium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetGasPremiumOk() (*string, bool) {
	if o == nil || IsNil(o.GasPremium) {
		return nil, false
	}
	return o.GasPremium, true
}

// HasGasPremium returns a boolean if a field has been set.
func (o *TransactionFILFee) HasGasPremium() bool {
	if o != nil && !IsNil(o.GasPremium) {
		return true
	}

	return false
}

// SetGasPremium gets a reference to the given string and assigns it to the GasPremium field.
func (o *TransactionFILFee) SetGasPremium(v string) {
	o.GasPremium = &v
}

// GetGasFeeCap returns the GasFeeCap field value if set, zero value otherwise.
func (o *TransactionFILFee) GetGasFeeCap() string {
	if o == nil || IsNil(o.GasFeeCap) {
		var ret string
		return ret
	}
	return *o.GasFeeCap
}

// GetGasFeeCapOk returns a tuple with the GasFeeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetGasFeeCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasFeeCap) {
		return nil, false
	}
	return o.GasFeeCap, true
}

// HasGasFeeCap returns a boolean if a field has been set.
func (o *TransactionFILFee) HasGasFeeCap() bool {
	if o != nil && !IsNil(o.GasFeeCap) {
		return true
	}

	return false
}

// SetGasFeeCap gets a reference to the given string and assigns it to the GasFeeCap field.
func (o *TransactionFILFee) SetGasFeeCap(v string) {
	o.GasFeeCap = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *TransactionFILFee) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit) {
		var ret string
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetGasLimitOk() (*string, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *TransactionFILFee) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given string and assigns it to the GasLimit field.
func (o *TransactionFILFee) SetGasLimit(v string) {
	o.GasLimit = &v
}

// GetFeeType returns the FeeType field value
func (o *TransactionFILFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *TransactionFILFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TransactionFILFee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TransactionFILFee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TransactionFILFee) SetTokenId(v string) {
	o.TokenId = &v
}

// GetFeeUsed returns the FeeUsed field value if set, zero value otherwise.
func (o *TransactionFILFee) GetFeeUsed() string {
	if o == nil || IsNil(o.FeeUsed) {
		var ret string
		return ret
	}
	return *o.FeeUsed
}

// GetFeeUsedOk returns a tuple with the FeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.FeeUsed) {
		return nil, false
	}
	return o.FeeUsed, true
}

// HasFeeUsed returns a boolean if a field has been set.
func (o *TransactionFILFee) HasFeeUsed() bool {
	if o != nil && !IsNil(o.FeeUsed) {
		return true
	}

	return false
}

// SetFeeUsed gets a reference to the given string and assigns it to the FeeUsed field.
func (o *TransactionFILFee) SetFeeUsed(v string) {
	o.FeeUsed = &v
}

// GetEstimatedFeeUsed returns the EstimatedFeeUsed field value if set, zero value otherwise.
func (o *TransactionFILFee) GetEstimatedFeeUsed() string {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		var ret string
		return ret
	}
	return *o.EstimatedFeeUsed
}

// GetEstimatedFeeUsedOk returns a tuple with the EstimatedFeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetEstimatedFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		return nil, false
	}
	return o.EstimatedFeeUsed, true
}

// HasEstimatedFeeUsed returns a boolean if a field has been set.
func (o *TransactionFILFee) HasEstimatedFeeUsed() bool {
	if o != nil && !IsNil(o.EstimatedFeeUsed) {
		return true
	}

	return false
}

// SetEstimatedFeeUsed gets a reference to the given string and assigns it to the EstimatedFeeUsed field.
func (o *TransactionFILFee) SetEstimatedFeeUsed(v string) {
	o.EstimatedFeeUsed = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *TransactionFILFee) GetGasUsed() string {
	if o == nil || IsNil(o.GasUsed) {
		var ret string
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFILFee) GetGasUsedOk() (*string, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *TransactionFILFee) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given string and assigns it to the GasUsed field.
func (o *TransactionFILFee) SetGasUsed(v string) {
	o.GasUsed = &v
}

func (o TransactionFILFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFILFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasBase) {
		toSerialize["gas_base"] = o.GasBase
	}
	if !IsNil(o.GasPremium) {
		toSerialize["gas_premium"] = o.GasPremium
	}
	if !IsNil(o.GasFeeCap) {
		toSerialize["gas_fee_cap"] = o.GasFeeCap
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	toSerialize["fee_type"] = o.FeeType
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.FeeUsed) {
		toSerialize["fee_used"] = o.FeeUsed
	}
	if !IsNil(o.EstimatedFeeUsed) {
		toSerialize["estimated_fee_used"] = o.EstimatedFeeUsed
	}
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	return toSerialize, nil
}

func (o *TransactionFILFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionFILFee := _TransactionFILFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFILFee)

	if err != nil {
		return err
	}

	*o = TransactionFILFee(varTransactionFILFee)

	return err
}

type NullableTransactionFILFee struct {
	value *TransactionFILFee
	isSet bool
}

func (v NullableTransactionFILFee) Get() *TransactionFILFee {
	return v.value
}

func (v *NullableTransactionFILFee) Set(val *TransactionFILFee) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFILFee) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFILFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFILFee(val *TransactionFILFee) *NullableTransactionFILFee {
	return &NullableTransactionFILFee{value: val, isSet: true}
}

func (v NullableTransactionFILFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFILFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


