/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationIssueTokenParamsTokenParams - struct for TokenizationIssueTokenParamsTokenParams
type TokenizationIssueTokenParamsTokenParams struct {
	TokenizationERC20TokenParams *TokenizationERC20TokenParams
	TokenizationSOLTokenParams *TokenizationSOLTokenParams
}

// TokenizationERC20TokenParamsAsTokenizationIssueTokenParamsTokenParams is a convenience function that returns TokenizationERC20TokenParams wrapped in TokenizationIssueTokenParamsTokenParams
func TokenizationERC20TokenParamsAsTokenizationIssueTokenParamsTokenParams(v *TokenizationERC20TokenParams) TokenizationIssueTokenParamsTokenParams {
	return TokenizationIssueTokenParamsTokenParams{
		TokenizationERC20TokenParams: v,
	}
}

// TokenizationSOLTokenParamsAsTokenizationIssueTokenParamsTokenParams is a convenience function that returns TokenizationSOLTokenParams wrapped in TokenizationIssueTokenParamsTokenParams
func TokenizationSOLTokenParamsAsTokenizationIssueTokenParamsTokenParams(v *TokenizationSOLTokenParams) TokenizationIssueTokenParamsTokenParams {
	return TokenizationIssueTokenParamsTokenParams{
		TokenizationSOLTokenParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenizationIssueTokenParamsTokenParams) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ERC20'
	if jsonDict["standard"] == "ERC20" {
		// try to unmarshal JSON data into TokenizationERC20TokenParams
		err = json.Unmarshal(data, &dst.TokenizationERC20TokenParams)
		if err == nil {
			return nil // data stored in dst.TokenizationERC20TokenParams, return on the first match
		} else {
			dst.TokenizationERC20TokenParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationIssueTokenParamsTokenParams as TokenizationERC20TokenParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SPLToken2022'
	if jsonDict["standard"] == "SPLToken2022" {
		// try to unmarshal JSON data into TokenizationSOLTokenParams
		err = json.Unmarshal(data, &dst.TokenizationSOLTokenParams)
		if err == nil {
			return nil // data stored in dst.TokenizationSOLTokenParams, return on the first match
		} else {
			dst.TokenizationSOLTokenParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationIssueTokenParamsTokenParams as TokenizationSOLTokenParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationERC20TokenParams'
	if jsonDict["standard"] == "TokenizationERC20TokenParams" {
		// try to unmarshal JSON data into TokenizationERC20TokenParams
		err = json.Unmarshal(data, &dst.TokenizationERC20TokenParams)
		if err == nil {
			return nil // data stored in dst.TokenizationERC20TokenParams, return on the first match
		} else {
			dst.TokenizationERC20TokenParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationIssueTokenParamsTokenParams as TokenizationERC20TokenParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationSOLTokenParams'
	if jsonDict["standard"] == "TokenizationSOLTokenParams" {
		// try to unmarshal JSON data into TokenizationSOLTokenParams
		err = json.Unmarshal(data, &dst.TokenizationSOLTokenParams)
		if err == nil {
			return nil // data stored in dst.TokenizationSOLTokenParams, return on the first match
		} else {
			dst.TokenizationSOLTokenParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationIssueTokenParamsTokenParams as TokenizationSOLTokenParams: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenizationIssueTokenParamsTokenParams) MarshalJSON() ([]byte, error) {
	if src.TokenizationERC20TokenParams != nil {
		return json.Marshal(&src.TokenizationERC20TokenParams)
	}

	if src.TokenizationSOLTokenParams != nil {
		return json.Marshal(&src.TokenizationSOLTokenParams)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenizationIssueTokenParamsTokenParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokenizationERC20TokenParams != nil {
		return obj.TokenizationERC20TokenParams
	}

	if obj.TokenizationSOLTokenParams != nil {
		return obj.TokenizationSOLTokenParams
	}

	// all schemas are nil
	return nil
}

type NullableTokenizationIssueTokenParamsTokenParams struct {
	value *TokenizationIssueTokenParamsTokenParams
	isSet bool
}

func (v NullableTokenizationIssueTokenParamsTokenParams) Get() *TokenizationIssueTokenParamsTokenParams {
	return v.value
}

func (v *NullableTokenizationIssueTokenParamsTokenParams) Set(val *TokenizationIssueTokenParamsTokenParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationIssueTokenParamsTokenParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationIssueTokenParamsTokenParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationIssueTokenParamsTokenParams(val *TokenizationIssueTokenParamsTokenParams) *NullableTokenizationIssueTokenParamsTokenParams {
	return &NullableTokenizationIssueTokenParamsTokenParams{value: val, isSet: true}
}

func (v NullableTokenizationIssueTokenParamsTokenParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationIssueTokenParamsTokenParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


