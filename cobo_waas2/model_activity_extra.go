/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ActivityExtra - struct for ActivityExtra
type ActivityExtra struct {
	BabylonStakingActivityDetailExtra *BabylonStakingActivityDetailExtra
	CoreStakingActivityDetailExtra *CoreStakingActivityDetailExtra
	EthStakingActivityDetailExtra *EthStakingActivityDetailExtra
}

// BabylonStakingActivityDetailExtraAsActivityExtra is a convenience function that returns BabylonStakingActivityDetailExtra wrapped in ActivityExtra
func BabylonStakingActivityDetailExtraAsActivityExtra(v *BabylonStakingActivityDetailExtra) ActivityExtra {
	return ActivityExtra{
		BabylonStakingActivityDetailExtra: v,
	}
}

// CoreStakingActivityDetailExtraAsActivityExtra is a convenience function that returns CoreStakingActivityDetailExtra wrapped in ActivityExtra
func CoreStakingActivityDetailExtraAsActivityExtra(v *CoreStakingActivityDetailExtra) ActivityExtra {
	return ActivityExtra{
		CoreStakingActivityDetailExtra: v,
	}
}

// EthStakingActivityDetailExtraAsActivityExtra is a convenience function that returns EthStakingActivityDetailExtra wrapped in ActivityExtra
func EthStakingActivityDetailExtraAsActivityExtra(v *EthStakingActivityDetailExtra) ActivityExtra {
	return ActivityExtra{
		EthStakingActivityDetailExtra: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActivityExtra) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Babylon'
	if jsonDict["pool_type"] == "Babylon" {
		// try to unmarshal JSON data into BabylonStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.BabylonStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakingActivityDetailExtra, return on the first match
		} else {
			dst.BabylonStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as BabylonStakingActivityDetailExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CoreBTC'
	if jsonDict["pool_type"] == "CoreBTC" {
		// try to unmarshal JSON data into CoreStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.CoreStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.CoreStakingActivityDetailExtra, return on the first match
		} else {
			dst.CoreStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as CoreStakingActivityDetailExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ETHBeacon'
	if jsonDict["pool_type"] == "ETHBeacon" {
		// try to unmarshal JSON data into EthStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.EthStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.EthStakingActivityDetailExtra, return on the first match
		} else {
			dst.EthStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as EthStakingActivityDetailExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BabylonStakingActivityDetailExtra'
	if jsonDict["pool_type"] == "BabylonStakingActivityDetailExtra" {
		// try to unmarshal JSON data into BabylonStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.BabylonStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakingActivityDetailExtra, return on the first match
		} else {
			dst.BabylonStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as BabylonStakingActivityDetailExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CoreStakingActivityDetailExtra'
	if jsonDict["pool_type"] == "CoreStakingActivityDetailExtra" {
		// try to unmarshal JSON data into CoreStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.CoreStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.CoreStakingActivityDetailExtra, return on the first match
		} else {
			dst.CoreStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as CoreStakingActivityDetailExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EthStakingActivityDetailExtra'
	if jsonDict["pool_type"] == "EthStakingActivityDetailExtra" {
		// try to unmarshal JSON data into EthStakingActivityDetailExtra
		err = json.Unmarshal(data, &dst.EthStakingActivityDetailExtra)
		if err == nil {
			return nil // data stored in dst.EthStakingActivityDetailExtra, return on the first match
		} else {
			dst.EthStakingActivityDetailExtra = nil
			return fmt.Errorf("failed to unmarshal ActivityExtra as EthStakingActivityDetailExtra: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActivityExtra) MarshalJSON() ([]byte, error) {
	if src.BabylonStakingActivityDetailExtra != nil {
		return json.Marshal(&src.BabylonStakingActivityDetailExtra)
	}

	if src.CoreStakingActivityDetailExtra != nil {
		return json.Marshal(&src.CoreStakingActivityDetailExtra)
	}

	if src.EthStakingActivityDetailExtra != nil {
		return json.Marshal(&src.EthStakingActivityDetailExtra)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActivityExtra) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BabylonStakingActivityDetailExtra != nil {
		return obj.BabylonStakingActivityDetailExtra
	}

	if obj.CoreStakingActivityDetailExtra != nil {
		return obj.CoreStakingActivityDetailExtra
	}

	if obj.EthStakingActivityDetailExtra != nil {
		return obj.EthStakingActivityDetailExtra
	}

	// all schemas are nil
	return nil
}

type NullableActivityExtra struct {
	value *ActivityExtra
	isSet bool
}

func (v NullableActivityExtra) Get() *ActivityExtra {
	return v.value
}

func (v *NullableActivityExtra) Set(val *ActivityExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityExtra(val *ActivityExtra) *NullableActivityExtra {
	return &NullableActivityExtra{value: val, isSet: true}
}

func (v NullableActivityExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


