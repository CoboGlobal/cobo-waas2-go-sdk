/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubWalletAssetBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubWalletAssetBalance{}

// SubWalletAssetBalance The data for sub wallet asset balance information.
type SubWalletAssetBalance struct {
	// The exchange trading account or a sub-wallet ID.
	SubWalletId *string `json:"sub_wallet_id,omitempty"`
	// (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
	AssetId string `json:"asset_id"`
	Balance TokenBalanceBalance `json:"balance"`
}

type _SubWalletAssetBalance SubWalletAssetBalance

// NewSubWalletAssetBalance instantiates a new SubWalletAssetBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubWalletAssetBalance(assetId string, balance TokenBalanceBalance) *SubWalletAssetBalance {
	this := SubWalletAssetBalance{}
	this.AssetId = assetId
	this.Balance = balance
	return &this
}

// NewSubWalletAssetBalanceWithDefaults instantiates a new SubWalletAssetBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubWalletAssetBalanceWithDefaults() *SubWalletAssetBalance {
	this := SubWalletAssetBalance{}
	return &this
}

// GetSubWalletId returns the SubWalletId field value if set, zero value otherwise.
func (o *SubWalletAssetBalance) GetSubWalletId() string {
	if o == nil || IsNil(o.SubWalletId) {
		var ret string
		return ret
	}
	return *o.SubWalletId
}

// GetSubWalletIdOk returns a tuple with the SubWalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubWalletAssetBalance) GetSubWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubWalletId) {
		return nil, false
	}
	return o.SubWalletId, true
}

// HasSubWalletId returns a boolean if a field has been set.
func (o *SubWalletAssetBalance) HasSubWalletId() bool {
	if o != nil && !IsNil(o.SubWalletId) {
		return true
	}

	return false
}

// SetSubWalletId gets a reference to the given string and assigns it to the SubWalletId field.
func (o *SubWalletAssetBalance) SetSubWalletId(v string) {
	o.SubWalletId = &v
}

// GetAssetId returns the AssetId field value
func (o *SubWalletAssetBalance) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *SubWalletAssetBalance) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *SubWalletAssetBalance) SetAssetId(v string) {
	o.AssetId = v
}

// GetBalance returns the Balance field value
func (o *SubWalletAssetBalance) GetBalance() TokenBalanceBalance {
	if o == nil {
		var ret TokenBalanceBalance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *SubWalletAssetBalance) GetBalanceOk() (*TokenBalanceBalance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *SubWalletAssetBalance) SetBalance(v TokenBalanceBalance) {
	o.Balance = v
}

func (o SubWalletAssetBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubWalletAssetBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubWalletId) {
		toSerialize["sub_wallet_id"] = o.SubWalletId
	}
	toSerialize["asset_id"] = o.AssetId
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *SubWalletAssetBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubWalletAssetBalance := _SubWalletAssetBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubWalletAssetBalance)

	if err != nil {
		return err
	}

	*o = SubWalletAssetBalance(varSubWalletAssetBalance)

	return err
}

type NullableSubWalletAssetBalance struct {
	value *SubWalletAssetBalance
	isSet bool
}

func (v NullableSubWalletAssetBalance) Get() *SubWalletAssetBalance {
	return v.value
}

func (v *NullableSubWalletAssetBalance) Set(val *SubWalletAssetBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableSubWalletAssetBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableSubWalletAssetBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubWalletAssetBalance(val *SubWalletAssetBalance) *NullableSubWalletAssetBalance {
	return &NullableSubWalletAssetBalance{value: val, isSet: true}
}

func (v NullableSubWalletAssetBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubWalletAssetBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


