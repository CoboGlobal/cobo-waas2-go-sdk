/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionApprovalResult The transaction approval result. Possible values include:    - `Approved`: The transaction is approved.   - `Rejected`: The transaction is rejected.    - `Pending`: The transaction is pending approval. 
type TransactionApprovalResult string

// List of TransactionApprovalResult
const (
	TRANSACTIONAPPROVALRESULT_APPROVED TransactionApprovalResult = "Approved"
	TRANSACTIONAPPROVALRESULT_REJECTED TransactionApprovalResult = "Rejected"
	TRANSACTIONAPPROVALRESULT_PENDING TransactionApprovalResult = "Pending"
)

// All allowed values of TransactionApprovalResult enum
var AllowedTransactionApprovalResultEnumValues = []TransactionApprovalResult{
	"Approved",
	"Rejected",
	"Pending",
}

func (v *TransactionApprovalResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionApprovalResult(value)
	for _, existing := range AllowedTransactionApprovalResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TransactionApprovalResult("unknown")
	return nil
}

// NewTransactionApprovalResultFromValue returns a pointer to a valid TransactionApprovalResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionApprovalResultFromValue(v string) (*TransactionApprovalResult, error) {
	ev := TransactionApprovalResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionApprovalResult: valid values are %v", v, AllowedTransactionApprovalResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionApprovalResult) IsValid() bool {
	for _, existing := range AllowedTransactionApprovalResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionApprovalResult value
func (v TransactionApprovalResult) Ptr() *TransactionApprovalResult {
	return &v
}

type NullableTransactionApprovalResult struct {
	value *TransactionApprovalResult
	isSet bool
}

func (v NullableTransactionApprovalResult) Get() *TransactionApprovalResult {
	return v.value
}

func (v *NullableTransactionApprovalResult) Set(val *TransactionApprovalResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionApprovalResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionApprovalResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionApprovalResult(val *TransactionApprovalResult) *NullableTransactionApprovalResult {
	return &NullableTransactionApprovalResult{value: val, isSet: true}
}

func (v NullableTransactionApprovalResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionApprovalResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

