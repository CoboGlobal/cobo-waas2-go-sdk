/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionSubStatus The transaction sub-status. For more details, please refer to [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status). 
type TransactionSubStatus string

// List of TransactionSubStatus
const (
	TRANSACTIONSUBSTATUS_REJECTED_KYT TransactionSubStatus = "RejectedKYT"
	TRANSACTIONSUBSTATUS_PENDING_DOUBLE_CHECK TransactionSubStatus = "PendingDoubleCheck"
	TRANSACTIONSUBSTATUS_PENDING_SPENDER_CHECK TransactionSubStatus = "PendingSpenderCheck"
	TRANSACTIONSUBSTATUS_PENDING_RISK_CONTROL_CHECK TransactionSubStatus = "PendingRiskControlCheck"
	TRANSACTIONSUBSTATUS_PENDING_APPROVER_CHECK TransactionSubStatus = "PendingApproverCheck"
	TRANSACTIONSUBSTATUS_REJECTED_COBO_CHECK TransactionSubStatus = "RejectedCoboCheck"
	TRANSACTIONSUBSTATUS_REJECTED_WHITE_LIST TransactionSubStatus = "RejectedWhiteList"
	TRANSACTIONSUBSTATUS_REJECTED_DOUBLE_CHECK TransactionSubStatus = "RejectedDoubleCheck"
	TRANSACTIONSUBSTATUS_REJECTED_SPENDER_AUTH TransactionSubStatus = "RejectedSpenderAuth"
	TRANSACTIONSUBSTATUS_REJECTED_RISK_CONTROL_CHECK TransactionSubStatus = "RejectedRiskControlCheck"
	TRANSACTIONSUBSTATUS_REJECTED_APPROVER_AUTH TransactionSubStatus = "RejectedApproverAuth"
	TRANSACTIONSUBSTATUS_REJECTEDBY_MOBILE_COSIGNER TransactionSubStatus = "RejectedbyMobileCosigner"
	TRANSACTIONSUBSTATUS_BUILT TransactionSubStatus = "Built"
	TRANSACTIONSUBSTATUS_PENDING_WAIT_SIGNER TransactionSubStatus = "PendingWaitSigner"
	TRANSACTIONSUBSTATUS_PENDING_APPROVAL_START TransactionSubStatus = "PendingApprovalStart"
	TRANSACTIONSUBSTATUS_PENDING_SIGNER_APPROVAL TransactionSubStatus = "PendingSignerApproval"
	TRANSACTIONSUBSTATUS_PENDING_SIGNER_PROCESSING TransactionSubStatus = "PendingSignerProcessing"
	TRANSACTIONSUBSTATUS_REJECTED_BY_SIGNER TransactionSubStatus = "RejectedBySigner"
	TRANSACTIONSUBSTATUS_FAILED_BY_SIGNER TransactionSubStatus = "FailedBySigner"
	TRANSACTIONSUBSTATUS_FAILED_SIGNER_TIMEOUT TransactionSubStatus = "FailedSignerTimeout"
	TRANSACTIONSUBSTATUS_FAILED_BROADCASTING TransactionSubStatus = "FailedBroadcasting"
	TRANSACTIONSUBSTATUS_FAILED_ON_CHAIN TransactionSubStatus = "FailedOnChain"
	TRANSACTIONSUBSTATUS_REVERTING TransactionSubStatus = "Reverting"
	TRANSACTIONSUBSTATUS_QUEUE TransactionSubStatus = "Queue"
	TRANSACTIONSUBSTATUS_INSUFFICIENT_BALANCE TransactionSubStatus = "InsufficientBalance"
	TRANSACTIONSUBSTATUS_INSUFFICIENT_BALANCE_FUND_LOCKED TransactionSubStatus = "InsufficientBalanceFundLocked"
	TRANSACTIONSUBSTATUS_PENDING_SYSTEM_PROCESSING TransactionSubStatus = "PendingSystemProcessing"
	TRANSACTIONSUBSTATUS_SYSTEM_PROCESSING_ONGOING TransactionSubStatus = "SystemProcessingOngoing"
	TRANSACTIONSUBSTATUS_PENDING_BLOCK_CONFIRMATIONS TransactionSubStatus = "PendingBlockConfirmations"
	TRANSACTIONSUBSTATUS_RE_ORGED TransactionSubStatus = "ReOrged"
	TRANSACTIONSUBSTATUS_REPLACED_BY_NEW_TRANSACTION TransactionSubStatus = "ReplacedByNewTransaction"
	TRANSACTIONSUBSTATUS_CANCELED_BY_SPENDER TransactionSubStatus = "CanceledBySpender"
	TRANSACTIONSUBSTATUS_CANCELED_BY_API TransactionSubStatus = "CanceledByAPI"
	TRANSACTIONSUBSTATUS_ONCHAIN_REJECTION TransactionSubStatus = "OnchainRejection"
	TRANSACTIONSUBSTATUS_REJECTED_TRAVEL_RULE TransactionSubStatus = "RejectedTravelRule"
	TRANSACTIONSUBSTATUS_REJECTED_TRAVEL_RULE_DUE_TO_COMPLIANCE TransactionSubStatus = "RejectedTravelRuleDueToCompliance"
	TRANSACTIONSUBSTATUS_PENDING_TRAVEL_RULE_INFO TransactionSubStatus = "PendingTravelRuleInfo"
	TRANSACTIONSUBSTATUS_PENDING_TRAVEL_RULE_CHECK TransactionSubStatus = "PendingTravelRuleCheck"
	TRANSACTIONSUBSTATUS_REJECTED_TRAVEL_RULE_DUE_TO_UNSUPPORTED_TOKEN TransactionSubStatus = "RejectedTravelRuleDueToUnsupportedToken"
	TRANSACTIONSUBSTATUS_SIGNATURE_VERIFICATION_SUCCESS TransactionSubStatus = "SignatureVerificationSuccess"
	TRANSACTIONSUBSTATUS_SIGNATURE_VERIFICATION_FAILED TransactionSubStatus = "SignatureVerificationFailed"
	TRANSACTIONSUBSTATUS_PENDING_COBO_CHECK TransactionSubStatus = "PendingCoboCheck"
	TRANSACTIONSUBSTATUS_REJECTED_TRANSACTION_POLICY TransactionSubStatus = "RejectedTransactionPolicy"
	TRANSACTIONSUBSTATUS_REJECTED_BY_SCREENING_APP TransactionSubStatus = "RejectedByScreeningApp"
	TRANSACTIONSUBSTATUS_PENDING_SCREENING_APP_CHECK TransactionSubStatus = "PendingScreeningAppCheck"
	TRANSACTIONSUBSTATUS_PENDING_COBO_TRAVEL_RULE_CHECK TransactionSubStatus = "PendingCoboTravelRuleCheck"
)

// All allowed values of TransactionSubStatus enum
var AllowedTransactionSubStatusEnumValues = []TransactionSubStatus{
	"RejectedKYT",
	"PendingDoubleCheck",
	"PendingSpenderCheck",
	"PendingRiskControlCheck",
	"PendingApproverCheck",
	"RejectedCoboCheck",
	"RejectedWhiteList",
	"RejectedDoubleCheck",
	"RejectedSpenderAuth",
	"RejectedRiskControlCheck",
	"RejectedApproverAuth",
	"RejectedbyMobileCosigner",
	"Built",
	"PendingWaitSigner",
	"PendingApprovalStart",
	"PendingSignerApproval",
	"PendingSignerProcessing",
	"RejectedBySigner",
	"FailedBySigner",
	"FailedSignerTimeout",
	"FailedBroadcasting",
	"FailedOnChain",
	"Reverting",
	"Queue",
	"InsufficientBalance",
	"InsufficientBalanceFundLocked",
	"PendingSystemProcessing",
	"SystemProcessingOngoing",
	"PendingBlockConfirmations",
	"ReOrged",
	"ReplacedByNewTransaction",
	"CanceledBySpender",
	"CanceledByAPI",
	"OnchainRejection",
	"RejectedTravelRule",
	"RejectedTravelRuleDueToCompliance",
	"PendingTravelRuleInfo",
	"PendingTravelRuleCheck",
	"RejectedTravelRuleDueToUnsupportedToken",
	"SignatureVerificationSuccess",
	"SignatureVerificationFailed",
	"PendingCoboCheck",
	"RejectedTransactionPolicy",
	"RejectedByScreeningApp",
	"PendingScreeningAppCheck",
	"PendingCoboTravelRuleCheck",
}

func (v *TransactionSubStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionSubStatus(value)
	for _, existing := range AllowedTransactionSubStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TransactionSubStatus("unknown")
	return nil
}

// NewTransactionSubStatusFromValue returns a pointer to a valid TransactionSubStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionSubStatusFromValue(v string) (*TransactionSubStatus, error) {
	ev := TransactionSubStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionSubStatus: valid values are %v", v, AllowedTransactionSubStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionSubStatus) IsValid() bool {
	for _, existing := range AllowedTransactionSubStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionSubStatus value
func (v TransactionSubStatus) Ptr() *TransactionSubStatus {
	return &v
}

type NullableTransactionSubStatus struct {
	value *TransactionSubStatus
	isSet bool
}

func (v NullableTransactionSubStatus) Get() *TransactionSubStatus {
	return v.value
}

func (v *NullableTransactionSubStatus) Set(val *TransactionSubStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSubStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSubStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSubStatus(val *TransactionSubStatus) *NullableTransactionSubStatus {
	return &NullableTransactionSubStatus{value: val, isSet: true}
}

func (v NullableTransactionSubStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSubStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

