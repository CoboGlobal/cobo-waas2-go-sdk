/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EthStakeExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthStakeExtra{}

// EthStakeExtra struct for EthStakeExtra
type EthStakeExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The name of the provider.
	ProviderName string `json:"provider_name"`
}

type _EthStakeExtra EthStakeExtra

// NewEthStakeExtra instantiates a new EthStakeExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthStakeExtra(poolType StakingPoolType, providerName string) *EthStakeExtra {
	this := EthStakeExtra{}
	this.PoolType = poolType
	this.ProviderName = providerName
	return &this
}

// NewEthStakeExtraWithDefaults instantiates a new EthStakeExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthStakeExtraWithDefaults() *EthStakeExtra {
	this := EthStakeExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *EthStakeExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *EthStakeExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *EthStakeExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetProviderName returns the ProviderName field value
func (o *EthStakeExtra) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *EthStakeExtra) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *EthStakeExtra) SetProviderName(v string) {
	o.ProviderName = v
}

func (o EthStakeExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthStakeExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	toSerialize["provider_name"] = o.ProviderName
	return toSerialize, nil
}

func (o *EthStakeExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"provider_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthStakeExtra := _EthStakeExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEthStakeExtra)

	if err != nil {
		return err
	}

	*o = EthStakeExtra(varEthStakeExtra)

	return err
}

type NullableEthStakeExtra struct {
	value *EthStakeExtra
	isSet bool
}

func (v NullableEthStakeExtra) Get() *EthStakeExtra {
	return v.value
}

func (v *NullableEthStakeExtra) Set(val *EthStakeExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableEthStakeExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableEthStakeExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthStakeExtra(val *EthStakeExtra) *NullableEthStakeExtra {
	return &NullableEthStakeExtra{value: val, isSet: true}
}

func (v NullableEthStakeExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthStakeExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


