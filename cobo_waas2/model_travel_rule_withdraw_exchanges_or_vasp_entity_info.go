/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TravelRuleWithdrawExchangesOrVASPEntityInfo - struct for TravelRuleWithdrawExchangesOrVASPEntityInfo
type TravelRuleWithdrawExchangesOrVASPEntityInfo struct {
	TravelRuleWithdrawLegalEntity *TravelRuleWithdrawLegalEntity
	TravelRuleWithdrawNaturalEntity *TravelRuleWithdrawNaturalEntity
}

// TravelRuleWithdrawLegalEntityAsTravelRuleWithdrawExchangesOrVASPEntityInfo is a convenience function that returns TravelRuleWithdrawLegalEntity wrapped in TravelRuleWithdrawExchangesOrVASPEntityInfo
func TravelRuleWithdrawLegalEntityAsTravelRuleWithdrawExchangesOrVASPEntityInfo(v *TravelRuleWithdrawLegalEntity) TravelRuleWithdrawExchangesOrVASPEntityInfo {
	return TravelRuleWithdrawExchangesOrVASPEntityInfo{
		TravelRuleWithdrawLegalEntity: v,
	}
}

// TravelRuleWithdrawNaturalEntityAsTravelRuleWithdrawExchangesOrVASPEntityInfo is a convenience function that returns TravelRuleWithdrawNaturalEntity wrapped in TravelRuleWithdrawExchangesOrVASPEntityInfo
func TravelRuleWithdrawNaturalEntityAsTravelRuleWithdrawExchangesOrVASPEntityInfo(v *TravelRuleWithdrawNaturalEntity) TravelRuleWithdrawExchangesOrVASPEntityInfo {
	return TravelRuleWithdrawExchangesOrVASPEntityInfo{
		TravelRuleWithdrawNaturalEntity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TravelRuleWithdrawExchangesOrVASPEntityInfo) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'LEGAL'
	if jsonDict["selected_entity_type"] == "LEGAL" {
		// try to unmarshal JSON data into TravelRuleWithdrawLegalEntity
		err = json.Unmarshal(data, &dst.TravelRuleWithdrawLegalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleWithdrawLegalEntity, return on the first match
		} else {
			dst.TravelRuleWithdrawLegalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleWithdrawExchangesOrVASPEntityInfo as TravelRuleWithdrawLegalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NATURAL'
	if jsonDict["selected_entity_type"] == "NATURAL" {
		// try to unmarshal JSON data into TravelRuleWithdrawNaturalEntity
		err = json.Unmarshal(data, &dst.TravelRuleWithdrawNaturalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleWithdrawNaturalEntity, return on the first match
		} else {
			dst.TravelRuleWithdrawNaturalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleWithdrawExchangesOrVASPEntityInfo as TravelRuleWithdrawNaturalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TravelRuleWithdrawLegalEntity'
	if jsonDict["selected_entity_type"] == "TravelRuleWithdrawLegalEntity" {
		// try to unmarshal JSON data into TravelRuleWithdrawLegalEntity
		err = json.Unmarshal(data, &dst.TravelRuleWithdrawLegalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleWithdrawLegalEntity, return on the first match
		} else {
			dst.TravelRuleWithdrawLegalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleWithdrawExchangesOrVASPEntityInfo as TravelRuleWithdrawLegalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TravelRuleWithdrawNaturalEntity'
	if jsonDict["selected_entity_type"] == "TravelRuleWithdrawNaturalEntity" {
		// try to unmarshal JSON data into TravelRuleWithdrawNaturalEntity
		err = json.Unmarshal(data, &dst.TravelRuleWithdrawNaturalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleWithdrawNaturalEntity, return on the first match
		} else {
			dst.TravelRuleWithdrawNaturalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleWithdrawExchangesOrVASPEntityInfo as TravelRuleWithdrawNaturalEntity: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TravelRuleWithdrawExchangesOrVASPEntityInfo) MarshalJSON() ([]byte, error) {
	if src.TravelRuleWithdrawLegalEntity != nil {
		return json.Marshal(&src.TravelRuleWithdrawLegalEntity)
	}

	if src.TravelRuleWithdrawNaturalEntity != nil {
		return json.Marshal(&src.TravelRuleWithdrawNaturalEntity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TravelRuleWithdrawExchangesOrVASPEntityInfo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TravelRuleWithdrawLegalEntity != nil {
		return obj.TravelRuleWithdrawLegalEntity
	}

	if obj.TravelRuleWithdrawNaturalEntity != nil {
		return obj.TravelRuleWithdrawNaturalEntity
	}

	// all schemas are nil
	return nil
}

type NullableTravelRuleWithdrawExchangesOrVASPEntityInfo struct {
	value *TravelRuleWithdrawExchangesOrVASPEntityInfo
	isSet bool
}

func (v NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) Get() *TravelRuleWithdrawExchangesOrVASPEntityInfo {
	return v.value
}

func (v *NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) Set(val *TravelRuleWithdrawExchangesOrVASPEntityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTravelRuleWithdrawExchangesOrVASPEntityInfo(val *TravelRuleWithdrawExchangesOrVASPEntityInfo) *NullableTravelRuleWithdrawExchangesOrVASPEntityInfo {
	return &NullableTravelRuleWithdrawExchangesOrVASPEntityInfo{value: val, isSet: true}
}

func (v NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTravelRuleWithdrawExchangesOrVASPEntityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


