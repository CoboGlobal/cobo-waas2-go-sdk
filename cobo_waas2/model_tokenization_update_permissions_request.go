/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationUpdatePermissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationUpdatePermissionsRequest{}

// TokenizationUpdatePermissionsRequest struct for TokenizationUpdatePermissionsRequest
type TokenizationUpdatePermissionsRequest struct {
	Source TokenizationTokenOperationSource `json:"source"`
	Action TokenizationPermissionAction `json:"action"`
	// The address to manage permissions for.
	Address string `json:"address"`
	// The list of permissions to operate on.
	Permissions []TokenizationTokenPermissionType `json:"permissions"`
	// The initiator of the tokenization activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.
	AppInitiator *string `json:"app_initiator,omitempty"`
	Fee TransactionRequestFee `json:"fee"`
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
}

type _TokenizationUpdatePermissionsRequest TokenizationUpdatePermissionsRequest

// NewTokenizationUpdatePermissionsRequest instantiates a new TokenizationUpdatePermissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationUpdatePermissionsRequest(source TokenizationTokenOperationSource, action TokenizationPermissionAction, address string, permissions []TokenizationTokenPermissionType, fee TransactionRequestFee) *TokenizationUpdatePermissionsRequest {
	this := TokenizationUpdatePermissionsRequest{}
	this.Source = source
	this.Action = action
	this.Address = address
	this.Permissions = permissions
	this.Fee = fee
	return &this
}

// NewTokenizationUpdatePermissionsRequestWithDefaults instantiates a new TokenizationUpdatePermissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationUpdatePermissionsRequestWithDefaults() *TokenizationUpdatePermissionsRequest {
	this := TokenizationUpdatePermissionsRequest{}
	return &this
}

// GetSource returns the Source field value
func (o *TokenizationUpdatePermissionsRequest) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationUpdatePermissionsRequest) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetAction returns the Action field value
func (o *TokenizationUpdatePermissionsRequest) GetAction() TokenizationPermissionAction {
	if o == nil {
		var ret TokenizationPermissionAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetActionOk() (*TokenizationPermissionAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *TokenizationUpdatePermissionsRequest) SetAction(v TokenizationPermissionAction) {
	o.Action = v
}

// GetAddress returns the Address field value
func (o *TokenizationUpdatePermissionsRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenizationUpdatePermissionsRequest) SetAddress(v string) {
	o.Address = v
}

// GetPermissions returns the Permissions field value
func (o *TokenizationUpdatePermissionsRequest) GetPermissions() []TokenizationTokenPermissionType {
	if o == nil {
		var ret []TokenizationTokenPermissionType
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetPermissionsOk() ([]TokenizationTokenPermissionType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *TokenizationUpdatePermissionsRequest) SetPermissions(v []TokenizationTokenPermissionType) {
	o.Permissions = v
}

// GetAppInitiator returns the AppInitiator field value if set, zero value otherwise.
func (o *TokenizationUpdatePermissionsRequest) GetAppInitiator() string {
	if o == nil || IsNil(o.AppInitiator) {
		var ret string
		return ret
	}
	return *o.AppInitiator
}

// GetAppInitiatorOk returns a tuple with the AppInitiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetAppInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.AppInitiator) {
		return nil, false
	}
	return o.AppInitiator, true
}

// HasAppInitiator returns a boolean if a field has been set.
func (o *TokenizationUpdatePermissionsRequest) HasAppInitiator() bool {
	if o != nil && !IsNil(o.AppInitiator) {
		return true
	}

	return false
}

// SetAppInitiator gets a reference to the given string and assigns it to the AppInitiator field.
func (o *TokenizationUpdatePermissionsRequest) SetAppInitiator(v string) {
	o.AppInitiator = &v
}

// GetFee returns the Fee field value
func (o *TokenizationUpdatePermissionsRequest) GetFee() TransactionRequestFee {
	if o == nil {
		var ret TransactionRequestFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetFeeOk() (*TransactionRequestFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *TokenizationUpdatePermissionsRequest) SetFee(v TransactionRequestFee) {
	o.Fee = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TokenizationUpdatePermissionsRequest) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationUpdatePermissionsRequest) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TokenizationUpdatePermissionsRequest) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TokenizationUpdatePermissionsRequest) SetRequestId(v string) {
	o.RequestId = &v
}

func (o TokenizationUpdatePermissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationUpdatePermissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["action"] = o.Action
	toSerialize["address"] = o.Address
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.AppInitiator) {
		toSerialize["app_initiator"] = o.AppInitiator
	}
	toSerialize["fee"] = o.Fee
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	return toSerialize, nil
}

func (o *TokenizationUpdatePermissionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"action",
		"address",
		"permissions",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationUpdatePermissionsRequest := _TokenizationUpdatePermissionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationUpdatePermissionsRequest)

	if err != nil {
		return err
	}

	*o = TokenizationUpdatePermissionsRequest(varTokenizationUpdatePermissionsRequest)

	return err
}

type NullableTokenizationUpdatePermissionsRequest struct {
	value *TokenizationUpdatePermissionsRequest
	isSet bool
}

func (v NullableTokenizationUpdatePermissionsRequest) Get() *TokenizationUpdatePermissionsRequest {
	return v.value
}

func (v *NullableTokenizationUpdatePermissionsRequest) Set(val *TokenizationUpdatePermissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationUpdatePermissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationUpdatePermissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationUpdatePermissionsRequest(val *TokenizationUpdatePermissionsRequest) *NullableTokenizationUpdatePermissionsRequest {
	return &NullableTokenizationUpdatePermissionsRequest{value: val, isSet: true}
}

func (v NullableTokenizationUpdatePermissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationUpdatePermissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


