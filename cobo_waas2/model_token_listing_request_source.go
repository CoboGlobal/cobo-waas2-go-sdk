/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenListingRequestSource Source of the token listing request
type TokenListingRequestSource string

// List of TokenListingRequestSource
const (
	TOKENLISTINGREQUESTSOURCE_API TokenListingRequestSource = "API"
	TOKENLISTINGREQUESTSOURCE_ADMIN TokenListingRequestSource = "Admin"
)

// All allowed values of TokenListingRequestSource enum
var AllowedTokenListingRequestSourceEnumValues = []TokenListingRequestSource{
	"API",
	"Admin",
}

func (v *TokenListingRequestSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenListingRequestSource(value)
	for _, existing := range AllowedTokenListingRequestSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = TokenListingRequestSource("unknown")
    return nil
}

// NewTokenListingRequestSourceFromValue returns a pointer to a valid TokenListingRequestSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenListingRequestSourceFromValue(v string) (*TokenListingRequestSource, error) {
	ev := TokenListingRequestSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenListingRequestSource: valid values are %v", v, AllowedTokenListingRequestSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenListingRequestSource) IsValid() bool {
	for _, existing := range AllowedTokenListingRequestSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenListingRequestSource value
func (v TokenListingRequestSource) Ptr() *TokenListingRequestSource {
	return &v
}

type NullableTokenListingRequestSource struct {
	value *TokenListingRequestSource
	isSet bool
}

func (v NullableTokenListingRequestSource) Get() *TokenListingRequestSource {
	return v.value
}

func (v *NullableTokenListingRequestSource) Set(val *TokenListingRequestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenListingRequestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenListingRequestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenListingRequestSource(val *TokenListingRequestSource) *NullableTokenListingRequestSource {
	return &NullableTokenListingRequestSource{value: val, isSet: true}
}

func (v NullableTokenListingRequestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenListingRequestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

