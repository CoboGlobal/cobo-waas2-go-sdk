/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateRefundByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRefundByIdRequest{}

// UpdateRefundByIdRequest struct for UpdateRefundByIdRequest
type UpdateRefundByIdRequest struct {
	// The address where the refunded cryptocurrency will be sent.
	ToAddress string `json:"to_address"`
}

type _UpdateRefundByIdRequest UpdateRefundByIdRequest

// NewUpdateRefundByIdRequest instantiates a new UpdateRefundByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRefundByIdRequest(toAddress string) *UpdateRefundByIdRequest {
	this := UpdateRefundByIdRequest{}
	this.ToAddress = toAddress
	return &this
}

// NewUpdateRefundByIdRequestWithDefaults instantiates a new UpdateRefundByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRefundByIdRequestWithDefaults() *UpdateRefundByIdRequest {
	this := UpdateRefundByIdRequest{}
	return &this
}

// GetToAddress returns the ToAddress field value
func (o *UpdateRefundByIdRequest) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *UpdateRefundByIdRequest) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *UpdateRefundByIdRequest) SetToAddress(v string) {
	o.ToAddress = v
}

func (o UpdateRefundByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRefundByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to_address"] = o.ToAddress
	return toSerialize, nil
}

func (o *UpdateRefundByIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRefundByIdRequest := _UpdateRefundByIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateRefundByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateRefundByIdRequest(varUpdateRefundByIdRequest)

	return err
}

type NullableUpdateRefundByIdRequest struct {
	value *UpdateRefundByIdRequest
	isSet bool
}

func (v NullableUpdateRefundByIdRequest) Get() *UpdateRefundByIdRequest {
	return v.value
}

func (v *NullableUpdateRefundByIdRequest) Set(val *UpdateRefundByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRefundByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRefundByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRefundByIdRequest(val *UpdateRefundByIdRequest) *NullableUpdateRefundByIdRequest {
	return &NullableUpdateRefundByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateRefundByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRefundByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


