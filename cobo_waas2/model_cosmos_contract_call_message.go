/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CosmosContractCallMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CosmosContractCallMessage{}

// CosmosContractCallMessage The information about the Cosmos message.
type CosmosContractCallMessage struct {
	// The type URL of the Cosmos message. 
	TypeUrl string `json:"type_url"`
	// The Base64-encoded Cosmos message. 
	Message string `json:"message"`
}

type _CosmosContractCallMessage CosmosContractCallMessage

// NewCosmosContractCallMessage instantiates a new CosmosContractCallMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCosmosContractCallMessage(typeUrl string, message string) *CosmosContractCallMessage {
	this := CosmosContractCallMessage{}
	this.TypeUrl = typeUrl
	this.Message = message
	return &this
}

// NewCosmosContractCallMessageWithDefaults instantiates a new CosmosContractCallMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCosmosContractCallMessageWithDefaults() *CosmosContractCallMessage {
	this := CosmosContractCallMessage{}
	return &this
}

// GetTypeUrl returns the TypeUrl field value
func (o *CosmosContractCallMessage) GetTypeUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeUrl
}

// GetTypeUrlOk returns a tuple with the TypeUrl field value
// and a boolean to check if the value has been set.
func (o *CosmosContractCallMessage) GetTypeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeUrl, true
}

// SetTypeUrl sets field value
func (o *CosmosContractCallMessage) SetTypeUrl(v string) {
	o.TypeUrl = v
}

// GetMessage returns the Message field value
func (o *CosmosContractCallMessage) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CosmosContractCallMessage) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CosmosContractCallMessage) SetMessage(v string) {
	o.Message = v
}

func (o CosmosContractCallMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CosmosContractCallMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type_url"] = o.TypeUrl
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *CosmosContractCallMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type_url",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCosmosContractCallMessage := _CosmosContractCallMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCosmosContractCallMessage)

	if err != nil {
		return err
	}

	*o = CosmosContractCallMessage(varCosmosContractCallMessage)

	return err
}

type NullableCosmosContractCallMessage struct {
	value *CosmosContractCallMessage
	isSet bool
}

func (v NullableCosmosContractCallMessage) Get() *CosmosContractCallMessage {
	return v.value
}

func (v *NullableCosmosContractCallMessage) Set(val *CosmosContractCallMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableCosmosContractCallMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableCosmosContractCallMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCosmosContractCallMessage(val *CosmosContractCallMessage) *NullableCosmosContractCallMessage {
	return &NullableCosmosContractCallMessage{value: val, isSet: true}
}

func (v NullableCosmosContractCallMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCosmosContractCallMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


