/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentApproveSubscriptionActionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentApproveSubscriptionActionData{}

// PaymentApproveSubscriptionActionData struct for PaymentApproveSubscriptionActionData
type PaymentApproveSubscriptionActionData struct {
	ActionType PaymentSubscriptionActionType `json:"action_type"`
	// The subscription id in cobo.
	SubscriptionId string `json:"subscription_id"`
	// The signature of permit.
	PermitData *string `json:"permit_data,omitempty"`
}

type _PaymentApproveSubscriptionActionData PaymentApproveSubscriptionActionData

// NewPaymentApproveSubscriptionActionData instantiates a new PaymentApproveSubscriptionActionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentApproveSubscriptionActionData(actionType PaymentSubscriptionActionType, subscriptionId string) *PaymentApproveSubscriptionActionData {
	this := PaymentApproveSubscriptionActionData{}
	this.ActionType = actionType
	this.SubscriptionId = subscriptionId
	return &this
}

// NewPaymentApproveSubscriptionActionDataWithDefaults instantiates a new PaymentApproveSubscriptionActionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentApproveSubscriptionActionDataWithDefaults() *PaymentApproveSubscriptionActionData {
	this := PaymentApproveSubscriptionActionData{}
	return &this
}

// GetActionType returns the ActionType field value
func (o *PaymentApproveSubscriptionActionData) GetActionType() PaymentSubscriptionActionType {
	if o == nil {
		var ret PaymentSubscriptionActionType
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *PaymentApproveSubscriptionActionData) GetActionTypeOk() (*PaymentSubscriptionActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *PaymentApproveSubscriptionActionData) SetActionType(v PaymentSubscriptionActionType) {
	o.ActionType = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *PaymentApproveSubscriptionActionData) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *PaymentApproveSubscriptionActionData) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *PaymentApproveSubscriptionActionData) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetPermitData returns the PermitData field value if set, zero value otherwise.
func (o *PaymentApproveSubscriptionActionData) GetPermitData() string {
	if o == nil || IsNil(o.PermitData) {
		var ret string
		return ret
	}
	return *o.PermitData
}

// GetPermitDataOk returns a tuple with the PermitData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentApproveSubscriptionActionData) GetPermitDataOk() (*string, bool) {
	if o == nil || IsNil(o.PermitData) {
		return nil, false
	}
	return o.PermitData, true
}

// HasPermitData returns a boolean if a field has been set.
func (o *PaymentApproveSubscriptionActionData) HasPermitData() bool {
	if o != nil && !IsNil(o.PermitData) {
		return true
	}

	return false
}

// SetPermitData gets a reference to the given string and assigns it to the PermitData field.
func (o *PaymentApproveSubscriptionActionData) SetPermitData(v string) {
	o.PermitData = &v
}

func (o PaymentApproveSubscriptionActionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentApproveSubscriptionActionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action_type"] = o.ActionType
	toSerialize["subscription_id"] = o.SubscriptionId
	if !IsNil(o.PermitData) {
		toSerialize["permit_data"] = o.PermitData
	}
	return toSerialize, nil
}

func (o *PaymentApproveSubscriptionActionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action_type",
		"subscription_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentApproveSubscriptionActionData := _PaymentApproveSubscriptionActionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentApproveSubscriptionActionData)

	if err != nil {
		return err
	}

	*o = PaymentApproveSubscriptionActionData(varPaymentApproveSubscriptionActionData)

	return err
}

type NullablePaymentApproveSubscriptionActionData struct {
	value *PaymentApproveSubscriptionActionData
	isSet bool
}

func (v NullablePaymentApproveSubscriptionActionData) Get() *PaymentApproveSubscriptionActionData {
	return v.value
}

func (v *NullablePaymentApproveSubscriptionActionData) Set(val *PaymentApproveSubscriptionActionData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentApproveSubscriptionActionData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentApproveSubscriptionActionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentApproveSubscriptionActionData(val *PaymentApproveSubscriptionActionData) *NullablePaymentApproveSubscriptionActionData {
	return &NullablePaymentApproveSubscriptionActionData{value: val, isSet: true}
}

func (v NullablePaymentApproveSubscriptionActionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentApproveSubscriptionActionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


