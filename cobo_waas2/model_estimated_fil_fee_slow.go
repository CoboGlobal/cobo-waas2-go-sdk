/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimatedFILFeeSlow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedFILFeeSlow{}

// EstimatedFILFeeSlow struct for EstimatedFILFeeSlow
type EstimatedFILFeeSlow struct {
	// An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
	GasPremium string `json:"gas_premium"`
	// The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
	GasFeeCap string `json:"gas_fee_cap"`
	// This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
	GasLimit string `json:"gas_limit"`
	// This is the minimum fee required to include a transaction in a block. It is determined by the network's congestion level, which adjusts to maintain a target block utilization rate. The base fee is burned, reducing the total supply of Filecoin over time.
	GasBase string `json:"gas_base"`
}

type _EstimatedFILFeeSlow EstimatedFILFeeSlow

// NewEstimatedFILFeeSlow instantiates a new EstimatedFILFeeSlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedFILFeeSlow(gasPremium string, gasFeeCap string, gasLimit string, gasBase string) *EstimatedFILFeeSlow {
	this := EstimatedFILFeeSlow{}
	this.GasPremium = gasPremium
	this.GasFeeCap = gasFeeCap
	this.GasLimit = gasLimit
	this.GasBase = gasBase
	return &this
}

// NewEstimatedFILFeeSlowWithDefaults instantiates a new EstimatedFILFeeSlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedFILFeeSlowWithDefaults() *EstimatedFILFeeSlow {
	this := EstimatedFILFeeSlow{}
	return &this
}

// GetGasPremium returns the GasPremium field value
func (o *EstimatedFILFeeSlow) GetGasPremium() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasPremium
}

// GetGasPremiumOk returns a tuple with the GasPremium field value
// and a boolean to check if the value has been set.
func (o *EstimatedFILFeeSlow) GetGasPremiumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPremium, true
}

// SetGasPremium sets field value
func (o *EstimatedFILFeeSlow) SetGasPremium(v string) {
	o.GasPremium = v
}

// GetGasFeeCap returns the GasFeeCap field value
func (o *EstimatedFILFeeSlow) GetGasFeeCap() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasFeeCap
}

// GetGasFeeCapOk returns a tuple with the GasFeeCap field value
// and a boolean to check if the value has been set.
func (o *EstimatedFILFeeSlow) GetGasFeeCapOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasFeeCap, true
}

// SetGasFeeCap sets field value
func (o *EstimatedFILFeeSlow) SetGasFeeCap(v string) {
	o.GasFeeCap = v
}

// GetGasLimit returns the GasLimit field value
func (o *EstimatedFILFeeSlow) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *EstimatedFILFeeSlow) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *EstimatedFILFeeSlow) SetGasLimit(v string) {
	o.GasLimit = v
}

// GetGasBase returns the GasBase field value
func (o *EstimatedFILFeeSlow) GetGasBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasBase
}

// GetGasBaseOk returns a tuple with the GasBase field value
// and a boolean to check if the value has been set.
func (o *EstimatedFILFeeSlow) GetGasBaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasBase, true
}

// SetGasBase sets field value
func (o *EstimatedFILFeeSlow) SetGasBase(v string) {
	o.GasBase = v
}

func (o EstimatedFILFeeSlow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedFILFeeSlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gas_premium"] = o.GasPremium
	toSerialize["gas_fee_cap"] = o.GasFeeCap
	toSerialize["gas_limit"] = o.GasLimit
	toSerialize["gas_base"] = o.GasBase
	return toSerialize, nil
}

func (o *EstimatedFILFeeSlow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gas_premium",
		"gas_fee_cap",
		"gas_limit",
		"gas_base",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimatedFILFeeSlow := _EstimatedFILFeeSlow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimatedFILFeeSlow)

	if err != nil {
		return err
	}

	*o = EstimatedFILFeeSlow(varEstimatedFILFeeSlow)

	return err
}

type NullableEstimatedFILFeeSlow struct {
	value *EstimatedFILFeeSlow
	isSet bool
}

func (v NullableEstimatedFILFeeSlow) Get() *EstimatedFILFeeSlow {
	return v.value
}

func (v *NullableEstimatedFILFeeSlow) Set(val *EstimatedFILFeeSlow) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedFILFeeSlow) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedFILFeeSlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedFILFeeSlow(val *EstimatedFILFeeSlow) *NullableEstimatedFILFeeSlow {
	return &NullableEstimatedFILFeeSlow{value: val, isSet: true}
}

func (v NullableEstimatedFILFeeSlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedFILFeeSlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


