/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BTCEIP191MessageSignDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BTCEIP191MessageSignDestination{}

// BTCEIP191MessageSignDestination The information about the destination `BTC_EIP_191_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
type BTCEIP191MessageSignDestination struct {
	DestinationType MessageSignDestinationType `json:"destination_type"`
	// The raw data of the message to be signed, encoded in Base64 format.
	Message string `json:"message"`
}

type _BTCEIP191MessageSignDestination BTCEIP191MessageSignDestination

// NewBTCEIP191MessageSignDestination instantiates a new BTCEIP191MessageSignDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTCEIP191MessageSignDestination(destinationType MessageSignDestinationType, message string) *BTCEIP191MessageSignDestination {
	this := BTCEIP191MessageSignDestination{}
	this.DestinationType = destinationType
	this.Message = message
	return &this
}

// NewBTCEIP191MessageSignDestinationWithDefaults instantiates a new BTCEIP191MessageSignDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTCEIP191MessageSignDestinationWithDefaults() *BTCEIP191MessageSignDestination {
	this := BTCEIP191MessageSignDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *BTCEIP191MessageSignDestination) GetDestinationType() MessageSignDestinationType {
	if o == nil {
		var ret MessageSignDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *BTCEIP191MessageSignDestination) GetDestinationTypeOk() (*MessageSignDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *BTCEIP191MessageSignDestination) SetDestinationType(v MessageSignDestinationType) {
	o.DestinationType = v
}

// GetMessage returns the Message field value
func (o *BTCEIP191MessageSignDestination) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *BTCEIP191MessageSignDestination) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *BTCEIP191MessageSignDestination) SetMessage(v string) {
	o.Message = v
}

func (o BTCEIP191MessageSignDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BTCEIP191MessageSignDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *BTCEIP191MessageSignDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBTCEIP191MessageSignDestination := _BTCEIP191MessageSignDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBTCEIP191MessageSignDestination)

	if err != nil {
		return err
	}

	*o = BTCEIP191MessageSignDestination(varBTCEIP191MessageSignDestination)

	return err
}

type NullableBTCEIP191MessageSignDestination struct {
	value *BTCEIP191MessageSignDestination
	isSet bool
}

func (v NullableBTCEIP191MessageSignDestination) Get() *BTCEIP191MessageSignDestination {
	return v.value
}

func (v *NullableBTCEIP191MessageSignDestination) Set(val *BTCEIP191MessageSignDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableBTCEIP191MessageSignDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableBTCEIP191MessageSignDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTCEIP191MessageSignDestination(val *BTCEIP191MessageSignDestination) *NullableBTCEIP191MessageSignDestination {
	return &NullableBTCEIP191MessageSignDestination{value: val, isSet: true}
}

func (v NullableBTCEIP191MessageSignDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTCEIP191MessageSignDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


