/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PoolDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolDetails{}

// PoolDetails struct for PoolDetails
type PoolDetails struct {
	// The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.
	Id string `json:"id"`
	// The chain ID.
	ChainId string `json:"chain_id"`
	// The name of the protocol.
	Protocol string `json:"protocol"`
	// The URL of the protocol's icon.
	ProtocolIconUrl string `json:"protocol_icon_url"`
	// The wallet type. Possible values include:  - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)  - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)  - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)  - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
	SupportedWalletTypes []WalletType `json:"supported_wallet_types"`
	// The wallet subtype. Possible values include: - `Asset`: Custodial Wallets (Asset Wallets). - `Web3`: Custodial Wallets (Web3  Wallets). - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets). - `User-Controlled`: MPC Wallets (User-Controlled Wallets). - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}). - `Main`: Exchange Wallets (Main Account). - `Sub`: Exchange Wallets (Sub Account). 
	SupportedWalletSubtypes []WalletSubtype `json:"supported_wallet_subtypes"`
	// The token ID.
	TokenId string `json:"token_id"`
	// The estimated annual percentage rate (APR).
	EstApr float32 `json:"est_apr"`
	PoolType *StakingPoolType `json:"pool_type,omitempty"`
	// The minimum amount that can be staked in one staking request.
	MinAmount *string `json:"min_amount,omitempty"`
	// The maximum amount that can be staked in one staking request.
	MaxAmount *string `json:"max_amount,omitempty"`
	// The minimum staking period, in days.
	MinStakePeriod *int32 `json:"min_stake_period,omitempty"`
	// The maximum staking period, in days.
	MaxStakePeriod *int32 `json:"max_stake_period,omitempty"`
	// The minimum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
	MinStakeBlocks *int64 `json:"min_stake_blocks,omitempty"`
	// The maximum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
	MaxStakeBlocks *int64 `json:"max_stake_blocks,omitempty"`
	// A list of available validators.
	ValidatorsInfo []PoolDetailsAllOfValidatorsInfo `json:"validators_info"`
}

type _PoolDetails PoolDetails

// NewPoolDetails instantiates a new PoolDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDetails(id string, chainId string, protocol string, protocolIconUrl string, supportedWalletTypes []WalletType, supportedWalletSubtypes []WalletSubtype, tokenId string, estApr float32, validatorsInfo []PoolDetailsAllOfValidatorsInfo) *PoolDetails {
	this := PoolDetails{}
	this.Id = id
	this.ChainId = chainId
	this.Protocol = protocol
	this.ProtocolIconUrl = protocolIconUrl
	this.SupportedWalletTypes = supportedWalletTypes
	this.SupportedWalletSubtypes = supportedWalletSubtypes
	this.TokenId = tokenId
	this.EstApr = estApr
	this.ValidatorsInfo = validatorsInfo
	return &this
}

// NewPoolDetailsWithDefaults instantiates a new PoolDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDetailsWithDefaults() *PoolDetails {
	this := PoolDetails{}
	return &this
}

// GetId returns the Id field value
func (o *PoolDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PoolDetails) SetId(v string) {
	o.Id = v
}

// GetChainId returns the ChainId field value
func (o *PoolDetails) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *PoolDetails) SetChainId(v string) {
	o.ChainId = v
}

// GetProtocol returns the Protocol field value
func (o *PoolDetails) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *PoolDetails) SetProtocol(v string) {
	o.Protocol = v
}

// GetProtocolIconUrl returns the ProtocolIconUrl field value
func (o *PoolDetails) GetProtocolIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtocolIconUrl
}

// GetProtocolIconUrlOk returns a tuple with the ProtocolIconUrl field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetProtocolIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolIconUrl, true
}

// SetProtocolIconUrl sets field value
func (o *PoolDetails) SetProtocolIconUrl(v string) {
	o.ProtocolIconUrl = v
}

// GetSupportedWalletTypes returns the SupportedWalletTypes field value
func (o *PoolDetails) GetSupportedWalletTypes() []WalletType {
	if o == nil {
		var ret []WalletType
		return ret
	}

	return o.SupportedWalletTypes
}

// GetSupportedWalletTypesOk returns a tuple with the SupportedWalletTypes field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetSupportedWalletTypesOk() ([]WalletType, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedWalletTypes, true
}

// SetSupportedWalletTypes sets field value
func (o *PoolDetails) SetSupportedWalletTypes(v []WalletType) {
	o.SupportedWalletTypes = v
}

// GetSupportedWalletSubtypes returns the SupportedWalletSubtypes field value
func (o *PoolDetails) GetSupportedWalletSubtypes() []WalletSubtype {
	if o == nil {
		var ret []WalletSubtype
		return ret
	}

	return o.SupportedWalletSubtypes
}

// GetSupportedWalletSubtypesOk returns a tuple with the SupportedWalletSubtypes field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetSupportedWalletSubtypesOk() ([]WalletSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedWalletSubtypes, true
}

// SetSupportedWalletSubtypes sets field value
func (o *PoolDetails) SetSupportedWalletSubtypes(v []WalletSubtype) {
	o.SupportedWalletSubtypes = v
}

// GetTokenId returns the TokenId field value
func (o *PoolDetails) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PoolDetails) SetTokenId(v string) {
	o.TokenId = v
}

// GetEstApr returns the EstApr field value
func (o *PoolDetails) GetEstApr() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EstApr
}

// GetEstAprOk returns a tuple with the EstApr field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetEstAprOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstApr, true
}

// SetEstApr sets field value
func (o *PoolDetails) SetEstApr(v float32) {
	o.EstApr = v
}

// GetPoolType returns the PoolType field value if set, zero value otherwise.
func (o *PoolDetails) GetPoolType() StakingPoolType {
	if o == nil || IsNil(o.PoolType) {
		var ret StakingPoolType
		return ret
	}
	return *o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil || IsNil(o.PoolType) {
		return nil, false
	}
	return o.PoolType, true
}

// HasPoolType returns a boolean if a field has been set.
func (o *PoolDetails) HasPoolType() bool {
	if o != nil && !IsNil(o.PoolType) {
		return true
	}

	return false
}

// SetPoolType gets a reference to the given StakingPoolType and assigns it to the PoolType field.
func (o *PoolDetails) SetPoolType(v StakingPoolType) {
	o.PoolType = &v
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *PoolDetails) GetMinAmount() string {
	if o == nil || IsNil(o.MinAmount) {
		var ret string
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMinAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinAmount) {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *PoolDetails) HasMinAmount() bool {
	if o != nil && !IsNil(o.MinAmount) {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given string and assigns it to the MinAmount field.
func (o *PoolDetails) SetMinAmount(v string) {
	o.MinAmount = &v
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *PoolDetails) GetMaxAmount() string {
	if o == nil || IsNil(o.MaxAmount) {
		var ret string
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMaxAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *PoolDetails) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given string and assigns it to the MaxAmount field.
func (o *PoolDetails) SetMaxAmount(v string) {
	o.MaxAmount = &v
}

// GetMinStakePeriod returns the MinStakePeriod field value if set, zero value otherwise.
func (o *PoolDetails) GetMinStakePeriod() int32 {
	if o == nil || IsNil(o.MinStakePeriod) {
		var ret int32
		return ret
	}
	return *o.MinStakePeriod
}

// GetMinStakePeriodOk returns a tuple with the MinStakePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMinStakePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.MinStakePeriod) {
		return nil, false
	}
	return o.MinStakePeriod, true
}

// HasMinStakePeriod returns a boolean if a field has been set.
func (o *PoolDetails) HasMinStakePeriod() bool {
	if o != nil && !IsNil(o.MinStakePeriod) {
		return true
	}

	return false
}

// SetMinStakePeriod gets a reference to the given int32 and assigns it to the MinStakePeriod field.
func (o *PoolDetails) SetMinStakePeriod(v int32) {
	o.MinStakePeriod = &v
}

// GetMaxStakePeriod returns the MaxStakePeriod field value if set, zero value otherwise.
func (o *PoolDetails) GetMaxStakePeriod() int32 {
	if o == nil || IsNil(o.MaxStakePeriod) {
		var ret int32
		return ret
	}
	return *o.MaxStakePeriod
}

// GetMaxStakePeriodOk returns a tuple with the MaxStakePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMaxStakePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStakePeriod) {
		return nil, false
	}
	return o.MaxStakePeriod, true
}

// HasMaxStakePeriod returns a boolean if a field has been set.
func (o *PoolDetails) HasMaxStakePeriod() bool {
	if o != nil && !IsNil(o.MaxStakePeriod) {
		return true
	}

	return false
}

// SetMaxStakePeriod gets a reference to the given int32 and assigns it to the MaxStakePeriod field.
func (o *PoolDetails) SetMaxStakePeriod(v int32) {
	o.MaxStakePeriod = &v
}

// GetMinStakeBlocks returns the MinStakeBlocks field value if set, zero value otherwise.
func (o *PoolDetails) GetMinStakeBlocks() int64 {
	if o == nil || IsNil(o.MinStakeBlocks) {
		var ret int64
		return ret
	}
	return *o.MinStakeBlocks
}

// GetMinStakeBlocksOk returns a tuple with the MinStakeBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMinStakeBlocksOk() (*int64, bool) {
	if o == nil || IsNil(o.MinStakeBlocks) {
		return nil, false
	}
	return o.MinStakeBlocks, true
}

// HasMinStakeBlocks returns a boolean if a field has been set.
func (o *PoolDetails) HasMinStakeBlocks() bool {
	if o != nil && !IsNil(o.MinStakeBlocks) {
		return true
	}

	return false
}

// SetMinStakeBlocks gets a reference to the given int64 and assigns it to the MinStakeBlocks field.
func (o *PoolDetails) SetMinStakeBlocks(v int64) {
	o.MinStakeBlocks = &v
}

// GetMaxStakeBlocks returns the MaxStakeBlocks field value if set, zero value otherwise.
func (o *PoolDetails) GetMaxStakeBlocks() int64 {
	if o == nil || IsNil(o.MaxStakeBlocks) {
		var ret int64
		return ret
	}
	return *o.MaxStakeBlocks
}

// GetMaxStakeBlocksOk returns a tuple with the MaxStakeBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetMaxStakeBlocksOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxStakeBlocks) {
		return nil, false
	}
	return o.MaxStakeBlocks, true
}

// HasMaxStakeBlocks returns a boolean if a field has been set.
func (o *PoolDetails) HasMaxStakeBlocks() bool {
	if o != nil && !IsNil(o.MaxStakeBlocks) {
		return true
	}

	return false
}

// SetMaxStakeBlocks gets a reference to the given int64 and assigns it to the MaxStakeBlocks field.
func (o *PoolDetails) SetMaxStakeBlocks(v int64) {
	o.MaxStakeBlocks = &v
}

// GetValidatorsInfo returns the ValidatorsInfo field value
func (o *PoolDetails) GetValidatorsInfo() []PoolDetailsAllOfValidatorsInfo {
	if o == nil {
		var ret []PoolDetailsAllOfValidatorsInfo
		return ret
	}

	return o.ValidatorsInfo
}

// GetValidatorsInfoOk returns a tuple with the ValidatorsInfo field value
// and a boolean to check if the value has been set.
func (o *PoolDetails) GetValidatorsInfoOk() ([]PoolDetailsAllOfValidatorsInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidatorsInfo, true
}

// SetValidatorsInfo sets field value
func (o *PoolDetails) SetValidatorsInfo(v []PoolDetailsAllOfValidatorsInfo) {
	o.ValidatorsInfo = v
}

func (o PoolDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["chain_id"] = o.ChainId
	toSerialize["protocol"] = o.Protocol
	toSerialize["protocol_icon_url"] = o.ProtocolIconUrl
	toSerialize["supported_wallet_types"] = o.SupportedWalletTypes
	toSerialize["supported_wallet_subtypes"] = o.SupportedWalletSubtypes
	toSerialize["token_id"] = o.TokenId
	toSerialize["est_apr"] = o.EstApr
	if !IsNil(o.PoolType) {
		toSerialize["pool_type"] = o.PoolType
	}
	if !IsNil(o.MinAmount) {
		toSerialize["min_amount"] = o.MinAmount
	}
	if !IsNil(o.MaxAmount) {
		toSerialize["max_amount"] = o.MaxAmount
	}
	if !IsNil(o.MinStakePeriod) {
		toSerialize["min_stake_period"] = o.MinStakePeriod
	}
	if !IsNil(o.MaxStakePeriod) {
		toSerialize["max_stake_period"] = o.MaxStakePeriod
	}
	if !IsNil(o.MinStakeBlocks) {
		toSerialize["min_stake_blocks"] = o.MinStakeBlocks
	}
	if !IsNil(o.MaxStakeBlocks) {
		toSerialize["max_stake_blocks"] = o.MaxStakeBlocks
	}
	toSerialize["validators_info"] = o.ValidatorsInfo
	return toSerialize, nil
}

func (o *PoolDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"chain_id",
		"protocol",
		"protocol_icon_url",
		"supported_wallet_types",
		"supported_wallet_subtypes",
		"token_id",
		"est_apr",
		"validators_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoolDetails := _PoolDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPoolDetails)

	if err != nil {
		return err
	}

	*o = PoolDetails(varPoolDetails)

	return err
}

type NullablePoolDetails struct {
	value *PoolDetails
	isSet bool
}

func (v NullablePoolDetails) Get() *PoolDetails {
	return v.value
}

func (v *NullablePoolDetails) Set(val *PoolDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDetails(val *PoolDetails) *NullablePoolDetails {
	return &NullablePoolDetails{value: val, isSet: true}
}

func (v NullablePoolDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


