/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentSubscriptionPlanDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentSubscriptionPlanDetail{}

// PaymentSubscriptionPlanDetail struct for PaymentSubscriptionPlanDetail
type PaymentSubscriptionPlanDetail struct {
	// The subscription plan id in blockchain.
	BlockchainPlanId *string `json:"blockchain_plan_id,omitempty"`
	// The plan id in cobo.
	PlanId string `json:"plan_id"`
	// The developer plan id.
	DeveloperPlanId string `json:"developer_plan_id"`
	PeriodType PaymentSubscriptionPeriodType `json:"period_type"`
	Periods int32 `json:"periods"`
	Interval int32 `json:"interval"`
	// The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. 
	Amount string `json:"amount"`
	// The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId *string `json:"token_id,omitempty"`
	// The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.
	Currency *string `json:"currency,omitempty"`
}

type _PaymentSubscriptionPlanDetail PaymentSubscriptionPlanDetail

// NewPaymentSubscriptionPlanDetail instantiates a new PaymentSubscriptionPlanDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentSubscriptionPlanDetail(planId string, developerPlanId string, periodType PaymentSubscriptionPeriodType, periods int32, interval int32, amount string) *PaymentSubscriptionPlanDetail {
	this := PaymentSubscriptionPlanDetail{}
	this.PlanId = planId
	this.DeveloperPlanId = developerPlanId
	this.PeriodType = periodType
	this.Periods = periods
	this.Interval = interval
	this.Amount = amount
	return &this
}

// NewPaymentSubscriptionPlanDetailWithDefaults instantiates a new PaymentSubscriptionPlanDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentSubscriptionPlanDetailWithDefaults() *PaymentSubscriptionPlanDetail {
	this := PaymentSubscriptionPlanDetail{}
	return &this
}

// GetBlockchainPlanId returns the BlockchainPlanId field value if set, zero value otherwise.
func (o *PaymentSubscriptionPlanDetail) GetBlockchainPlanId() string {
	if o == nil || IsNil(o.BlockchainPlanId) {
		var ret string
		return ret
	}
	return *o.BlockchainPlanId
}

// GetBlockchainPlanIdOk returns a tuple with the BlockchainPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetBlockchainPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlockchainPlanId) {
		return nil, false
	}
	return o.BlockchainPlanId, true
}

// HasBlockchainPlanId returns a boolean if a field has been set.
func (o *PaymentSubscriptionPlanDetail) HasBlockchainPlanId() bool {
	if o != nil && !IsNil(o.BlockchainPlanId) {
		return true
	}

	return false
}

// SetBlockchainPlanId gets a reference to the given string and assigns it to the BlockchainPlanId field.
func (o *PaymentSubscriptionPlanDetail) SetBlockchainPlanId(v string) {
	o.BlockchainPlanId = &v
}

// GetPlanId returns the PlanId field value
func (o *PaymentSubscriptionPlanDetail) GetPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanId, true
}

// SetPlanId sets field value
func (o *PaymentSubscriptionPlanDetail) SetPlanId(v string) {
	o.PlanId = v
}

// GetDeveloperPlanId returns the DeveloperPlanId field value
func (o *PaymentSubscriptionPlanDetail) GetDeveloperPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperPlanId
}

// GetDeveloperPlanIdOk returns a tuple with the DeveloperPlanId field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetDeveloperPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperPlanId, true
}

// SetDeveloperPlanId sets field value
func (o *PaymentSubscriptionPlanDetail) SetDeveloperPlanId(v string) {
	o.DeveloperPlanId = v
}

// GetPeriodType returns the PeriodType field value
func (o *PaymentSubscriptionPlanDetail) GetPeriodType() PaymentSubscriptionPeriodType {
	if o == nil {
		var ret PaymentSubscriptionPeriodType
		return ret
	}

	return o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetPeriodTypeOk() (*PaymentSubscriptionPeriodType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodType, true
}

// SetPeriodType sets field value
func (o *PaymentSubscriptionPlanDetail) SetPeriodType(v PaymentSubscriptionPeriodType) {
	o.PeriodType = v
}

// GetPeriods returns the Periods field value
func (o *PaymentSubscriptionPlanDetail) GetPeriods() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetPeriodsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periods, true
}

// SetPeriods sets field value
func (o *PaymentSubscriptionPlanDetail) SetPeriods(v int32) {
	o.Periods = v
}

// GetInterval returns the Interval field value
func (o *PaymentSubscriptionPlanDetail) GetInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *PaymentSubscriptionPlanDetail) SetInterval(v int32) {
	o.Interval = v
}

// GetAmount returns the Amount field value
func (o *PaymentSubscriptionPlanDetail) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentSubscriptionPlanDetail) SetAmount(v string) {
	o.Amount = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *PaymentSubscriptionPlanDetail) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *PaymentSubscriptionPlanDetail) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *PaymentSubscriptionPlanDetail) SetTokenId(v string) {
	o.TokenId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentSubscriptionPlanDetail) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSubscriptionPlanDetail) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentSubscriptionPlanDetail) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentSubscriptionPlanDetail) SetCurrency(v string) {
	o.Currency = &v
}

func (o PaymentSubscriptionPlanDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentSubscriptionPlanDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockchainPlanId) {
		toSerialize["blockchain_plan_id"] = o.BlockchainPlanId
	}
	toSerialize["plan_id"] = o.PlanId
	toSerialize["developer_plan_id"] = o.DeveloperPlanId
	toSerialize["period_type"] = o.PeriodType
	toSerialize["periods"] = o.Periods
	toSerialize["interval"] = o.Interval
	toSerialize["amount"] = o.Amount
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

func (o *PaymentSubscriptionPlanDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan_id",
		"developer_plan_id",
		"period_type",
		"periods",
		"interval",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentSubscriptionPlanDetail := _PaymentSubscriptionPlanDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentSubscriptionPlanDetail)

	if err != nil {
		return err
	}

	*o = PaymentSubscriptionPlanDetail(varPaymentSubscriptionPlanDetail)

	return err
}

type NullablePaymentSubscriptionPlanDetail struct {
	value *PaymentSubscriptionPlanDetail
	isSet bool
}

func (v NullablePaymentSubscriptionPlanDetail) Get() *PaymentSubscriptionPlanDetail {
	return v.value
}

func (v *NullablePaymentSubscriptionPlanDetail) Set(val *PaymentSubscriptionPlanDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionPlanDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionPlanDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionPlanDetail(val *PaymentSubscriptionPlanDetail) *NullablePaymentSubscriptionPlanDetail {
	return &NullablePaymentSubscriptionPlanDetail{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionPlanDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionPlanDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


