/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionFixedFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFixedFee{}

// TransactionFixedFee The transaction fee actually charged by the chain that uses the fixed fee model.   Switch between the tabs to display the properties for different transaction fee models. 
type TransactionFixedFee struct {
	// The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
	MaxFeeAmount *string `json:"max_fee_amount,omitempty"`
	FeeType FeeType `json:"fee_type"`
	// The token used to pay the transaction fee.
	TokenId *string `json:"token_id,omitempty"`
	// The actually charged transaction fee.
	FeeUsed *string `json:"fee_used,omitempty"`
	// The estimated transaction fee.
	EstimatedFeeUsed *string `json:"estimated_fee_used,omitempty"`
}

type _TransactionFixedFee TransactionFixedFee

// NewTransactionFixedFee instantiates a new TransactionFixedFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFixedFee(feeType FeeType) *TransactionFixedFee {
	this := TransactionFixedFee{}
	this.FeeType = feeType
	return &this
}

// NewTransactionFixedFeeWithDefaults instantiates a new TransactionFixedFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFixedFeeWithDefaults() *TransactionFixedFee {
	this := TransactionFixedFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetMaxFeeAmount returns the MaxFeeAmount field value if set, zero value otherwise.
func (o *TransactionFixedFee) GetMaxFeeAmount() string {
	if o == nil || IsNil(o.MaxFeeAmount) {
		var ret string
		return ret
	}
	return *o.MaxFeeAmount
}

// GetMaxFeeAmountOk returns a tuple with the MaxFeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedFee) GetMaxFeeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFeeAmount) {
		return nil, false
	}
	return o.MaxFeeAmount, true
}

// HasMaxFeeAmount returns a boolean if a field has been set.
func (o *TransactionFixedFee) HasMaxFeeAmount() bool {
	if o != nil && !IsNil(o.MaxFeeAmount) {
		return true
	}

	return false
}

// SetMaxFeeAmount gets a reference to the given string and assigns it to the MaxFeeAmount field.
func (o *TransactionFixedFee) SetMaxFeeAmount(v string) {
	o.MaxFeeAmount = &v
}

// GetFeeType returns the FeeType field value
func (o *TransactionFixedFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *TransactionFixedFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *TransactionFixedFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TransactionFixedFee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedFee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TransactionFixedFee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TransactionFixedFee) SetTokenId(v string) {
	o.TokenId = &v
}

// GetFeeUsed returns the FeeUsed field value if set, zero value otherwise.
func (o *TransactionFixedFee) GetFeeUsed() string {
	if o == nil || IsNil(o.FeeUsed) {
		var ret string
		return ret
	}
	return *o.FeeUsed
}

// GetFeeUsedOk returns a tuple with the FeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedFee) GetFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.FeeUsed) {
		return nil, false
	}
	return o.FeeUsed, true
}

// HasFeeUsed returns a boolean if a field has been set.
func (o *TransactionFixedFee) HasFeeUsed() bool {
	if o != nil && !IsNil(o.FeeUsed) {
		return true
	}

	return false
}

// SetFeeUsed gets a reference to the given string and assigns it to the FeeUsed field.
func (o *TransactionFixedFee) SetFeeUsed(v string) {
	o.FeeUsed = &v
}

// GetEstimatedFeeUsed returns the EstimatedFeeUsed field value if set, zero value otherwise.
func (o *TransactionFixedFee) GetEstimatedFeeUsed() string {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		var ret string
		return ret
	}
	return *o.EstimatedFeeUsed
}

// GetEstimatedFeeUsedOk returns a tuple with the EstimatedFeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedFee) GetEstimatedFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		return nil, false
	}
	return o.EstimatedFeeUsed, true
}

// HasEstimatedFeeUsed returns a boolean if a field has been set.
func (o *TransactionFixedFee) HasEstimatedFeeUsed() bool {
	if o != nil && !IsNil(o.EstimatedFeeUsed) {
		return true
	}

	return false
}

// SetEstimatedFeeUsed gets a reference to the given string and assigns it to the EstimatedFeeUsed field.
func (o *TransactionFixedFee) SetEstimatedFeeUsed(v string) {
	o.EstimatedFeeUsed = &v
}

func (o TransactionFixedFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFixedFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxFeeAmount) {
		toSerialize["max_fee_amount"] = o.MaxFeeAmount
	}
	toSerialize["fee_type"] = o.FeeType
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.FeeUsed) {
		toSerialize["fee_used"] = o.FeeUsed
	}
	if !IsNil(o.EstimatedFeeUsed) {
		toSerialize["estimated_fee_used"] = o.EstimatedFeeUsed
	}
	return toSerialize, nil
}

func (o *TransactionFixedFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionFixedFee := _TransactionFixedFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFixedFee)

	if err != nil {
		return err
	}

	*o = TransactionFixedFee(varTransactionFixedFee)

	return err
}

type NullableTransactionFixedFee struct {
	value *TransactionFixedFee
	isSet bool
}

func (v NullableTransactionFixedFee) Get() *TransactionFixedFee {
	return v.value
}

func (v *NullableTransactionFixedFee) Set(val *TransactionFixedFee) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFixedFee) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFixedFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFixedFee(val *TransactionFixedFee) *NullableTransactionFixedFee {
	return &NullableTransactionFixedFee{value: val, isSet: true}
}

func (v NullableTransactionFixedFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFixedFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


