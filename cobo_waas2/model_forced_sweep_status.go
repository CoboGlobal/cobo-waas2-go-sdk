/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ForcedSweepStatus The current status of the force sweep request: - `Pending`: The force sweep request has been created and is awaiting processing. - `Processing`: The force sweep request is currently being processed. - `Completed`: All requested force sweep have been completed. 
type ForcedSweepStatus string

// List of ForcedSweepStatus
const (
	FORCEDSWEEPSTATUS_PENDING ForcedSweepStatus = "Pending"
	FORCEDSWEEPSTATUS_PROCESSING ForcedSweepStatus = "Processing"
	FORCEDSWEEPSTATUS_COMPLETED ForcedSweepStatus = "Completed"
)

// All allowed values of ForcedSweepStatus enum
var AllowedForcedSweepStatusEnumValues = []ForcedSweepStatus{
	"Pending",
	"Processing",
	"Completed",
}

func (v *ForcedSweepStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ForcedSweepStatus(value)
	for _, existing := range AllowedForcedSweepStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = ForcedSweepStatus("unknown")
	return nil
}

// NewForcedSweepStatusFromValue returns a pointer to a valid ForcedSweepStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewForcedSweepStatusFromValue(v string) (*ForcedSweepStatus, error) {
	ev := ForcedSweepStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ForcedSweepStatus: valid values are %v", v, AllowedForcedSweepStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ForcedSweepStatus) IsValid() bool {
	for _, existing := range AllowedForcedSweepStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ForcedSweepStatus value
func (v ForcedSweepStatus) Ptr() *ForcedSweepStatus {
	return &v
}

type NullableForcedSweepStatus struct {
	value *ForcedSweepStatus
	isSet bool
}

func (v NullableForcedSweepStatus) Get() *ForcedSweepStatus {
	return v.value
}

func (v *NullableForcedSweepStatus) Set(val *ForcedSweepStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableForcedSweepStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableForcedSweepStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForcedSweepStatus(val *ForcedSweepStatus) *NullableForcedSweepStatus {
	return &NullableForcedSweepStatus{value: val, isSet: true}
}

func (v NullableForcedSweepStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForcedSweepStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

