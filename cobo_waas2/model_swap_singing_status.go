/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SwapSingingStatus The transaction signing result. Possible values include:    - `Pending`: Waiting for signing from the signer.   - `Approved`: The signer has signed to the signing request.   - `Timeout`: The signing request has expired due to no response from the signer.   - `Rejected`: The signer has rejected the signing request. 
type SwapSingingStatus string

// List of SwapSingingStatus
const (
	SWAPSINGINGSTATUS_PENDING SwapSingingStatus = "Pending"
	SWAPSINGINGSTATUS_SIGNED SwapSingingStatus = "Signed"
	SWAPSINGINGSTATUS_TIMEOUT SwapSingingStatus = "Timeout"
	SWAPSINGINGSTATUS_REJECTED SwapSingingStatus = "Rejected"
)

// All allowed values of SwapSingingStatus enum
var AllowedSwapSingingStatusEnumValues = []SwapSingingStatus{
	"Pending",
	"Signed",
	"Timeout",
	"Rejected",
}

func (v *SwapSingingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwapSingingStatus(value)
	for _, existing := range AllowedSwapSingingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SwapSingingStatus("unknown")
	return nil
}

// NewSwapSingingStatusFromValue returns a pointer to a valid SwapSingingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwapSingingStatusFromValue(v string) (*SwapSingingStatus, error) {
	ev := SwapSingingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwapSingingStatus: valid values are %v", v, AllowedSwapSingingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwapSingingStatus) IsValid() bool {
	for _, existing := range AllowedSwapSingingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwapSingingStatus value
func (v SwapSingingStatus) Ptr() *SwapSingingStatus {
	return &v
}

type NullableSwapSingingStatus struct {
	value *SwapSingingStatus
	isSet bool
}

func (v NullableSwapSingingStatus) Get() *SwapSingingStatus {
	return v.value
}

func (v *NullableSwapSingingStatus) Set(val *SwapSingingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapSingingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapSingingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapSingingStatus(val *SwapSingingStatus) *NullableSwapSingingStatus {
	return &NullableSwapSingingStatus{value: val, isSet: true}
}

func (v NullableSwapSingingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapSingingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

