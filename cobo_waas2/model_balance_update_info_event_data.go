/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BalanceUpdateInfoEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceUpdateInfoEventData{}

// BalanceUpdateInfoEventData struct for BalanceUpdateInfoEventData
type BalanceUpdateInfoEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
	DataType string `json:"data_type"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The wallet address.
	Address string `json:"address"`
	// The wallet ID.
	WalletUuid string `json:"wallet_uuid"`
	// The time when the balance updated, in Unix timestamp format, measured in milliseconds. 
	UpdatedTimestamp int64 `json:"updated_timestamp"`
	Balance Balance `json:"balance"`
}

type _BalanceUpdateInfoEventData BalanceUpdateInfoEventData

// NewBalanceUpdateInfoEventData instantiates a new BalanceUpdateInfoEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceUpdateInfoEventData(dataType string, tokenId string, address string, walletUuid string, updatedTimestamp int64, balance Balance) *BalanceUpdateInfoEventData {
	this := BalanceUpdateInfoEventData{}
	this.DataType = dataType
	this.TokenId = tokenId
	this.Address = address
	this.WalletUuid = walletUuid
	this.UpdatedTimestamp = updatedTimestamp
	this.Balance = balance
	return &this
}

// NewBalanceUpdateInfoEventDataWithDefaults instantiates a new BalanceUpdateInfoEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceUpdateInfoEventDataWithDefaults() *BalanceUpdateInfoEventData {
	this := BalanceUpdateInfoEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *BalanceUpdateInfoEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *BalanceUpdateInfoEventData) SetDataType(v string) {
	o.DataType = v
}

// GetTokenId returns the TokenId field value
func (o *BalanceUpdateInfoEventData) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *BalanceUpdateInfoEventData) SetTokenId(v string) {
	o.TokenId = v
}

// GetAddress returns the Address field value
func (o *BalanceUpdateInfoEventData) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BalanceUpdateInfoEventData) SetAddress(v string) {
	o.Address = v
}

// GetWalletUuid returns the WalletUuid field value
func (o *BalanceUpdateInfoEventData) GetWalletUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletUuid
}

// GetWalletUuidOk returns a tuple with the WalletUuid field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetWalletUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletUuid, true
}

// SetWalletUuid sets field value
func (o *BalanceUpdateInfoEventData) SetWalletUuid(v string) {
	o.WalletUuid = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *BalanceUpdateInfoEventData) GetUpdatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *BalanceUpdateInfoEventData) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = v
}

// GetBalance returns the Balance field value
func (o *BalanceUpdateInfoEventData) GetBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfoEventData) GetBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *BalanceUpdateInfoEventData) SetBalance(v Balance) {
	o.Balance = v
}

func (o BalanceUpdateInfoEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceUpdateInfoEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["token_id"] = o.TokenId
	toSerialize["address"] = o.Address
	toSerialize["wallet_uuid"] = o.WalletUuid
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *BalanceUpdateInfoEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"token_id",
		"address",
		"wallet_uuid",
		"updated_timestamp",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBalanceUpdateInfoEventData := _BalanceUpdateInfoEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBalanceUpdateInfoEventData)

	if err != nil {
		return err
	}

	*o = BalanceUpdateInfoEventData(varBalanceUpdateInfoEventData)

	return err
}

type NullableBalanceUpdateInfoEventData struct {
	value *BalanceUpdateInfoEventData
	isSet bool
}

func (v NullableBalanceUpdateInfoEventData) Get() *BalanceUpdateInfoEventData {
	return v.value
}

func (v *NullableBalanceUpdateInfoEventData) Set(val *BalanceUpdateInfoEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceUpdateInfoEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceUpdateInfoEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceUpdateInfoEventData(val *BalanceUpdateInfoEventData) *NullableBalanceUpdateInfoEventData {
	return &NullableBalanceUpdateInfoEventData{value: val, isSet: true}
}

func (v NullableBalanceUpdateInfoEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceUpdateInfoEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


