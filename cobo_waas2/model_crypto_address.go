/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoAddress{}

// CryptoAddress struct for CryptoAddress
type CryptoAddress struct {
	// The token identifier (e.g., ETH_USDT, TRON_USDT) that this address is associated with.
	TokenId string `json:"token_id"`
	// A unique identifier for this crypto address, automatically generated by Cobo. Use this ID (not the raw blockchain address) when submitting a settlement request. 
	AddressId string `json:"address_id"`
	// The blockchain address in its native format. This is the actual destination address where funds will be sent. Note: When submitting a settlement request, use the address ID rather than this raw address. 
	Address string `json:"address"`
	// A label to help identify the address's purpose.
	Label *string `json:"label,omitempty"`
	// The creation time of the crypto address, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the crypto address, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
}

type _CryptoAddress CryptoAddress

// NewCryptoAddress instantiates a new CryptoAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoAddress(tokenId string, addressId string, address string) *CryptoAddress {
	this := CryptoAddress{}
	this.TokenId = tokenId
	this.AddressId = addressId
	this.Address = address
	return &this
}

// NewCryptoAddressWithDefaults instantiates a new CryptoAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoAddressWithDefaults() *CryptoAddress {
	this := CryptoAddress{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *CryptoAddress) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *CryptoAddress) SetTokenId(v string) {
	o.TokenId = v
}

// GetAddressId returns the AddressId field value
func (o *CryptoAddress) GetAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *CryptoAddress) SetAddressId(v string) {
	o.AddressId = v
}

// GetAddress returns the Address field value
func (o *CryptoAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CryptoAddress) SetAddress(v string) {
	o.Address = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CryptoAddress) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CryptoAddress) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CryptoAddress) SetLabel(v string) {
	o.Label = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *CryptoAddress) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *CryptoAddress) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *CryptoAddress) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *CryptoAddress) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAddress) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *CryptoAddress) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *CryptoAddress) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

func (o CryptoAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["address_id"] = o.AddressId
	toSerialize["address"] = o.Address
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	return toSerialize, nil
}

func (o *CryptoAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"address_id",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoAddress := _CryptoAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoAddress)

	if err != nil {
		return err
	}

	*o = CryptoAddress(varCryptoAddress)

	return err
}

type NullableCryptoAddress struct {
	value *CryptoAddress
	isSet bool
}

func (v NullableCryptoAddress) Get() *CryptoAddress {
	return v.value
}

func (v *NullableCryptoAddress) Set(val *CryptoAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoAddress(val *CryptoAddress) *NullableCryptoAddress {
	return &NullableCryptoAddress{value: val, isSet: true}
}

func (v NullableCryptoAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


