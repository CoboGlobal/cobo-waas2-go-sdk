/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolContractCallDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolContractCallDestination{}

// SolContractCallDestination The information about the transaction destination. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
type SolContractCallDestination struct {
	DestinationType ContractCallDestinationType `json:"destination_type"`
	Instructions []SolContractCallInstruction `json:"instructions"`
}

type _SolContractCallDestination SolContractCallDestination

// NewSolContractCallDestination instantiates a new SolContractCallDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolContractCallDestination(destinationType ContractCallDestinationType, instructions []SolContractCallInstruction) *SolContractCallDestination {
	this := SolContractCallDestination{}
	this.DestinationType = destinationType
	this.Instructions = instructions
	return &this
}

// NewSolContractCallDestinationWithDefaults instantiates a new SolContractCallDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolContractCallDestinationWithDefaults() *SolContractCallDestination {
	this := SolContractCallDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *SolContractCallDestination) GetDestinationType() ContractCallDestinationType {
	if o == nil {
		var ret ContractCallDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *SolContractCallDestination) GetDestinationTypeOk() (*ContractCallDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *SolContractCallDestination) SetDestinationType(v ContractCallDestinationType) {
	o.DestinationType = v
}

// GetInstructions returns the Instructions field value
func (o *SolContractCallDestination) GetInstructions() []SolContractCallInstruction {
	if o == nil {
		var ret []SolContractCallInstruction
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *SolContractCallDestination) GetInstructionsOk() ([]SolContractCallInstruction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions, true
}

// SetInstructions sets field value
func (o *SolContractCallDestination) SetInstructions(v []SolContractCallInstruction) {
	o.Instructions = v
}

func (o SolContractCallDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolContractCallDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["instructions"] = o.Instructions
	return toSerialize, nil
}

func (o *SolContractCallDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolContractCallDestination := _SolContractCallDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolContractCallDestination)

	if err != nil {
		return err
	}

	*o = SolContractCallDestination(varSolContractCallDestination)

	return err
}

type NullableSolContractCallDestination struct {
	value *SolContractCallDestination
	isSet bool
}

func (v NullableSolContractCallDestination) Get() *SolContractCallDestination {
	return v.value
}

func (v *NullableSolContractCallDestination) Set(val *SolContractCallDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableSolContractCallDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableSolContractCallDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolContractCallDestination(val *SolContractCallDestination) *NullableSolContractCallDestination {
	return &NullableSolContractCallDestination{value: val, isSet: true}
}

func (v NullableSolContractCallDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolContractCallDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


