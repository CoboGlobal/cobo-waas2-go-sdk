/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeeStationCheckFeeStationUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeStationCheckFeeStationUsage{}

// FeeStationCheckFeeStationUsage The information for evaluating Fee Station usage.
type FeeStationCheckFeeStationUsage struct {
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId string `json:"request_id"`
	// The amount of tokens to be transferred in this request.
	Amount string `json:"amount"`
	// The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The estimated transaction fee required for this transfer, before applying any Fee Station rules.
	EstimatedFeeAmount string `json:"estimated_fee_amount"`
	// The blockchain address that initiates the transfer.
	FromAddress string `json:"from_address"`
	// The wallet ID.
	FromWalletId string `json:"from_wallet_id"`
}

type _FeeStationCheckFeeStationUsage FeeStationCheckFeeStationUsage

// NewFeeStationCheckFeeStationUsage instantiates a new FeeStationCheckFeeStationUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeStationCheckFeeStationUsage(requestId string, amount string, tokenId string, estimatedFeeAmount string, fromAddress string, fromWalletId string) *FeeStationCheckFeeStationUsage {
	this := FeeStationCheckFeeStationUsage{}
	this.RequestId = requestId
	this.Amount = amount
	this.TokenId = tokenId
	this.EstimatedFeeAmount = estimatedFeeAmount
	this.FromAddress = fromAddress
	this.FromWalletId = fromWalletId
	return &this
}

// NewFeeStationCheckFeeStationUsageWithDefaults instantiates a new FeeStationCheckFeeStationUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeStationCheckFeeStationUsageWithDefaults() *FeeStationCheckFeeStationUsage {
	this := FeeStationCheckFeeStationUsage{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *FeeStationCheckFeeStationUsage) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *FeeStationCheckFeeStationUsage) SetRequestId(v string) {
	o.RequestId = v
}

// GetAmount returns the Amount field value
func (o *FeeStationCheckFeeStationUsage) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *FeeStationCheckFeeStationUsage) SetAmount(v string) {
	o.Amount = v
}

// GetTokenId returns the TokenId field value
func (o *FeeStationCheckFeeStationUsage) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *FeeStationCheckFeeStationUsage) SetTokenId(v string) {
	o.TokenId = v
}

// GetEstimatedFeeAmount returns the EstimatedFeeAmount field value
func (o *FeeStationCheckFeeStationUsage) GetEstimatedFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EstimatedFeeAmount
}

// GetEstimatedFeeAmountOk returns a tuple with the EstimatedFeeAmount field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetEstimatedFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedFeeAmount, true
}

// SetEstimatedFeeAmount sets field value
func (o *FeeStationCheckFeeStationUsage) SetEstimatedFeeAmount(v string) {
	o.EstimatedFeeAmount = v
}

// GetFromAddress returns the FromAddress field value
func (o *FeeStationCheckFeeStationUsage) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *FeeStationCheckFeeStationUsage) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetFromWalletId returns the FromWalletId field value
func (o *FeeStationCheckFeeStationUsage) GetFromWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromWalletId
}

// GetFromWalletIdOk returns a tuple with the FromWalletId field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsage) GetFromWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromWalletId, true
}

// SetFromWalletId sets field value
func (o *FeeStationCheckFeeStationUsage) SetFromWalletId(v string) {
	o.FromWalletId = v
}

func (o FeeStationCheckFeeStationUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeStationCheckFeeStationUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId
	toSerialize["amount"] = o.Amount
	toSerialize["token_id"] = o.TokenId
	toSerialize["estimated_fee_amount"] = o.EstimatedFeeAmount
	toSerialize["from_address"] = o.FromAddress
	toSerialize["from_wallet_id"] = o.FromWalletId
	return toSerialize, nil
}

func (o *FeeStationCheckFeeStationUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
		"amount",
		"token_id",
		"estimated_fee_amount",
		"from_address",
		"from_wallet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeStationCheckFeeStationUsage := _FeeStationCheckFeeStationUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeeStationCheckFeeStationUsage)

	if err != nil {
		return err
	}

	*o = FeeStationCheckFeeStationUsage(varFeeStationCheckFeeStationUsage)

	return err
}

type NullableFeeStationCheckFeeStationUsage struct {
	value *FeeStationCheckFeeStationUsage
	isSet bool
}

func (v NullableFeeStationCheckFeeStationUsage) Get() *FeeStationCheckFeeStationUsage {
	return v.value
}

func (v *NullableFeeStationCheckFeeStationUsage) Set(val *FeeStationCheckFeeStationUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeStationCheckFeeStationUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeStationCheckFeeStationUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeStationCheckFeeStationUsage(val *FeeStationCheckFeeStationUsage) *NullableFeeStationCheckFeeStationUsage {
	return &NullableFeeStationCheckFeeStationUsage{value: val, isSet: true}
}

func (v NullableFeeStationCheckFeeStationUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeStationCheckFeeStationUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


