/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentFeeType The current status of the force sweep request: - `Order`: The order fee type. - `Refund`: The refund fee type. - `CryptoSettlement`: The crypto settlement fee type. - `OffRampSettlement`: The off ramp settlement fee type. 
type PaymentFeeType string

// List of PaymentFeeType
const (
	PAYMENTFEETYPE_ORDER PaymentFeeType = "Order"
	PAYMENTFEETYPE_REFUND PaymentFeeType = "Refund"
	PAYMENTFEETYPE_CRYPTO_SETTLEMENT PaymentFeeType = "CryptoSettlement"
	PAYMENTFEETYPE_OFF_RAMP_SETTLEMENT PaymentFeeType = "OffRampSettlement"
)

// All allowed values of PaymentFeeType enum
var AllowedPaymentFeeTypeEnumValues = []PaymentFeeType{
	"Order",
	"Refund",
	"CryptoSettlement",
	"OffRampSettlement",
}

func (v *PaymentFeeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentFeeType(value)
	for _, existing := range AllowedPaymentFeeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PaymentFeeType("unknown")
	return nil
}

// NewPaymentFeeTypeFromValue returns a pointer to a valid PaymentFeeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentFeeTypeFromValue(v string) (*PaymentFeeType, error) {
	ev := PaymentFeeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentFeeType: valid values are %v", v, AllowedPaymentFeeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentFeeType) IsValid() bool {
	for _, existing := range AllowedPaymentFeeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentFeeType value
func (v PaymentFeeType) Ptr() *PaymentFeeType {
	return &v
}

type NullablePaymentFeeType struct {
	value *PaymentFeeType
	isSet bool
}

func (v NullablePaymentFeeType) Get() *PaymentFeeType {
	return v.value
}

func (v *NullablePaymentFeeType) Set(val *PaymentFeeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentFeeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentFeeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentFeeType(val *PaymentFeeType) *NullablePaymentFeeType {
	return &NullablePaymentFeeType{value: val, isSet: true}
}

func (v NullablePaymentFeeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentFeeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

