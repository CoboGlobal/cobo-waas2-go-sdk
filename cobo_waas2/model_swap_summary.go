/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapSummary{}

// SwapSummary struct for SwapSummary
type SwapSummary struct {
	// The total USD value of the swap activities, represented as a string.
	TotalUsdValue string `json:"total_usd_value"`
	// The total number of swap activities.
	ActivityCount int32 `json:"activity_count"`
}

type _SwapSummary SwapSummary

// NewSwapSummary instantiates a new SwapSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapSummary(totalUsdValue string, activityCount int32) *SwapSummary {
	this := SwapSummary{}
	this.TotalUsdValue = totalUsdValue
	this.ActivityCount = activityCount
	return &this
}

// NewSwapSummaryWithDefaults instantiates a new SwapSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapSummaryWithDefaults() *SwapSummary {
	this := SwapSummary{}
	return &this
}

// GetTotalUsdValue returns the TotalUsdValue field value
func (o *SwapSummary) GetTotalUsdValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalUsdValue
}

// GetTotalUsdValueOk returns a tuple with the TotalUsdValue field value
// and a boolean to check if the value has been set.
func (o *SwapSummary) GetTotalUsdValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalUsdValue, true
}

// SetTotalUsdValue sets field value
func (o *SwapSummary) SetTotalUsdValue(v string) {
	o.TotalUsdValue = v
}

// GetActivityCount returns the ActivityCount field value
func (o *SwapSummary) GetActivityCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActivityCount
}

// GetActivityCountOk returns a tuple with the ActivityCount field value
// and a boolean to check if the value has been set.
func (o *SwapSummary) GetActivityCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityCount, true
}

// SetActivityCount sets field value
func (o *SwapSummary) SetActivityCount(v int32) {
	o.ActivityCount = v
}

func (o SwapSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_usd_value"] = o.TotalUsdValue
	toSerialize["activity_count"] = o.ActivityCount
	return toSerialize, nil
}

func (o *SwapSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_usd_value",
		"activity_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapSummary := _SwapSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapSummary)

	if err != nil {
		return err
	}

	*o = SwapSummary(varSwapSummary)

	return err
}

type NullableSwapSummary struct {
	value *SwapSummary
	isSet bool
}

func (v NullableSwapSummary) Get() *SwapSummary {
	return v.value
}

func (v *NullableSwapSummary) Set(val *SwapSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapSummary(val *SwapSummary) *NullableSwapSummary {
	return &NullableSwapSummary{value: val, isSet: true}
}

func (v NullableSwapSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


