/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RefundDisposition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundDisposition{}

// RefundDisposition The information about a request to refund funds.
type RefundDisposition struct {
	// The UUID of the transaction whose funds are to be refunded. This identifies the original transaction that requires refund processing.
	TransactionId string `json:"transaction_id"`
	// The blockchain address to receive the refunded funds.
	DestinationAddress string `json:"destination_address"`
	// The amount to be refunded from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
	DispositionAmount string `json:"disposition_amount"`
	// Custom categories to identify and track this refund transaction. Used for transaction classification and reporting.
	CategoryNames []string `json:"category_names,omitempty"`
	// Additional notes or description for the refund.
	Description *string `json:"description,omitempty"`
}

type _RefundDisposition RefundDisposition

// NewRefundDisposition instantiates a new RefundDisposition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundDisposition(transactionId string, destinationAddress string, dispositionAmount string) *RefundDisposition {
	this := RefundDisposition{}
	this.TransactionId = transactionId
	this.DestinationAddress = destinationAddress
	this.DispositionAmount = dispositionAmount
	return &this
}

// NewRefundDispositionWithDefaults instantiates a new RefundDisposition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundDispositionWithDefaults() *RefundDisposition {
	this := RefundDisposition{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *RefundDisposition) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *RefundDisposition) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *RefundDisposition) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetDestinationAddress returns the DestinationAddress field value
func (o *RefundDisposition) GetDestinationAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value
// and a boolean to check if the value has been set.
func (o *RefundDisposition) GetDestinationAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationAddress, true
}

// SetDestinationAddress sets field value
func (o *RefundDisposition) SetDestinationAddress(v string) {
	o.DestinationAddress = v
}

// GetDispositionAmount returns the DispositionAmount field value
func (o *RefundDisposition) GetDispositionAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DispositionAmount
}

// GetDispositionAmountOk returns a tuple with the DispositionAmount field value
// and a boolean to check if the value has been set.
func (o *RefundDisposition) GetDispositionAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DispositionAmount, true
}

// SetDispositionAmount sets field value
func (o *RefundDisposition) SetDispositionAmount(v string) {
	o.DispositionAmount = v
}

// GetCategoryNames returns the CategoryNames field value if set, zero value otherwise.
func (o *RefundDisposition) GetCategoryNames() []string {
	if o == nil || IsNil(o.CategoryNames) {
		var ret []string
		return ret
	}
	return o.CategoryNames
}

// GetCategoryNamesOk returns a tuple with the CategoryNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundDisposition) GetCategoryNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryNames) {
		return nil, false
	}
	return o.CategoryNames, true
}

// HasCategoryNames returns a boolean if a field has been set.
func (o *RefundDisposition) HasCategoryNames() bool {
	if o != nil && !IsNil(o.CategoryNames) {
		return true
	}

	return false
}

// SetCategoryNames gets a reference to the given []string and assigns it to the CategoryNames field.
func (o *RefundDisposition) SetCategoryNames(v []string) {
	o.CategoryNames = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RefundDisposition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundDisposition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RefundDisposition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RefundDisposition) SetDescription(v string) {
	o.Description = &v
}

func (o RefundDisposition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundDisposition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["destination_address"] = o.DestinationAddress
	toSerialize["disposition_amount"] = o.DispositionAmount
	if !IsNil(o.CategoryNames) {
		toSerialize["category_names"] = o.CategoryNames
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *RefundDisposition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"destination_address",
		"disposition_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRefundDisposition := _RefundDisposition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRefundDisposition)

	if err != nil {
		return err
	}

	*o = RefundDisposition(varRefundDisposition)

	return err
}

type NullableRefundDisposition struct {
	value *RefundDisposition
	isSet bool
}

func (v NullableRefundDisposition) Get() *RefundDisposition {
	return v.value
}

func (v *NullableRefundDisposition) Set(val *RefundDisposition) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundDisposition) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundDisposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundDisposition(val *RefundDisposition) *NullableRefundDisposition {
	return &NullableRefundDisposition{value: val, isSet: true}
}

func (v NullableRefundDisposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundDisposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


