/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SweepToAddressStatus the model 'SweepToAddressStatus'
type SweepToAddressStatus string

// List of SweepToAddressStatus
const (
	SWEEPTOADDRESSSTATUS_VALID SweepToAddressStatus = "Valid"
	SWEEPTOADDRESSSTATUS_INVALID SweepToAddressStatus = "Invalid"
)

// All allowed values of SweepToAddressStatus enum
var AllowedSweepToAddressStatusEnumValues = []SweepToAddressStatus{
	"Valid",
	"Invalid",
}

func (v *SweepToAddressStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SweepToAddressStatus(value)
	for _, existing := range AllowedSweepToAddressStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SweepToAddressStatus("unknown")
	return nil
}

// NewSweepToAddressStatusFromValue returns a pointer to a valid SweepToAddressStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSweepToAddressStatusFromValue(v string) (*SweepToAddressStatus, error) {
	ev := SweepToAddressStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SweepToAddressStatus: valid values are %v", v, AllowedSweepToAddressStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SweepToAddressStatus) IsValid() bool {
	for _, existing := range AllowedSweepToAddressStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SweepToAddressStatus value
func (v SweepToAddressStatus) Ptr() *SweepToAddressStatus {
	return &v
}

type NullableSweepToAddressStatus struct {
	value *SweepToAddressStatus
	isSet bool
}

func (v NullableSweepToAddressStatus) Get() *SweepToAddressStatus {
	return v.value
}

func (v *NullableSweepToAddressStatus) Set(val *SweepToAddressStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepToAddressStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepToAddressStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepToAddressStatus(val *SweepToAddressStatus) *NullableSweepToAddressStatus {
	return &NullableSweepToAddressStatus{value: val, isSet: true}
}

func (v NullableSweepToAddressStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepToAddressStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

