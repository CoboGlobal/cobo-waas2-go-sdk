/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationContractCallParamsData - struct for TokenizationContractCallParamsData
type TokenizationContractCallParamsData struct {
	TokenizationEvmContractCallParams *TokenizationEvmContractCallParams
	TokenizationSolContractCallParams *TokenizationSolContractCallParams
}

// TokenizationEvmContractCallParamsAsTokenizationContractCallParamsData is a convenience function that returns TokenizationEvmContractCallParams wrapped in TokenizationContractCallParamsData
func TokenizationEvmContractCallParamsAsTokenizationContractCallParamsData(v *TokenizationEvmContractCallParams) TokenizationContractCallParamsData {
	return TokenizationContractCallParamsData{
		TokenizationEvmContractCallParams: v,
	}
}

// TokenizationSolContractCallParamsAsTokenizationContractCallParamsData is a convenience function that returns TokenizationSolContractCallParams wrapped in TokenizationContractCallParamsData
func TokenizationSolContractCallParamsAsTokenizationContractCallParamsData(v *TokenizationSolContractCallParams) TokenizationContractCallParamsData {
	return TokenizationContractCallParamsData{
		TokenizationSolContractCallParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenizationContractCallParamsData) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EVM_Contract'
	if jsonDict["type"] == "EVM_Contract" {
		// try to unmarshal JSON data into TokenizationEvmContractCallParams
		err = json.Unmarshal(data, &dst.TokenizationEvmContractCallParams)
		if err == nil {
			return nil // data stored in dst.TokenizationEvmContractCallParams, return on the first match
		} else {
			dst.TokenizationEvmContractCallParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationContractCallParamsData as TokenizationEvmContractCallParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SOL_Contract'
	if jsonDict["type"] == "SOL_Contract" {
		// try to unmarshal JSON data into TokenizationSolContractCallParams
		err = json.Unmarshal(data, &dst.TokenizationSolContractCallParams)
		if err == nil {
			return nil // data stored in dst.TokenizationSolContractCallParams, return on the first match
		} else {
			dst.TokenizationSolContractCallParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationContractCallParamsData as TokenizationSolContractCallParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationEvmContractCallParams'
	if jsonDict["type"] == "TokenizationEvmContractCallParams" {
		// try to unmarshal JSON data into TokenizationEvmContractCallParams
		err = json.Unmarshal(data, &dst.TokenizationEvmContractCallParams)
		if err == nil {
			return nil // data stored in dst.TokenizationEvmContractCallParams, return on the first match
		} else {
			dst.TokenizationEvmContractCallParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationContractCallParamsData as TokenizationEvmContractCallParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationSolContractCallParams'
	if jsonDict["type"] == "TokenizationSolContractCallParams" {
		// try to unmarshal JSON data into TokenizationSolContractCallParams
		err = json.Unmarshal(data, &dst.TokenizationSolContractCallParams)
		if err == nil {
			return nil // data stored in dst.TokenizationSolContractCallParams, return on the first match
		} else {
			dst.TokenizationSolContractCallParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationContractCallParamsData as TokenizationSolContractCallParams: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenizationContractCallParamsData) MarshalJSON() ([]byte, error) {
	if src.TokenizationEvmContractCallParams != nil {
		return json.Marshal(&src.TokenizationEvmContractCallParams)
	}

	if src.TokenizationSolContractCallParams != nil {
		return json.Marshal(&src.TokenizationSolContractCallParams)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenizationContractCallParamsData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokenizationEvmContractCallParams != nil {
		return obj.TokenizationEvmContractCallParams
	}

	if obj.TokenizationSolContractCallParams != nil {
		return obj.TokenizationSolContractCallParams
	}

	// all schemas are nil
	return nil
}

type NullableTokenizationContractCallParamsData struct {
	value *TokenizationContractCallParamsData
	isSet bool
}

func (v NullableTokenizationContractCallParamsData) Get() *TokenizationContractCallParamsData {
	return v.value
}

func (v *NullableTokenizationContractCallParamsData) Set(val *TokenizationContractCallParamsData) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationContractCallParamsData) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationContractCallParamsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationContractCallParamsData(val *TokenizationContractCallParamsData) *NullableTokenizationContractCallParamsData {
	return &NullableTokenizationContractCallParamsData{value: val, isSet: true}
}

func (v NullableTokenizationContractCallParamsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationContractCallParamsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


