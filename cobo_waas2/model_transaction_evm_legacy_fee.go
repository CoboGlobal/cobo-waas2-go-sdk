/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionEvmLegacyFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionEvmLegacyFee{}

// TransactionEvmLegacyFee The transaction fee actually charged by the chain that uses the legacy fee model.   The transaction fee is calculated by multiplying the gas price by the used gas. This can be expressed as: Transaction fee = gas price * used gas units.  Switch between the tabs to display the properties for different transaction fee models. 
type TransactionEvmLegacyFee struct {
	// The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.
	GasPrice *string `json:"gas_price,omitempty"`
	// The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
	GasLimit *string `json:"gas_limit,omitempty"`
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId *string `json:"token_id,omitempty"`
	// The transaction fee.
	FeeUsed *string `json:"fee_used,omitempty"`
	// The gas units used in the transaction.
	GasUsed *string `json:"gas_used,omitempty"`
}

type _TransactionEvmLegacyFee TransactionEvmLegacyFee

// NewTransactionEvmLegacyFee instantiates a new TransactionEvmLegacyFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEvmLegacyFee(feeType FeeType) *TransactionEvmLegacyFee {
	this := TransactionEvmLegacyFee{}
	this.FeeType = feeType
	return &this
}

// NewTransactionEvmLegacyFeeWithDefaults instantiates a new TransactionEvmLegacyFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEvmLegacyFeeWithDefaults() *TransactionEvmLegacyFee {
	this := TransactionEvmLegacyFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *TransactionEvmLegacyFee) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *TransactionEvmLegacyFee) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *TransactionEvmLegacyFee) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *TransactionEvmLegacyFee) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit) {
		var ret string
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetGasLimitOk() (*string, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *TransactionEvmLegacyFee) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given string and assigns it to the GasLimit field.
func (o *TransactionEvmLegacyFee) SetGasLimit(v string) {
	o.GasLimit = &v
}

// GetFeeType returns the FeeType field value
func (o *TransactionEvmLegacyFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *TransactionEvmLegacyFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TransactionEvmLegacyFee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TransactionEvmLegacyFee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TransactionEvmLegacyFee) SetTokenId(v string) {
	o.TokenId = &v
}

// GetFeeUsed returns the FeeUsed field value if set, zero value otherwise.
func (o *TransactionEvmLegacyFee) GetFeeUsed() string {
	if o == nil || IsNil(o.FeeUsed) {
		var ret string
		return ret
	}
	return *o.FeeUsed
}

// GetFeeUsedOk returns a tuple with the FeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.FeeUsed) {
		return nil, false
	}
	return o.FeeUsed, true
}

// HasFeeUsed returns a boolean if a field has been set.
func (o *TransactionEvmLegacyFee) HasFeeUsed() bool {
	if o != nil && !IsNil(o.FeeUsed) {
		return true
	}

	return false
}

// SetFeeUsed gets a reference to the given string and assigns it to the FeeUsed field.
func (o *TransactionEvmLegacyFee) SetFeeUsed(v string) {
	o.FeeUsed = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *TransactionEvmLegacyFee) GetGasUsed() string {
	if o == nil || IsNil(o.GasUsed) {
		var ret string
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmLegacyFee) GetGasUsedOk() (*string, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *TransactionEvmLegacyFee) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given string and assigns it to the GasUsed field.
func (o *TransactionEvmLegacyFee) SetGasUsed(v string) {
	o.GasUsed = &v
}

func (o TransactionEvmLegacyFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionEvmLegacyFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasPrice) {
		toSerialize["gas_price"] = o.GasPrice
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	toSerialize["fee_type"] = o.FeeType
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.FeeUsed) {
		toSerialize["fee_used"] = o.FeeUsed
	}
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	return toSerialize, nil
}

func (o *TransactionEvmLegacyFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionEvmLegacyFee := _TransactionEvmLegacyFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionEvmLegacyFee)

	if err != nil {
		return err
	}

	*o = TransactionEvmLegacyFee(varTransactionEvmLegacyFee)

	return err
}

type NullableTransactionEvmLegacyFee struct {
	value *TransactionEvmLegacyFee
	isSet bool
}

func (v NullableTransactionEvmLegacyFee) Get() *TransactionEvmLegacyFee {
	return v.value
}

func (v *NullableTransactionEvmLegacyFee) Set(val *TransactionEvmLegacyFee) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEvmLegacyFee) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEvmLegacyFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEvmLegacyFee(val *TransactionEvmLegacyFee) *NullableTransactionEvmLegacyFee {
	return &NullableTransactionEvmLegacyFee{value: val, isSet: true}
}

func (v NullableTransactionEvmLegacyFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEvmLegacyFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


