/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapActivityApprovers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapActivityApprovers{}

// SwapActivityApprovers The approvers data for swap activity.
type SwapActivityApprovers struct {
	// The approver name of the swap activity. 
	Name string `json:"name"`
	Status SwapApproversStatus `json:"status"`
}

type _SwapActivityApprovers SwapActivityApprovers

// NewSwapActivityApprovers instantiates a new SwapActivityApprovers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapActivityApprovers(name string, status SwapApproversStatus) *SwapActivityApprovers {
	this := SwapActivityApprovers{}
	this.Name = name
	this.Status = status
	return &this
}

// NewSwapActivityApproversWithDefaults instantiates a new SwapActivityApprovers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapActivityApproversWithDefaults() *SwapActivityApprovers {
	this := SwapActivityApprovers{}
	return &this
}

// GetName returns the Name field value
func (o *SwapActivityApprovers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SwapActivityApprovers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SwapActivityApprovers) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *SwapActivityApprovers) GetStatus() SwapApproversStatus {
	if o == nil {
		var ret SwapApproversStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SwapActivityApprovers) GetStatusOk() (*SwapApproversStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SwapActivityApprovers) SetStatus(v SwapApproversStatus) {
	o.Status = v
}

func (o SwapActivityApprovers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapActivityApprovers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *SwapActivityApprovers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapActivityApprovers := _SwapActivityApprovers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapActivityApprovers)

	if err != nil {
		return err
	}

	*o = SwapActivityApprovers(varSwapActivityApprovers)

	return err
}

type NullableSwapActivityApprovers struct {
	value *SwapActivityApprovers
	isSet bool
}

func (v NullableSwapActivityApprovers) Get() *SwapActivityApprovers {
	return v.value
}

func (v *NullableSwapActivityApprovers) Set(val *SwapActivityApprovers) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivityApprovers) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivityApprovers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivityApprovers(val *SwapActivityApprovers) *NullableSwapActivityApprovers {
	return &NullableSwapActivityApprovers{value: val, isSet: true}
}

func (v NullableSwapActivityApprovers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivityApprovers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


