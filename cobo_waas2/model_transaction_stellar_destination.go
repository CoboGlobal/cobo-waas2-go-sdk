/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionStellarDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionStellarDestination{}

// TransactionStellarDestination The information about the transaction destination type `STELLAR_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
type TransactionStellarDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	ContractParam TransactionStellarContractParam `json:"contract_param"`
}

type _TransactionStellarDestination TransactionStellarDestination

// NewTransactionStellarDestination instantiates a new TransactionStellarDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionStellarDestination(destinationType TransactionDestinationType, contractParam TransactionStellarContractParam) *TransactionStellarDestination {
	this := TransactionStellarDestination{}
	this.DestinationType = destinationType
	this.ContractParam = contractParam
	return &this
}

// NewTransactionStellarDestinationWithDefaults instantiates a new TransactionStellarDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionStellarDestinationWithDefaults() *TransactionStellarDestination {
	this := TransactionStellarDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionStellarDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionStellarDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionStellarDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetContractParam returns the ContractParam field value
func (o *TransactionStellarDestination) GetContractParam() TransactionStellarContractParam {
	if o == nil {
		var ret TransactionStellarContractParam
		return ret
	}

	return o.ContractParam
}

// GetContractParamOk returns a tuple with the ContractParam field value
// and a boolean to check if the value has been set.
func (o *TransactionStellarDestination) GetContractParamOk() (*TransactionStellarContractParam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractParam, true
}

// SetContractParam sets field value
func (o *TransactionStellarDestination) SetContractParam(v TransactionStellarContractParam) {
	o.ContractParam = v
}

func (o TransactionStellarDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionStellarDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["contract_param"] = o.ContractParam
	return toSerialize, nil
}

func (o *TransactionStellarDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"contract_param",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionStellarDestination := _TransactionStellarDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionStellarDestination)

	if err != nil {
		return err
	}

	*o = TransactionStellarDestination(varTransactionStellarDestination)

	return err
}

type NullableTransactionStellarDestination struct {
	value *TransactionStellarDestination
	isSet bool
}

func (v NullableTransactionStellarDestination) Get() *TransactionStellarDestination {
	return v.value
}

func (v *NullableTransactionStellarDestination) Set(val *TransactionStellarDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStellarDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStellarDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStellarDestination(val *TransactionStellarDestination) *NullableTransactionStellarDestination {
	return &NullableTransactionStellarDestination{value: val, isSet: true}
}

func (v NullableTransactionStellarDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStellarDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


