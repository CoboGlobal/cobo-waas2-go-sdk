/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommissionFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionFee{}

// CommissionFee struct for CommissionFee
type CommissionFee struct {
	// The commission fee amount.
	FeeAmount string `json:"fee_amount"`
}

type _CommissionFee CommissionFee

// NewCommissionFee instantiates a new CommissionFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionFee(feeAmount string) *CommissionFee {
	this := CommissionFee{}
	this.FeeAmount = feeAmount
	return &this
}

// NewCommissionFeeWithDefaults instantiates a new CommissionFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionFeeWithDefaults() *CommissionFee {
	this := CommissionFee{}
	return &this
}

// GetFeeAmount returns the FeeAmount field value
func (o *CommissionFee) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *CommissionFee) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *CommissionFee) SetFeeAmount(v string) {
	o.FeeAmount = v
}

func (o CommissionFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_amount"] = o.FeeAmount
	return toSerialize, nil
}

func (o *CommissionFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommissionFee := _CommissionFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommissionFee)

	if err != nil {
		return err
	}

	*o = CommissionFee(varCommissionFee)

	return err
}

type NullableCommissionFee struct {
	value *CommissionFee
	isSet bool
}

func (v NullableCommissionFee) Get() *CommissionFee {
	return v.value
}

func (v *NullableCommissionFee) Set(val *CommissionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionFee(val *CommissionFee) *NullableCommissionFee {
	return &NullableCommissionFee{value: val, isSet: true}
}

func (v NullableCommissionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


