/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KytScreeningsTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KytScreeningsTransaction{}

// KytScreeningsTransaction The KYT screening status response containing transaction review and funds information.
type KytScreeningsTransaction struct {
	// The UUID of the transaction that was screened.
	TransactionId string `json:"transaction_id"`
	TransactionType KytScreeningsTransactionType `json:"transaction_type"`
	ReviewStatus ReviewStatusType `json:"review_status"`
	FundsStatus FundsStatusType `json:"funds_status"`
}

type _KytScreeningsTransaction KytScreeningsTransaction

// NewKytScreeningsTransaction instantiates a new KytScreeningsTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKytScreeningsTransaction(transactionId string, transactionType KytScreeningsTransactionType, reviewStatus ReviewStatusType, fundsStatus FundsStatusType) *KytScreeningsTransaction {
	this := KytScreeningsTransaction{}
	this.TransactionId = transactionId
	this.TransactionType = transactionType
	this.ReviewStatus = reviewStatus
	this.FundsStatus = fundsStatus
	return &this
}

// NewKytScreeningsTransactionWithDefaults instantiates a new KytScreeningsTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKytScreeningsTransactionWithDefaults() *KytScreeningsTransaction {
	this := KytScreeningsTransaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *KytScreeningsTransaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *KytScreeningsTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *KytScreeningsTransaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetTransactionType returns the TransactionType field value
func (o *KytScreeningsTransaction) GetTransactionType() KytScreeningsTransactionType {
	if o == nil {
		var ret KytScreeningsTransactionType
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *KytScreeningsTransaction) GetTransactionTypeOk() (*KytScreeningsTransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *KytScreeningsTransaction) SetTransactionType(v KytScreeningsTransactionType) {
	o.TransactionType = v
}

// GetReviewStatus returns the ReviewStatus field value
func (o *KytScreeningsTransaction) GetReviewStatus() ReviewStatusType {
	if o == nil {
		var ret ReviewStatusType
		return ret
	}

	return o.ReviewStatus
}

// GetReviewStatusOk returns a tuple with the ReviewStatus field value
// and a boolean to check if the value has been set.
func (o *KytScreeningsTransaction) GetReviewStatusOk() (*ReviewStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewStatus, true
}

// SetReviewStatus sets field value
func (o *KytScreeningsTransaction) SetReviewStatus(v ReviewStatusType) {
	o.ReviewStatus = v
}

// GetFundsStatus returns the FundsStatus field value
func (o *KytScreeningsTransaction) GetFundsStatus() FundsStatusType {
	if o == nil {
		var ret FundsStatusType
		return ret
	}

	return o.FundsStatus
}

// GetFundsStatusOk returns a tuple with the FundsStatus field value
// and a boolean to check if the value has been set.
func (o *KytScreeningsTransaction) GetFundsStatusOk() (*FundsStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FundsStatus, true
}

// SetFundsStatus sets field value
func (o *KytScreeningsTransaction) SetFundsStatus(v FundsStatusType) {
	o.FundsStatus = v
}

func (o KytScreeningsTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KytScreeningsTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["transaction_type"] = o.TransactionType
	toSerialize["review_status"] = o.ReviewStatus
	toSerialize["funds_status"] = o.FundsStatus
	return toSerialize, nil
}

func (o *KytScreeningsTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"transaction_type",
		"review_status",
		"funds_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKytScreeningsTransaction := _KytScreeningsTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKytScreeningsTransaction)

	if err != nil {
		return err
	}

	*o = KytScreeningsTransaction(varKytScreeningsTransaction)

	return err
}

type NullableKytScreeningsTransaction struct {
	value *KytScreeningsTransaction
	isSet bool
}

func (v NullableKytScreeningsTransaction) Get() *KytScreeningsTransaction {
	return v.value
}

func (v *NullableKytScreeningsTransaction) Set(val *KytScreeningsTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableKytScreeningsTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableKytScreeningsTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKytScreeningsTransaction(val *KytScreeningsTransaction) *NullableKytScreeningsTransaction {
	return &NullableKytScreeningsTransaction{value: val, isSet: true}
}

func (v NullableKytScreeningsTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKytScreeningsTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


