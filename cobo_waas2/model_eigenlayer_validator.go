/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EigenlayerValidator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EigenlayerValidator{}

// EigenlayerValidator The EigenLayer validator info.
type EigenlayerValidator struct {
	// The URL of the validator's icon.
	IconUrl string `json:"icon_url"`
	// The name of validator.
	Name string `json:"name"`
	// The priority of validator.
	Priority *int32 `json:"priority,omitempty"`
	// The address of validator.
	Address string `json:"address"`
	// The commission of validator.
	CommissionRate *float32 `json:"commission_rate,omitempty"`
}

type _EigenlayerValidator EigenlayerValidator

// NewEigenlayerValidator instantiates a new EigenlayerValidator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEigenlayerValidator(iconUrl string, name string, address string) *EigenlayerValidator {
	this := EigenlayerValidator{}
	this.IconUrl = iconUrl
	this.Name = name
	this.Address = address
	return &this
}

// NewEigenlayerValidatorWithDefaults instantiates a new EigenlayerValidator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEigenlayerValidatorWithDefaults() *EigenlayerValidator {
	this := EigenlayerValidator{}
	return &this
}

// GetIconUrl returns the IconUrl field value
func (o *EigenlayerValidator) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *EigenlayerValidator) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *EigenlayerValidator) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetName returns the Name field value
func (o *EigenlayerValidator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EigenlayerValidator) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EigenlayerValidator) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *EigenlayerValidator) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EigenlayerValidator) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *EigenlayerValidator) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *EigenlayerValidator) SetPriority(v int32) {
	o.Priority = &v
}

// GetAddress returns the Address field value
func (o *EigenlayerValidator) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *EigenlayerValidator) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *EigenlayerValidator) SetAddress(v string) {
	o.Address = v
}

// GetCommissionRate returns the CommissionRate field value if set, zero value otherwise.
func (o *EigenlayerValidator) GetCommissionRate() float32 {
	if o == nil || IsNil(o.CommissionRate) {
		var ret float32
		return ret
	}
	return *o.CommissionRate
}

// GetCommissionRateOk returns a tuple with the CommissionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EigenlayerValidator) GetCommissionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.CommissionRate) {
		return nil, false
	}
	return o.CommissionRate, true
}

// HasCommissionRate returns a boolean if a field has been set.
func (o *EigenlayerValidator) HasCommissionRate() bool {
	if o != nil && !IsNil(o.CommissionRate) {
		return true
	}

	return false
}

// SetCommissionRate gets a reference to the given float32 and assigns it to the CommissionRate field.
func (o *EigenlayerValidator) SetCommissionRate(v float32) {
	o.CommissionRate = &v
}

func (o EigenlayerValidator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EigenlayerValidator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["icon_url"] = o.IconUrl
	toSerialize["name"] = o.Name
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	toSerialize["address"] = o.Address
	if !IsNil(o.CommissionRate) {
		toSerialize["commission_rate"] = o.CommissionRate
	}
	return toSerialize, nil
}

func (o *EigenlayerValidator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"icon_url",
		"name",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEigenlayerValidator := _EigenlayerValidator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEigenlayerValidator)

	if err != nil {
		return err
	}

	*o = EigenlayerValidator(varEigenlayerValidator)

	return err
}

type NullableEigenlayerValidator struct {
	value *EigenlayerValidator
	isSet bool
}

func (v NullableEigenlayerValidator) Get() *EigenlayerValidator {
	return v.value
}

func (v *NullableEigenlayerValidator) Set(val *EigenlayerValidator) {
	v.value = val
	v.isSet = true
}

func (v NullableEigenlayerValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableEigenlayerValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEigenlayerValidator(val *EigenlayerValidator) *NullableEigenlayerValidator {
	return &NullableEigenlayerValidator{value: val, isSet: true}
}

func (v NullableEigenlayerValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEigenlayerValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


