/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EthUnstakeExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthUnstakeExtra{}

// EthUnstakeExtra struct for EthUnstakeExtra
type EthUnstakeExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// A list of public keys identifying the validators to unstake from the Ethereum Beacon Chain.
	ValidatorPubkeys []string `json:"validator_pubkeys"`
}

type _EthUnstakeExtra EthUnstakeExtra

// NewEthUnstakeExtra instantiates a new EthUnstakeExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthUnstakeExtra(poolType StakingPoolType, validatorPubkeys []string) *EthUnstakeExtra {
	this := EthUnstakeExtra{}
	this.PoolType = poolType
	this.ValidatorPubkeys = validatorPubkeys
	return &this
}

// NewEthUnstakeExtraWithDefaults instantiates a new EthUnstakeExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthUnstakeExtraWithDefaults() *EthUnstakeExtra {
	this := EthUnstakeExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *EthUnstakeExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *EthUnstakeExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *EthUnstakeExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetValidatorPubkeys returns the ValidatorPubkeys field value
func (o *EthUnstakeExtra) GetValidatorPubkeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ValidatorPubkeys
}

// GetValidatorPubkeysOk returns a tuple with the ValidatorPubkeys field value
// and a boolean to check if the value has been set.
func (o *EthUnstakeExtra) GetValidatorPubkeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidatorPubkeys, true
}

// SetValidatorPubkeys sets field value
func (o *EthUnstakeExtra) SetValidatorPubkeys(v []string) {
	o.ValidatorPubkeys = v
}

func (o EthUnstakeExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthUnstakeExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	toSerialize["validator_pubkeys"] = o.ValidatorPubkeys
	return toSerialize, nil
}

func (o *EthUnstakeExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"validator_pubkeys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthUnstakeExtra := _EthUnstakeExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEthUnstakeExtra)

	if err != nil {
		return err
	}

	*o = EthUnstakeExtra(varEthUnstakeExtra)

	return err
}

type NullableEthUnstakeExtra struct {
	value *EthUnstakeExtra
	isSet bool
}

func (v NullableEthUnstakeExtra) Get() *EthUnstakeExtra {
	return v.value
}

func (v *NullableEthUnstakeExtra) Set(val *EthUnstakeExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableEthUnstakeExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableEthUnstakeExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthUnstakeExtra(val *EthUnstakeExtra) *NullableEthUnstakeExtra {
	return &NullableEthUnstakeExtra{value: val, isSet: true}
}

func (v NullableEthUnstakeExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthUnstakeExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


