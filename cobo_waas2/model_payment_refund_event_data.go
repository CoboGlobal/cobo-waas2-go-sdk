/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentRefundEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentRefundEventData{}

// PaymentRefundEventData struct for PaymentRefundEventData
type PaymentRefundEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data.
	DataType string `json:"data_type"`
	// The request ID provided by you when creating the refund request.
	RequestId *string `json:"request_id,omitempty"`
	// The refund order ID.
	RefundId string `json:"refund_id"`
	// The merchant ID.
	MerchantId *string `json:"merchant_id,omitempty"`
	// The ID of the cryptocurrency used for refund.
	TokenId string `json:"token_id"`
	// The ID of the blockchain network on which the refund transaction occurs.
	ChainId string `json:"chain_id"`
	// The amount in cryptocurrency to be returned for this refund order.
	Amount string `json:"amount"`
	// The recipient's wallet address where the refund will be sent.
	ToAddress string `json:"to_address"`
	Status RefundStatus `json:"status"`
	// An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
	Transactions []PaymentTransaction `json:"transactions,omitempty"`
}

type _PaymentRefundEventData PaymentRefundEventData

// NewPaymentRefundEventData instantiates a new PaymentRefundEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRefundEventData(dataType string, refundId string, tokenId string, chainId string, amount string, toAddress string, status RefundStatus) *PaymentRefundEventData {
	this := PaymentRefundEventData{}
	this.DataType = dataType
	this.RefundId = refundId
	this.TokenId = tokenId
	this.ChainId = chainId
	this.Amount = amount
	this.ToAddress = toAddress
	this.Status = status
	return &this
}

// NewPaymentRefundEventDataWithDefaults instantiates a new PaymentRefundEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRefundEventDataWithDefaults() *PaymentRefundEventData {
	this := PaymentRefundEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *PaymentRefundEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *PaymentRefundEventData) SetDataType(v string) {
	o.DataType = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *PaymentRefundEventData) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *PaymentRefundEventData) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *PaymentRefundEventData) SetRequestId(v string) {
	o.RequestId = &v
}

// GetRefundId returns the RefundId field value
func (o *PaymentRefundEventData) GetRefundId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefundId
}

// GetRefundIdOk returns a tuple with the RefundId field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetRefundIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundId, true
}

// SetRefundId sets field value
func (o *PaymentRefundEventData) SetRefundId(v string) {
	o.RefundId = v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *PaymentRefundEventData) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *PaymentRefundEventData) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *PaymentRefundEventData) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetTokenId returns the TokenId field value
func (o *PaymentRefundEventData) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PaymentRefundEventData) SetTokenId(v string) {
	o.TokenId = v
}

// GetChainId returns the ChainId field value
func (o *PaymentRefundEventData) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *PaymentRefundEventData) SetChainId(v string) {
	o.ChainId = v
}

// GetAmount returns the Amount field value
func (o *PaymentRefundEventData) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentRefundEventData) SetAmount(v string) {
	o.Amount = v
}

// GetToAddress returns the ToAddress field value
func (o *PaymentRefundEventData) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *PaymentRefundEventData) SetToAddress(v string) {
	o.ToAddress = v
}

// GetStatus returns the Status field value
func (o *PaymentRefundEventData) GetStatus() RefundStatus {
	if o == nil {
		var ret RefundStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetStatusOk() (*RefundStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentRefundEventData) SetStatus(v RefundStatus) {
	o.Status = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *PaymentRefundEventData) GetTransactions() []PaymentTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []PaymentTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRefundEventData) GetTransactionsOk() ([]PaymentTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *PaymentRefundEventData) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []PaymentTransaction and assigns it to the Transactions field.
func (o *PaymentRefundEventData) SetTransactions(v []PaymentTransaction) {
	o.Transactions = v
}

func (o PaymentRefundEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentRefundEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	toSerialize["refund_id"] = o.RefundId
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	toSerialize["token_id"] = o.TokenId
	toSerialize["chain_id"] = o.ChainId
	toSerialize["amount"] = o.Amount
	toSerialize["to_address"] = o.ToAddress
	toSerialize["status"] = o.Status
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

func (o *PaymentRefundEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"refund_id",
		"token_id",
		"chain_id",
		"amount",
		"to_address",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentRefundEventData := _PaymentRefundEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentRefundEventData)

	if err != nil {
		return err
	}

	*o = PaymentRefundEventData(varPaymentRefundEventData)

	return err
}

type NullablePaymentRefundEventData struct {
	value *PaymentRefundEventData
	isSet bool
}

func (v NullablePaymentRefundEventData) Get() *PaymentRefundEventData {
	return v.value
}

func (v *NullablePaymentRefundEventData) Set(val *PaymentRefundEventData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRefundEventData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRefundEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRefundEventData(val *PaymentRefundEventData) *NullablePaymentRefundEventData {
	return &NullablePaymentRefundEventData{value: val, isSet: true}
}

func (v NullablePaymentRefundEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRefundEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


