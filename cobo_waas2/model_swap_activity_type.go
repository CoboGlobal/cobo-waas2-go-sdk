/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SwapActivityType The type of the swap activity. Possible values include: - `Bridge`: The activity is a bridge activity. - `Exchange`: The activity is an exchange activity. 
type SwapActivityType string

// List of SwapActivityType
const (
	SWAPACTIVITYTYPE_BRIDGE SwapActivityType = "Bridge"
	SWAPACTIVITYTYPE_EXCHANGE SwapActivityType = "Exchange"
)

// All allowed values of SwapActivityType enum
var AllowedSwapActivityTypeEnumValues = []SwapActivityType{
	"Bridge",
	"Exchange",
}

func (v *SwapActivityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwapActivityType(value)
	for _, existing := range AllowedSwapActivityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = SwapActivityType("unknown")
    return nil
}

// NewSwapActivityTypeFromValue returns a pointer to a valid SwapActivityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwapActivityTypeFromValue(v string) (*SwapActivityType, error) {
	ev := SwapActivityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwapActivityType: valid values are %v", v, AllowedSwapActivityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwapActivityType) IsValid() bool {
	for _, existing := range AllowedSwapActivityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwapActivityType value
func (v SwapActivityType) Ptr() *SwapActivityType {
	return &v
}

type NullableSwapActivityType struct {
	value *SwapActivityType
	isSet bool
}

func (v NullableSwapActivityType) Get() *SwapActivityType {
	return v.value
}

func (v *NullableSwapActivityType) Set(val *SwapActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivityType(val *SwapActivityType) *NullableSwapActivityType {
	return &NullableSwapActivityType{value: val, isSet: true}
}

func (v NullableSwapActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

