/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the FILPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FILPrice{}

// FILPrice struct for FILPrice
type FILPrice struct {
	// An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
	GasPremium *string `json:"gas_premium,omitempty"`
	// The maximum gas price you are willing to pay per unit of gas.
	GasFeeCap *string `json:"gas_fee_cap,omitempty"`
	// The maximum amount of gas your transaction is allowed to consume.
	GasLimit *string `json:"gas_limit,omitempty"`
}

// NewFILPrice instantiates a new FILPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFILPrice() *FILPrice {
	this := FILPrice{}
	return &this
}

// NewFILPriceWithDefaults instantiates a new FILPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFILPriceWithDefaults() *FILPrice {
	this := FILPrice{}
	return &this
}

// GetGasPremium returns the GasPremium field value if set, zero value otherwise.
func (o *FILPrice) GetGasPremium() string {
	if o == nil || IsNil(o.GasPremium) {
		var ret string
		return ret
	}
	return *o.GasPremium
}

// GetGasPremiumOk returns a tuple with the GasPremium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FILPrice) GetGasPremiumOk() (*string, bool) {
	if o == nil || IsNil(o.GasPremium) {
		return nil, false
	}
	return o.GasPremium, true
}

// HasGasPremium returns a boolean if a field has been set.
func (o *FILPrice) HasGasPremium() bool {
	if o != nil && !IsNil(o.GasPremium) {
		return true
	}

	return false
}

// SetGasPremium gets a reference to the given string and assigns it to the GasPremium field.
func (o *FILPrice) SetGasPremium(v string) {
	o.GasPremium = &v
}

// GetGasFeeCap returns the GasFeeCap field value if set, zero value otherwise.
func (o *FILPrice) GetGasFeeCap() string {
	if o == nil || IsNil(o.GasFeeCap) {
		var ret string
		return ret
	}
	return *o.GasFeeCap
}

// GetGasFeeCapOk returns a tuple with the GasFeeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FILPrice) GetGasFeeCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasFeeCap) {
		return nil, false
	}
	return o.GasFeeCap, true
}

// HasGasFeeCap returns a boolean if a field has been set.
func (o *FILPrice) HasGasFeeCap() bool {
	if o != nil && !IsNil(o.GasFeeCap) {
		return true
	}

	return false
}

// SetGasFeeCap gets a reference to the given string and assigns it to the GasFeeCap field.
func (o *FILPrice) SetGasFeeCap(v string) {
	o.GasFeeCap = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *FILPrice) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit) {
		var ret string
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FILPrice) GetGasLimitOk() (*string, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *FILPrice) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given string and assigns it to the GasLimit field.
func (o *FILPrice) SetGasLimit(v string) {
	o.GasLimit = &v
}

func (o FILPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FILPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasPremium) {
		toSerialize["gas_premium"] = o.GasPremium
	}
	if !IsNil(o.GasFeeCap) {
		toSerialize["gas_fee_cap"] = o.GasFeeCap
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	return toSerialize, nil
}

type NullableFILPrice struct {
	value *FILPrice
	isSet bool
}

func (v NullableFILPrice) Get() *FILPrice {
	return v.value
}

func (v *NullableFILPrice) Set(val *FILPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableFILPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableFILPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFILPrice(val *FILPrice) *NullableFILPrice {
	return &NullableFILPrice{value: val, isSet: true}
}

func (v NullableFILPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFILPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


