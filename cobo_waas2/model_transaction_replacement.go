/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionReplacement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionReplacement{}

// TransactionReplacement struct for TransactionReplacement
type TransactionReplacement struct {
	ReplacedByType *ReplaceType `json:"replaced_by_type,omitempty"`
	// The ID of the transaction that this transaction was replaced by.
	ReplacedByTransactionId *string `json:"replaced_by_transaction_id,omitempty"`
	// The hash of the transaction that this transaction was replaced by.
	ReplacedByTransactionHash *string `json:"replaced_by_transaction_hash,omitempty"`
	ReplacedType *ReplaceType `json:"replaced_type,omitempty"`
	// The ID of the transaction that this transaction replaced.
	ReplacedTransactionId *string `json:"replaced_transaction_id,omitempty"`
	// The hash of the transaction that this transaction replaced.
	ReplacedTransactionHash *string `json:"replaced_transaction_hash,omitempty"`
}

// NewTransactionReplacement instantiates a new TransactionReplacement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionReplacement() *TransactionReplacement {
	this := TransactionReplacement{}
	return &this
}

// NewTransactionReplacementWithDefaults instantiates a new TransactionReplacement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionReplacementWithDefaults() *TransactionReplacement {
	this := TransactionReplacement{}
	return &this
}

// GetReplacedByType returns the ReplacedByType field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedByType() ReplaceType {
	if o == nil || IsNil(o.ReplacedByType) {
		var ret ReplaceType
		return ret
	}
	return *o.ReplacedByType
}

// GetReplacedByTypeOk returns a tuple with the ReplacedByType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedByTypeOk() (*ReplaceType, bool) {
	if o == nil || IsNil(o.ReplacedByType) {
		return nil, false
	}
	return o.ReplacedByType, true
}

// HasReplacedByType returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedByType() bool {
	if o != nil && !IsNil(o.ReplacedByType) {
		return true
	}

	return false
}

// SetReplacedByType gets a reference to the given ReplaceType and assigns it to the ReplacedByType field.
func (o *TransactionReplacement) SetReplacedByType(v ReplaceType) {
	o.ReplacedByType = &v
}

// GetReplacedByTransactionId returns the ReplacedByTransactionId field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedByTransactionId() string {
	if o == nil || IsNil(o.ReplacedByTransactionId) {
		var ret string
		return ret
	}
	return *o.ReplacedByTransactionId
}

// GetReplacedByTransactionIdOk returns a tuple with the ReplacedByTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedByTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacedByTransactionId) {
		return nil, false
	}
	return o.ReplacedByTransactionId, true
}

// HasReplacedByTransactionId returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedByTransactionId() bool {
	if o != nil && !IsNil(o.ReplacedByTransactionId) {
		return true
	}

	return false
}

// SetReplacedByTransactionId gets a reference to the given string and assigns it to the ReplacedByTransactionId field.
func (o *TransactionReplacement) SetReplacedByTransactionId(v string) {
	o.ReplacedByTransactionId = &v
}

// GetReplacedByTransactionHash returns the ReplacedByTransactionHash field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedByTransactionHash() string {
	if o == nil || IsNil(o.ReplacedByTransactionHash) {
		var ret string
		return ret
	}
	return *o.ReplacedByTransactionHash
}

// GetReplacedByTransactionHashOk returns a tuple with the ReplacedByTransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedByTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacedByTransactionHash) {
		return nil, false
	}
	return o.ReplacedByTransactionHash, true
}

// HasReplacedByTransactionHash returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedByTransactionHash() bool {
	if o != nil && !IsNil(o.ReplacedByTransactionHash) {
		return true
	}

	return false
}

// SetReplacedByTransactionHash gets a reference to the given string and assigns it to the ReplacedByTransactionHash field.
func (o *TransactionReplacement) SetReplacedByTransactionHash(v string) {
	o.ReplacedByTransactionHash = &v
}

// GetReplacedType returns the ReplacedType field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedType() ReplaceType {
	if o == nil || IsNil(o.ReplacedType) {
		var ret ReplaceType
		return ret
	}
	return *o.ReplacedType
}

// GetReplacedTypeOk returns a tuple with the ReplacedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedTypeOk() (*ReplaceType, bool) {
	if o == nil || IsNil(o.ReplacedType) {
		return nil, false
	}
	return o.ReplacedType, true
}

// HasReplacedType returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedType() bool {
	if o != nil && !IsNil(o.ReplacedType) {
		return true
	}

	return false
}

// SetReplacedType gets a reference to the given ReplaceType and assigns it to the ReplacedType field.
func (o *TransactionReplacement) SetReplacedType(v ReplaceType) {
	o.ReplacedType = &v
}

// GetReplacedTransactionId returns the ReplacedTransactionId field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedTransactionId() string {
	if o == nil || IsNil(o.ReplacedTransactionId) {
		var ret string
		return ret
	}
	return *o.ReplacedTransactionId
}

// GetReplacedTransactionIdOk returns a tuple with the ReplacedTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacedTransactionId) {
		return nil, false
	}
	return o.ReplacedTransactionId, true
}

// HasReplacedTransactionId returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedTransactionId() bool {
	if o != nil && !IsNil(o.ReplacedTransactionId) {
		return true
	}

	return false
}

// SetReplacedTransactionId gets a reference to the given string and assigns it to the ReplacedTransactionId field.
func (o *TransactionReplacement) SetReplacedTransactionId(v string) {
	o.ReplacedTransactionId = &v
}

// GetReplacedTransactionHash returns the ReplacedTransactionHash field value if set, zero value otherwise.
func (o *TransactionReplacement) GetReplacedTransactionHash() string {
	if o == nil || IsNil(o.ReplacedTransactionHash) {
		var ret string
		return ret
	}
	return *o.ReplacedTransactionHash
}

// GetReplacedTransactionHashOk returns a tuple with the ReplacedTransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReplacement) GetReplacedTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacedTransactionHash) {
		return nil, false
	}
	return o.ReplacedTransactionHash, true
}

// HasReplacedTransactionHash returns a boolean if a field has been set.
func (o *TransactionReplacement) HasReplacedTransactionHash() bool {
	if o != nil && !IsNil(o.ReplacedTransactionHash) {
		return true
	}

	return false
}

// SetReplacedTransactionHash gets a reference to the given string and assigns it to the ReplacedTransactionHash field.
func (o *TransactionReplacement) SetReplacedTransactionHash(v string) {
	o.ReplacedTransactionHash = &v
}

func (o TransactionReplacement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionReplacement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReplacedByType) {
		toSerialize["replaced_by_type"] = o.ReplacedByType
	}
	if !IsNil(o.ReplacedByTransactionId) {
		toSerialize["replaced_by_transaction_id"] = o.ReplacedByTransactionId
	}
	if !IsNil(o.ReplacedByTransactionHash) {
		toSerialize["replaced_by_transaction_hash"] = o.ReplacedByTransactionHash
	}
	if !IsNil(o.ReplacedType) {
		toSerialize["replaced_type"] = o.ReplacedType
	}
	if !IsNil(o.ReplacedTransactionId) {
		toSerialize["replaced_transaction_id"] = o.ReplacedTransactionId
	}
	if !IsNil(o.ReplacedTransactionHash) {
		toSerialize["replaced_transaction_hash"] = o.ReplacedTransactionHash
	}
	return toSerialize, nil
}

type NullableTransactionReplacement struct {
	value *TransactionReplacement
	isSet bool
}

func (v NullableTransactionReplacement) Get() *TransactionReplacement {
	return v.value
}

func (v *NullableTransactionReplacement) Set(val *TransactionReplacement) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionReplacement) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionReplacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionReplacement(val *TransactionReplacement) *NullableTransactionReplacement {
	return &NullableTransactionReplacement{value: val, isSet: true}
}

func (v NullableTransactionReplacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionReplacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


