/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ApprovalStatementStatus The approval statement status. Possible values include:    - `UnSend`: The request has not send.   - `Wait`: The request sent to broker user ,waiting audit.    - `Approve`: The user approved.   - `Reject`: The user rejected.   - `Invalid`: The request invalid.   - `Timeout`: The request timeout. 
type ApprovalStatementStatus string

// List of ApprovalStatementStatus
const (
	APPROVALSTATEMENTSTATUS_UN_SEND ApprovalStatementStatus = "UnSend"
	APPROVALSTATEMENTSTATUS_WAIT_AUDIT ApprovalStatementStatus = "WaitAudit"
	APPROVALSTATEMENTSTATUS_APPROVE ApprovalStatementStatus = "Approve"
	APPROVALSTATEMENTSTATUS_REJECT ApprovalStatementStatus = "Reject"
	APPROVALSTATEMENTSTATUS_INVALID ApprovalStatementStatus = "Invalid"
	APPROVALSTATEMENTSTATUS_TIMEOUT ApprovalStatementStatus = "Timeout"
)

// All allowed values of ApprovalStatementStatus enum
var AllowedApprovalStatementStatusEnumValues = []ApprovalStatementStatus{
	"UnSend",
	"WaitAudit",
	"Approve",
	"Reject",
	"Invalid",
	"Timeout",
}

func (v *ApprovalStatementStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApprovalStatementStatus(value)
	for _, existing := range AllowedApprovalStatementStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ApprovalStatementStatus("unknown")
    return nil
}

// NewApprovalStatementStatusFromValue returns a pointer to a valid ApprovalStatementStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApprovalStatementStatusFromValue(v string) (*ApprovalStatementStatus, error) {
	ev := ApprovalStatementStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApprovalStatementStatus: valid values are %v", v, AllowedApprovalStatementStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApprovalStatementStatus) IsValid() bool {
	for _, existing := range AllowedApprovalStatementStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApprovalStatementStatus value
func (v ApprovalStatementStatus) Ptr() *ApprovalStatementStatus {
	return &v
}

type NullableApprovalStatementStatus struct {
	value *ApprovalStatementStatus
	isSet bool
}

func (v NullableApprovalStatementStatus) Get() *ApprovalStatementStatus {
	return v.value
}

func (v *NullableApprovalStatementStatus) Set(val *ApprovalStatementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalStatementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalStatementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalStatementStatus(val *ApprovalStatementStatus) *NullableApprovalStatementStatus {
	return &NullableApprovalStatementStatus{value: val, isSet: true}
}

func (v NullableApprovalStatementStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalStatementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

