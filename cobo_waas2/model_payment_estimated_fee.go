/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentEstimatedFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentEstimatedFee{}

// PaymentEstimatedFee struct for PaymentEstimatedFee
type PaymentEstimatedFee struct {
	// The ID of the cryptocurrency you want to payment.
	TokenId string `json:"token_id"`
	// The payment amount. 
	Amount string `json:"amount"`
	CommissionFee *CommissionFee `json:"commission_fee,omitempty"`
	BridgingFee *BridgingFee `json:"bridging_fee,omitempty"`
	OtcFee *OtcFee `json:"otc_fee,omitempty"`
}

type _PaymentEstimatedFee PaymentEstimatedFee

// NewPaymentEstimatedFee instantiates a new PaymentEstimatedFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentEstimatedFee(tokenId string, amount string) *PaymentEstimatedFee {
	this := PaymentEstimatedFee{}
	this.TokenId = tokenId
	this.Amount = amount
	return &this
}

// NewPaymentEstimatedFeeWithDefaults instantiates a new PaymentEstimatedFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentEstimatedFeeWithDefaults() *PaymentEstimatedFee {
	this := PaymentEstimatedFee{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *PaymentEstimatedFee) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PaymentEstimatedFee) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PaymentEstimatedFee) SetTokenId(v string) {
	o.TokenId = v
}

// GetAmount returns the Amount field value
func (o *PaymentEstimatedFee) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentEstimatedFee) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentEstimatedFee) SetAmount(v string) {
	o.Amount = v
}

// GetCommissionFee returns the CommissionFee field value if set, zero value otherwise.
func (o *PaymentEstimatedFee) GetCommissionFee() CommissionFee {
	if o == nil || IsNil(o.CommissionFee) {
		var ret CommissionFee
		return ret
	}
	return *o.CommissionFee
}

// GetCommissionFeeOk returns a tuple with the CommissionFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEstimatedFee) GetCommissionFeeOk() (*CommissionFee, bool) {
	if o == nil || IsNil(o.CommissionFee) {
		return nil, false
	}
	return o.CommissionFee, true
}

// HasCommissionFee returns a boolean if a field has been set.
func (o *PaymentEstimatedFee) HasCommissionFee() bool {
	if o != nil && !IsNil(o.CommissionFee) {
		return true
	}

	return false
}

// SetCommissionFee gets a reference to the given CommissionFee and assigns it to the CommissionFee field.
func (o *PaymentEstimatedFee) SetCommissionFee(v CommissionFee) {
	o.CommissionFee = &v
}

// GetBridgingFee returns the BridgingFee field value if set, zero value otherwise.
func (o *PaymentEstimatedFee) GetBridgingFee() BridgingFee {
	if o == nil || IsNil(o.BridgingFee) {
		var ret BridgingFee
		return ret
	}
	return *o.BridgingFee
}

// GetBridgingFeeOk returns a tuple with the BridgingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEstimatedFee) GetBridgingFeeOk() (*BridgingFee, bool) {
	if o == nil || IsNil(o.BridgingFee) {
		return nil, false
	}
	return o.BridgingFee, true
}

// HasBridgingFee returns a boolean if a field has been set.
func (o *PaymentEstimatedFee) HasBridgingFee() bool {
	if o != nil && !IsNil(o.BridgingFee) {
		return true
	}

	return false
}

// SetBridgingFee gets a reference to the given BridgingFee and assigns it to the BridgingFee field.
func (o *PaymentEstimatedFee) SetBridgingFee(v BridgingFee) {
	o.BridgingFee = &v
}

// GetOtcFee returns the OtcFee field value if set, zero value otherwise.
func (o *PaymentEstimatedFee) GetOtcFee() OtcFee {
	if o == nil || IsNil(o.OtcFee) {
		var ret OtcFee
		return ret
	}
	return *o.OtcFee
}

// GetOtcFeeOk returns a tuple with the OtcFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEstimatedFee) GetOtcFeeOk() (*OtcFee, bool) {
	if o == nil || IsNil(o.OtcFee) {
		return nil, false
	}
	return o.OtcFee, true
}

// HasOtcFee returns a boolean if a field has been set.
func (o *PaymentEstimatedFee) HasOtcFee() bool {
	if o != nil && !IsNil(o.OtcFee) {
		return true
	}

	return false
}

// SetOtcFee gets a reference to the given OtcFee and assigns it to the OtcFee field.
func (o *PaymentEstimatedFee) SetOtcFee(v OtcFee) {
	o.OtcFee = &v
}

func (o PaymentEstimatedFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentEstimatedFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["amount"] = o.Amount
	if !IsNil(o.CommissionFee) {
		toSerialize["commission_fee"] = o.CommissionFee
	}
	if !IsNil(o.BridgingFee) {
		toSerialize["bridging_fee"] = o.BridgingFee
	}
	if !IsNil(o.OtcFee) {
		toSerialize["otc_fee"] = o.OtcFee
	}
	return toSerialize, nil
}

func (o *PaymentEstimatedFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentEstimatedFee := _PaymentEstimatedFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentEstimatedFee)

	if err != nil {
		return err
	}

	*o = PaymentEstimatedFee(varPaymentEstimatedFee)

	return err
}

type NullablePaymentEstimatedFee struct {
	value *PaymentEstimatedFee
	isSet bool
}

func (v NullablePaymentEstimatedFee) Get() *PaymentEstimatedFee {
	return v.value
}

func (v *NullablePaymentEstimatedFee) Set(val *PaymentEstimatedFee) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentEstimatedFee) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentEstimatedFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentEstimatedFee(val *PaymentEstimatedFee) *NullablePaymentEstimatedFee {
	return &NullablePaymentEstimatedFee{value: val, isSet: true}
}

func (v NullablePaymentEstimatedFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentEstimatedFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


