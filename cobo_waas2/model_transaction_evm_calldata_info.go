/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionEvmCalldataInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionEvmCalldataInfo{}

// TransactionEvmCalldataInfo struct for TransactionEvmCalldataInfo
type TransactionEvmCalldataInfo struct {
	// The ID of the chain on which the smart contract is deployed.
	ChainId *string `json:"chain_id,omitempty"`
	// The address of the smart contract.
	Address *string `json:"address,omitempty"`
	// The name of the smart contract.
	Name *string `json:"name,omitempty"`
	// The address of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
	ImplAddress *string `json:"impl_address,omitempty"`
	// The name of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
	ImplName *string `json:"impl_name,omitempty"`
	// Whether the specified smart contract address is a proxy contract. - `true`: The specified smart contract address is a proxy contract. - `false`: The specified smart contract address is not a proxy contract. 
	Proxy *bool `json:"proxy,omitempty"`
	Method *TransactionEvmContractMethod `json:"method,omitempty"`
	// The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter: - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`. - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`. - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values. 
	Params *string `json:"params,omitempty"`
}

// NewTransactionEvmCalldataInfo instantiates a new TransactionEvmCalldataInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEvmCalldataInfo() *TransactionEvmCalldataInfo {
	this := TransactionEvmCalldataInfo{}
	return &this
}

// NewTransactionEvmCalldataInfoWithDefaults instantiates a new TransactionEvmCalldataInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEvmCalldataInfoWithDefaults() *TransactionEvmCalldataInfo {
	this := TransactionEvmCalldataInfo{}
	return &this
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *TransactionEvmCalldataInfo) SetChainId(v string) {
	o.ChainId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TransactionEvmCalldataInfo) SetAddress(v string) {
	o.Address = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransactionEvmCalldataInfo) SetName(v string) {
	o.Name = &v
}

// GetImplAddress returns the ImplAddress field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetImplAddress() string {
	if o == nil || IsNil(o.ImplAddress) {
		var ret string
		return ret
	}
	return *o.ImplAddress
}

// GetImplAddressOk returns a tuple with the ImplAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetImplAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ImplAddress) {
		return nil, false
	}
	return o.ImplAddress, true
}

// HasImplAddress returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasImplAddress() bool {
	if o != nil && !IsNil(o.ImplAddress) {
		return true
	}

	return false
}

// SetImplAddress gets a reference to the given string and assigns it to the ImplAddress field.
func (o *TransactionEvmCalldataInfo) SetImplAddress(v string) {
	o.ImplAddress = &v
}

// GetImplName returns the ImplName field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetImplName() string {
	if o == nil || IsNil(o.ImplName) {
		var ret string
		return ret
	}
	return *o.ImplName
}

// GetImplNameOk returns a tuple with the ImplName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetImplNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImplName) {
		return nil, false
	}
	return o.ImplName, true
}

// HasImplName returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasImplName() bool {
	if o != nil && !IsNil(o.ImplName) {
		return true
	}

	return false
}

// SetImplName gets a reference to the given string and assigns it to the ImplName field.
func (o *TransactionEvmCalldataInfo) SetImplName(v string) {
	o.ImplName = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetProxy() bool {
	if o == nil || IsNil(o.Proxy) {
		var ret bool
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetProxyOk() (*bool, bool) {
	if o == nil || IsNil(o.Proxy) {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasProxy() bool {
	if o != nil && !IsNil(o.Proxy) {
		return true
	}

	return false
}

// SetProxy gets a reference to the given bool and assigns it to the Proxy field.
func (o *TransactionEvmCalldataInfo) SetProxy(v bool) {
	o.Proxy = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetMethod() TransactionEvmContractMethod {
	if o == nil || IsNil(o.Method) {
		var ret TransactionEvmContractMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetMethodOk() (*TransactionEvmContractMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given TransactionEvmContractMethod and assigns it to the Method field.
func (o *TransactionEvmCalldataInfo) SetMethod(v TransactionEvmContractMethod) {
	o.Method = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *TransactionEvmCalldataInfo) GetParams() string {
	if o == nil || IsNil(o.Params) {
		var ret string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmCalldataInfo) GetParamsOk() (*string, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *TransactionEvmCalldataInfo) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given string and assigns it to the Params field.
func (o *TransactionEvmCalldataInfo) SetParams(v string) {
	o.Params = &v
}

func (o TransactionEvmCalldataInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionEvmCalldataInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ImplAddress) {
		toSerialize["impl_address"] = o.ImplAddress
	}
	if !IsNil(o.ImplName) {
		toSerialize["impl_name"] = o.ImplName
	}
	if !IsNil(o.Proxy) {
		toSerialize["proxy"] = o.Proxy
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

type NullableTransactionEvmCalldataInfo struct {
	value *TransactionEvmCalldataInfo
	isSet bool
}

func (v NullableTransactionEvmCalldataInfo) Get() *TransactionEvmCalldataInfo {
	return v.value
}

func (v *NullableTransactionEvmCalldataInfo) Set(val *TransactionEvmCalldataInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEvmCalldataInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEvmCalldataInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEvmCalldataInfo(val *TransactionEvmCalldataInfo) *NullableTransactionEvmCalldataInfo {
	return &NullableTransactionEvmCalldataInfo{value: val, isSet: true}
}

func (v NullableTransactionEvmCalldataInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEvmCalldataInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


