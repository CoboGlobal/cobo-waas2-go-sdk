/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentTransactionEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentTransactionEventData{}

// PaymentTransactionEventData struct for PaymentTransactionEventData
type PaymentTransactionEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data.
	DataType string `json:"data_type"`
	// The transaction ID.
	TransactionId string `json:"transaction_id"`
	// The Cobo ID, which can be used to track a transaction.
	CoboId *string `json:"cobo_id,omitempty"`
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
	// For deposit transactions, this property represents the wallet ID of the transaction destination. For transactions of other types, this property represents the wallet ID of the transaction source.
	WalletId string `json:"wallet_id"`
	Type *TransactionType `json:"type,omitempty"`
	Status TransactionStatus `json:"status"`
	SubStatus *TransactionSubStatus `json:"sub_status,omitempty"`
	// (This property is applicable to approval failures and signature failures only) The reason why the transaction failed.
	FailedReason *string `json:"failed_reason,omitempty"`
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
	ChainId *string `json:"chain_id,omitempty"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId *string `json:"token_id,omitempty"`
	// (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
	AssetId *string `json:"asset_id,omitempty"`
	Source TransactionSource `json:"source"`
	Destination TransactionDestination `json:"destination"`
	Result *TransactionResult `json:"result,omitempty"`
	Fee *TransactionFee `json:"fee,omitempty"`
	// The transaction initiator.
	Initiator *string `json:"initiator,omitempty"`
	InitiatorType TransactionInitiatorType `json:"initiator_type"`
	// The number of confirmations this transaction has received.
	ConfirmedNum *int32 `json:"confirmed_num,omitempty"`
	// The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
	ConfirmingThreshold *int32 `json:"confirming_threshold,omitempty"`
	// The transaction hash.
	TransactionHash *string `json:"transaction_hash,omitempty"`
	BlockInfo *TransactionBlockInfo `json:"block_info,omitempty"`
	RawTxInfo *TransactionRawTxInfo `json:"raw_tx_info,omitempty"`
	Replacement *TransactionReplacement `json:"replacement,omitempty"`
	// A custom transaction category for you to identify your transfers more easily.
	Category []string `json:"category,omitempty"`
	// The description for your transaction.
	Description *string `json:"description,omitempty"`
	// Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer. - `true`: The transaction was executed as a Cobo Loop transfer. - `false`: The transaction was not executed as a Cobo Loop transfer. 
	IsLoop *bool `json:"is_loop,omitempty"`
	// The transaction category defined by Cobo. Possible values include:  - `AutoSweep`: An auto-sweep transaction. - `AutoFueling`: A transaction where Fee Station pays transaction fees to an address within your wallet. - `AutoFuelingRefund`: A refund for an auto-fueling transaction. - `SafeTxMessage`: A message signing transaction to authorize a Smart Contract Wallet (Safe\\{Wallet\\}) transaction. - `BillPayment`: A transaction to pay Cobo bills through Fee Station. - `BillRefund`: A refund for a previously made bill payment. - `CommissionFeeCharge`: A transaction to charge commission fees via Fee Station. - `CommissionFeeRefund`: A refund of previously charged commission fees. 
	CoboCategory []string `json:"cobo_category,omitempty"`
	// A list of JSON-encoded strings containing structured, business-specific extra information for the transaction. Each item corresponds to a specific data type, indicated by the `extra_type` field in the JSON object (for example, \"BabylonBusinessInfo\", \"BtcAddressInfo\"). 
	Extra []string `json:"extra,omitempty"`
	FuelingInfo *TransactionFuelingInfo `json:"fueling_info,omitempty"`
	// The time when the transaction was created, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp int64 `json:"created_timestamp"`
	// The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.
	UpdatedTimestamp int64 `json:"updated_timestamp"`
	AcquiringType AcquiringType `json:"acquiring_type"`
	// The pay-in order ID.
	OrderId *string `json:"order_id,omitempty"`
	// A unique reference code assigned by the developer to identify this order in their system.
	PspOrderCode *string `json:"psp_order_code,omitempty"`
	// A unique identifier assigned by Cobo to track and identify individual payers.
	PayerId *string `json:"payer_id,omitempty"`
	// A unique identifier assigned by the developer to track and identify individual payers in their system.
	CustomPayerId *string `json:"custom_payer_id,omitempty"`
}

type _PaymentTransactionEventData PaymentTransactionEventData

// NewPaymentTransactionEventData instantiates a new PaymentTransactionEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentTransactionEventData(dataType string, transactionId string, walletId string, status TransactionStatus, source TransactionSource, destination TransactionDestination, initiatorType TransactionInitiatorType, createdTimestamp int64, updatedTimestamp int64, acquiringType AcquiringType) *PaymentTransactionEventData {
	this := PaymentTransactionEventData{}
	this.DataType = dataType
	this.TransactionId = transactionId
	this.WalletId = walletId
	this.Status = status
	this.Source = source
	this.Destination = destination
	this.InitiatorType = initiatorType
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.AcquiringType = acquiringType
	return &this
}

// NewPaymentTransactionEventDataWithDefaults instantiates a new PaymentTransactionEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentTransactionEventDataWithDefaults() *PaymentTransactionEventData {
	this := PaymentTransactionEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *PaymentTransactionEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *PaymentTransactionEventData) SetDataType(v string) {
	o.DataType = v
}

// GetTransactionId returns the TransactionId field value
func (o *PaymentTransactionEventData) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *PaymentTransactionEventData) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetCoboId returns the CoboId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetCoboId() string {
	if o == nil || IsNil(o.CoboId) {
		var ret string
		return ret
	}
	return *o.CoboId
}

// GetCoboIdOk returns a tuple with the CoboId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetCoboIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoboId) {
		return nil, false
	}
	return o.CoboId, true
}

// HasCoboId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasCoboId() bool {
	if o != nil && !IsNil(o.CoboId) {
		return true
	}

	return false
}

// SetCoboId gets a reference to the given string and assigns it to the CoboId field.
func (o *PaymentTransactionEventData) SetCoboId(v string) {
	o.CoboId = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *PaymentTransactionEventData) SetRequestId(v string) {
	o.RequestId = &v
}

// GetWalletId returns the WalletId field value
func (o *PaymentTransactionEventData) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *PaymentTransactionEventData) SetWalletId(v string) {
	o.WalletId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetType() TransactionType {
	if o == nil || IsNil(o.Type) {
		var ret TransactionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetTypeOk() (*TransactionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TransactionType and assigns it to the Type field.
func (o *PaymentTransactionEventData) SetType(v TransactionType) {
	o.Type = &v
}

// GetStatus returns the Status field value
func (o *PaymentTransactionEventData) GetStatus() TransactionStatus {
	if o == nil {
		var ret TransactionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentTransactionEventData) SetStatus(v TransactionStatus) {
	o.Status = v
}

// GetSubStatus returns the SubStatus field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetSubStatus() TransactionSubStatus {
	if o == nil || IsNil(o.SubStatus) {
		var ret TransactionSubStatus
		return ret
	}
	return *o.SubStatus
}

// GetSubStatusOk returns a tuple with the SubStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetSubStatusOk() (*TransactionSubStatus, bool) {
	if o == nil || IsNil(o.SubStatus) {
		return nil, false
	}
	return o.SubStatus, true
}

// HasSubStatus returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasSubStatus() bool {
	if o != nil && !IsNil(o.SubStatus) {
		return true
	}

	return false
}

// SetSubStatus gets a reference to the given TransactionSubStatus and assigns it to the SubStatus field.
func (o *PaymentTransactionEventData) SetSubStatus(v TransactionSubStatus) {
	o.SubStatus = &v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *PaymentTransactionEventData) SetFailedReason(v string) {
	o.FailedReason = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *PaymentTransactionEventData) SetChainId(v string) {
	o.ChainId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *PaymentTransactionEventData) SetTokenId(v string) {
	o.TokenId = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *PaymentTransactionEventData) SetAssetId(v string) {
	o.AssetId = &v
}

// GetSource returns the Source field value
func (o *PaymentTransactionEventData) GetSource() TransactionSource {
	if o == nil {
		var ret TransactionSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetSourceOk() (*TransactionSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *PaymentTransactionEventData) SetSource(v TransactionSource) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *PaymentTransactionEventData) GetDestination() TransactionDestination {
	if o == nil {
		var ret TransactionDestination
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetDestinationOk() (*TransactionDestination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *PaymentTransactionEventData) SetDestination(v TransactionDestination) {
	o.Destination = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetResult() TransactionResult {
	if o == nil || IsNil(o.Result) {
		var ret TransactionResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetResultOk() (*TransactionResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given TransactionResult and assigns it to the Result field.
func (o *PaymentTransactionEventData) SetResult(v TransactionResult) {
	o.Result = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetFee() TransactionFee {
	if o == nil || IsNil(o.Fee) {
		var ret TransactionFee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetFeeOk() (*TransactionFee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given TransactionFee and assigns it to the Fee field.
func (o *PaymentTransactionEventData) SetFee(v TransactionFee) {
	o.Fee = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *PaymentTransactionEventData) SetInitiator(v string) {
	o.Initiator = &v
}

// GetInitiatorType returns the InitiatorType field value
func (o *PaymentTransactionEventData) GetInitiatorType() TransactionInitiatorType {
	if o == nil {
		var ret TransactionInitiatorType
		return ret
	}

	return o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetInitiatorTypeOk() (*TransactionInitiatorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorType, true
}

// SetInitiatorType sets field value
func (o *PaymentTransactionEventData) SetInitiatorType(v TransactionInitiatorType) {
	o.InitiatorType = v
}

// GetConfirmedNum returns the ConfirmedNum field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetConfirmedNum() int32 {
	if o == nil || IsNil(o.ConfirmedNum) {
		var ret int32
		return ret
	}
	return *o.ConfirmedNum
}

// GetConfirmedNumOk returns a tuple with the ConfirmedNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetConfirmedNumOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfirmedNum) {
		return nil, false
	}
	return o.ConfirmedNum, true
}

// HasConfirmedNum returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasConfirmedNum() bool {
	if o != nil && !IsNil(o.ConfirmedNum) {
		return true
	}

	return false
}

// SetConfirmedNum gets a reference to the given int32 and assigns it to the ConfirmedNum field.
func (o *PaymentTransactionEventData) SetConfirmedNum(v int32) {
	o.ConfirmedNum = &v
}

// GetConfirmingThreshold returns the ConfirmingThreshold field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetConfirmingThreshold() int32 {
	if o == nil || IsNil(o.ConfirmingThreshold) {
		var ret int32
		return ret
	}
	return *o.ConfirmingThreshold
}

// GetConfirmingThresholdOk returns a tuple with the ConfirmingThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetConfirmingThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfirmingThreshold) {
		return nil, false
	}
	return o.ConfirmingThreshold, true
}

// HasConfirmingThreshold returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasConfirmingThreshold() bool {
	if o != nil && !IsNil(o.ConfirmingThreshold) {
		return true
	}

	return false
}

// SetConfirmingThreshold gets a reference to the given int32 and assigns it to the ConfirmingThreshold field.
func (o *PaymentTransactionEventData) SetConfirmingThreshold(v int32) {
	o.ConfirmingThreshold = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *PaymentTransactionEventData) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetBlockInfo returns the BlockInfo field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetBlockInfo() TransactionBlockInfo {
	if o == nil || IsNil(o.BlockInfo) {
		var ret TransactionBlockInfo
		return ret
	}
	return *o.BlockInfo
}

// GetBlockInfoOk returns a tuple with the BlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetBlockInfoOk() (*TransactionBlockInfo, bool) {
	if o == nil || IsNil(o.BlockInfo) {
		return nil, false
	}
	return o.BlockInfo, true
}

// HasBlockInfo returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasBlockInfo() bool {
	if o != nil && !IsNil(o.BlockInfo) {
		return true
	}

	return false
}

// SetBlockInfo gets a reference to the given TransactionBlockInfo and assigns it to the BlockInfo field.
func (o *PaymentTransactionEventData) SetBlockInfo(v TransactionBlockInfo) {
	o.BlockInfo = &v
}

// GetRawTxInfo returns the RawTxInfo field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetRawTxInfo() TransactionRawTxInfo {
	if o == nil || IsNil(o.RawTxInfo) {
		var ret TransactionRawTxInfo
		return ret
	}
	return *o.RawTxInfo
}

// GetRawTxInfoOk returns a tuple with the RawTxInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetRawTxInfoOk() (*TransactionRawTxInfo, bool) {
	if o == nil || IsNil(o.RawTxInfo) {
		return nil, false
	}
	return o.RawTxInfo, true
}

// HasRawTxInfo returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasRawTxInfo() bool {
	if o != nil && !IsNil(o.RawTxInfo) {
		return true
	}

	return false
}

// SetRawTxInfo gets a reference to the given TransactionRawTxInfo and assigns it to the RawTxInfo field.
func (o *PaymentTransactionEventData) SetRawTxInfo(v TransactionRawTxInfo) {
	o.RawTxInfo = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetReplacement() TransactionReplacement {
	if o == nil || IsNil(o.Replacement) {
		var ret TransactionReplacement
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetReplacementOk() (*TransactionReplacement, bool) {
	if o == nil || IsNil(o.Replacement) {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasReplacement() bool {
	if o != nil && !IsNil(o.Replacement) {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given TransactionReplacement and assigns it to the Replacement field.
func (o *PaymentTransactionEventData) SetReplacement(v TransactionReplacement) {
	o.Replacement = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *PaymentTransactionEventData) SetCategory(v []string) {
	o.Category = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PaymentTransactionEventData) SetDescription(v string) {
	o.Description = &v
}

// GetIsLoop returns the IsLoop field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetIsLoop() bool {
	if o == nil || IsNil(o.IsLoop) {
		var ret bool
		return ret
	}
	return *o.IsLoop
}

// GetIsLoopOk returns a tuple with the IsLoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetIsLoopOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoop) {
		return nil, false
	}
	return o.IsLoop, true
}

// HasIsLoop returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasIsLoop() bool {
	if o != nil && !IsNil(o.IsLoop) {
		return true
	}

	return false
}

// SetIsLoop gets a reference to the given bool and assigns it to the IsLoop field.
func (o *PaymentTransactionEventData) SetIsLoop(v bool) {
	o.IsLoop = &v
}

// GetCoboCategory returns the CoboCategory field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetCoboCategory() []string {
	if o == nil || IsNil(o.CoboCategory) {
		var ret []string
		return ret
	}
	return o.CoboCategory
}

// GetCoboCategoryOk returns a tuple with the CoboCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetCoboCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.CoboCategory) {
		return nil, false
	}
	return o.CoboCategory, true
}

// HasCoboCategory returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasCoboCategory() bool {
	if o != nil && !IsNil(o.CoboCategory) {
		return true
	}

	return false
}

// SetCoboCategory gets a reference to the given []string and assigns it to the CoboCategory field.
func (o *PaymentTransactionEventData) SetCoboCategory(v []string) {
	o.CoboCategory = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetExtra() []string {
	if o == nil || IsNil(o.Extra) {
		var ret []string
		return ret
	}
	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetExtraOk() ([]string, bool) {
	if o == nil || IsNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given []string and assigns it to the Extra field.
func (o *PaymentTransactionEventData) SetExtra(v []string) {
	o.Extra = v
}

// GetFuelingInfo returns the FuelingInfo field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetFuelingInfo() TransactionFuelingInfo {
	if o == nil || IsNil(o.FuelingInfo) {
		var ret TransactionFuelingInfo
		return ret
	}
	return *o.FuelingInfo
}

// GetFuelingInfoOk returns a tuple with the FuelingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetFuelingInfoOk() (*TransactionFuelingInfo, bool) {
	if o == nil || IsNil(o.FuelingInfo) {
		return nil, false
	}
	return o.FuelingInfo, true
}

// HasFuelingInfo returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasFuelingInfo() bool {
	if o != nil && !IsNil(o.FuelingInfo) {
		return true
	}

	return false
}

// SetFuelingInfo gets a reference to the given TransactionFuelingInfo and assigns it to the FuelingInfo field.
func (o *PaymentTransactionEventData) SetFuelingInfo(v TransactionFuelingInfo) {
	o.FuelingInfo = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *PaymentTransactionEventData) GetCreatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *PaymentTransactionEventData) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *PaymentTransactionEventData) GetUpdatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *PaymentTransactionEventData) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = v
}

// GetAcquiringType returns the AcquiringType field value
func (o *PaymentTransactionEventData) GetAcquiringType() AcquiringType {
	if o == nil {
		var ret AcquiringType
		return ret
	}

	return o.AcquiringType
}

// GetAcquiringTypeOk returns a tuple with the AcquiringType field value
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetAcquiringTypeOk() (*AcquiringType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcquiringType, true
}

// SetAcquiringType sets field value
func (o *PaymentTransactionEventData) SetAcquiringType(v AcquiringType) {
	o.AcquiringType = v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *PaymentTransactionEventData) SetOrderId(v string) {
	o.OrderId = &v
}

// GetPspOrderCode returns the PspOrderCode field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetPspOrderCode() string {
	if o == nil || IsNil(o.PspOrderCode) {
		var ret string
		return ret
	}
	return *o.PspOrderCode
}

// GetPspOrderCodeOk returns a tuple with the PspOrderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetPspOrderCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PspOrderCode) {
		return nil, false
	}
	return o.PspOrderCode, true
}

// HasPspOrderCode returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasPspOrderCode() bool {
	if o != nil && !IsNil(o.PspOrderCode) {
		return true
	}

	return false
}

// SetPspOrderCode gets a reference to the given string and assigns it to the PspOrderCode field.
func (o *PaymentTransactionEventData) SetPspOrderCode(v string) {
	o.PspOrderCode = &v
}

// GetPayerId returns the PayerId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetPayerId() string {
	if o == nil || IsNil(o.PayerId) {
		var ret string
		return ret
	}
	return *o.PayerId
}

// GetPayerIdOk returns a tuple with the PayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetPayerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayerId) {
		return nil, false
	}
	return o.PayerId, true
}

// HasPayerId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasPayerId() bool {
	if o != nil && !IsNil(o.PayerId) {
		return true
	}

	return false
}

// SetPayerId gets a reference to the given string and assigns it to the PayerId field.
func (o *PaymentTransactionEventData) SetPayerId(v string) {
	o.PayerId = &v
}

// GetCustomPayerId returns the CustomPayerId field value if set, zero value otherwise.
func (o *PaymentTransactionEventData) GetCustomPayerId() string {
	if o == nil || IsNil(o.CustomPayerId) {
		var ret string
		return ret
	}
	return *o.CustomPayerId
}

// GetCustomPayerIdOk returns a tuple with the CustomPayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransactionEventData) GetCustomPayerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomPayerId) {
		return nil, false
	}
	return o.CustomPayerId, true
}

// HasCustomPayerId returns a boolean if a field has been set.
func (o *PaymentTransactionEventData) HasCustomPayerId() bool {
	if o != nil && !IsNil(o.CustomPayerId) {
		return true
	}

	return false
}

// SetCustomPayerId gets a reference to the given string and assigns it to the CustomPayerId field.
func (o *PaymentTransactionEventData) SetCustomPayerId(v string) {
	o.CustomPayerId = &v
}

func (o PaymentTransactionEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentTransactionEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["transaction_id"] = o.TransactionId
	if !IsNil(o.CoboId) {
		toSerialize["cobo_id"] = o.CoboId
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.SubStatus) {
		toSerialize["sub_status"] = o.SubStatus
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failed_reason"] = o.FailedReason
	}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	toSerialize["initiator_type"] = o.InitiatorType
	if !IsNil(o.ConfirmedNum) {
		toSerialize["confirmed_num"] = o.ConfirmedNum
	}
	if !IsNil(o.ConfirmingThreshold) {
		toSerialize["confirming_threshold"] = o.ConfirmingThreshold
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.BlockInfo) {
		toSerialize["block_info"] = o.BlockInfo
	}
	if !IsNil(o.RawTxInfo) {
		toSerialize["raw_tx_info"] = o.RawTxInfo
	}
	if !IsNil(o.Replacement) {
		toSerialize["replacement"] = o.Replacement
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsLoop) {
		toSerialize["is_loop"] = o.IsLoop
	}
	if !IsNil(o.CoboCategory) {
		toSerialize["cobo_category"] = o.CoboCategory
	}
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	if !IsNil(o.FuelingInfo) {
		toSerialize["fueling_info"] = o.FuelingInfo
	}
	toSerialize["created_timestamp"] = o.CreatedTimestamp
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	toSerialize["acquiring_type"] = o.AcquiringType
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.PspOrderCode) {
		toSerialize["psp_order_code"] = o.PspOrderCode
	}
	if !IsNil(o.PayerId) {
		toSerialize["payer_id"] = o.PayerId
	}
	if !IsNil(o.CustomPayerId) {
		toSerialize["custom_payer_id"] = o.CustomPayerId
	}
	return toSerialize, nil
}

func (o *PaymentTransactionEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"transaction_id",
		"wallet_id",
		"status",
		"source",
		"destination",
		"initiator_type",
		"created_timestamp",
		"updated_timestamp",
		"acquiring_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentTransactionEventData := _PaymentTransactionEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentTransactionEventData)

	if err != nil {
		return err
	}

	*o = PaymentTransactionEventData(varPaymentTransactionEventData)

	return err
}

type NullablePaymentTransactionEventData struct {
	value *PaymentTransactionEventData
	isSet bool
}

func (v NullablePaymentTransactionEventData) Get() *PaymentTransactionEventData {
	return v.value
}

func (v *NullablePaymentTransactionEventData) Set(val *PaymentTransactionEventData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTransactionEventData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTransactionEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTransactionEventData(val *PaymentTransactionEventData) *NullablePaymentTransactionEventData {
	return &NullablePaymentTransactionEventData{value: val, isSet: true}
}

func (v NullablePaymentTransactionEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTransactionEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


