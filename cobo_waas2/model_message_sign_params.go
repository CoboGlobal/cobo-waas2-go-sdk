/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageSignParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageSignParams{}

// MessageSignParams The information about a transaction that signs a message. You can provide the message either as raw data or as structured data.
type MessageSignParams struct {
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId string `json:"request_id"`
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains).
	ChainId string `json:"chain_id"`
	Source MessageSignSource `json:"source"`
	Destination MessageSignDestination `json:"destination"`
	// The description of the message sign transaction.
	Description *string `json:"description,omitempty"`
	// The custom category for you to identify your transactions.
	CategoryNames []string `json:"category_names,omitempty"`
}

type _MessageSignParams MessageSignParams

// NewMessageSignParams instantiates a new MessageSignParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageSignParams(requestId string, chainId string, source MessageSignSource, destination MessageSignDestination) *MessageSignParams {
	this := MessageSignParams{}
	this.RequestId = requestId
	this.ChainId = chainId
	this.Source = source
	this.Destination = destination
	return &this
}

// NewMessageSignParamsWithDefaults instantiates a new MessageSignParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageSignParamsWithDefaults() *MessageSignParams {
	this := MessageSignParams{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *MessageSignParams) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *MessageSignParams) SetRequestId(v string) {
	o.RequestId = v
}

// GetChainId returns the ChainId field value
func (o *MessageSignParams) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *MessageSignParams) SetChainId(v string) {
	o.ChainId = v
}

// GetSource returns the Source field value
func (o *MessageSignParams) GetSource() MessageSignSource {
	if o == nil {
		var ret MessageSignSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetSourceOk() (*MessageSignSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *MessageSignParams) SetSource(v MessageSignSource) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *MessageSignParams) GetDestination() MessageSignDestination {
	if o == nil {
		var ret MessageSignDestination
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetDestinationOk() (*MessageSignDestination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *MessageSignParams) SetDestination(v MessageSignDestination) {
	o.Destination = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MessageSignParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MessageSignParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MessageSignParams) SetDescription(v string) {
	o.Description = &v
}

// GetCategoryNames returns the CategoryNames field value if set, zero value otherwise.
func (o *MessageSignParams) GetCategoryNames() []string {
	if o == nil || IsNil(o.CategoryNames) {
		var ret []string
		return ret
	}
	return o.CategoryNames
}

// GetCategoryNamesOk returns a tuple with the CategoryNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSignParams) GetCategoryNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryNames) {
		return nil, false
	}
	return o.CategoryNames, true
}

// HasCategoryNames returns a boolean if a field has been set.
func (o *MessageSignParams) HasCategoryNames() bool {
	if o != nil && !IsNil(o.CategoryNames) {
		return true
	}

	return false
}

// SetCategoryNames gets a reference to the given []string and assigns it to the CategoryNames field.
func (o *MessageSignParams) SetCategoryNames(v []string) {
	o.CategoryNames = v
}

func (o MessageSignParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageSignParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId
	toSerialize["chain_id"] = o.ChainId
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CategoryNames) {
		toSerialize["category_names"] = o.CategoryNames
	}
	return toSerialize, nil
}

func (o *MessageSignParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
		"chain_id",
		"source",
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageSignParams := _MessageSignParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageSignParams)

	if err != nil {
		return err
	}

	*o = MessageSignParams(varMessageSignParams)

	return err
}

type NullableMessageSignParams struct {
	value *MessageSignParams
	isSet bool
}

func (v NullableMessageSignParams) Get() *MessageSignParams {
	return v.value
}

func (v *NullableMessageSignParams) Set(val *MessageSignParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSignParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSignParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSignParams(val *MessageSignParams) *NullableMessageSignParams {
	return &NullableMessageSignParams{value: val, isSet: true}
}

func (v NullableMessageSignParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSignParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


