/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationTokenDetailInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationTokenDetailInfo{}

// TokenizationTokenDetailInfo struct for TokenizationTokenDetailInfo
type TokenizationTokenDetailInfo struct {
	// The unique token identifier.
	TokenId string `json:"token_id"`
	// The chain ID of the tokenization contract.
	ChainId string `json:"chain_id"`
	// The address of the token contract.
	TokenAddress *string `json:"token_address,omitempty"`
	// The name of the token.
	TokenName *string `json:"token_name,omitempty"`
	// The unique token symbol.
	TokenSymbol string `json:"token_symbol"`
	TokenStandard TokenizationTokenStandard `json:"token_standard"`
	// The number of decimals of the token.
	Decimals int32 `json:"decimals"`
	// Whether the allowlist feature is activated for the token.
	TokenAccessActivated *bool `json:"token_access_activated,omitempty"`
	Status TokenizationStatus `json:"status"`
	// The total supply of the token.
	TotalSupply *string `json:"total_supply,omitempty"`
	// The amount of tokens held by the organization.
	Holdings *string `json:"holdings,omitempty"`
	// List of execution addresses and their permissions.
	Permissions []TokenizationAddressPermission `json:"permissions,omitempty"`
}

type _TokenizationTokenDetailInfo TokenizationTokenDetailInfo

// NewTokenizationTokenDetailInfo instantiates a new TokenizationTokenDetailInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationTokenDetailInfo(tokenId string, chainId string, tokenSymbol string, tokenStandard TokenizationTokenStandard, decimals int32, status TokenizationStatus) *TokenizationTokenDetailInfo {
	this := TokenizationTokenDetailInfo{}
	this.TokenId = tokenId
	this.ChainId = chainId
	this.TokenSymbol = tokenSymbol
	this.TokenStandard = tokenStandard
	this.Decimals = decimals
	this.Status = status
	return &this
}

// NewTokenizationTokenDetailInfoWithDefaults instantiates a new TokenizationTokenDetailInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationTokenDetailInfoWithDefaults() *TokenizationTokenDetailInfo {
	this := TokenizationTokenDetailInfo{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *TokenizationTokenDetailInfo) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenizationTokenDetailInfo) SetTokenId(v string) {
	o.TokenId = v
}

// GetChainId returns the ChainId field value
func (o *TokenizationTokenDetailInfo) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *TokenizationTokenDetailInfo) SetChainId(v string) {
	o.ChainId = v
}

// GetTokenAddress returns the TokenAddress field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetTokenAddress() string {
	if o == nil || IsNil(o.TokenAddress) {
		var ret string
		return ret
	}
	return *o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TokenAddress) {
		return nil, false
	}
	return o.TokenAddress, true
}

// HasTokenAddress returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasTokenAddress() bool {
	if o != nil && !IsNil(o.TokenAddress) {
		return true
	}

	return false
}

// SetTokenAddress gets a reference to the given string and assigns it to the TokenAddress field.
func (o *TokenizationTokenDetailInfo) SetTokenAddress(v string) {
	o.TokenAddress = &v
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetTokenName() string {
	if o == nil || IsNil(o.TokenName) {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenNameOk() (*string, bool) {
	if o == nil || IsNil(o.TokenName) {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasTokenName() bool {
	if o != nil && !IsNil(o.TokenName) {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *TokenizationTokenDetailInfo) SetTokenName(v string) {
	o.TokenName = &v
}

// GetTokenSymbol returns the TokenSymbol field value
func (o *TokenizationTokenDetailInfo) GetTokenSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenSymbol
}

// GetTokenSymbolOk returns a tuple with the TokenSymbol field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenSymbol, true
}

// SetTokenSymbol sets field value
func (o *TokenizationTokenDetailInfo) SetTokenSymbol(v string) {
	o.TokenSymbol = v
}

// GetTokenStandard returns the TokenStandard field value
func (o *TokenizationTokenDetailInfo) GetTokenStandard() TokenizationTokenStandard {
	if o == nil {
		var ret TokenizationTokenStandard
		return ret
	}

	return o.TokenStandard
}

// GetTokenStandardOk returns a tuple with the TokenStandard field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenStandardOk() (*TokenizationTokenStandard, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenStandard, true
}

// SetTokenStandard sets field value
func (o *TokenizationTokenDetailInfo) SetTokenStandard(v TokenizationTokenStandard) {
	o.TokenStandard = v
}

// GetDecimals returns the Decimals field value
func (o *TokenizationTokenDetailInfo) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenizationTokenDetailInfo) SetDecimals(v int32) {
	o.Decimals = v
}

// GetTokenAccessActivated returns the TokenAccessActivated field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetTokenAccessActivated() bool {
	if o == nil || IsNil(o.TokenAccessActivated) {
		var ret bool
		return ret
	}
	return *o.TokenAccessActivated
}

// GetTokenAccessActivatedOk returns a tuple with the TokenAccessActivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTokenAccessActivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.TokenAccessActivated) {
		return nil, false
	}
	return o.TokenAccessActivated, true
}

// HasTokenAccessActivated returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasTokenAccessActivated() bool {
	if o != nil && !IsNil(o.TokenAccessActivated) {
		return true
	}

	return false
}

// SetTokenAccessActivated gets a reference to the given bool and assigns it to the TokenAccessActivated field.
func (o *TokenizationTokenDetailInfo) SetTokenAccessActivated(v bool) {
	o.TokenAccessActivated = &v
}

// GetStatus returns the Status field value
func (o *TokenizationTokenDetailInfo) GetStatus() TokenizationStatus {
	if o == nil {
		var ret TokenizationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetStatusOk() (*TokenizationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TokenizationTokenDetailInfo) SetStatus(v TokenizationStatus) {
	o.Status = v
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetTotalSupply() string {
	if o == nil || IsNil(o.TotalSupply) {
		var ret string
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetTotalSupplyOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSupply) {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasTotalSupply() bool {
	if o != nil && !IsNil(o.TotalSupply) {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given string and assigns it to the TotalSupply field.
func (o *TokenizationTokenDetailInfo) SetTotalSupply(v string) {
	o.TotalSupply = &v
}

// GetHoldings returns the Holdings field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetHoldings() string {
	if o == nil || IsNil(o.Holdings) {
		var ret string
		return ret
	}
	return *o.Holdings
}

// GetHoldingsOk returns a tuple with the Holdings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetHoldingsOk() (*string, bool) {
	if o == nil || IsNil(o.Holdings) {
		return nil, false
	}
	return o.Holdings, true
}

// HasHoldings returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasHoldings() bool {
	if o != nil && !IsNil(o.Holdings) {
		return true
	}

	return false
}

// SetHoldings gets a reference to the given string and assigns it to the Holdings field.
func (o *TokenizationTokenDetailInfo) SetHoldings(v string) {
	o.Holdings = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *TokenizationTokenDetailInfo) GetPermissions() []TokenizationAddressPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []TokenizationAddressPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenDetailInfo) GetPermissionsOk() ([]TokenizationAddressPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *TokenizationTokenDetailInfo) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []TokenizationAddressPermission and assigns it to the Permissions field.
func (o *TokenizationTokenDetailInfo) SetPermissions(v []TokenizationAddressPermission) {
	o.Permissions = v
}

func (o TokenizationTokenDetailInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationTokenDetailInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.TokenAddress) {
		toSerialize["token_address"] = o.TokenAddress
	}
	if !IsNil(o.TokenName) {
		toSerialize["token_name"] = o.TokenName
	}
	toSerialize["token_symbol"] = o.TokenSymbol
	toSerialize["token_standard"] = o.TokenStandard
	toSerialize["decimals"] = o.Decimals
	if !IsNil(o.TokenAccessActivated) {
		toSerialize["token_access_activated"] = o.TokenAccessActivated
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TotalSupply) {
		toSerialize["total_supply"] = o.TotalSupply
	}
	if !IsNil(o.Holdings) {
		toSerialize["holdings"] = o.Holdings
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *TokenizationTokenDetailInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"chain_id",
		"token_symbol",
		"token_standard",
		"decimals",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationTokenDetailInfo := _TokenizationTokenDetailInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationTokenDetailInfo)

	if err != nil {
		return err
	}

	*o = TokenizationTokenDetailInfo(varTokenizationTokenDetailInfo)

	return err
}

type NullableTokenizationTokenDetailInfo struct {
	value *TokenizationTokenDetailInfo
	isSet bool
}

func (v NullableTokenizationTokenDetailInfo) Get() *TokenizationTokenDetailInfo {
	return v.value
}

func (v *NullableTokenizationTokenDetailInfo) Set(val *TokenizationTokenDetailInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenDetailInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenDetailInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenDetailInfo(val *TokenizationTokenDetailInfo) *NullableTokenizationTokenDetailInfo {
	return &NullableTokenizationTokenDetailInfo{value: val, isSet: true}
}

func (v NullableTokenizationTokenDetailInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenDetailInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


