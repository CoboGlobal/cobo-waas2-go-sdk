/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// DispositionStatus The status of a disposition operation.
type DispositionStatus string

// List of DispositionStatus
const (
	DISPOSITIONSTATUS_SUBMITTED DispositionStatus = "Submitted"
	DISPOSITIONSTATUS_REFUNDING DispositionStatus = "Refunding"
	DISPOSITIONSTATUS_REFUNDED DispositionStatus = "Refunded"
	DISPOSITIONSTATUS_REFUND_FAILED DispositionStatus = "RefundFailed"
	DISPOSITIONSTATUS_FROZEN DispositionStatus = "Frozen"
	DISPOSITIONSTATUS_UNFREEZING DispositionStatus = "Unfreezing"
	DISPOSITIONSTATUS_UNFROZEN DispositionStatus = "Unfrozen"
	DISPOSITIONSTATUS_UNFREEZE_FAILED DispositionStatus = "UnfreezeFailed"
	DISPOSITIONSTATUS_ISOLATING DispositionStatus = "Isolating"
	DISPOSITIONSTATUS_ISOLATED DispositionStatus = "Isolated"
	DISPOSITIONSTATUS_ISOLATE_FAILED DispositionStatus = "IsolateFailed"
	DISPOSITIONSTATUS_COBO_DISPOSITION DispositionStatus = "CoboDisposition"
	DISPOSITIONSTATUS_NORMAL DispositionStatus = "Normal"
)

// All allowed values of DispositionStatus enum
var AllowedDispositionStatusEnumValues = []DispositionStatus{
	"Submitted",
	"Refunding",
	"Refunded",
	"RefundFailed",
	"Frozen",
	"Unfreezing",
	"Unfrozen",
	"UnfreezeFailed",
	"Isolating",
	"Isolated",
	"IsolateFailed",
	"CoboDisposition",
	"Normal",
}

func (v *DispositionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DispositionStatus(value)
	for _, existing := range AllowedDispositionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = DispositionStatus("unknown")
	return nil
}

// NewDispositionStatusFromValue returns a pointer to a valid DispositionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDispositionStatusFromValue(v string) (*DispositionStatus, error) {
	ev := DispositionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DispositionStatus: valid values are %v", v, AllowedDispositionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DispositionStatus) IsValid() bool {
	for _, existing := range AllowedDispositionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DispositionStatus value
func (v DispositionStatus) Ptr() *DispositionStatus {
	return &v
}

type NullableDispositionStatus struct {
	value *DispositionStatus
	isSet bool
}

func (v NullableDispositionStatus) Get() *DispositionStatus {
	return v.value
}

func (v *NullableDispositionStatus) Set(val *DispositionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDispositionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDispositionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispositionStatus(val *DispositionStatus) *NullableDispositionStatus {
	return &NullableDispositionStatus{value: val, isSet: true}
}

func (v NullableDispositionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispositionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

