/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vasp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vasp{}

// Vasp The information of a virtual asset service provider (VASP).
type Vasp struct {
	// The VASP name.
	Name string `json:"name"`
	// The vendor code of the VASP.
	VendorCode string `json:"vendor_code"`
	// The VASP ID.
	VendorVaspId string `json:"vendor_vasp_id"`
}

type _Vasp Vasp

// NewVasp instantiates a new Vasp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVasp(name string, vendorCode string, vendorVaspId string) *Vasp {
	this := Vasp{}
	this.Name = name
	this.VendorCode = vendorCode
	this.VendorVaspId = vendorVaspId
	return &this
}

// NewVaspWithDefaults instantiates a new Vasp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaspWithDefaults() *Vasp {
	this := Vasp{}
	return &this
}

// GetName returns the Name field value
func (o *Vasp) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Vasp) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Vasp) SetName(v string) {
	o.Name = v
}

// GetVendorCode returns the VendorCode field value
func (o *Vasp) GetVendorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value
// and a boolean to check if the value has been set.
func (o *Vasp) GetVendorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorCode, true
}

// SetVendorCode sets field value
func (o *Vasp) SetVendorCode(v string) {
	o.VendorCode = v
}

// GetVendorVaspId returns the VendorVaspId field value
func (o *Vasp) GetVendorVaspId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VendorVaspId
}

// GetVendorVaspIdOk returns a tuple with the VendorVaspId field value
// and a boolean to check if the value has been set.
func (o *Vasp) GetVendorVaspIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorVaspId, true
}

// SetVendorVaspId sets field value
func (o *Vasp) SetVendorVaspId(v string) {
	o.VendorVaspId = v
}

func (o Vasp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vasp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["vendor_code"] = o.VendorCode
	toSerialize["vendor_vasp_id"] = o.VendorVaspId
	return toSerialize, nil
}

func (o *Vasp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"vendor_code",
		"vendor_vasp_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVasp := _Vasp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVasp)

	if err != nil {
		return err
	}

	*o = Vasp(varVasp)

	return err
}

type NullableVasp struct {
	value *Vasp
	isSet bool
}

func (v NullableVasp) Get() *Vasp {
	return v.value
}

func (v *NullableVasp) Set(val *Vasp) {
	v.value = val
	v.isSet = true
}

func (v NullableVasp) IsSet() bool {
	return v.isSet
}

func (v *NullableVasp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVasp(val *Vasp) *NullableVasp {
	return &NullableVasp{value: val, isSet: true}
}

func (v NullableVasp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVasp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


