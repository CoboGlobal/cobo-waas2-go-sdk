/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ApprovalTransactionResult The transaction approval result. Possible values include:    - `-1`: The transaction is rejected.   - `0`: The transaction is pending approval.   - `1`: The transaction is approved. 
type ApprovalTransactionResult int32

// List of ApprovalTransactionResult
const (
	APPROVALTRANSACTIONRESULT_REJECTED ApprovalTransactionResult = -1
	APPROVALTRANSACTIONRESULT_PENDING ApprovalTransactionResult = 0
	APPROVALTRANSACTIONRESULT_APPROVED ApprovalTransactionResult = 1
)

// All allowed values of ApprovalTransactionResult enum
var AllowedApprovalTransactionResultEnumValues = []ApprovalTransactionResult{
	-1,
	0,
	1,
}

func (v *ApprovalTransactionResult) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApprovalTransactionResult(value)
	for _, existing := range AllowedApprovalTransactionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = ApprovalTransactionResult(-1)
	return nil
}

// NewApprovalTransactionResultFromValue returns a pointer to a valid ApprovalTransactionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApprovalTransactionResultFromValue(v int32) (*ApprovalTransactionResult, error) {
	ev := ApprovalTransactionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApprovalTransactionResult: valid values are %v", v, AllowedApprovalTransactionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApprovalTransactionResult) IsValid() bool {
	for _, existing := range AllowedApprovalTransactionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApprovalTransactionResult value
func (v ApprovalTransactionResult) Ptr() *ApprovalTransactionResult {
	return &v
}

type NullableApprovalTransactionResult struct {
	value *ApprovalTransactionResult
	isSet bool
}

func (v NullableApprovalTransactionResult) Get() *ApprovalTransactionResult {
	return v.value
}

func (v *NullableApprovalTransactionResult) Set(val *ApprovalTransactionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalTransactionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalTransactionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalTransactionResult(val *ApprovalTransactionResult) *NullableApprovalTransactionResult {
	return &NullableApprovalTransactionResult{value: val, isSet: true}
}

func (v NullableApprovalTransactionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalTransactionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

