/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// FeeStationGasStationType The Fee Station mode used for automatic gas payment: - `FeeStation`: The client uses their own Fee Station balance to cover the gas fee.  - `CoboOperationStation`: Cobo covers the gas fee on behalf of the client. 
type FeeStationGasStationType string

// List of FeeStationGasStationType
const (
	FEESTATIONGASSTATIONTYPE_FEE_STATION FeeStationGasStationType = "FeeStation"
	FEESTATIONGASSTATIONTYPE_COBO_OPERATION_STATION FeeStationGasStationType = "CoboOperationStation"
)

// All allowed values of FeeStationGasStationType enum
var AllowedFeeStationGasStationTypeEnumValues = []FeeStationGasStationType{
	"FeeStation",
	"CoboOperationStation",
}

func (v *FeeStationGasStationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeeStationGasStationType(value)
	for _, existing := range AllowedFeeStationGasStationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = FeeStationGasStationType("unknown")
	return nil
}

// NewFeeStationGasStationTypeFromValue returns a pointer to a valid FeeStationGasStationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeeStationGasStationTypeFromValue(v string) (*FeeStationGasStationType, error) {
	ev := FeeStationGasStationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeeStationGasStationType: valid values are %v", v, AllowedFeeStationGasStationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeeStationGasStationType) IsValid() bool {
	for _, existing := range AllowedFeeStationGasStationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeeStationGasStationType value
func (v FeeStationGasStationType) Ptr() *FeeStationGasStationType {
	return &v
}

type NullableFeeStationGasStationType struct {
	value *FeeStationGasStationType
	isSet bool
}

func (v NullableFeeStationGasStationType) Get() *FeeStationGasStationType {
	return v.value
}

func (v *NullableFeeStationGasStationType) Set(val *FeeStationGasStationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeStationGasStationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeStationGasStationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeStationGasStationType(val *FeeStationGasStationType) *NullableFeeStationGasStationType {
	return &NullableFeeStationGasStationType{value: val, isSet: true}
}

func (v NullableFeeStationGasStationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeStationGasStationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

