/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReceivedAmountPerAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceivedAmountPerAddress{}

// ReceivedAmountPerAddress Total amount of a specific token received at a given address.
type ReceivedAmountPerAddress struct {
	// Receiving address.
	Address string `json:"address"`
	// Total tokens received at this address, as a decimal string.
	TotalReceivedAmount string `json:"total_received_amount"`
}

type _ReceivedAmountPerAddress ReceivedAmountPerAddress

// NewReceivedAmountPerAddress instantiates a new ReceivedAmountPerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceivedAmountPerAddress(address string, totalReceivedAmount string) *ReceivedAmountPerAddress {
	this := ReceivedAmountPerAddress{}
	this.Address = address
	this.TotalReceivedAmount = totalReceivedAmount
	return &this
}

// NewReceivedAmountPerAddressWithDefaults instantiates a new ReceivedAmountPerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceivedAmountPerAddressWithDefaults() *ReceivedAmountPerAddress {
	this := ReceivedAmountPerAddress{}
	return &this
}

// GetAddress returns the Address field value
func (o *ReceivedAmountPerAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *ReceivedAmountPerAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *ReceivedAmountPerAddress) SetAddress(v string) {
	o.Address = v
}

// GetTotalReceivedAmount returns the TotalReceivedAmount field value
func (o *ReceivedAmountPerAddress) GetTotalReceivedAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalReceivedAmount
}

// GetTotalReceivedAmountOk returns a tuple with the TotalReceivedAmount field value
// and a boolean to check if the value has been set.
func (o *ReceivedAmountPerAddress) GetTotalReceivedAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalReceivedAmount, true
}

// SetTotalReceivedAmount sets field value
func (o *ReceivedAmountPerAddress) SetTotalReceivedAmount(v string) {
	o.TotalReceivedAmount = v
}

func (o ReceivedAmountPerAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceivedAmountPerAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["total_received_amount"] = o.TotalReceivedAmount
	return toSerialize, nil
}

func (o *ReceivedAmountPerAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"total_received_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReceivedAmountPerAddress := _ReceivedAmountPerAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReceivedAmountPerAddress)

	if err != nil {
		return err
	}

	*o = ReceivedAmountPerAddress(varReceivedAmountPerAddress)

	return err
}

type NullableReceivedAmountPerAddress struct {
	value *ReceivedAmountPerAddress
	isSet bool
}

func (v NullableReceivedAmountPerAddress) Get() *ReceivedAmountPerAddress {
	return v.value
}

func (v *NullableReceivedAmountPerAddress) Set(val *ReceivedAmountPerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableReceivedAmountPerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableReceivedAmountPerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceivedAmountPerAddress(val *ReceivedAmountPerAddress) *NullableReceivedAmountPerAddress {
	return &NullableReceivedAmountPerAddress{value: val, isSet: true}
}

func (v NullableReceivedAmountPerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceivedAmountPerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


