/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the SOLComputeUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SOLComputeUnit{}

// SOLComputeUnit The transaction gas price configuration based on the Solana fee model.
type SOLComputeUnit struct {
	// The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
	ComputeUnitPrice *string `json:"compute_unit_price,omitempty"`
	// The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
	ComputeUnitLimit *string `json:"compute_unit_limit,omitempty"`
}

// NewSOLComputeUnit instantiates a new SOLComputeUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSOLComputeUnit() *SOLComputeUnit {
	this := SOLComputeUnit{}
	return &this
}

// NewSOLComputeUnitWithDefaults instantiates a new SOLComputeUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSOLComputeUnitWithDefaults() *SOLComputeUnit {
	this := SOLComputeUnit{}
	return &this
}

// GetComputeUnitPrice returns the ComputeUnitPrice field value if set, zero value otherwise.
func (o *SOLComputeUnit) GetComputeUnitPrice() string {
	if o == nil || IsNil(o.ComputeUnitPrice) {
		var ret string
		return ret
	}
	return *o.ComputeUnitPrice
}

// GetComputeUnitPriceOk returns a tuple with the ComputeUnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SOLComputeUnit) GetComputeUnitPriceOk() (*string, bool) {
	if o == nil || IsNil(o.ComputeUnitPrice) {
		return nil, false
	}
	return o.ComputeUnitPrice, true
}

// HasComputeUnitPrice returns a boolean if a field has been set.
func (o *SOLComputeUnit) HasComputeUnitPrice() bool {
	if o != nil && !IsNil(o.ComputeUnitPrice) {
		return true
	}

	return false
}

// SetComputeUnitPrice gets a reference to the given string and assigns it to the ComputeUnitPrice field.
func (o *SOLComputeUnit) SetComputeUnitPrice(v string) {
	o.ComputeUnitPrice = &v
}

// GetComputeUnitLimit returns the ComputeUnitLimit field value if set, zero value otherwise.
func (o *SOLComputeUnit) GetComputeUnitLimit() string {
	if o == nil || IsNil(o.ComputeUnitLimit) {
		var ret string
		return ret
	}
	return *o.ComputeUnitLimit
}

// GetComputeUnitLimitOk returns a tuple with the ComputeUnitLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SOLComputeUnit) GetComputeUnitLimitOk() (*string, bool) {
	if o == nil || IsNil(o.ComputeUnitLimit) {
		return nil, false
	}
	return o.ComputeUnitLimit, true
}

// HasComputeUnitLimit returns a boolean if a field has been set.
func (o *SOLComputeUnit) HasComputeUnitLimit() bool {
	if o != nil && !IsNil(o.ComputeUnitLimit) {
		return true
	}

	return false
}

// SetComputeUnitLimit gets a reference to the given string and assigns it to the ComputeUnitLimit field.
func (o *SOLComputeUnit) SetComputeUnitLimit(v string) {
	o.ComputeUnitLimit = &v
}

func (o SOLComputeUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SOLComputeUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputeUnitPrice) {
		toSerialize["compute_unit_price"] = o.ComputeUnitPrice
	}
	if !IsNil(o.ComputeUnitLimit) {
		toSerialize["compute_unit_limit"] = o.ComputeUnitLimit
	}
	return toSerialize, nil
}

type NullableSOLComputeUnit struct {
	value *SOLComputeUnit
	isSet bool
}

func (v NullableSOLComputeUnit) Get() *SOLComputeUnit {
	return v.value
}

func (v *NullableSOLComputeUnit) Set(val *SOLComputeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableSOLComputeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableSOLComputeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSOLComputeUnit(val *SOLComputeUnit) *NullableSOLComputeUnit {
	return &NullableSOLComputeUnit{value: val, isSet: true}
}

func (v NullableSOLComputeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSOLComputeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


