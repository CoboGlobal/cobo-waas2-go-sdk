/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BridgingFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgingFee{}

// BridgingFee struct for BridgingFee
type BridgingFee struct {
	// The fee charged for bridging tokens to another blockchain during an off-ramp operation. Bridging fees apply when tokens are on a blockchain not directly supported by the off-ramp service. 
	FeeAmount string `json:"fee_amount"`
	// The ID of the destination token received after bridging.
	ReceivedTokenId *string `json:"received_token_id,omitempty"`
	// The final amount of destination tokens received after bridging.
	ReceivedAmount *string `json:"received_amount,omitempty"`
}

type _BridgingFee BridgingFee

// NewBridgingFee instantiates a new BridgingFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgingFee(feeAmount string) *BridgingFee {
	this := BridgingFee{}
	this.FeeAmount = feeAmount
	return &this
}

// NewBridgingFeeWithDefaults instantiates a new BridgingFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgingFeeWithDefaults() *BridgingFee {
	this := BridgingFee{}
	return &this
}

// GetFeeAmount returns the FeeAmount field value
func (o *BridgingFee) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *BridgingFee) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *BridgingFee) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetReceivedTokenId returns the ReceivedTokenId field value if set, zero value otherwise.
func (o *BridgingFee) GetReceivedTokenId() string {
	if o == nil || IsNil(o.ReceivedTokenId) {
		var ret string
		return ret
	}
	return *o.ReceivedTokenId
}

// GetReceivedTokenIdOk returns a tuple with the ReceivedTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgingFee) GetReceivedTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedTokenId) {
		return nil, false
	}
	return o.ReceivedTokenId, true
}

// HasReceivedTokenId returns a boolean if a field has been set.
func (o *BridgingFee) HasReceivedTokenId() bool {
	if o != nil && !IsNil(o.ReceivedTokenId) {
		return true
	}

	return false
}

// SetReceivedTokenId gets a reference to the given string and assigns it to the ReceivedTokenId field.
func (o *BridgingFee) SetReceivedTokenId(v string) {
	o.ReceivedTokenId = &v
}

// GetReceivedAmount returns the ReceivedAmount field value if set, zero value otherwise.
func (o *BridgingFee) GetReceivedAmount() string {
	if o == nil || IsNil(o.ReceivedAmount) {
		var ret string
		return ret
	}
	return *o.ReceivedAmount
}

// GetReceivedAmountOk returns a tuple with the ReceivedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgingFee) GetReceivedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedAmount) {
		return nil, false
	}
	return o.ReceivedAmount, true
}

// HasReceivedAmount returns a boolean if a field has been set.
func (o *BridgingFee) HasReceivedAmount() bool {
	if o != nil && !IsNil(o.ReceivedAmount) {
		return true
	}

	return false
}

// SetReceivedAmount gets a reference to the given string and assigns it to the ReceivedAmount field.
func (o *BridgingFee) SetReceivedAmount(v string) {
	o.ReceivedAmount = &v
}

func (o BridgingFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgingFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_amount"] = o.FeeAmount
	if !IsNil(o.ReceivedTokenId) {
		toSerialize["received_token_id"] = o.ReceivedTokenId
	}
	if !IsNil(o.ReceivedAmount) {
		toSerialize["received_amount"] = o.ReceivedAmount
	}
	return toSerialize, nil
}

func (o *BridgingFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBridgingFee := _BridgingFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBridgingFee)

	if err != nil {
		return err
	}

	*o = BridgingFee(varBridgingFee)

	return err
}

type NullableBridgingFee struct {
	value *BridgingFee
	isSet bool
}

func (v NullableBridgingFee) Get() *BridgingFee {
	return v.value
}

func (v *NullableBridgingFee) Set(val *BridgingFee) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgingFee) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgingFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgingFee(val *BridgingFee) *NullableBridgingFee {
	return &NullableBridgingFee{value: val, isSet: true}
}

func (v NullableBridgingFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgingFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


