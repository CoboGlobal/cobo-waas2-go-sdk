/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the SafeTxSubTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SafeTxSubTransaction{}

// SafeTxSubTransaction The information about the sub-transaction.
type SafeTxSubTransaction struct {
	// The type of operation in the sub-transaction.
	Operation *string `json:"operation,omitempty"`
	// The destination address of the sub-transaction.
	To *string `json:"to,omitempty"`
	// The human-readable transaction value, for example, `1 ETH`.
	Value *string `json:"value,omitempty"`
	// The transaction amount in Wei
	Wei *string `json:"wei,omitempty"`
	// Encoded transaction data
	Data *string `json:"data,omitempty"`
	DataDecoded *SafeTxDecodedData `json:"data_decoded,omitempty"`
	// The name of the recipient contract (if available).
	ToContractName NullableString `json:"to_contract_name,omitempty"`
}

// NewSafeTxSubTransaction instantiates a new SafeTxSubTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeTxSubTransaction() *SafeTxSubTransaction {
	this := SafeTxSubTransaction{}
	return &this
}

// NewSafeTxSubTransactionWithDefaults instantiates a new SafeTxSubTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeTxSubTransactionWithDefaults() *SafeTxSubTransaction {
	this := SafeTxSubTransaction{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetOperation() string {
	if o == nil || IsNil(o.Operation) {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetOperationOk() (*string, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *SafeTxSubTransaction) SetOperation(v string) {
	o.Operation = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *SafeTxSubTransaction) SetTo(v string) {
	o.To = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SafeTxSubTransaction) SetValue(v string) {
	o.Value = &v
}

// GetWei returns the Wei field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetWei() string {
	if o == nil || IsNil(o.Wei) {
		var ret string
		return ret
	}
	return *o.Wei
}

// GetWeiOk returns a tuple with the Wei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetWeiOk() (*string, bool) {
	if o == nil || IsNil(o.Wei) {
		return nil, false
	}
	return o.Wei, true
}

// HasWei returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasWei() bool {
	if o != nil && !IsNil(o.Wei) {
		return true
	}

	return false
}

// SetWei gets a reference to the given string and assigns it to the Wei field.
func (o *SafeTxSubTransaction) SetWei(v string) {
	o.Wei = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *SafeTxSubTransaction) SetData(v string) {
	o.Data = &v
}

// GetDataDecoded returns the DataDecoded field value if set, zero value otherwise.
func (o *SafeTxSubTransaction) GetDataDecoded() SafeTxDecodedData {
	if o == nil || IsNil(o.DataDecoded) {
		var ret SafeTxDecodedData
		return ret
	}
	return *o.DataDecoded
}

// GetDataDecodedOk returns a tuple with the DataDecoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeTxSubTransaction) GetDataDecodedOk() (*SafeTxDecodedData, bool) {
	if o == nil || IsNil(o.DataDecoded) {
		return nil, false
	}
	return o.DataDecoded, true
}

// HasDataDecoded returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasDataDecoded() bool {
	if o != nil && !IsNil(o.DataDecoded) {
		return true
	}

	return false
}

// SetDataDecoded gets a reference to the given SafeTxDecodedData and assigns it to the DataDecoded field.
func (o *SafeTxSubTransaction) SetDataDecoded(v SafeTxDecodedData) {
	o.DataDecoded = &v
}

// GetToContractName returns the ToContractName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SafeTxSubTransaction) GetToContractName() string {
	if o == nil || IsNil(o.ToContractName.Get()) {
		var ret string
		return ret
	}
	return *o.ToContractName.Get()
}

// GetToContractNameOk returns a tuple with the ToContractName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SafeTxSubTransaction) GetToContractNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToContractName.Get(), o.ToContractName.IsSet()
}

// HasToContractName returns a boolean if a field has been set.
func (o *SafeTxSubTransaction) HasToContractName() bool {
	if o != nil && o.ToContractName.IsSet() {
		return true
	}

	return false
}

// SetToContractName gets a reference to the given NullableString and assigns it to the ToContractName field.
func (o *SafeTxSubTransaction) SetToContractName(v string) {
	o.ToContractName.Set(&v)
}
// SetToContractNameNil sets the value for ToContractName to be an explicit nil
func (o *SafeTxSubTransaction) SetToContractNameNil() {
	o.ToContractName.Set(nil)
}

// UnsetToContractName ensures that no value is present for ToContractName, not even an explicit nil
func (o *SafeTxSubTransaction) UnsetToContractName() {
	o.ToContractName.Unset()
}

func (o SafeTxSubTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SafeTxSubTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Wei) {
		toSerialize["wei"] = o.Wei
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.DataDecoded) {
		toSerialize["data_decoded"] = o.DataDecoded
	}
	if o.ToContractName.IsSet() {
		toSerialize["to_contract_name"] = o.ToContractName.Get()
	}
	return toSerialize, nil
}

type NullableSafeTxSubTransaction struct {
	value *SafeTxSubTransaction
	isSet bool
}

func (v NullableSafeTxSubTransaction) Get() *SafeTxSubTransaction {
	return v.value
}

func (v *NullableSafeTxSubTransaction) Set(val *SafeTxSubTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeTxSubTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeTxSubTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeTxSubTransaction(val *SafeTxSubTransaction) *NullableSafeTxSubTransaction {
	return &NullableSafeTxSubTransaction{value: val, isSet: true}
}

func (v NullableSafeTxSubTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeTxSubTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


