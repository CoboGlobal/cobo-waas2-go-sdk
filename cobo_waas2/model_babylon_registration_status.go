/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// BabylonRegistrationStatus The status of Babylon airdrop or staking registration. Possible values are: - `Registered`: Registered for Babylon airdrop or staking. - `Unregistered`: Not registered for any Babylon airdrop or staking. - `Registering`: Requesting to register for Babylon airdrop or staking. 
type BabylonRegistrationStatus string

// List of BabylonRegistrationStatus
const (
	BABYLONREGISTRATIONSTATUS_REGISTERED BabylonRegistrationStatus = "Registered"
	BABYLONREGISTRATIONSTATUS_UNREGISTERED BabylonRegistrationStatus = "Unregistered"
	BABYLONREGISTRATIONSTATUS_REGISTERING BabylonRegistrationStatus = "Registering"
)

// All allowed values of BabylonRegistrationStatus enum
var AllowedBabylonRegistrationStatusEnumValues = []BabylonRegistrationStatus{
	"Registered",
	"Unregistered",
	"Registering",
}

func (v *BabylonRegistrationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BabylonRegistrationStatus(value)
	for _, existing := range AllowedBabylonRegistrationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = BabylonRegistrationStatus("unknown")
	return nil
}

// NewBabylonRegistrationStatusFromValue returns a pointer to a valid BabylonRegistrationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBabylonRegistrationStatusFromValue(v string) (*BabylonRegistrationStatus, error) {
	ev := BabylonRegistrationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BabylonRegistrationStatus: valid values are %v", v, AllowedBabylonRegistrationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BabylonRegistrationStatus) IsValid() bool {
	for _, existing := range AllowedBabylonRegistrationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BabylonRegistrationStatus value
func (v BabylonRegistrationStatus) Ptr() *BabylonRegistrationStatus {
	return &v
}

type NullableBabylonRegistrationStatus struct {
	value *BabylonRegistrationStatus
	isSet bool
}

func (v NullableBabylonRegistrationStatus) Get() *BabylonRegistrationStatus {
	return v.value
}

func (v *NullableBabylonRegistrationStatus) Set(val *BabylonRegistrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonRegistrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonRegistrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonRegistrationStatus(val *BabylonRegistrationStatus) *NullableBabylonRegistrationStatus {
	return &NullableBabylonRegistrationStatus{value: val, isSet: true}
}

func (v NullableBabylonRegistrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonRegistrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

