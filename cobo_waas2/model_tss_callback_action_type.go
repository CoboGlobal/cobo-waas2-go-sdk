/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSCallbackActionType The action to take. Possible values include:  - `APPROVE` : Approve the request and proceed with the operation. - `REJECT` : Deny the request and stop the operation. 
type TSSCallbackActionType string

// List of TSSCallbackActionType
const (
	TSSCALLBACKACTIONTYPE_APPROVE TSSCallbackActionType = "APPROVE"
	TSSCALLBACKACTIONTYPE_REJECT TSSCallbackActionType = "REJECT"
)

// All allowed values of TSSCallbackActionType enum
var AllowedTSSCallbackActionTypeEnumValues = []TSSCallbackActionType{
	"APPROVE",
	"REJECT",
}

func (v *TSSCallbackActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSCallbackActionType(value)
	for _, existing := range AllowedTSSCallbackActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSCallbackActionType("unknown")
	return nil
}

// NewTSSCallbackActionTypeFromValue returns a pointer to a valid TSSCallbackActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSCallbackActionTypeFromValue(v string) (*TSSCallbackActionType, error) {
	ev := TSSCallbackActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSCallbackActionType: valid values are %v", v, AllowedTSSCallbackActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSCallbackActionType) IsValid() bool {
	for _, existing := range AllowedTSSCallbackActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSCallbackActionType value
func (v TSSCallbackActionType) Ptr() *TSSCallbackActionType {
	return &v
}

type NullableTSSCallbackActionType struct {
	value *TSSCallbackActionType
	isSet bool
}

func (v NullableTSSCallbackActionType) Get() *TSSCallbackActionType {
	return v.value
}

func (v *NullableTSSCallbackActionType) Set(val *TSSCallbackActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSCallbackActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSCallbackActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSCallbackActionType(val *TSSCallbackActionType) *NullableTSSCallbackActionType {
	return &NullableTSSCallbackActionType{value: val, isSet: true}
}

func (v NullableTSSCallbackActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSCallbackActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

