/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SettlementType Specifies the source of funds for the settlement: - `Merchant`: The settlement amount will be deducted from the merchant balance. - `Psp`: The settlement amount will be deducted from the developer balance. 
type SettlementType string

// List of SettlementType
const (
	SETTLEMENTTYPE_MERCHANT SettlementType = "Merchant"
	SETTLEMENTTYPE_PSP SettlementType = "Psp"
)

// All allowed values of SettlementType enum
var AllowedSettlementTypeEnumValues = []SettlementType{
	"Merchant",
	"Psp",
}

func (v *SettlementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettlementType(value)
	for _, existing := range AllowedSettlementTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SettlementType("unknown")
	return nil
}

// NewSettlementTypeFromValue returns a pointer to a valid SettlementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettlementTypeFromValue(v string) (*SettlementType, error) {
	ev := SettlementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettlementType: valid values are %v", v, AllowedSettlementTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettlementType) IsValid() bool {
	for _, existing := range AllowedSettlementTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SettlementType value
func (v SettlementType) Ptr() *SettlementType {
	return &v
}

type NullableSettlementType struct {
	value *SettlementType
	isSet bool
}

func (v NullableSettlementType) Get() *SettlementType {
	return v.value
}

func (v *NullableSettlementType) Set(val *SettlementType) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlementType) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlementType(val *SettlementType) *NullableSettlementType {
	return &NullableSettlementType{value: val, isSet: true}
}

func (v NullableSettlementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

