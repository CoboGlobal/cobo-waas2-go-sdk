/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionSolContractInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSolContractInstruction{}

// TransactionSolContractInstruction sol contract instruction
type TransactionSolContractInstruction struct {
	Accounts []TransactionSolContractAccount `json:"accounts,omitempty"`
	// data used for calling Solana contract.. 
	Data *string `json:"data,omitempty"`
	// contract address. when calling a Solana contract, the to_address parameter needs to match the program_id parameter. If multiple contracts are being called, then the to_address parameter should match the program_id parameter of the first instruction. 
	ProgramId *string `json:"program_id,omitempty"`
}

// NewTransactionSolContractInstruction instantiates a new TransactionSolContractInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSolContractInstruction() *TransactionSolContractInstruction {
	this := TransactionSolContractInstruction{}
	return &this
}

// NewTransactionSolContractInstructionWithDefaults instantiates a new TransactionSolContractInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSolContractInstructionWithDefaults() *TransactionSolContractInstruction {
	this := TransactionSolContractInstruction{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *TransactionSolContractInstruction) GetAccounts() []TransactionSolContractAccount {
	if o == nil || IsNil(o.Accounts) {
		var ret []TransactionSolContractAccount
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSolContractInstruction) GetAccountsOk() ([]TransactionSolContractAccount, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *TransactionSolContractInstruction) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []TransactionSolContractAccount and assigns it to the Accounts field.
func (o *TransactionSolContractInstruction) SetAccounts(v []TransactionSolContractAccount) {
	o.Accounts = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TransactionSolContractInstruction) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSolContractInstruction) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TransactionSolContractInstruction) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *TransactionSolContractInstruction) SetData(v string) {
	o.Data = &v
}

// GetProgramId returns the ProgramId field value if set, zero value otherwise.
func (o *TransactionSolContractInstruction) GetProgramId() string {
	if o == nil || IsNil(o.ProgramId) {
		var ret string
		return ret
	}
	return *o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSolContractInstruction) GetProgramIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramId) {
		return nil, false
	}
	return o.ProgramId, true
}

// HasProgramId returns a boolean if a field has been set.
func (o *TransactionSolContractInstruction) HasProgramId() bool {
	if o != nil && !IsNil(o.ProgramId) {
		return true
	}

	return false
}

// SetProgramId gets a reference to the given string and assigns it to the ProgramId field.
func (o *TransactionSolContractInstruction) SetProgramId(v string) {
	o.ProgramId = &v
}

func (o TransactionSolContractInstruction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSolContractInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.ProgramId) {
		toSerialize["program_id"] = o.ProgramId
	}
	return toSerialize, nil
}

type NullableTransactionSolContractInstruction struct {
	value *TransactionSolContractInstruction
	isSet bool
}

func (v NullableTransactionSolContractInstruction) Get() *TransactionSolContractInstruction {
	return v.value
}

func (v *NullableTransactionSolContractInstruction) Set(val *TransactionSolContractInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSolContractInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSolContractInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSolContractInstruction(val *TransactionSolContractInstruction) *NullableTransactionSolContractInstruction {
	return &NullableTransactionSolContractInstruction{value: val, isSet: true}
}

func (v NullableTransactionSolContractInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSolContractInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


