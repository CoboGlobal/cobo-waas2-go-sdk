/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationTokenPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationTokenPermission{}

// TokenizationTokenPermission struct for TokenizationTokenPermission
type TokenizationTokenPermission struct {
	PermissionType TokenizationTokenPermissionType `json:"permission_type"`
	// The display name of the permission.
	Name string `json:"name"`
	// Detailed description of what this permission allows.
	Description string `json:"description"`
	// Whether this permission is currently enabled.
	Enabled bool `json:"enabled"`
}

type _TokenizationTokenPermission TokenizationTokenPermission

// NewTokenizationTokenPermission instantiates a new TokenizationTokenPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationTokenPermission(permissionType TokenizationTokenPermissionType, name string, description string, enabled bool) *TokenizationTokenPermission {
	this := TokenizationTokenPermission{}
	this.PermissionType = permissionType
	this.Name = name
	this.Description = description
	this.Enabled = enabled
	return &this
}

// NewTokenizationTokenPermissionWithDefaults instantiates a new TokenizationTokenPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationTokenPermissionWithDefaults() *TokenizationTokenPermission {
	this := TokenizationTokenPermission{}
	return &this
}

// GetPermissionType returns the PermissionType field value
func (o *TokenizationTokenPermission) GetPermissionType() TokenizationTokenPermissionType {
	if o == nil {
		var ret TokenizationTokenPermissionType
		return ret
	}

	return o.PermissionType
}

// GetPermissionTypeOk returns a tuple with the PermissionType field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermission) GetPermissionTypeOk() (*TokenizationTokenPermissionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionType, true
}

// SetPermissionType sets field value
func (o *TokenizationTokenPermission) SetPermissionType(v TokenizationTokenPermissionType) {
	o.PermissionType = v
}

// GetName returns the Name field value
func (o *TokenizationTokenPermission) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermission) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenizationTokenPermission) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *TokenizationTokenPermission) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermission) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TokenizationTokenPermission) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value
func (o *TokenizationTokenPermission) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermission) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TokenizationTokenPermission) SetEnabled(v bool) {
	o.Enabled = v
}

func (o TokenizationTokenPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationTokenPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permission_type"] = o.PermissionType
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *TokenizationTokenPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permission_type",
		"name",
		"description",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationTokenPermission := _TokenizationTokenPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationTokenPermission)

	if err != nil {
		return err
	}

	*o = TokenizationTokenPermission(varTokenizationTokenPermission)

	return err
}

type NullableTokenizationTokenPermission struct {
	value *TokenizationTokenPermission
	isSet bool
}

func (v NullableTokenizationTokenPermission) Get() *TokenizationTokenPermission {
	return v.value
}

func (v *NullableTokenizationTokenPermission) Set(val *TokenizationTokenPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenPermission(val *TokenizationTokenPermission) *NullableTokenizationTokenPermission {
	return &NullableTokenizationTokenPermission{value: val, isSet: true}
}

func (v NullableTokenizationTokenPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


