/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionCustodialWeb3WalletSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCustodialWeb3WalletSource{}

// TransactionCustodialWeb3WalletSource Information about the transaction source type `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.  Switch between the tabs to display the properties for different transaction sources. 
type TransactionCustodialWeb3WalletSource struct {
	SourceType TransactionSourceType `json:"source_type"`
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	// The wallet address.
	Address *string `json:"address,omitempty"`
	IncludedUtxos []TransactionUtxo `json:"included_utxos,omitempty"`
	ExcludedUtxos []TransactionUtxo `json:"excluded_utxos,omitempty"`
}

type _TransactionCustodialWeb3WalletSource TransactionCustodialWeb3WalletSource

// NewTransactionCustodialWeb3WalletSource instantiates a new TransactionCustodialWeb3WalletSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCustodialWeb3WalletSource(sourceType TransactionSourceType, walletId string) *TransactionCustodialWeb3WalletSource {
	this := TransactionCustodialWeb3WalletSource{}
	this.SourceType = sourceType
	this.WalletId = walletId
	return &this
}

// NewTransactionCustodialWeb3WalletSourceWithDefaults instantiates a new TransactionCustodialWeb3WalletSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCustodialWeb3WalletSourceWithDefaults() *TransactionCustodialWeb3WalletSource {
	this := TransactionCustodialWeb3WalletSource{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *TransactionCustodialWeb3WalletSource) GetSourceType() TransactionSourceType {
	if o == nil {
		var ret TransactionSourceType
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *TransactionCustodialWeb3WalletSource) GetSourceTypeOk() (*TransactionSourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *TransactionCustodialWeb3WalletSource) SetSourceType(v TransactionSourceType) {
	o.SourceType = v
}

// GetWalletId returns the WalletId field value
func (o *TransactionCustodialWeb3WalletSource) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *TransactionCustodialWeb3WalletSource) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *TransactionCustodialWeb3WalletSource) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TransactionCustodialWeb3WalletSource) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCustodialWeb3WalletSource) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TransactionCustodialWeb3WalletSource) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TransactionCustodialWeb3WalletSource) SetAddress(v string) {
	o.Address = &v
}

// GetIncludedUtxos returns the IncludedUtxos field value if set, zero value otherwise.
func (o *TransactionCustodialWeb3WalletSource) GetIncludedUtxos() []TransactionUtxo {
	if o == nil || IsNil(o.IncludedUtxos) {
		var ret []TransactionUtxo
		return ret
	}
	return o.IncludedUtxos
}

// GetIncludedUtxosOk returns a tuple with the IncludedUtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCustodialWeb3WalletSource) GetIncludedUtxosOk() ([]TransactionUtxo, bool) {
	if o == nil || IsNil(o.IncludedUtxos) {
		return nil, false
	}
	return o.IncludedUtxos, true
}

// HasIncludedUtxos returns a boolean if a field has been set.
func (o *TransactionCustodialWeb3WalletSource) HasIncludedUtxos() bool {
	if o != nil && !IsNil(o.IncludedUtxos) {
		return true
	}

	return false
}

// SetIncludedUtxos gets a reference to the given []TransactionUtxo and assigns it to the IncludedUtxos field.
func (o *TransactionCustodialWeb3WalletSource) SetIncludedUtxos(v []TransactionUtxo) {
	o.IncludedUtxos = v
}

// GetExcludedUtxos returns the ExcludedUtxos field value if set, zero value otherwise.
func (o *TransactionCustodialWeb3WalletSource) GetExcludedUtxos() []TransactionUtxo {
	if o == nil || IsNil(o.ExcludedUtxos) {
		var ret []TransactionUtxo
		return ret
	}
	return o.ExcludedUtxos
}

// GetExcludedUtxosOk returns a tuple with the ExcludedUtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCustodialWeb3WalletSource) GetExcludedUtxosOk() ([]TransactionUtxo, bool) {
	if o == nil || IsNil(o.ExcludedUtxos) {
		return nil, false
	}
	return o.ExcludedUtxos, true
}

// HasExcludedUtxos returns a boolean if a field has been set.
func (o *TransactionCustodialWeb3WalletSource) HasExcludedUtxos() bool {
	if o != nil && !IsNil(o.ExcludedUtxos) {
		return true
	}

	return false
}

// SetExcludedUtxos gets a reference to the given []TransactionUtxo and assigns it to the ExcludedUtxos field.
func (o *TransactionCustodialWeb3WalletSource) SetExcludedUtxos(v []TransactionUtxo) {
	o.ExcludedUtxos = v
}

func (o TransactionCustodialWeb3WalletSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCustodialWeb3WalletSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.IncludedUtxos) {
		toSerialize["included_utxos"] = o.IncludedUtxos
	}
	if !IsNil(o.ExcludedUtxos) {
		toSerialize["excluded_utxos"] = o.ExcludedUtxos
	}
	return toSerialize, nil
}

func (o *TransactionCustodialWeb3WalletSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"wallet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionCustodialWeb3WalletSource := _TransactionCustodialWeb3WalletSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionCustodialWeb3WalletSource)

	if err != nil {
		return err
	}

	*o = TransactionCustodialWeb3WalletSource(varTransactionCustodialWeb3WalletSource)

	return err
}

type NullableTransactionCustodialWeb3WalletSource struct {
	value *TransactionCustodialWeb3WalletSource
	isSet bool
}

func (v NullableTransactionCustodialWeb3WalletSource) Get() *TransactionCustodialWeb3WalletSource {
	return v.value
}

func (v *NullableTransactionCustodialWeb3WalletSource) Set(val *TransactionCustodialWeb3WalletSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCustodialWeb3WalletSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCustodialWeb3WalletSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCustodialWeb3WalletSource(val *TransactionCustodialWeb3WalletSource) *NullableTransactionCustodialWeb3WalletSource {
	return &NullableTransactionCustodialWeb3WalletSource{value: val, isSet: true}
}

func (v NullableTransactionCustodialWeb3WalletSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCustodialWeb3WalletSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


