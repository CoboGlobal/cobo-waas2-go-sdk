/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustodialWeb3MessageSignSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustodialWeb3MessageSignSource{}

// CustodialWeb3MessageSignSource struct for CustodialWeb3MessageSignSource
type CustodialWeb3MessageSignSource struct {
	SourceType MessageSignSourceType `json:"source_type"`
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	// The wallet address.
	Address string `json:"address"`
}

type _CustodialWeb3MessageSignSource CustodialWeb3MessageSignSource

// NewCustodialWeb3MessageSignSource instantiates a new CustodialWeb3MessageSignSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustodialWeb3MessageSignSource(sourceType MessageSignSourceType, walletId string, address string) *CustodialWeb3MessageSignSource {
	this := CustodialWeb3MessageSignSource{}
	this.SourceType = sourceType
	this.WalletId = walletId
	this.Address = address
	return &this
}

// NewCustodialWeb3MessageSignSourceWithDefaults instantiates a new CustodialWeb3MessageSignSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustodialWeb3MessageSignSourceWithDefaults() *CustodialWeb3MessageSignSource {
	this := CustodialWeb3MessageSignSource{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *CustodialWeb3MessageSignSource) GetSourceType() MessageSignSourceType {
	if o == nil {
		var ret MessageSignSourceType
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *CustodialWeb3MessageSignSource) GetSourceTypeOk() (*MessageSignSourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *CustodialWeb3MessageSignSource) SetSourceType(v MessageSignSourceType) {
	o.SourceType = v
}

// GetWalletId returns the WalletId field value
func (o *CustodialWeb3MessageSignSource) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *CustodialWeb3MessageSignSource) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *CustodialWeb3MessageSignSource) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddress returns the Address field value
func (o *CustodialWeb3MessageSignSource) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CustodialWeb3MessageSignSource) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CustodialWeb3MessageSignSource) SetAddress(v string) {
	o.Address = v
}

func (o CustodialWeb3MessageSignSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustodialWeb3MessageSignSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

func (o *CustodialWeb3MessageSignSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"wallet_id",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustodialWeb3MessageSignSource := _CustodialWeb3MessageSignSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustodialWeb3MessageSignSource)

	if err != nil {
		return err
	}

	*o = CustodialWeb3MessageSignSource(varCustodialWeb3MessageSignSource)

	return err
}

type NullableCustodialWeb3MessageSignSource struct {
	value *CustodialWeb3MessageSignSource
	isSet bool
}

func (v NullableCustodialWeb3MessageSignSource) Get() *CustodialWeb3MessageSignSource {
	return v.value
}

func (v *NullableCustodialWeb3MessageSignSource) Set(val *CustodialWeb3MessageSignSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCustodialWeb3MessageSignSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCustodialWeb3MessageSignSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustodialWeb3MessageSignSource(val *CustodialWeb3MessageSignSource) *NullableCustodialWeb3MessageSignSource {
	return &NullableCustodialWeb3MessageSignSource{value: val, isSet: true}
}

func (v NullableCustodialWeb3MessageSignSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustodialWeb3MessageSignSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


