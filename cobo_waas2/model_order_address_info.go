/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderAddressInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderAddressInfo{}

// OrderAddressInfo struct for OrderAddressInfo
type OrderAddressInfo struct {
	// The ID of the linked wallet.
	WalletId string `json:"wallet_id"`
	// The amount of cryptocurrency received by the order's receiving address.
	Amount string `json:"amount"`
	// The created time of the address, represented as a UNIX timestamp in seconds.
	CreatedTimestamp int32 `json:"created_timestamp"`
	// The updated time of the address, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp int32 `json:"updated_timestamp"`
}

type _OrderAddressInfo OrderAddressInfo

// NewOrderAddressInfo instantiates a new OrderAddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderAddressInfo(walletId string, amount string, createdTimestamp int32, updatedTimestamp int32) *OrderAddressInfo {
	this := OrderAddressInfo{}
	this.WalletId = walletId
	this.Amount = amount
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewOrderAddressInfoWithDefaults instantiates a new OrderAddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderAddressInfoWithDefaults() *OrderAddressInfo {
	this := OrderAddressInfo{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *OrderAddressInfo) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *OrderAddressInfo) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *OrderAddressInfo) SetWalletId(v string) {
	o.WalletId = v
}

// GetAmount returns the Amount field value
func (o *OrderAddressInfo) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *OrderAddressInfo) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *OrderAddressInfo) SetAmount(v string) {
	o.Amount = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *OrderAddressInfo) GetCreatedTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *OrderAddressInfo) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *OrderAddressInfo) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *OrderAddressInfo) GetUpdatedTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *OrderAddressInfo) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *OrderAddressInfo) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = v
}

func (o OrderAddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderAddressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["amount"] = o.Amount
	toSerialize["created_timestamp"] = o.CreatedTimestamp
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	return toSerialize, nil
}

func (o *OrderAddressInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"amount",
		"created_timestamp",
		"updated_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderAddressInfo := _OrderAddressInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderAddressInfo)

	if err != nil {
		return err
	}

	*o = OrderAddressInfo(varOrderAddressInfo)

	return err
}

type NullableOrderAddressInfo struct {
	value *OrderAddressInfo
	isSet bool
}

func (v NullableOrderAddressInfo) Get() *OrderAddressInfo {
	return v.value
}

func (v *NullableOrderAddressInfo) Set(val *OrderAddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderAddressInfo(val *OrderAddressInfo) *NullableOrderAddressInfo {
	return &NullableOrderAddressInfo{value: val, isSet: true}
}

func (v NullableOrderAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


