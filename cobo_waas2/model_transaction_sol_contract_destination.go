/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionSolContractDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSolContractDestination{}

// TransactionSolContractDestination The information about the transaction destination type `SOL_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.  Switch between the tabs to display the properties for different transaction destinations. 
type TransactionSolContractDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	Instructions []TransactionSolContractInstruction `json:"instructions,omitempty"`
	AddressLookupTableAccounts []TransactionSolContractAddressLookupTableAccount `json:"address_lookup_table_accounts,omitempty"`
}

type _TransactionSolContractDestination TransactionSolContractDestination

// NewTransactionSolContractDestination instantiates a new TransactionSolContractDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSolContractDestination(destinationType TransactionDestinationType) *TransactionSolContractDestination {
	this := TransactionSolContractDestination{}
	this.DestinationType = destinationType
	return &this
}

// NewTransactionSolContractDestinationWithDefaults instantiates a new TransactionSolContractDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSolContractDestinationWithDefaults() *TransactionSolContractDestination {
	this := TransactionSolContractDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionSolContractDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionSolContractDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionSolContractDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *TransactionSolContractDestination) GetInstructions() []TransactionSolContractInstruction {
	if o == nil || IsNil(o.Instructions) {
		var ret []TransactionSolContractInstruction
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSolContractDestination) GetInstructionsOk() ([]TransactionSolContractInstruction, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *TransactionSolContractDestination) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []TransactionSolContractInstruction and assigns it to the Instructions field.
func (o *TransactionSolContractDestination) SetInstructions(v []TransactionSolContractInstruction) {
	o.Instructions = v
}

// GetAddressLookupTableAccounts returns the AddressLookupTableAccounts field value if set, zero value otherwise.
func (o *TransactionSolContractDestination) GetAddressLookupTableAccounts() []TransactionSolContractAddressLookupTableAccount {
	if o == nil || IsNil(o.AddressLookupTableAccounts) {
		var ret []TransactionSolContractAddressLookupTableAccount
		return ret
	}
	return o.AddressLookupTableAccounts
}

// GetAddressLookupTableAccountsOk returns a tuple with the AddressLookupTableAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSolContractDestination) GetAddressLookupTableAccountsOk() ([]TransactionSolContractAddressLookupTableAccount, bool) {
	if o == nil || IsNil(o.AddressLookupTableAccounts) {
		return nil, false
	}
	return o.AddressLookupTableAccounts, true
}

// HasAddressLookupTableAccounts returns a boolean if a field has been set.
func (o *TransactionSolContractDestination) HasAddressLookupTableAccounts() bool {
	if o != nil && !IsNil(o.AddressLookupTableAccounts) {
		return true
	}

	return false
}

// SetAddressLookupTableAccounts gets a reference to the given []TransactionSolContractAddressLookupTableAccount and assigns it to the AddressLookupTableAccounts field.
func (o *TransactionSolContractDestination) SetAddressLookupTableAccounts(v []TransactionSolContractAddressLookupTableAccount) {
	o.AddressLookupTableAccounts = v
}

func (o TransactionSolContractDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSolContractDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.AddressLookupTableAccounts) {
		toSerialize["address_lookup_table_accounts"] = o.AddressLookupTableAccounts
	}
	return toSerialize, nil
}

func (o *TransactionSolContractDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionSolContractDestination := _TransactionSolContractDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSolContractDestination)

	if err != nil {
		return err
	}

	*o = TransactionSolContractDestination(varTransactionSolContractDestination)

	return err
}

type NullableTransactionSolContractDestination struct {
	value *TransactionSolContractDestination
	isSet bool
}

func (v NullableTransactionSolContractDestination) Get() *TransactionSolContractDestination {
	return v.value
}

func (v *NullableTransactionSolContractDestination) Set(val *TransactionSolContractDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSolContractDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSolContractDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSolContractDestination(val *TransactionSolContractDestination) *NullableTransactionSolContractDestination {
	return &NullableTransactionSolContractDestination{value: val, isSet: true}
}

func (v NullableTransactionSolContractDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSolContractDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


