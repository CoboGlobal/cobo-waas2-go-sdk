/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionDetailAllOfTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDetailAllOfTimeline{}

// TransactionDetailAllOfTimeline The information about transaction timeline, which lists all statuses that the transaction passes through with timestamps indicating when each status is completed.
type TransactionDetailAllOfTimeline struct {
	Status *TransactionStatus `json:"status,omitempty"`
	// Whether the transaction status is completed:   - `true`: The transaction status is completed.   - `false`: The transaction is currently in the status. 
	Finished *bool `json:"finished,omitempty"`
	// The time when the transaction status is completed in Unix timestamp format, measured in milliseconds.
	FinishedTime *int64 `json:"finished_time,omitempty"`
}

// NewTransactionDetailAllOfTimeline instantiates a new TransactionDetailAllOfTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDetailAllOfTimeline() *TransactionDetailAllOfTimeline {
	this := TransactionDetailAllOfTimeline{}
	return &this
}

// NewTransactionDetailAllOfTimelineWithDefaults instantiates a new TransactionDetailAllOfTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDetailAllOfTimelineWithDefaults() *TransactionDetailAllOfTimeline {
	this := TransactionDetailAllOfTimeline{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionDetailAllOfTimeline) GetStatus() TransactionStatus {
	if o == nil || IsNil(o.Status) {
		var ret TransactionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetailAllOfTimeline) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionDetailAllOfTimeline) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TransactionStatus and assigns it to the Status field.
func (o *TransactionDetailAllOfTimeline) SetStatus(v TransactionStatus) {
	o.Status = &v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *TransactionDetailAllOfTimeline) GetFinished() bool {
	if o == nil || IsNil(o.Finished) {
		var ret bool
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetailAllOfTimeline) GetFinishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *TransactionDetailAllOfTimeline) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given bool and assigns it to the Finished field.
func (o *TransactionDetailAllOfTimeline) SetFinished(v bool) {
	o.Finished = &v
}

// GetFinishedTime returns the FinishedTime field value if set, zero value otherwise.
func (o *TransactionDetailAllOfTimeline) GetFinishedTime() int64 {
	if o == nil || IsNil(o.FinishedTime) {
		var ret int64
		return ret
	}
	return *o.FinishedTime
}

// GetFinishedTimeOk returns a tuple with the FinishedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDetailAllOfTimeline) GetFinishedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.FinishedTime) {
		return nil, false
	}
	return o.FinishedTime, true
}

// HasFinishedTime returns a boolean if a field has been set.
func (o *TransactionDetailAllOfTimeline) HasFinishedTime() bool {
	if o != nil && !IsNil(o.FinishedTime) {
		return true
	}

	return false
}

// SetFinishedTime gets a reference to the given int64 and assigns it to the FinishedTime field.
func (o *TransactionDetailAllOfTimeline) SetFinishedTime(v int64) {
	o.FinishedTime = &v
}

func (o TransactionDetailAllOfTimeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDetailAllOfTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	if !IsNil(o.FinishedTime) {
		toSerialize["finished_time"] = o.FinishedTime
	}
	return toSerialize, nil
}

type NullableTransactionDetailAllOfTimeline struct {
	value *TransactionDetailAllOfTimeline
	isSet bool
}

func (v NullableTransactionDetailAllOfTimeline) Get() *TransactionDetailAllOfTimeline {
	return v.value
}

func (v *NullableTransactionDetailAllOfTimeline) Set(val *TransactionDetailAllOfTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDetailAllOfTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDetailAllOfTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDetailAllOfTimeline(val *TransactionDetailAllOfTimeline) *NullableTransactionDetailAllOfTimeline {
	return &NullableTransactionDetailAllOfTimeline{value: val, isSet: true}
}

func (v NullableTransactionDetailAllOfTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDetailAllOfTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


