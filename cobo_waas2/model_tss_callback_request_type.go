/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSCallbackRequestType The type of the request. Possible values include:  - 0 : Ping. Used for heartbeat monitoring. - 1 : KeyGen. Creating new key shares for your MPC Wallets. - 2 : KeySign. Signing transactions or messages. - 3 : KeyReshare. Redistributing key shares among participants. - 5 : KeyShareSign. Signing messages with key shares. 
type TSSCallbackRequestType int32

// List of TSSCallbackRequestType
const (
	TSSCALLBACKREQUESTTYPE_PING TSSCallbackRequestType = 0
	TSSCALLBACKREQUESTTYPE_KEYGEN TSSCallbackRequestType = 1
	TSSCALLBACKREQUESTTYPE_KEYSIGN TSSCallbackRequestType = 2
	TSSCALLBACKREQUESTTYPE_KEYRESHARE TSSCallbackRequestType = 3
	TSSCALLBACKREQUESTTYPE_KEYSHARESIGN TSSCallbackRequestType = 5
)

// All allowed values of TSSCallbackRequestType enum
var AllowedTSSCallbackRequestTypeEnumValues = []TSSCallbackRequestType{
	0,
	1,
	2,
	3,
	5,
}

func (v *TSSCallbackRequestType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSCallbackRequestType(value)
	for _, existing := range AllowedTSSCallbackRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSCallbackRequestType(-1)
	return nil
}

// NewTSSCallbackRequestTypeFromValue returns a pointer to a valid TSSCallbackRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSCallbackRequestTypeFromValue(v int32) (*TSSCallbackRequestType, error) {
	ev := TSSCallbackRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSCallbackRequestType: valid values are %v", v, AllowedTSSCallbackRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSCallbackRequestType) IsValid() bool {
	for _, existing := range AllowedTSSCallbackRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSCallbackRequestType value
func (v TSSCallbackRequestType) Ptr() *TSSCallbackRequestType {
	return &v
}

type NullableTSSCallbackRequestType struct {
	value *TSSCallbackRequestType
	isSet bool
}

func (v NullableTSSCallbackRequestType) Get() *TSSCallbackRequestType {
	return v.value
}

func (v *NullableTSSCallbackRequestType) Set(val *TSSCallbackRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSCallbackRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSCallbackRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSCallbackRequestType(val *TSSCallbackRequestType) *NullableTSSCallbackRequestType {
	return &NullableTSSCallbackRequestType{value: val, isSet: true}
}

func (v NullableTSSCallbackRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSCallbackRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

