/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the SwapActivitySigners type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapActivitySigners{}

// SwapActivitySigners The signer data for swap activity.
type SwapActivitySigners struct {
	// The signer name.
	Signer *string `json:"signer,omitempty"`
	Status *SwapSingingStatus `json:"status,omitempty"`
	// Failed reason of signing process.
	FailedReason *string `json:"failed_reason,omitempty"`
}

// NewSwapActivitySigners instantiates a new SwapActivitySigners object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapActivitySigners() *SwapActivitySigners {
	this := SwapActivitySigners{}
	return &this
}

// NewSwapActivitySignersWithDefaults instantiates a new SwapActivitySigners object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapActivitySignersWithDefaults() *SwapActivitySigners {
	this := SwapActivitySigners{}
	return &this
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *SwapActivitySigners) GetSigner() string {
	if o == nil || IsNil(o.Signer) {
		var ret string
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivitySigners) GetSignerOk() (*string, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *SwapActivitySigners) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given string and assigns it to the Signer field.
func (o *SwapActivitySigners) SetSigner(v string) {
	o.Signer = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SwapActivitySigners) GetStatus() SwapSingingStatus {
	if o == nil || IsNil(o.Status) {
		var ret SwapSingingStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivitySigners) GetStatusOk() (*SwapSingingStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SwapActivitySigners) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SwapSingingStatus and assigns it to the Status field.
func (o *SwapActivitySigners) SetStatus(v SwapSingingStatus) {
	o.Status = &v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *SwapActivitySigners) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivitySigners) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *SwapActivitySigners) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *SwapActivitySigners) SetFailedReason(v string) {
	o.FailedReason = &v
}

func (o SwapActivitySigners) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapActivitySigners) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failed_reason"] = o.FailedReason
	}
	return toSerialize, nil
}

type NullableSwapActivitySigners struct {
	value *SwapActivitySigners
	isSet bool
}

func (v NullableSwapActivitySigners) Get() *SwapActivitySigners {
	return v.value
}

func (v *NullableSwapActivitySigners) Set(val *SwapActivitySigners) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivitySigners) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivitySigners) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivitySigners(val *SwapActivitySigners) *NullableSwapActivitySigners {
	return &NullableSwapActivitySigners{value: val, isSet: true}
}

func (v NullableSwapActivitySigners) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivitySigners) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


