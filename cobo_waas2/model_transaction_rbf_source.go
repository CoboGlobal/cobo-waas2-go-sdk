/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionRbfSource - struct for TransactionRbfSource
type TransactionRbfSource struct {
	CustodialWeb3TransferSource *CustodialWeb3TransferSource
	MpcTransferSource *MpcTransferSource
}

// CustodialWeb3TransferSourceAsTransactionRbfSource is a convenience function that returns CustodialWeb3TransferSource wrapped in TransactionRbfSource
func CustodialWeb3TransferSourceAsTransactionRbfSource(v *CustodialWeb3TransferSource) TransactionRbfSource {
	return TransactionRbfSource{
		CustodialWeb3TransferSource: v,
	}
}

// MpcTransferSourceAsTransactionRbfSource is a convenience function that returns MpcTransferSource wrapped in TransactionRbfSource
func MpcTransferSourceAsTransactionRbfSource(v *MpcTransferSource) TransactionRbfSource {
	return TransactionRbfSource{
		MpcTransferSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionRbfSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Org-Controlled'
	if jsonDict["source_type"] == "Org-Controlled" {
		// try to unmarshal JSON data into MpcTransferSource
		err = json.Unmarshal(data, &dst.MpcTransferSource)
		if err == nil {
			return nil // data stored in dst.MpcTransferSource, return on the first match
		} else {
			dst.MpcTransferSource = nil
			return fmt.Errorf("failed to unmarshal TransactionRbfSource as MpcTransferSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'User-Controlled'
	if jsonDict["source_type"] == "User-Controlled" {
		// try to unmarshal JSON data into MpcTransferSource
		err = json.Unmarshal(data, &dst.MpcTransferSource)
		if err == nil {
			return nil // data stored in dst.MpcTransferSource, return on the first match
		} else {
			dst.MpcTransferSource = nil
			return fmt.Errorf("failed to unmarshal TransactionRbfSource as MpcTransferSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Web3'
	if jsonDict["source_type"] == "Web3" {
		// try to unmarshal JSON data into CustodialWeb3TransferSource
		err = json.Unmarshal(data, &dst.CustodialWeb3TransferSource)
		if err == nil {
			return nil // data stored in dst.CustodialWeb3TransferSource, return on the first match
		} else {
			dst.CustodialWeb3TransferSource = nil
			return fmt.Errorf("failed to unmarshal TransactionRbfSource as CustodialWeb3TransferSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CustodialWeb3TransferSource'
	if jsonDict["source_type"] == "CustodialWeb3TransferSource" {
		// try to unmarshal JSON data into CustodialWeb3TransferSource
		err = json.Unmarshal(data, &dst.CustodialWeb3TransferSource)
		if err == nil {
			return nil // data stored in dst.CustodialWeb3TransferSource, return on the first match
		} else {
			dst.CustodialWeb3TransferSource = nil
			return fmt.Errorf("failed to unmarshal TransactionRbfSource as CustodialWeb3TransferSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MpcTransferSource'
	if jsonDict["source_type"] == "MpcTransferSource" {
		// try to unmarshal JSON data into MpcTransferSource
		err = json.Unmarshal(data, &dst.MpcTransferSource)
		if err == nil {
			return nil // data stored in dst.MpcTransferSource, return on the first match
		} else {
			dst.MpcTransferSource = nil
			return fmt.Errorf("failed to unmarshal TransactionRbfSource as MpcTransferSource: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionRbfSource) MarshalJSON() ([]byte, error) {
	if src.CustodialWeb3TransferSource != nil {
		return json.Marshal(&src.CustodialWeb3TransferSource)
	}

	if src.MpcTransferSource != nil {
		return json.Marshal(&src.MpcTransferSource)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionRbfSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CustodialWeb3TransferSource != nil {
		return obj.CustodialWeb3TransferSource
	}

	if obj.MpcTransferSource != nil {
		return obj.MpcTransferSource
	}

	// all schemas are nil
	return nil
}

type NullableTransactionRbfSource struct {
	value *TransactionRbfSource
	isSet bool
}

func (v NullableTransactionRbfSource) Get() *TransactionRbfSource {
	return v.value
}

func (v *NullableTransactionRbfSource) Set(val *TransactionRbfSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionRbfSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionRbfSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionRbfSource(val *TransactionRbfSource) *NullableTransactionRbfSource {
	return &NullableTransactionRbfSource{value: val, isSet: true}
}

func (v NullableTransactionRbfSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionRbfSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


