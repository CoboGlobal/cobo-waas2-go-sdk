/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TSSKeySignEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TSSKeySignEventData{}

// TSSKeySignEventData struct for TSSKeySignEventData
type TSSKeySignEventData struct {
	DataType TSSEventDataType `json:"data_type"`
	// The request ID.
	RequestId *string `json:"request_id,omitempty"`
	RequestType *TSSRequestTypeEenum `json:"request_type,omitempty"`
	RequestStatus *TSSStatus `json:"request_status,omitempty"`
	// The extra info.
	ExtraInfo *string `json:"extra_info,omitempty"`
	// The failed reason.
	FailedReason *string `json:"failed_reason,omitempty"`
	RequestDetail *TSSKeySignRequest `json:"request_detail,omitempty"`
	Result *TSSSignatures `json:"result,omitempty"`
}

type _TSSKeySignEventData TSSKeySignEventData

// NewTSSKeySignEventData instantiates a new TSSKeySignEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTSSKeySignEventData(dataType TSSEventDataType) *TSSKeySignEventData {
	this := TSSKeySignEventData{}
	this.DataType = dataType
	return &this
}

// NewTSSKeySignEventDataWithDefaults instantiates a new TSSKeySignEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTSSKeySignEventDataWithDefaults() *TSSKeySignEventData {
	this := TSSKeySignEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *TSSKeySignEventData) GetDataType() TSSEventDataType {
	if o == nil {
		var ret TSSEventDataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetDataTypeOk() (*TSSEventDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *TSSKeySignEventData) SetDataType(v TSSEventDataType) {
	o.DataType = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TSSKeySignEventData) SetRequestId(v string) {
	o.RequestId = &v
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetRequestType() TSSRequestTypeEenum {
	if o == nil || IsNil(o.RequestType) {
		var ret TSSRequestTypeEenum
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetRequestTypeOk() (*TSSRequestTypeEenum, bool) {
	if o == nil || IsNil(o.RequestType) {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasRequestType() bool {
	if o != nil && !IsNil(o.RequestType) {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given TSSRequestTypeEenum and assigns it to the RequestType field.
func (o *TSSKeySignEventData) SetRequestType(v TSSRequestTypeEenum) {
	o.RequestType = &v
}

// GetRequestStatus returns the RequestStatus field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetRequestStatus() TSSStatus {
	if o == nil || IsNil(o.RequestStatus) {
		var ret TSSStatus
		return ret
	}
	return *o.RequestStatus
}

// GetRequestStatusOk returns a tuple with the RequestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetRequestStatusOk() (*TSSStatus, bool) {
	if o == nil || IsNil(o.RequestStatus) {
		return nil, false
	}
	return o.RequestStatus, true
}

// HasRequestStatus returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasRequestStatus() bool {
	if o != nil && !IsNil(o.RequestStatus) {
		return true
	}

	return false
}

// SetRequestStatus gets a reference to the given TSSStatus and assigns it to the RequestStatus field.
func (o *TSSKeySignEventData) SetRequestStatus(v TSSStatus) {
	o.RequestStatus = &v
}

// GetExtraInfo returns the ExtraInfo field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetExtraInfo() string {
	if o == nil || IsNil(o.ExtraInfo) {
		var ret string
		return ret
	}
	return *o.ExtraInfo
}

// GetExtraInfoOk returns a tuple with the ExtraInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetExtraInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraInfo) {
		return nil, false
	}
	return o.ExtraInfo, true
}

// HasExtraInfo returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasExtraInfo() bool {
	if o != nil && !IsNil(o.ExtraInfo) {
		return true
	}

	return false
}

// SetExtraInfo gets a reference to the given string and assigns it to the ExtraInfo field.
func (o *TSSKeySignEventData) SetExtraInfo(v string) {
	o.ExtraInfo = &v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *TSSKeySignEventData) SetFailedReason(v string) {
	o.FailedReason = &v
}

// GetRequestDetail returns the RequestDetail field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetRequestDetail() TSSKeySignRequest {
	if o == nil || IsNil(o.RequestDetail) {
		var ret TSSKeySignRequest
		return ret
	}
	return *o.RequestDetail
}

// GetRequestDetailOk returns a tuple with the RequestDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetRequestDetailOk() (*TSSKeySignRequest, bool) {
	if o == nil || IsNil(o.RequestDetail) {
		return nil, false
	}
	return o.RequestDetail, true
}

// HasRequestDetail returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasRequestDetail() bool {
	if o != nil && !IsNil(o.RequestDetail) {
		return true
	}

	return false
}

// SetRequestDetail gets a reference to the given TSSKeySignRequest and assigns it to the RequestDetail field.
func (o *TSSKeySignEventData) SetRequestDetail(v TSSKeySignRequest) {
	o.RequestDetail = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TSSKeySignEventData) GetResult() TSSSignatures {
	if o == nil || IsNil(o.Result) {
		var ret TSSSignatures
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeySignEventData) GetResultOk() (*TSSSignatures, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TSSKeySignEventData) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given TSSSignatures and assigns it to the Result field.
func (o *TSSKeySignEventData) SetResult(v TSSSignatures) {
	o.Result = &v
}

func (o TSSKeySignEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TSSKeySignEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.RequestType) {
		toSerialize["request_type"] = o.RequestType
	}
	if !IsNil(o.RequestStatus) {
		toSerialize["request_status"] = o.RequestStatus
	}
	if !IsNil(o.ExtraInfo) {
		toSerialize["extra_info"] = o.ExtraInfo
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failed_reason"] = o.FailedReason
	}
	if !IsNil(o.RequestDetail) {
		toSerialize["request_detail"] = o.RequestDetail
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

func (o *TSSKeySignEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTSSKeySignEventData := _TSSKeySignEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTSSKeySignEventData)

	if err != nil {
		return err
	}

	*o = TSSKeySignEventData(varTSSKeySignEventData)

	return err
}

type NullableTSSKeySignEventData struct {
	value *TSSKeySignEventData
	isSet bool
}

func (v NullableTSSKeySignEventData) Get() *TSSKeySignEventData {
	return v.value
}

func (v *NullableTSSKeySignEventData) Set(val *TSSKeySignEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSKeySignEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSKeySignEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSKeySignEventData(val *TSSKeySignEventData) *NullableTSSKeySignEventData {
	return &NullableTSSKeySignEventData{value: val, isSet: true}
}

func (v NullableTSSKeySignEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSKeySignEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


