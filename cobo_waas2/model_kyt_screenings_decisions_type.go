/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KytScreeningsDecisionsType The KYT screening decision type from external compliance systems, indicating the final compliance determination for the transaction.  - `Approval`: Transaction is approved and can proceed without restrictions - `ApprovalWithAlert`: Transaction is approved but flagged for monitoring or additional compliance attention - `Rejection`: Transaction is rejected due to identified compliance risks and should be blocked - `ManualReview`: Transaction requires manual review by compliance officers before final determination  This field represents the decision output from automated or external KYT screening systems that integrate with Cobo's compliance infrastructure. 
type KytScreeningsDecisionsType string

// List of KytScreeningsDecisionsType
const (
	KYTSCREENINGSDECISIONSTYPE_APPROVAL KytScreeningsDecisionsType = "Approval"
	KYTSCREENINGSDECISIONSTYPE_APPROVAL_WITH_ALERT KytScreeningsDecisionsType = "ApprovalWithAlert"
	KYTSCREENINGSDECISIONSTYPE_REJECTION KytScreeningsDecisionsType = "Rejection"
	KYTSCREENINGSDECISIONSTYPE_MANUAL_REVIEW KytScreeningsDecisionsType = "ManualReview"
)

// All allowed values of KytScreeningsDecisionsType enum
var AllowedKytScreeningsDecisionsTypeEnumValues = []KytScreeningsDecisionsType{
	"Approval",
	"ApprovalWithAlert",
	"Rejection",
	"ManualReview",
}

func (v *KytScreeningsDecisionsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KytScreeningsDecisionsType(value)
	for _, existing := range AllowedKytScreeningsDecisionsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = KytScreeningsDecisionsType("unknown")
	return nil
}

// NewKytScreeningsDecisionsTypeFromValue returns a pointer to a valid KytScreeningsDecisionsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKytScreeningsDecisionsTypeFromValue(v string) (*KytScreeningsDecisionsType, error) {
	ev := KytScreeningsDecisionsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KytScreeningsDecisionsType: valid values are %v", v, AllowedKytScreeningsDecisionsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KytScreeningsDecisionsType) IsValid() bool {
	for _, existing := range AllowedKytScreeningsDecisionsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KytScreeningsDecisionsType value
func (v KytScreeningsDecisionsType) Ptr() *KytScreeningsDecisionsType {
	return &v
}

type NullableKytScreeningsDecisionsType struct {
	value *KytScreeningsDecisionsType
	isSet bool
}

func (v NullableKytScreeningsDecisionsType) Get() *KytScreeningsDecisionsType {
	return v.value
}

func (v *NullableKytScreeningsDecisionsType) Set(val *KytScreeningsDecisionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableKytScreeningsDecisionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableKytScreeningsDecisionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKytScreeningsDecisionsType(val *KytScreeningsDecisionsType) *NullableKytScreeningsDecisionsType {
	return &NullableKytScreeningsDecisionsType{value: val, isSet: true}
}

func (v NullableKytScreeningsDecisionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKytScreeningsDecisionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

