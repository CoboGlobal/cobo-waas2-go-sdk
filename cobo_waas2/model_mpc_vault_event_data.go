/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MPCVaultEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MPCVaultEventData{}

// MPCVaultEventData struct for MPCVaultEventData
type MPCVaultEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data.
	DataType string `json:"data_type"`
	// The vault ID.
	VaultId *string `json:"vault_id,omitempty"`
	// The project ID.
	ProjectId *string `json:"project_id,omitempty"`
	// The vault name.
	Name *string `json:"name,omitempty"`
	Type *MPCVaultType `json:"type,omitempty"`
	RootPubkeys []RootPubkey `json:"root_pubkeys,omitempty"`
	// The vault's creation time in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
}

type _MPCVaultEventData MPCVaultEventData

// NewMPCVaultEventData instantiates a new MPCVaultEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMPCVaultEventData(dataType string) *MPCVaultEventData {
	this := MPCVaultEventData{}
	this.DataType = dataType
	return &this
}

// NewMPCVaultEventDataWithDefaults instantiates a new MPCVaultEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMPCVaultEventDataWithDefaults() *MPCVaultEventData {
	this := MPCVaultEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *MPCVaultEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *MPCVaultEventData) SetDataType(v string) {
	o.DataType = v
}

// GetVaultId returns the VaultId field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetVaultId() string {
	if o == nil || IsNil(o.VaultId) {
		var ret string
		return ret
	}
	return *o.VaultId
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetVaultIdOk() (*string, bool) {
	if o == nil || IsNil(o.VaultId) {
		return nil, false
	}
	return o.VaultId, true
}

// HasVaultId returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasVaultId() bool {
	if o != nil && !IsNil(o.VaultId) {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given string and assigns it to the VaultId field.
func (o *MPCVaultEventData) SetVaultId(v string) {
	o.VaultId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *MPCVaultEventData) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MPCVaultEventData) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetType() MPCVaultType {
	if o == nil || IsNil(o.Type) {
		var ret MPCVaultType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetTypeOk() (*MPCVaultType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MPCVaultType and assigns it to the Type field.
func (o *MPCVaultEventData) SetType(v MPCVaultType) {
	o.Type = &v
}

// GetRootPubkeys returns the RootPubkeys field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetRootPubkeys() []RootPubkey {
	if o == nil || IsNil(o.RootPubkeys) {
		var ret []RootPubkey
		return ret
	}
	return o.RootPubkeys
}

// GetRootPubkeysOk returns a tuple with the RootPubkeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetRootPubkeysOk() ([]RootPubkey, bool) {
	if o == nil || IsNil(o.RootPubkeys) {
		return nil, false
	}
	return o.RootPubkeys, true
}

// HasRootPubkeys returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasRootPubkeys() bool {
	if o != nil && !IsNil(o.RootPubkeys) {
		return true
	}

	return false
}

// SetRootPubkeys gets a reference to the given []RootPubkey and assigns it to the RootPubkeys field.
func (o *MPCVaultEventData) SetRootPubkeys(v []RootPubkey) {
	o.RootPubkeys = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *MPCVaultEventData) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCVaultEventData) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *MPCVaultEventData) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *MPCVaultEventData) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

func (o MPCVaultEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MPCVaultEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	if !IsNil(o.VaultId) {
		toSerialize["vault_id"] = o.VaultId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RootPubkeys) {
		toSerialize["root_pubkeys"] = o.RootPubkeys
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	return toSerialize, nil
}

func (o *MPCVaultEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMPCVaultEventData := _MPCVaultEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMPCVaultEventData)

	if err != nil {
		return err
	}

	*o = MPCVaultEventData(varMPCVaultEventData)

	return err
}

type NullableMPCVaultEventData struct {
	value *MPCVaultEventData
	isSet bool
}

func (v NullableMPCVaultEventData) Get() *MPCVaultEventData {
	return v.value
}

func (v *NullableMPCVaultEventData) Set(val *MPCVaultEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableMPCVaultEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableMPCVaultEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMPCVaultEventData(val *MPCVaultEventData) *NullableMPCVaultEventData {
	return &NullableMPCVaultEventData{value: val, isSet: true}
}

func (v NullableMPCVaultEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMPCVaultEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


