/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSGroupType The elliptic curve type. Possible values include:  - 1 : The `ECDSA` group. - 2 : The `EdDSA` group. 
type TSSGroupType int32

// List of TSSGroupType
const (
	TSSGROUPTYPE_ECDSA TSSGroupType = 1
	TSSGROUPTYPE_EdDSA TSSGroupType = 2
)

// All allowed values of TSSGroupType enum
var AllowedTSSGroupTypeEnumValues = []TSSGroupType{
	1,
	2,
}

func (v *TSSGroupType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSGroupType(value)
	for _, existing := range AllowedTSSGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSGroupType(-1)
	return nil
}

// NewTSSGroupTypeFromValue returns a pointer to a valid TSSGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSGroupTypeFromValue(v int32) (*TSSGroupType, error) {
	ev := TSSGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSGroupType: valid values are %v", v, AllowedTSSGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSGroupType) IsValid() bool {
	for _, existing := range AllowedTSSGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSGroupType value
func (v TSSGroupType) Ptr() *TSSGroupType {
	return &v
}

type NullableTSSGroupType struct {
	value *TSSGroupType
	isSet bool
}

func (v NullableTSSGroupType) Get() *TSSGroupType {
	return v.value
}

func (v *NullableTSSGroupType) Set(val *TSSGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSGroupType(val *TSSGroupType) *NullableTSSGroupType {
	return &NullableTSSGroupType{value: val, isSet: true}
}

func (v NullableTSSGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

