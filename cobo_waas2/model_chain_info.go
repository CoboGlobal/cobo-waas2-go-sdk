/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChainInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainInfo{}

// ChainInfo The chain information.
type ChainInfo struct {
	// The chain ID, which is the unique identifier of a blockchain.
	ChainId string `json:"chain_id"`
	// The chain symbol for display purposes, which is the abbreviated name of a chain.
	Symbol *string `json:"symbol,omitempty"`
	// The URL of the chain icon.
	IconUrl *string `json:"icon_url,omitempty"`
	// A functional identifier used to group blockchains with similar execution logic. For example, `ETH` for all EVM-compatible chains (Ethereum, BNB Smart Chain, Polygon).
	ChainIdentifier *string `json:"chain_identifier,omitempty"`
	// The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.
	ExplorerTxUrl *string `json:"explorer_tx_url,omitempty"`
	// The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.
	ExplorerAddressUrl *string `json:"explorer_address_url,omitempty"`
	// Whether the chain requires a memo.
	RequireMemo *bool `json:"require_memo,omitempty"`
	// The number of confirmations required for an on-chain transaction, such as 64 for Ethereum.
	ConfirmingThreshold *int32 `json:"confirming_threshold,omitempty"`
	// The number of confirmations required before a coinbase transaction is considered mature and can be spent, for example, 100 confirmations for BTC.
	CoinbaseMaturity *int32 `json:"coinbase_maturity,omitempty"`
}

type _ChainInfo ChainInfo

// NewChainInfo instantiates a new ChainInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainInfo(chainId string) *ChainInfo {
	this := ChainInfo{}
	this.ChainId = chainId
	return &this
}

// NewChainInfoWithDefaults instantiates a new ChainInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainInfoWithDefaults() *ChainInfo {
	this := ChainInfo{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *ChainInfo) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *ChainInfo) SetChainId(v string) {
	o.ChainId = v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ChainInfo) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ChainInfo) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ChainInfo) SetSymbol(v string) {
	o.Symbol = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *ChainInfo) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *ChainInfo) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *ChainInfo) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetChainIdentifier returns the ChainIdentifier field value if set, zero value otherwise.
func (o *ChainInfo) GetChainIdentifier() string {
	if o == nil || IsNil(o.ChainIdentifier) {
		var ret string
		return ret
	}
	return *o.ChainIdentifier
}

// GetChainIdentifierOk returns a tuple with the ChainIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetChainIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ChainIdentifier) {
		return nil, false
	}
	return o.ChainIdentifier, true
}

// HasChainIdentifier returns a boolean if a field has been set.
func (o *ChainInfo) HasChainIdentifier() bool {
	if o != nil && !IsNil(o.ChainIdentifier) {
		return true
	}

	return false
}

// SetChainIdentifier gets a reference to the given string and assigns it to the ChainIdentifier field.
func (o *ChainInfo) SetChainIdentifier(v string) {
	o.ChainIdentifier = &v
}

// GetExplorerTxUrl returns the ExplorerTxUrl field value if set, zero value otherwise.
func (o *ChainInfo) GetExplorerTxUrl() string {
	if o == nil || IsNil(o.ExplorerTxUrl) {
		var ret string
		return ret
	}
	return *o.ExplorerTxUrl
}

// GetExplorerTxUrlOk returns a tuple with the ExplorerTxUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetExplorerTxUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExplorerTxUrl) {
		return nil, false
	}
	return o.ExplorerTxUrl, true
}

// HasExplorerTxUrl returns a boolean if a field has been set.
func (o *ChainInfo) HasExplorerTxUrl() bool {
	if o != nil && !IsNil(o.ExplorerTxUrl) {
		return true
	}

	return false
}

// SetExplorerTxUrl gets a reference to the given string and assigns it to the ExplorerTxUrl field.
func (o *ChainInfo) SetExplorerTxUrl(v string) {
	o.ExplorerTxUrl = &v
}

// GetExplorerAddressUrl returns the ExplorerAddressUrl field value if set, zero value otherwise.
func (o *ChainInfo) GetExplorerAddressUrl() string {
	if o == nil || IsNil(o.ExplorerAddressUrl) {
		var ret string
		return ret
	}
	return *o.ExplorerAddressUrl
}

// GetExplorerAddressUrlOk returns a tuple with the ExplorerAddressUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetExplorerAddressUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExplorerAddressUrl) {
		return nil, false
	}
	return o.ExplorerAddressUrl, true
}

// HasExplorerAddressUrl returns a boolean if a field has been set.
func (o *ChainInfo) HasExplorerAddressUrl() bool {
	if o != nil && !IsNil(o.ExplorerAddressUrl) {
		return true
	}

	return false
}

// SetExplorerAddressUrl gets a reference to the given string and assigns it to the ExplorerAddressUrl field.
func (o *ChainInfo) SetExplorerAddressUrl(v string) {
	o.ExplorerAddressUrl = &v
}

// GetRequireMemo returns the RequireMemo field value if set, zero value otherwise.
func (o *ChainInfo) GetRequireMemo() bool {
	if o == nil || IsNil(o.RequireMemo) {
		var ret bool
		return ret
	}
	return *o.RequireMemo
}

// GetRequireMemoOk returns a tuple with the RequireMemo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetRequireMemoOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireMemo) {
		return nil, false
	}
	return o.RequireMemo, true
}

// HasRequireMemo returns a boolean if a field has been set.
func (o *ChainInfo) HasRequireMemo() bool {
	if o != nil && !IsNil(o.RequireMemo) {
		return true
	}

	return false
}

// SetRequireMemo gets a reference to the given bool and assigns it to the RequireMemo field.
func (o *ChainInfo) SetRequireMemo(v bool) {
	o.RequireMemo = &v
}

// GetConfirmingThreshold returns the ConfirmingThreshold field value if set, zero value otherwise.
func (o *ChainInfo) GetConfirmingThreshold() int32 {
	if o == nil || IsNil(o.ConfirmingThreshold) {
		var ret int32
		return ret
	}
	return *o.ConfirmingThreshold
}

// GetConfirmingThresholdOk returns a tuple with the ConfirmingThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetConfirmingThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfirmingThreshold) {
		return nil, false
	}
	return o.ConfirmingThreshold, true
}

// HasConfirmingThreshold returns a boolean if a field has been set.
func (o *ChainInfo) HasConfirmingThreshold() bool {
	if o != nil && !IsNil(o.ConfirmingThreshold) {
		return true
	}

	return false
}

// SetConfirmingThreshold gets a reference to the given int32 and assigns it to the ConfirmingThreshold field.
func (o *ChainInfo) SetConfirmingThreshold(v int32) {
	o.ConfirmingThreshold = &v
}

// GetCoinbaseMaturity returns the CoinbaseMaturity field value if set, zero value otherwise.
func (o *ChainInfo) GetCoinbaseMaturity() int32 {
	if o == nil || IsNil(o.CoinbaseMaturity) {
		var ret int32
		return ret
	}
	return *o.CoinbaseMaturity
}

// GetCoinbaseMaturityOk returns a tuple with the CoinbaseMaturity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainInfo) GetCoinbaseMaturityOk() (*int32, bool) {
	if o == nil || IsNil(o.CoinbaseMaturity) {
		return nil, false
	}
	return o.CoinbaseMaturity, true
}

// HasCoinbaseMaturity returns a boolean if a field has been set.
func (o *ChainInfo) HasCoinbaseMaturity() bool {
	if o != nil && !IsNil(o.CoinbaseMaturity) {
		return true
	}

	return false
}

// SetCoinbaseMaturity gets a reference to the given int32 and assigns it to the CoinbaseMaturity field.
func (o *ChainInfo) SetCoinbaseMaturity(v int32) {
	o.CoinbaseMaturity = &v
}

func (o ChainInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.ChainIdentifier) {
		toSerialize["chain_identifier"] = o.ChainIdentifier
	}
	if !IsNil(o.ExplorerTxUrl) {
		toSerialize["explorer_tx_url"] = o.ExplorerTxUrl
	}
	if !IsNil(o.ExplorerAddressUrl) {
		toSerialize["explorer_address_url"] = o.ExplorerAddressUrl
	}
	if !IsNil(o.RequireMemo) {
		toSerialize["require_memo"] = o.RequireMemo
	}
	if !IsNil(o.ConfirmingThreshold) {
		toSerialize["confirming_threshold"] = o.ConfirmingThreshold
	}
	if !IsNil(o.CoinbaseMaturity) {
		toSerialize["coinbase_maturity"] = o.CoinbaseMaturity
	}
	return toSerialize, nil
}

func (o *ChainInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChainInfo := _ChainInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChainInfo)

	if err != nil {
		return err
	}

	*o = ChainInfo(varChainInfo)

	return err
}

type NullableChainInfo struct {
	value *ChainInfo
	isSet bool
}

func (v NullableChainInfo) Get() *ChainInfo {
	return v.value
}

func (v *NullableChainInfo) Set(val *ChainInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableChainInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableChainInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainInfo(val *ChainInfo) *NullableChainInfo {
	return &NullableChainInfo{value: val, isSet: true}
}

func (v NullableChainInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


