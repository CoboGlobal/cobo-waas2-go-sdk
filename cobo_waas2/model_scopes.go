/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the Scopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scopes{}

// Scopes The wallet scopes associated with this API key.
type Scopes struct {
	// The list of wallet types that this API key can access. Possible values include:   - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)   - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)   - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)   - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
	WalletTypes []WalletType `json:"wallet_types,omitempty"`
	// The list of wallet sub-types that this API key can access. Possible values include:   - `Asset`: Custodial Wallets (Asset Wallets).   - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).   - `User-Controlled`: MPC Wallets (User-Controlled Wallets).   - `Safe{Wallet}`: Smart Contract Wallets (Safe).   - `Main`: Exchange Wallets (Main Account).   - `Sub`: Exchange Wallets (Sub Account). 
	WalletSubtypes []WalletSubtype `json:"wallet_subtypes,omitempty"`
	// The list of wallet IDs that this API key can access.
	WalletIds []string `json:"wallet_ids,omitempty"`
	// (Applicable to MPC Wallets only) The list of vault IDs that this API key can access.
	VaultIds []string `json:"vault_ids,omitempty"`
	// (Applicable to MPC Wallets only) The list of project IDs that this API key can access.
	ProjectIds []string `json:"project_ids,omitempty"`
}

// NewScopes instantiates a new Scopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopes() *Scopes {
	this := Scopes{}
	return &this
}

// NewScopesWithDefaults instantiates a new Scopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopesWithDefaults() *Scopes {
	this := Scopes{}
	return &this
}

// GetWalletTypes returns the WalletTypes field value if set, zero value otherwise.
func (o *Scopes) GetWalletTypes() []WalletType {
	if o == nil || IsNil(o.WalletTypes) {
		var ret []WalletType
		return ret
	}
	return o.WalletTypes
}

// GetWalletTypesOk returns a tuple with the WalletTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scopes) GetWalletTypesOk() ([]WalletType, bool) {
	if o == nil || IsNil(o.WalletTypes) {
		return nil, false
	}
	return o.WalletTypes, true
}

// HasWalletTypes returns a boolean if a field has been set.
func (o *Scopes) HasWalletTypes() bool {
	if o != nil && !IsNil(o.WalletTypes) {
		return true
	}

	return false
}

// SetWalletTypes gets a reference to the given []WalletType and assigns it to the WalletTypes field.
func (o *Scopes) SetWalletTypes(v []WalletType) {
	o.WalletTypes = v
}

// GetWalletSubtypes returns the WalletSubtypes field value if set, zero value otherwise.
func (o *Scopes) GetWalletSubtypes() []WalletSubtype {
	if o == nil || IsNil(o.WalletSubtypes) {
		var ret []WalletSubtype
		return ret
	}
	return o.WalletSubtypes
}

// GetWalletSubtypesOk returns a tuple with the WalletSubtypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scopes) GetWalletSubtypesOk() ([]WalletSubtype, bool) {
	if o == nil || IsNil(o.WalletSubtypes) {
		return nil, false
	}
	return o.WalletSubtypes, true
}

// HasWalletSubtypes returns a boolean if a field has been set.
func (o *Scopes) HasWalletSubtypes() bool {
	if o != nil && !IsNil(o.WalletSubtypes) {
		return true
	}

	return false
}

// SetWalletSubtypes gets a reference to the given []WalletSubtype and assigns it to the WalletSubtypes field.
func (o *Scopes) SetWalletSubtypes(v []WalletSubtype) {
	o.WalletSubtypes = v
}

// GetWalletIds returns the WalletIds field value if set, zero value otherwise.
func (o *Scopes) GetWalletIds() []string {
	if o == nil || IsNil(o.WalletIds) {
		var ret []string
		return ret
	}
	return o.WalletIds
}

// GetWalletIdsOk returns a tuple with the WalletIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scopes) GetWalletIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WalletIds) {
		return nil, false
	}
	return o.WalletIds, true
}

// HasWalletIds returns a boolean if a field has been set.
func (o *Scopes) HasWalletIds() bool {
	if o != nil && !IsNil(o.WalletIds) {
		return true
	}

	return false
}

// SetWalletIds gets a reference to the given []string and assigns it to the WalletIds field.
func (o *Scopes) SetWalletIds(v []string) {
	o.WalletIds = v
}

// GetVaultIds returns the VaultIds field value if set, zero value otherwise.
func (o *Scopes) GetVaultIds() []string {
	if o == nil || IsNil(o.VaultIds) {
		var ret []string
		return ret
	}
	return o.VaultIds
}

// GetVaultIdsOk returns a tuple with the VaultIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scopes) GetVaultIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VaultIds) {
		return nil, false
	}
	return o.VaultIds, true
}

// HasVaultIds returns a boolean if a field has been set.
func (o *Scopes) HasVaultIds() bool {
	if o != nil && !IsNil(o.VaultIds) {
		return true
	}

	return false
}

// SetVaultIds gets a reference to the given []string and assigns it to the VaultIds field.
func (o *Scopes) SetVaultIds(v []string) {
	o.VaultIds = v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *Scopes) GetProjectIds() []string {
	if o == nil || IsNil(o.ProjectIds) {
		var ret []string
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scopes) GetProjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *Scopes) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []string and assigns it to the ProjectIds field.
func (o *Scopes) SetProjectIds(v []string) {
	o.ProjectIds = v
}

func (o Scopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WalletTypes) {
		toSerialize["wallet_types"] = o.WalletTypes
	}
	if !IsNil(o.WalletSubtypes) {
		toSerialize["wallet_subtypes"] = o.WalletSubtypes
	}
	if !IsNil(o.WalletIds) {
		toSerialize["wallet_ids"] = o.WalletIds
	}
	if !IsNil(o.VaultIds) {
		toSerialize["vault_ids"] = o.VaultIds
	}
	if !IsNil(o.ProjectIds) {
		toSerialize["project_ids"] = o.ProjectIds
	}
	return toSerialize, nil
}

type NullableScopes struct {
	value *Scopes
	isSet bool
}

func (v NullableScopes) Get() *Scopes {
	return v.value
}

func (v *NullableScopes) Set(val *Scopes) {
	v.value = val
	v.isSet = true
}

func (v NullableScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopes(val *Scopes) *NullableScopes {
	return &NullableScopes{value: val, isSet: true}
}

func (v NullableScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


