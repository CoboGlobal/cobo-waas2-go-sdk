/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapActivityTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapActivityTimeline{}

// SwapActivityTimeline The timeline of the swap activity.
type SwapActivityTimeline struct {
	// The action of the swap activity. Possible values include:   - `Submitted`: The swap request is submitted.   - `Pending Authorization`: The swap request is pending authorization.   - `Bridge {Token}`: The token is being bridged to the target chain.   - `Swap {Token}`: The token is being swapped on the target chain.   - `Cobo Confirmation`: The swap result is waiting for Cobo confirmation. 
	Action string `json:"action"`
	// The status of the action. Possible values include:   - `Success`: The action is successfully completed.   - `Processing`: The action is being processed.   - `Failed`: The action has failed. 
	Status string `json:"status"`
	// The time when the action took place, in Unix timestamp format, measured in milliseconds.  
	Timestamp *int32 `json:"timestamp,omitempty"`
}

type _SwapActivityTimeline SwapActivityTimeline

// NewSwapActivityTimeline instantiates a new SwapActivityTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapActivityTimeline(action string, status string) *SwapActivityTimeline {
	this := SwapActivityTimeline{}
	this.Action = action
	this.Status = status
	return &this
}

// NewSwapActivityTimelineWithDefaults instantiates a new SwapActivityTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapActivityTimelineWithDefaults() *SwapActivityTimeline {
	this := SwapActivityTimeline{}
	return &this
}

// GetAction returns the Action field value
func (o *SwapActivityTimeline) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SwapActivityTimeline) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SwapActivityTimeline) SetAction(v string) {
	o.Action = v
}

// GetStatus returns the Status field value
func (o *SwapActivityTimeline) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SwapActivityTimeline) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SwapActivityTimeline) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SwapActivityTimeline) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapActivityTimeline) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SwapActivityTimeline) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *SwapActivityTimeline) SetTimestamp(v int32) {
	o.Timestamp = &v
}

func (o SwapActivityTimeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapActivityTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["status"] = o.Status
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *SwapActivityTimeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapActivityTimeline := _SwapActivityTimeline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapActivityTimeline)

	if err != nil {
		return err
	}

	*o = SwapActivityTimeline(varSwapActivityTimeline)

	return err
}

type NullableSwapActivityTimeline struct {
	value *SwapActivityTimeline
	isSet bool
}

func (v NullableSwapActivityTimeline) Get() *SwapActivityTimeline {
	return v.value
}

func (v *NullableSwapActivityTimeline) Set(val *SwapActivityTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapActivityTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapActivityTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapActivityTimeline(val *SwapActivityTimeline) *NullableSwapActivityTimeline {
	return &NullableSwapActivityTimeline{value: val, isSet: true}
}

func (v NullableSwapActivityTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapActivityTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


