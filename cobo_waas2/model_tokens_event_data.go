/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokensEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokensEventData{}

// TokensEventData struct for TokensEventData
type TokensEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
	DataType string `json:"data_type"`
	// The enabled tokens.
	Tokens []TokenInfo `json:"tokens"`
	WalletType *WalletType `json:"wallet_type,omitempty"`
	WalletSubtypes []WalletSubtype `json:"wallet_subtypes,omitempty"`
}

type _TokensEventData TokensEventData

// NewTokensEventData instantiates a new TokensEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokensEventData(dataType string, tokens []TokenInfo) *TokensEventData {
	this := TokensEventData{}
	this.DataType = dataType
	this.Tokens = tokens
	return &this
}

// NewTokensEventDataWithDefaults instantiates a new TokensEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokensEventDataWithDefaults() *TokensEventData {
	this := TokensEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *TokensEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *TokensEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *TokensEventData) SetDataType(v string) {
	o.DataType = v
}

// GetTokens returns the Tokens field value
func (o *TokensEventData) GetTokens() []TokenInfo {
	if o == nil {
		var ret []TokenInfo
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *TokensEventData) GetTokensOk() ([]TokenInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tokens, true
}

// SetTokens sets field value
func (o *TokensEventData) SetTokens(v []TokenInfo) {
	o.Tokens = v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *TokensEventData) GetWalletType() WalletType {
	if o == nil || IsNil(o.WalletType) {
		var ret WalletType
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensEventData) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *TokensEventData) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given WalletType and assigns it to the WalletType field.
func (o *TokensEventData) SetWalletType(v WalletType) {
	o.WalletType = &v
}

// GetWalletSubtypes returns the WalletSubtypes field value if set, zero value otherwise.
func (o *TokensEventData) GetWalletSubtypes() []WalletSubtype {
	if o == nil || IsNil(o.WalletSubtypes) {
		var ret []WalletSubtype
		return ret
	}
	return o.WalletSubtypes
}

// GetWalletSubtypesOk returns a tuple with the WalletSubtypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokensEventData) GetWalletSubtypesOk() ([]WalletSubtype, bool) {
	if o == nil || IsNil(o.WalletSubtypes) {
		return nil, false
	}
	return o.WalletSubtypes, true
}

// HasWalletSubtypes returns a boolean if a field has been set.
func (o *TokensEventData) HasWalletSubtypes() bool {
	if o != nil && !IsNil(o.WalletSubtypes) {
		return true
	}

	return false
}

// SetWalletSubtypes gets a reference to the given []WalletSubtype and assigns it to the WalletSubtypes field.
func (o *TokensEventData) SetWalletSubtypes(v []WalletSubtype) {
	o.WalletSubtypes = v
}

func (o TokensEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokensEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["tokens"] = o.Tokens
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	if !IsNil(o.WalletSubtypes) {
		toSerialize["wallet_subtypes"] = o.WalletSubtypes
	}
	return toSerialize, nil
}

func (o *TokensEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokensEventData := _TokensEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokensEventData)

	if err != nil {
		return err
	}

	*o = TokensEventData(varTokensEventData)

	return err
}

type NullableTokensEventData struct {
	value *TokensEventData
	isSet bool
}

func (v NullableTokensEventData) Get() *TokensEventData {
	return v.value
}

func (v *NullableTokensEventData) Set(val *TokensEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableTokensEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableTokensEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokensEventData(val *TokensEventData) *NullableTokensEventData {
	return &NullableTokensEventData{value: val, isSet: true}
}

func (v NullableTokensEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokensEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


