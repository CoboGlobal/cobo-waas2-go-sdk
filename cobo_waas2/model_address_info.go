/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressInfo{}

// AddressInfo The address information.
type AddressInfo struct {
	// The wallet address.
	Address string `json:"address"`
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains).
	ChainId string `json:"chain_id"`
	// The memo code.
	Memo *string `json:"memo,omitempty"`
	// The derivation path of the address. This property applies to MPC Wallets only. To learn the meaning of each level in the path, see [Path levels](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels).
	Path *string `json:"path,omitempty"`
	Encoding *AddressEncoding `json:"encoding,omitempty"`
	// The public key of the address. This property applies to MPC Wallets only.
	Pubkey *string `json:"pubkey,omitempty"`
	// The 32-byte x-only public key in hexadecimal format after tweaking.
	XOnlyPubkey *string `json:"x_only_pubkey,omitempty"`
	// The root public key of the address. This property applies to MPC Wallets only.
	RootPubkey *string `json:"root_pubkey,omitempty"`
	// The information about the new address.
	TaprootScriptTreeHash *string `json:"taproot_script_tree_hash,omitempty"`
	// The Taproot address before tweaking.
	TaprootInternalAddress *string `json:"taproot_internal_address,omitempty"`
}

type _AddressInfo AddressInfo

// NewAddressInfo instantiates a new AddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressInfo(address string, chainId string) *AddressInfo {
	this := AddressInfo{}
	this.Address = address
	this.ChainId = chainId
	return &this
}

// NewAddressInfoWithDefaults instantiates a new AddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressInfoWithDefaults() *AddressInfo {
	this := AddressInfo{}
	return &this
}

// GetAddress returns the Address field value
func (o *AddressInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressInfo) SetAddress(v string) {
	o.Address = v
}

// GetChainId returns the ChainId field value
func (o *AddressInfo) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *AddressInfo) SetChainId(v string) {
	o.ChainId = v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *AddressInfo) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *AddressInfo) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *AddressInfo) SetMemo(v string) {
	o.Memo = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *AddressInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *AddressInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *AddressInfo) SetPath(v string) {
	o.Path = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *AddressInfo) GetEncoding() AddressEncoding {
	if o == nil || IsNil(o.Encoding) {
		var ret AddressEncoding
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetEncodingOk() (*AddressEncoding, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *AddressInfo) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given AddressEncoding and assigns it to the Encoding field.
func (o *AddressInfo) SetEncoding(v AddressEncoding) {
	o.Encoding = &v
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *AddressInfo) GetPubkey() string {
	if o == nil || IsNil(o.Pubkey) {
		var ret string
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.Pubkey) {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *AddressInfo) HasPubkey() bool {
	if o != nil && !IsNil(o.Pubkey) {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given string and assigns it to the Pubkey field.
func (o *AddressInfo) SetPubkey(v string) {
	o.Pubkey = &v
}

// GetXOnlyPubkey returns the XOnlyPubkey field value if set, zero value otherwise.
func (o *AddressInfo) GetXOnlyPubkey() string {
	if o == nil || IsNil(o.XOnlyPubkey) {
		var ret string
		return ret
	}
	return *o.XOnlyPubkey
}

// GetXOnlyPubkeyOk returns a tuple with the XOnlyPubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetXOnlyPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.XOnlyPubkey) {
		return nil, false
	}
	return o.XOnlyPubkey, true
}

// HasXOnlyPubkey returns a boolean if a field has been set.
func (o *AddressInfo) HasXOnlyPubkey() bool {
	if o != nil && !IsNil(o.XOnlyPubkey) {
		return true
	}

	return false
}

// SetXOnlyPubkey gets a reference to the given string and assigns it to the XOnlyPubkey field.
func (o *AddressInfo) SetXOnlyPubkey(v string) {
	o.XOnlyPubkey = &v
}

// GetRootPubkey returns the RootPubkey field value if set, zero value otherwise.
func (o *AddressInfo) GetRootPubkey() string {
	if o == nil || IsNil(o.RootPubkey) {
		var ret string
		return ret
	}
	return *o.RootPubkey
}

// GetRootPubkeyOk returns a tuple with the RootPubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetRootPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.RootPubkey) {
		return nil, false
	}
	return o.RootPubkey, true
}

// HasRootPubkey returns a boolean if a field has been set.
func (o *AddressInfo) HasRootPubkey() bool {
	if o != nil && !IsNil(o.RootPubkey) {
		return true
	}

	return false
}

// SetRootPubkey gets a reference to the given string and assigns it to the RootPubkey field.
func (o *AddressInfo) SetRootPubkey(v string) {
	o.RootPubkey = &v
}

// GetTaprootScriptTreeHash returns the TaprootScriptTreeHash field value if set, zero value otherwise.
func (o *AddressInfo) GetTaprootScriptTreeHash() string {
	if o == nil || IsNil(o.TaprootScriptTreeHash) {
		var ret string
		return ret
	}
	return *o.TaprootScriptTreeHash
}

// GetTaprootScriptTreeHashOk returns a tuple with the TaprootScriptTreeHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetTaprootScriptTreeHashOk() (*string, bool) {
	if o == nil || IsNil(o.TaprootScriptTreeHash) {
		return nil, false
	}
	return o.TaprootScriptTreeHash, true
}

// HasTaprootScriptTreeHash returns a boolean if a field has been set.
func (o *AddressInfo) HasTaprootScriptTreeHash() bool {
	if o != nil && !IsNil(o.TaprootScriptTreeHash) {
		return true
	}

	return false
}

// SetTaprootScriptTreeHash gets a reference to the given string and assigns it to the TaprootScriptTreeHash field.
func (o *AddressInfo) SetTaprootScriptTreeHash(v string) {
	o.TaprootScriptTreeHash = &v
}

// GetTaprootInternalAddress returns the TaprootInternalAddress field value if set, zero value otherwise.
func (o *AddressInfo) GetTaprootInternalAddress() string {
	if o == nil || IsNil(o.TaprootInternalAddress) {
		var ret string
		return ret
	}
	return *o.TaprootInternalAddress
}

// GetTaprootInternalAddressOk returns a tuple with the TaprootInternalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetTaprootInternalAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TaprootInternalAddress) {
		return nil, false
	}
	return o.TaprootInternalAddress, true
}

// HasTaprootInternalAddress returns a boolean if a field has been set.
func (o *AddressInfo) HasTaprootInternalAddress() bool {
	if o != nil && !IsNil(o.TaprootInternalAddress) {
		return true
	}

	return false
}

// SetTaprootInternalAddress gets a reference to the given string and assigns it to the TaprootInternalAddress field.
func (o *AddressInfo) SetTaprootInternalAddress(v string) {
	o.TaprootInternalAddress = &v
}

func (o AddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Pubkey) {
		toSerialize["pubkey"] = o.Pubkey
	}
	if !IsNil(o.XOnlyPubkey) {
		toSerialize["x_only_pubkey"] = o.XOnlyPubkey
	}
	if !IsNil(o.RootPubkey) {
		toSerialize["root_pubkey"] = o.RootPubkey
	}
	if !IsNil(o.TaprootScriptTreeHash) {
		toSerialize["taproot_script_tree_hash"] = o.TaprootScriptTreeHash
	}
	if !IsNil(o.TaprootInternalAddress) {
		toSerialize["taproot_internal_address"] = o.TaprootInternalAddress
	}
	return toSerialize, nil
}

func (o *AddressInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressInfo := _AddressInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressInfo)

	if err != nil {
		return err
	}

	*o = AddressInfo(varAddressInfo)

	return err
}

type NullableAddressInfo struct {
	value *AddressInfo
	isSet bool
}

func (v NullableAddressInfo) Get() *AddressInfo {
	return v.value
}

func (v *NullableAddressInfo) Set(val *AddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressInfo(val *AddressInfo) *NullableAddressInfo {
	return &NullableAddressInfo{value: val, isSet: true}
}

func (v NullableAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


