/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapToken{}

// SwapToken struct for SwapToken
type SwapToken struct {
	// The token ID.
	TokenId string `json:"token_id"`
	// The chain ID, which is the unique identifier of a blockchain.
	ChainId string `json:"chain_id"`
	// The asset ID.
	AssetId string `json:"asset_id"`
	// The on-chain contract address of the token.
	TokenAddress *string `json:"token_address,omitempty"`
	// The minimum amount allowed for a swap.
	MinAmount *string `json:"min_amount,omitempty"`
	// The maximum amount allowed for a swap.
	MaxAmount *string `json:"max_amount,omitempty"`
}

type _SwapToken SwapToken

// NewSwapToken instantiates a new SwapToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapToken(tokenId string, chainId string, assetId string) *SwapToken {
	this := SwapToken{}
	this.TokenId = tokenId
	this.ChainId = chainId
	this.AssetId = assetId
	return &this
}

// NewSwapTokenWithDefaults instantiates a new SwapToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapTokenWithDefaults() *SwapToken {
	this := SwapToken{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *SwapToken) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *SwapToken) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *SwapToken) SetTokenId(v string) {
	o.TokenId = v
}

// GetChainId returns the ChainId field value
func (o *SwapToken) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SwapToken) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SwapToken) SetChainId(v string) {
	o.ChainId = v
}

// GetAssetId returns the AssetId field value
func (o *SwapToken) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *SwapToken) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *SwapToken) SetAssetId(v string) {
	o.AssetId = v
}

// GetTokenAddress returns the TokenAddress field value if set, zero value otherwise.
func (o *SwapToken) GetTokenAddress() string {
	if o == nil || IsNil(o.TokenAddress) {
		var ret string
		return ret
	}
	return *o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapToken) GetTokenAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TokenAddress) {
		return nil, false
	}
	return o.TokenAddress, true
}

// HasTokenAddress returns a boolean if a field has been set.
func (o *SwapToken) HasTokenAddress() bool {
	if o != nil && !IsNil(o.TokenAddress) {
		return true
	}

	return false
}

// SetTokenAddress gets a reference to the given string and assigns it to the TokenAddress field.
func (o *SwapToken) SetTokenAddress(v string) {
	o.TokenAddress = &v
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *SwapToken) GetMinAmount() string {
	if o == nil || IsNil(o.MinAmount) {
		var ret string
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapToken) GetMinAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinAmount) {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *SwapToken) HasMinAmount() bool {
	if o != nil && !IsNil(o.MinAmount) {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given string and assigns it to the MinAmount field.
func (o *SwapToken) SetMinAmount(v string) {
	o.MinAmount = &v
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *SwapToken) GetMaxAmount() string {
	if o == nil || IsNil(o.MaxAmount) {
		var ret string
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapToken) GetMaxAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *SwapToken) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given string and assigns it to the MaxAmount field.
func (o *SwapToken) SetMaxAmount(v string) {
	o.MaxAmount = &v
}

func (o SwapToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["chain_id"] = o.ChainId
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.TokenAddress) {
		toSerialize["token_address"] = o.TokenAddress
	}
	if !IsNil(o.MinAmount) {
		toSerialize["min_amount"] = o.MinAmount
	}
	if !IsNil(o.MaxAmount) {
		toSerialize["max_amount"] = o.MaxAmount
	}
	return toSerialize, nil
}

func (o *SwapToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"chain_id",
		"asset_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapToken := _SwapToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapToken)

	if err != nil {
		return err
	}

	*o = SwapToken(varSwapToken)

	return err
}

type NullableSwapToken struct {
	value *SwapToken
	isSet bool
}

func (v NullableSwapToken) Get() *SwapToken {
	return v.value
}

func (v *NullableSwapToken) Set(val *SwapToken) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapToken) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapToken(val *SwapToken) *NullableSwapToken {
	return &NullableSwapToken{value: val, isSet: true}
}

func (v NullableSwapToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


