/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// RefundType Specifies the source of funds for the refund: - `Merchant`: The refund amount will be deducted from the merchant balance. - `Psp`: The refund amount will be deducted from the developer balance. 
type RefundType string

// List of RefundType
const (
	REFUNDTYPE_MERCHANT RefundType = "Merchant"
	REFUNDTYPE_PSP RefundType = "Psp"
)

// All allowed values of RefundType enum
var AllowedRefundTypeEnumValues = []RefundType{
	"Merchant",
	"Psp",
}

func (v *RefundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundType(value)
	for _, existing := range AllowedRefundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = RefundType("unknown")
    return nil
}

// NewRefundTypeFromValue returns a pointer to a valid RefundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundTypeFromValue(v string) (*RefundType, error) {
	ev := RefundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundType: valid values are %v", v, AllowedRefundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundType) IsValid() bool {
	for _, existing := range AllowedRefundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundType value
func (v RefundType) Ptr() *RefundType {
	return &v
}

type NullableRefundType struct {
	value *RefundType
	isSet bool
}

func (v NullableRefundType) Get() *RefundType {
	return v.value
}

func (v *NullableRefundType) Set(val *RefundType) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundType) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundType(val *RefundType) *NullableRefundType {
	return &NullableRefundType{value: val, isSet: true}
}

func (v NullableRefundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

