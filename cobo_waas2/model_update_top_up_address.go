/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateTopUpAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTopUpAddress{}

// UpdateTopUpAddress The request body to update top up address.
type UpdateTopUpAddress struct {
	// The merchant ID.
	MerchantId string `json:"merchant_id"`
	// The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId string `json:"token_id"`
	// Unique customer identifier on the merchant side, used to allocate a dedicated top-up address 
	CustomPayerId string `json:"custom_payer_id"`
}

type _UpdateTopUpAddress UpdateTopUpAddress

// NewUpdateTopUpAddress instantiates a new UpdateTopUpAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTopUpAddress(merchantId string, tokenId string, customPayerId string) *UpdateTopUpAddress {
	this := UpdateTopUpAddress{}
	this.MerchantId = merchantId
	this.TokenId = tokenId
	this.CustomPayerId = customPayerId
	return &this
}

// NewUpdateTopUpAddressWithDefaults instantiates a new UpdateTopUpAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTopUpAddressWithDefaults() *UpdateTopUpAddress {
	this := UpdateTopUpAddress{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *UpdateTopUpAddress) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *UpdateTopUpAddress) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *UpdateTopUpAddress) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetTokenId returns the TokenId field value
func (o *UpdateTopUpAddress) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *UpdateTopUpAddress) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *UpdateTopUpAddress) SetTokenId(v string) {
	o.TokenId = v
}

// GetCustomPayerId returns the CustomPayerId field value
func (o *UpdateTopUpAddress) GetCustomPayerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomPayerId
}

// GetCustomPayerIdOk returns a tuple with the CustomPayerId field value
// and a boolean to check if the value has been set.
func (o *UpdateTopUpAddress) GetCustomPayerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomPayerId, true
}

// SetCustomPayerId sets field value
func (o *UpdateTopUpAddress) SetCustomPayerId(v string) {
	o.CustomPayerId = v
}

func (o UpdateTopUpAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTopUpAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["token_id"] = o.TokenId
	toSerialize["custom_payer_id"] = o.CustomPayerId
	return toSerialize, nil
}

func (o *UpdateTopUpAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"token_id",
		"custom_payer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTopUpAddress := _UpdateTopUpAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTopUpAddress)

	if err != nil {
		return err
	}

	*o = UpdateTopUpAddress(varUpdateTopUpAddress)

	return err
}

type NullableUpdateTopUpAddress struct {
	value *UpdateTopUpAddress
	isSet bool
}

func (v NullableUpdateTopUpAddress) Get() *UpdateTopUpAddress {
	return v.value
}

func (v *NullableUpdateTopUpAddress) Set(val *UpdateTopUpAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTopUpAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTopUpAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTopUpAddress(val *UpdateTopUpAddress) *NullableUpdateTopUpAddress {
	return &NullableUpdateTopUpAddress{value: val, isSet: true}
}

func (v NullableUpdateTopUpAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTopUpAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


