/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationAllowlistAddressNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationAllowlistAddressNote{}

// TokenizationAllowlistAddressNote struct for TokenizationAllowlistAddressNote
type TokenizationAllowlistAddressNote struct {
	// The address on the allowlist.
	Address string `json:"address"`
	// The note for the address on the allowlist.
	Note *string `json:"note,omitempty"`
	// The time when the address was added to the allowlist, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
}

type _TokenizationAllowlistAddressNote TokenizationAllowlistAddressNote

// NewTokenizationAllowlistAddressNote instantiates a new TokenizationAllowlistAddressNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationAllowlistAddressNote(address string) *TokenizationAllowlistAddressNote {
	this := TokenizationAllowlistAddressNote{}
	this.Address = address
	return &this
}

// NewTokenizationAllowlistAddressNoteWithDefaults instantiates a new TokenizationAllowlistAddressNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationAllowlistAddressNoteWithDefaults() *TokenizationAllowlistAddressNote {
	this := TokenizationAllowlistAddressNote{}
	return &this
}

// GetAddress returns the Address field value
func (o *TokenizationAllowlistAddressNote) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenizationAllowlistAddressNote) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenizationAllowlistAddressNote) SetAddress(v string) {
	o.Address = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *TokenizationAllowlistAddressNote) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationAllowlistAddressNote) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *TokenizationAllowlistAddressNote) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *TokenizationAllowlistAddressNote) SetNote(v string) {
	o.Note = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TokenizationAllowlistAddressNote) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationAllowlistAddressNote) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TokenizationAllowlistAddressNote) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *TokenizationAllowlistAddressNote) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

func (o TokenizationAllowlistAddressNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationAllowlistAddressNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	return toSerialize, nil
}

func (o *TokenizationAllowlistAddressNote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationAllowlistAddressNote := _TokenizationAllowlistAddressNote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationAllowlistAddressNote)

	if err != nil {
		return err
	}

	*o = TokenizationAllowlistAddressNote(varTokenizationAllowlistAddressNote)

	return err
}

type NullableTokenizationAllowlistAddressNote struct {
	value *TokenizationAllowlistAddressNote
	isSet bool
}

func (v NullableTokenizationAllowlistAddressNote) Get() *TokenizationAllowlistAddressNote {
	return v.value
}

func (v *NullableTokenizationAllowlistAddressNote) Set(val *TokenizationAllowlistAddressNote) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationAllowlistAddressNote) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationAllowlistAddressNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationAllowlistAddressNote(val *TokenizationAllowlistAddressNote) *NullableTokenizationAllowlistAddressNote {
	return &NullableTokenizationAllowlistAddressNote{value: val, isSet: true}
}

func (v NullableTokenizationAllowlistAddressNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationAllowlistAddressNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


