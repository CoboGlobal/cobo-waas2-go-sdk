/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionEvmContractMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionEvmContractMethod{}

// TransactionEvmContractMethod The information about a method in a smart contract.
type TransactionEvmContractMethod struct {
	// The method name.
	Name *string `json:"name,omitempty"`
	// The signature of the method, which includes the method name and parameter types.
	Sig *string `json:"sig,omitempty"`
	// The method type.
	Type *string `json:"type,omitempty"`
	// Whether the method is payable, which means it can receive tokens along with the transaction. - `true`: The method is payable. - `false`: The method is not payable. 
	Payable *bool `json:"payable,omitempty"`
	// The method selector, a four-byte identifier derived from the method's signature, used to invoke the method in a transaction.
	Selector *string `json:"selector,omitempty"`
}

// NewTransactionEvmContractMethod instantiates a new TransactionEvmContractMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEvmContractMethod() *TransactionEvmContractMethod {
	this := TransactionEvmContractMethod{}
	return &this
}

// NewTransactionEvmContractMethodWithDefaults instantiates a new TransactionEvmContractMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEvmContractMethodWithDefaults() *TransactionEvmContractMethod {
	this := TransactionEvmContractMethod{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransactionEvmContractMethod) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmContractMethod) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransactionEvmContractMethod) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransactionEvmContractMethod) SetName(v string) {
	o.Name = &v
}

// GetSig returns the Sig field value if set, zero value otherwise.
func (o *TransactionEvmContractMethod) GetSig() string {
	if o == nil || IsNil(o.Sig) {
		var ret string
		return ret
	}
	return *o.Sig
}

// GetSigOk returns a tuple with the Sig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmContractMethod) GetSigOk() (*string, bool) {
	if o == nil || IsNil(o.Sig) {
		return nil, false
	}
	return o.Sig, true
}

// HasSig returns a boolean if a field has been set.
func (o *TransactionEvmContractMethod) HasSig() bool {
	if o != nil && !IsNil(o.Sig) {
		return true
	}

	return false
}

// SetSig gets a reference to the given string and assigns it to the Sig field.
func (o *TransactionEvmContractMethod) SetSig(v string) {
	o.Sig = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionEvmContractMethod) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmContractMethod) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionEvmContractMethod) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransactionEvmContractMethod) SetType(v string) {
	o.Type = &v
}

// GetPayable returns the Payable field value if set, zero value otherwise.
func (o *TransactionEvmContractMethod) GetPayable() bool {
	if o == nil || IsNil(o.Payable) {
		var ret bool
		return ret
	}
	return *o.Payable
}

// GetPayableOk returns a tuple with the Payable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmContractMethod) GetPayableOk() (*bool, bool) {
	if o == nil || IsNil(o.Payable) {
		return nil, false
	}
	return o.Payable, true
}

// HasPayable returns a boolean if a field has been set.
func (o *TransactionEvmContractMethod) HasPayable() bool {
	if o != nil && !IsNil(o.Payable) {
		return true
	}

	return false
}

// SetPayable gets a reference to the given bool and assigns it to the Payable field.
func (o *TransactionEvmContractMethod) SetPayable(v bool) {
	o.Payable = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *TransactionEvmContractMethod) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvmContractMethod) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *TransactionEvmContractMethod) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *TransactionEvmContractMethod) SetSelector(v string) {
	o.Selector = &v
}

func (o TransactionEvmContractMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionEvmContractMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sig) {
		toSerialize["sig"] = o.Sig
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Payable) {
		toSerialize["payable"] = o.Payable
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableTransactionEvmContractMethod struct {
	value *TransactionEvmContractMethod
	isSet bool
}

func (v NullableTransactionEvmContractMethod) Get() *TransactionEvmContractMethod {
	return v.value
}

func (v *NullableTransactionEvmContractMethod) Set(val *TransactionEvmContractMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEvmContractMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEvmContractMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEvmContractMethod(val *TransactionEvmContractMethod) *NullableTransactionEvmContractMethod {
	return &NullableTransactionEvmContractMethod{value: val, isSet: true}
}

func (v NullableTransactionEvmContractMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEvmContractMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


