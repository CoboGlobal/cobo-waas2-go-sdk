/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// BabylonRegistrationRequestStatus The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include: - `Processing`: The registration request is being processed. - `Completed`: The registration has been completed. - `Failed`: The registration failed. 
type BabylonRegistrationRequestStatus string

// List of BabylonRegistrationRequestStatus
const (
	BABYLONREGISTRATIONREQUESTSTATUS_PROCESSING BabylonRegistrationRequestStatus = "Processing"
	BABYLONREGISTRATIONREQUESTSTATUS_COMPLETED BabylonRegistrationRequestStatus = "Completed"
	BABYLONREGISTRATIONREQUESTSTATUS_FAILED BabylonRegistrationRequestStatus = "Failed"
)

// All allowed values of BabylonRegistrationRequestStatus enum
var AllowedBabylonRegistrationRequestStatusEnumValues = []BabylonRegistrationRequestStatus{
	"Processing",
	"Completed",
	"Failed",
}

func (v *BabylonRegistrationRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BabylonRegistrationRequestStatus(value)
	for _, existing := range AllowedBabylonRegistrationRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = BabylonRegistrationRequestStatus("unknown")
	return nil
}

// NewBabylonRegistrationRequestStatusFromValue returns a pointer to a valid BabylonRegistrationRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBabylonRegistrationRequestStatusFromValue(v string) (*BabylonRegistrationRequestStatus, error) {
	ev := BabylonRegistrationRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BabylonRegistrationRequestStatus: valid values are %v", v, AllowedBabylonRegistrationRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BabylonRegistrationRequestStatus) IsValid() bool {
	for _, existing := range AllowedBabylonRegistrationRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BabylonRegistrationRequestStatus value
func (v BabylonRegistrationRequestStatus) Ptr() *BabylonRegistrationRequestStatus {
	return &v
}

type NullableBabylonRegistrationRequestStatus struct {
	value *BabylonRegistrationRequestStatus
	isSet bool
}

func (v NullableBabylonRegistrationRequestStatus) Get() *BabylonRegistrationRequestStatus {
	return v.value
}

func (v *NullableBabylonRegistrationRequestStatus) Set(val *BabylonRegistrationRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonRegistrationRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonRegistrationRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonRegistrationRequestStatus(val *BabylonRegistrationRequestStatus) *NullableBabylonRegistrationRequestStatus {
	return &NullableBabylonRegistrationRequestStatus{value: val, isSet: true}
}

func (v NullableBabylonRegistrationRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonRegistrationRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

