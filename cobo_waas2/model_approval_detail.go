/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the ApprovalDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalDetail{}

// ApprovalDetail The approval detail data for transaction.
type ApprovalDetail struct {
	// The transaction ID.
	TransactionId *string `json:"transaction_id,omitempty"`
	// The Cobo ID, which can be used to track a transaction.
	CoboId *string `json:"cobo_id,omitempty"`
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
	AddressOwner *RoleDetail `json:"address_owner,omitempty"`
	Spender *RoleDetail `json:"spender,omitempty"`
	Approver *RoleDetail `json:"approver,omitempty"`
}

// NewApprovalDetail instantiates a new ApprovalDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalDetail() *ApprovalDetail {
	this := ApprovalDetail{}
	return &this
}

// NewApprovalDetailWithDefaults instantiates a new ApprovalDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalDetailWithDefaults() *ApprovalDetail {
	this := ApprovalDetail{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ApprovalDetail) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ApprovalDetail) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ApprovalDetail) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetCoboId returns the CoboId field value if set, zero value otherwise.
func (o *ApprovalDetail) GetCoboId() string {
	if o == nil || IsNil(o.CoboId) {
		var ret string
		return ret
	}
	return *o.CoboId
}

// GetCoboIdOk returns a tuple with the CoboId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetCoboIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoboId) {
		return nil, false
	}
	return o.CoboId, true
}

// HasCoboId returns a boolean if a field has been set.
func (o *ApprovalDetail) HasCoboId() bool {
	if o != nil && !IsNil(o.CoboId) {
		return true
	}

	return false
}

// SetCoboId gets a reference to the given string and assigns it to the CoboId field.
func (o *ApprovalDetail) SetCoboId(v string) {
	o.CoboId = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ApprovalDetail) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ApprovalDetail) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ApprovalDetail) SetRequestId(v string) {
	o.RequestId = &v
}

// GetAddressOwner returns the AddressOwner field value if set, zero value otherwise.
func (o *ApprovalDetail) GetAddressOwner() RoleDetail {
	if o == nil || IsNil(o.AddressOwner) {
		var ret RoleDetail
		return ret
	}
	return *o.AddressOwner
}

// GetAddressOwnerOk returns a tuple with the AddressOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetAddressOwnerOk() (*RoleDetail, bool) {
	if o == nil || IsNil(o.AddressOwner) {
		return nil, false
	}
	return o.AddressOwner, true
}

// HasAddressOwner returns a boolean if a field has been set.
func (o *ApprovalDetail) HasAddressOwner() bool {
	if o != nil && !IsNil(o.AddressOwner) {
		return true
	}

	return false
}

// SetAddressOwner gets a reference to the given RoleDetail and assigns it to the AddressOwner field.
func (o *ApprovalDetail) SetAddressOwner(v RoleDetail) {
	o.AddressOwner = &v
}

// GetSpender returns the Spender field value if set, zero value otherwise.
func (o *ApprovalDetail) GetSpender() RoleDetail {
	if o == nil || IsNil(o.Spender) {
		var ret RoleDetail
		return ret
	}
	return *o.Spender
}

// GetSpenderOk returns a tuple with the Spender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetSpenderOk() (*RoleDetail, bool) {
	if o == nil || IsNil(o.Spender) {
		return nil, false
	}
	return o.Spender, true
}

// HasSpender returns a boolean if a field has been set.
func (o *ApprovalDetail) HasSpender() bool {
	if o != nil && !IsNil(o.Spender) {
		return true
	}

	return false
}

// SetSpender gets a reference to the given RoleDetail and assigns it to the Spender field.
func (o *ApprovalDetail) SetSpender(v RoleDetail) {
	o.Spender = &v
}

// GetApprover returns the Approver field value if set, zero value otherwise.
func (o *ApprovalDetail) GetApprover() RoleDetail {
	if o == nil || IsNil(o.Approver) {
		var ret RoleDetail
		return ret
	}
	return *o.Approver
}

// GetApproverOk returns a tuple with the Approver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDetail) GetApproverOk() (*RoleDetail, bool) {
	if o == nil || IsNil(o.Approver) {
		return nil, false
	}
	return o.Approver, true
}

// HasApprover returns a boolean if a field has been set.
func (o *ApprovalDetail) HasApprover() bool {
	if o != nil && !IsNil(o.Approver) {
		return true
	}

	return false
}

// SetApprover gets a reference to the given RoleDetail and assigns it to the Approver field.
func (o *ApprovalDetail) SetApprover(v RoleDetail) {
	o.Approver = &v
}

func (o ApprovalDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.CoboId) {
		toSerialize["cobo_id"] = o.CoboId
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.AddressOwner) {
		toSerialize["address_owner"] = o.AddressOwner
	}
	if !IsNil(o.Spender) {
		toSerialize["spender"] = o.Spender
	}
	if !IsNil(o.Approver) {
		toSerialize["approver"] = o.Approver
	}
	return toSerialize, nil
}

type NullableApprovalDetail struct {
	value *ApprovalDetail
	isSet bool
}

func (v NullableApprovalDetail) Get() *ApprovalDetail {
	return v.value
}

func (v *NullableApprovalDetail) Set(val *ApprovalDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalDetail(val *ApprovalDetail) *NullableApprovalDetail {
	return &NullableApprovalDetail{value: val, isSet: true}
}

func (v NullableApprovalDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


