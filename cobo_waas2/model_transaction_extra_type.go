/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionExtraType The transaction extra information type. Possible values include:   - `BabylonBusinessInfo`: The extra information related to Babylon business logic.   - `BabylonTxParameters`: The extra information for Babylon transaction parameters.   - `CoreStakeInfo`: The extra information related to core staking operations. 
type TransactionExtraType string

// List of TransactionExtraType
const (
	TRANSACTIONEXTRATYPE_BABYLON_BUSINESS_INFO TransactionExtraType = "BabylonBusinessInfo"
	TRANSACTIONEXTRATYPE_BABYLON_TX_PARAMETERS TransactionExtraType = "BabylonTxParameters"
	TRANSACTIONEXTRATYPE_CORE_STAKE_INFO TransactionExtraType = "CoreStakeInfo"
)

// All allowed values of TransactionExtraType enum
var AllowedTransactionExtraTypeEnumValues = []TransactionExtraType{
	"BabylonBusinessInfo",
	"BabylonTxParameters",
	"CoreStakeInfo",
}

func (v *TransactionExtraType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionExtraType(value)
	for _, existing := range AllowedTransactionExtraTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TransactionExtraType("unknown")
	return nil
}

// NewTransactionExtraTypeFromValue returns a pointer to a valid TransactionExtraType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionExtraTypeFromValue(v string) (*TransactionExtraType, error) {
	ev := TransactionExtraType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionExtraType: valid values are %v", v, AllowedTransactionExtraTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionExtraType) IsValid() bool {
	for _, existing := range AllowedTransactionExtraTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionExtraType value
func (v TransactionExtraType) Ptr() *TransactionExtraType {
	return &v
}

type NullableTransactionExtraType struct {
	value *TransactionExtraType
	isSet bool
}

func (v NullableTransactionExtraType) Get() *TransactionExtraType {
	return v.value
}

func (v *NullableTransactionExtraType) Set(val *TransactionExtraType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionExtraType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionExtraType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionExtraType(val *TransactionExtraType) *NullableTransactionExtraType {
	return &NullableTransactionExtraType{value: val, isSet: true}
}

func (v NullableTransactionExtraType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionExtraType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

