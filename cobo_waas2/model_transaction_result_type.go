/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionResultType The transaction result type. Possible values include:   - `Signature`: An EVM EIP-191 or EVM EIP-712 signature. 
type TransactionResultType string

// List of TransactionResultType
const (
	TRANSACTIONRESULTTYPE_SIGNATURE TransactionResultType = "Signature"
)

// All allowed values of TransactionResultType enum
var AllowedTransactionResultTypeEnumValues = []TransactionResultType{
	"Signature",
}

func (v *TransactionResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionResultType(value)
	for _, existing := range AllowedTransactionResultTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = TransactionResultType("unknown")
    return nil
}

// NewTransactionResultTypeFromValue returns a pointer to a valid TransactionResultType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionResultTypeFromValue(v string) (*TransactionResultType, error) {
	ev := TransactionResultType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionResultType: valid values are %v", v, AllowedTransactionResultTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionResultType) IsValid() bool {
	for _, existing := range AllowedTransactionResultTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionResultType value
func (v TransactionResultType) Ptr() *TransactionResultType {
	return &v
}

type NullableTransactionResultType struct {
	value *TransactionResultType
	isSet bool
}

func (v NullableTransactionResultType) Get() *TransactionResultType {
	return v.value
}

func (v *NullableTransactionResultType) Set(val *TransactionResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResultType(val *TransactionResultType) *NullableTransactionResultType {
	return &NullableTransactionResultType{value: val, isSet: true}
}

func (v NullableTransactionResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

