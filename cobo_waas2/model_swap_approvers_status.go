/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SwapApproversStatus The status of the approval. Possible values include:   - `Pending`: Waiting for approval from the approver.   - `Approved`: The approver has agreed to the approval.   - `Rejected`: The approver has rejected the approval. 
type SwapApproversStatus string

// List of SwapApproversStatus
const (
	SWAPAPPROVERSSTATUS_PENDING SwapApproversStatus = "Pending"
	SWAPAPPROVERSSTATUS_APPROVED SwapApproversStatus = "Approved"
	SWAPAPPROVERSSTATUS_REJECTED SwapApproversStatus = "Rejected"
)

// All allowed values of SwapApproversStatus enum
var AllowedSwapApproversStatusEnumValues = []SwapApproversStatus{
	"Pending",
	"Approved",
	"Rejected",
}

func (v *SwapApproversStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwapApproversStatus(value)
	for _, existing := range AllowedSwapApproversStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SwapApproversStatus("unknown")
	return nil
}

// NewSwapApproversStatusFromValue returns a pointer to a valid SwapApproversStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwapApproversStatusFromValue(v string) (*SwapApproversStatus, error) {
	ev := SwapApproversStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwapApproversStatus: valid values are %v", v, AllowedSwapApproversStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwapApproversStatus) IsValid() bool {
	for _, existing := range AllowedSwapApproversStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwapApproversStatus value
func (v SwapApproversStatus) Ptr() *SwapApproversStatus {
	return &v
}

type NullableSwapApproversStatus struct {
	value *SwapApproversStatus
	isSet bool
}

func (v NullableSwapApproversStatus) Get() *SwapApproversStatus {
	return v.value
}

func (v *NullableSwapApproversStatus) Set(val *SwapApproversStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapApproversStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapApproversStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapApproversStatus(val *SwapApproversStatus) *NullableSwapApproversStatus {
	return &NullableSwapApproversStatus{value: val, isSet: true}
}

func (v NullableSwapApproversStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapApproversStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

