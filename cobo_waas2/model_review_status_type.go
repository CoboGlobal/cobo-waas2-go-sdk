/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ReviewStatusType Review status type, indicating the current stage of the compliance review process.
type ReviewStatusType string

// List of ReviewStatusType
const (
	REVIEWSTATUSTYPE_PENDING_SCREENING ReviewStatusType = "PendingScreening"
	REVIEWSTATUSTYPE_SCREENED ReviewStatusType = "Screened"
	REVIEWSTATUSTYPE_PENDING_DECISION ReviewStatusType = "PendingDecision"
	REVIEWSTATUSTYPE_PENDING_REVIEW ReviewStatusType = "PendingReview"
	REVIEWSTATUSTYPE_APPROVED ReviewStatusType = "Approved"
	REVIEWSTATUSTYPE_REJECTED ReviewStatusType = "Rejected"
	REVIEWSTATUSTYPE_UNSUPPORTED ReviewStatusType = "Unsupported"
	REVIEWSTATUSTYPE_BYPASSED ReviewStatusType = "Bypassed"
)

// All allowed values of ReviewStatusType enum
var AllowedReviewStatusTypeEnumValues = []ReviewStatusType{
	"PendingScreening",
	"Screened",
	"PendingDecision",
	"PendingReview",
	"Approved",
	"Rejected",
	"Unsupported",
	"Bypassed",
}

func (v *ReviewStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReviewStatusType(value)
	for _, existing := range AllowedReviewStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = ReviewStatusType("unknown")
	return nil
}

// NewReviewStatusTypeFromValue returns a pointer to a valid ReviewStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReviewStatusTypeFromValue(v string) (*ReviewStatusType, error) {
	ev := ReviewStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReviewStatusType: valid values are %v", v, AllowedReviewStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReviewStatusType) IsValid() bool {
	for _, existing := range AllowedReviewStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReviewStatusType value
func (v ReviewStatusType) Ptr() *ReviewStatusType {
	return &v
}

type NullableReviewStatusType struct {
	value *ReviewStatusType
	isSet bool
}

func (v NullableReviewStatusType) Get() *ReviewStatusType {
	return v.value
}

func (v *NullableReviewStatusType) Set(val *ReviewStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewStatusType(val *ReviewStatusType) *NullableReviewStatusType {
	return &NullableReviewStatusType{value: val, isSet: true}
}

func (v NullableReviewStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

