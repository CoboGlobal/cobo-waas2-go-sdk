/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationOperationType The type of tokenization operation.
type TokenizationOperationType string

// List of TokenizationOperationType
const (
	TOKENIZATIONOPERATIONTYPE_ISSUE TokenizationOperationType = "Issue"
	TOKENIZATIONOPERATIONTYPE_MINT TokenizationOperationType = "Mint"
	TOKENIZATIONOPERATIONTYPE_BURN TokenizationOperationType = "Burn"
	TOKENIZATIONOPERATIONTYPE_PAUSE TokenizationOperationType = "Pause"
	TOKENIZATIONOPERATIONTYPE_UNPAUSE TokenizationOperationType = "Unpause"
	TOKENIZATIONOPERATIONTYPE_UPDATE_ALLOWLIST_ADDRESSES TokenizationOperationType = "UpdateAllowlistAddresses"
	TOKENIZATIONOPERATIONTYPE_UPDATE_BLOCKLIST_ADDRESSES TokenizationOperationType = "UpdateBlocklistAddresses"
	TOKENIZATIONOPERATIONTYPE_TOGGLE_ALLOWLIST TokenizationOperationType = "ToggleAllowlist"
	TOKENIZATIONOPERATIONTYPE_CONTRACT_CALL TokenizationOperationType = "ContractCall"
)

// All allowed values of TokenizationOperationType enum
var AllowedTokenizationOperationTypeEnumValues = []TokenizationOperationType{
	"Issue",
	"Mint",
	"Burn",
	"Pause",
	"Unpause",
	"UpdateAllowlistAddresses",
	"UpdateBlocklistAddresses",
	"ToggleAllowlist",
	"ContractCall",
}

func (v *TokenizationOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationOperationType(value)
	for _, existing := range AllowedTokenizationOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationOperationType("unknown")
	return nil
}

// NewTokenizationOperationTypeFromValue returns a pointer to a valid TokenizationOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationOperationTypeFromValue(v string) (*TokenizationOperationType, error) {
	ev := TokenizationOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationOperationType: valid values are %v", v, AllowedTokenizationOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationOperationType) IsValid() bool {
	for _, existing := range AllowedTokenizationOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationOperationType value
func (v TokenizationOperationType) Ptr() *TokenizationOperationType {
	return &v
}

type NullableTokenizationOperationType struct {
	value *TokenizationOperationType
	isSet bool
}

func (v NullableTokenizationOperationType) Get() *TokenizationOperationType {
	return v.value
}

func (v *NullableTokenizationOperationType) Set(val *TokenizationOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationOperationType(val *TokenizationOperationType) *NullableTokenizationOperationType {
	return &NullableTokenizationOperationType{value: val, isSet: true}
}

func (v NullableTokenizationOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

