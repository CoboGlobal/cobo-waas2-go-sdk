/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentEstimateFeeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentEstimateFeeRequest{}

// PaymentEstimateFeeRequest struct for PaymentEstimateFeeRequest
type PaymentEstimateFeeRequest struct {
	FeeType *PaymentFeeType `json:"fee_type,omitempty"`
	// A list of token IDs and amounts for which fees will be calculated.
	EstimateFees []PaymentEstimateFee `json:"estimate_fees"`
}

type _PaymentEstimateFeeRequest PaymentEstimateFeeRequest

// NewPaymentEstimateFeeRequest instantiates a new PaymentEstimateFeeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentEstimateFeeRequest(estimateFees []PaymentEstimateFee) *PaymentEstimateFeeRequest {
	this := PaymentEstimateFeeRequest{}
	this.EstimateFees = estimateFees
	return &this
}

// NewPaymentEstimateFeeRequestWithDefaults instantiates a new PaymentEstimateFeeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentEstimateFeeRequestWithDefaults() *PaymentEstimateFeeRequest {
	this := PaymentEstimateFeeRequest{}
	return &this
}

// GetFeeType returns the FeeType field value if set, zero value otherwise.
func (o *PaymentEstimateFeeRequest) GetFeeType() PaymentFeeType {
	if o == nil || IsNil(o.FeeType) {
		var ret PaymentFeeType
		return ret
	}
	return *o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentEstimateFeeRequest) GetFeeTypeOk() (*PaymentFeeType, bool) {
	if o == nil || IsNil(o.FeeType) {
		return nil, false
	}
	return o.FeeType, true
}

// HasFeeType returns a boolean if a field has been set.
func (o *PaymentEstimateFeeRequest) HasFeeType() bool {
	if o != nil && !IsNil(o.FeeType) {
		return true
	}

	return false
}

// SetFeeType gets a reference to the given PaymentFeeType and assigns it to the FeeType field.
func (o *PaymentEstimateFeeRequest) SetFeeType(v PaymentFeeType) {
	o.FeeType = &v
}

// GetEstimateFees returns the EstimateFees field value
func (o *PaymentEstimateFeeRequest) GetEstimateFees() []PaymentEstimateFee {
	if o == nil {
		var ret []PaymentEstimateFee
		return ret
	}

	return o.EstimateFees
}

// GetEstimateFeesOk returns a tuple with the EstimateFees field value
// and a boolean to check if the value has been set.
func (o *PaymentEstimateFeeRequest) GetEstimateFeesOk() ([]PaymentEstimateFee, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimateFees, true
}

// SetEstimateFees sets field value
func (o *PaymentEstimateFeeRequest) SetEstimateFees(v []PaymentEstimateFee) {
	o.EstimateFees = v
}

func (o PaymentEstimateFeeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentEstimateFeeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeType) {
		toSerialize["fee_type"] = o.FeeType
	}
	toSerialize["estimate_fees"] = o.EstimateFees
	return toSerialize, nil
}

func (o *PaymentEstimateFeeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"estimate_fees",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentEstimateFeeRequest := _PaymentEstimateFeeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentEstimateFeeRequest)

	if err != nil {
		return err
	}

	*o = PaymentEstimateFeeRequest(varPaymentEstimateFeeRequest)

	return err
}

type NullablePaymentEstimateFeeRequest struct {
	value *PaymentEstimateFeeRequest
	isSet bool
}

func (v NullablePaymentEstimateFeeRequest) Get() *PaymentEstimateFeeRequest {
	return v.value
}

func (v *NullablePaymentEstimateFeeRequest) Set(val *PaymentEstimateFeeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentEstimateFeeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentEstimateFeeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentEstimateFeeRequest(val *PaymentEstimateFeeRequest) *NullablePaymentEstimateFeeRequest {
	return &NullablePaymentEstimateFeeRequest{value: val, isSet: true}
}

func (v NullablePaymentEstimateFeeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentEstimateFeeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


