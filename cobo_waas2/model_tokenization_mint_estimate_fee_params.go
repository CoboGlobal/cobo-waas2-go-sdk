/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationMintEstimateFeeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationMintEstimateFeeParams{}

// TokenizationMintEstimateFeeParams struct for TokenizationMintEstimateFeeParams
type TokenizationMintEstimateFeeParams struct {
	Source TokenizationTokenOperationSource `json:"source"`
	// Details for each token mint, including amount and address to mint to.
	Mints []TokenizationMintTokenParamsMintsInner `json:"mints"`
	OperationType TokenizationOperationType `json:"operation_type"`
	// The ID of the token.
	TokenId string `json:"token_id"`
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
}

type _TokenizationMintEstimateFeeParams TokenizationMintEstimateFeeParams

// NewTokenizationMintEstimateFeeParams instantiates a new TokenizationMintEstimateFeeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationMintEstimateFeeParams(source TokenizationTokenOperationSource, mints []TokenizationMintTokenParamsMintsInner, operationType TokenizationOperationType, tokenId string) *TokenizationMintEstimateFeeParams {
	this := TokenizationMintEstimateFeeParams{}
	this.Source = source
	this.Mints = mints
	this.OperationType = operationType
	this.TokenId = tokenId
	return &this
}

// NewTokenizationMintEstimateFeeParamsWithDefaults instantiates a new TokenizationMintEstimateFeeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationMintEstimateFeeParamsWithDefaults() *TokenizationMintEstimateFeeParams {
	this := TokenizationMintEstimateFeeParams{}
	return &this
}

// GetSource returns the Source field value
func (o *TokenizationMintEstimateFeeParams) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationMintEstimateFeeParams) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationMintEstimateFeeParams) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetMints returns the Mints field value
func (o *TokenizationMintEstimateFeeParams) GetMints() []TokenizationMintTokenParamsMintsInner {
	if o == nil {
		var ret []TokenizationMintTokenParamsMintsInner
		return ret
	}

	return o.Mints
}

// GetMintsOk returns a tuple with the Mints field value
// and a boolean to check if the value has been set.
func (o *TokenizationMintEstimateFeeParams) GetMintsOk() ([]TokenizationMintTokenParamsMintsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mints, true
}

// SetMints sets field value
func (o *TokenizationMintEstimateFeeParams) SetMints(v []TokenizationMintTokenParamsMintsInner) {
	o.Mints = v
}

// GetOperationType returns the OperationType field value
func (o *TokenizationMintEstimateFeeParams) GetOperationType() TokenizationOperationType {
	if o == nil {
		var ret TokenizationOperationType
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *TokenizationMintEstimateFeeParams) GetOperationTypeOk() (*TokenizationOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *TokenizationMintEstimateFeeParams) SetOperationType(v TokenizationOperationType) {
	o.OperationType = v
}

// GetTokenId returns the TokenId field value
func (o *TokenizationMintEstimateFeeParams) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenizationMintEstimateFeeParams) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenizationMintEstimateFeeParams) SetTokenId(v string) {
	o.TokenId = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TokenizationMintEstimateFeeParams) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationMintEstimateFeeParams) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TokenizationMintEstimateFeeParams) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TokenizationMintEstimateFeeParams) SetRequestId(v string) {
	o.RequestId = &v
}

func (o TokenizationMintEstimateFeeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationMintEstimateFeeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["mints"] = o.Mints
	toSerialize["operation_type"] = o.OperationType
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	return toSerialize, nil
}

func (o *TokenizationMintEstimateFeeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"mints",
		"operation_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationMintEstimateFeeParams := _TokenizationMintEstimateFeeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationMintEstimateFeeParams)

	if err != nil {
		return err
	}

	*o = TokenizationMintEstimateFeeParams(varTokenizationMintEstimateFeeParams)

	return err
}

type NullableTokenizationMintEstimateFeeParams struct {
	value *TokenizationMintEstimateFeeParams
	isSet bool
}

func (v NullableTokenizationMintEstimateFeeParams) Get() *TokenizationMintEstimateFeeParams {
	return v.value
}

func (v *NullableTokenizationMintEstimateFeeParams) Set(val *TokenizationMintEstimateFeeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationMintEstimateFeeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationMintEstimateFeeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationMintEstimateFeeParams(val *TokenizationMintEstimateFeeParams) *NullableTokenizationMintEstimateFeeParams {
	return &NullableTokenizationMintEstimateFeeParams{value: val, isSet: true}
}

func (v NullableTokenizationMintEstimateFeeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationMintEstimateFeeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


