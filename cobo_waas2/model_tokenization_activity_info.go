/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationActivityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationActivityInfo{}

// TokenizationActivityInfo struct for TokenizationActivityInfo
type TokenizationActivityInfo struct {
	// The ID of the activity.
	ActivityId string `json:"activity_id"`
	// The token ID.
	TokenId string `json:"token_id"`
	Type TokenizationOperationType `json:"type"`
	Status TokenizationActivityStatus `json:"status"`
	Source TokenizationTokenOperationSource `json:"source"`
	// The initiator of the activity.
	Initiator string `json:"initiator"`
	InitiatorType TransactionInitiatorType `json:"initiator_type"`
	// The IDs of the corresponding transactions of the activity.
	TransactionIds []string `json:"transaction_ids,omitempty"`
	// The creation timestamp of the activity in milliseconds since the Unix epoch.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
	// The last update timestamp of the activity in milliseconds since the Unix epoch.
	UpdatedTimestamp int64 `json:"updated_timestamp"`
}

type _TokenizationActivityInfo TokenizationActivityInfo

// NewTokenizationActivityInfo instantiates a new TokenizationActivityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationActivityInfo(activityId string, tokenId string, type_ TokenizationOperationType, status TokenizationActivityStatus, source TokenizationTokenOperationSource, initiator string, initiatorType TransactionInitiatorType, updatedTimestamp int64) *TokenizationActivityInfo {
	this := TokenizationActivityInfo{}
	this.ActivityId = activityId
	this.TokenId = tokenId
	this.Type = type_
	this.Status = status
	this.Source = source
	this.Initiator = initiator
	this.InitiatorType = initiatorType
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewTokenizationActivityInfoWithDefaults instantiates a new TokenizationActivityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationActivityInfoWithDefaults() *TokenizationActivityInfo {
	this := TokenizationActivityInfo{}
	return &this
}

// GetActivityId returns the ActivityId field value
func (o *TokenizationActivityInfo) GetActivityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityId, true
}

// SetActivityId sets field value
func (o *TokenizationActivityInfo) SetActivityId(v string) {
	o.ActivityId = v
}

// GetTokenId returns the TokenId field value
func (o *TokenizationActivityInfo) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenizationActivityInfo) SetTokenId(v string) {
	o.TokenId = v
}

// GetType returns the Type field value
func (o *TokenizationActivityInfo) GetType() TokenizationOperationType {
	if o == nil {
		var ret TokenizationOperationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetTypeOk() (*TokenizationOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TokenizationActivityInfo) SetType(v TokenizationOperationType) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *TokenizationActivityInfo) GetStatus() TokenizationActivityStatus {
	if o == nil {
		var ret TokenizationActivityStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetStatusOk() (*TokenizationActivityStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TokenizationActivityInfo) SetStatus(v TokenizationActivityStatus) {
	o.Status = v
}

// GetSource returns the Source field value
func (o *TokenizationActivityInfo) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationActivityInfo) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetInitiator returns the Initiator field value
func (o *TokenizationActivityInfo) GetInitiator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetInitiatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *TokenizationActivityInfo) SetInitiator(v string) {
	o.Initiator = v
}

// GetInitiatorType returns the InitiatorType field value
func (o *TokenizationActivityInfo) GetInitiatorType() TransactionInitiatorType {
	if o == nil {
		var ret TransactionInitiatorType
		return ret
	}

	return o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetInitiatorTypeOk() (*TransactionInitiatorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorType, true
}

// SetInitiatorType sets field value
func (o *TokenizationActivityInfo) SetInitiatorType(v TransactionInitiatorType) {
	o.InitiatorType = v
}

// GetTransactionIds returns the TransactionIds field value if set, zero value otherwise.
func (o *TokenizationActivityInfo) GetTransactionIds() []string {
	if o == nil || IsNil(o.TransactionIds) {
		var ret []string
		return ret
	}
	return o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetTransactionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TransactionIds) {
		return nil, false
	}
	return o.TransactionIds, true
}

// HasTransactionIds returns a boolean if a field has been set.
func (o *TokenizationActivityInfo) HasTransactionIds() bool {
	if o != nil && !IsNil(o.TransactionIds) {
		return true
	}

	return false
}

// SetTransactionIds gets a reference to the given []string and assigns it to the TransactionIds field.
func (o *TokenizationActivityInfo) SetTransactionIds(v []string) {
	o.TransactionIds = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TokenizationActivityInfo) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TokenizationActivityInfo) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *TokenizationActivityInfo) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *TokenizationActivityInfo) GetUpdatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *TokenizationActivityInfo) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *TokenizationActivityInfo) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = v
}

func (o TokenizationActivityInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationActivityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activity_id"] = o.ActivityId
	toSerialize["token_id"] = o.TokenId
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["source"] = o.Source
	toSerialize["initiator"] = o.Initiator
	toSerialize["initiator_type"] = o.InitiatorType
	if !IsNil(o.TransactionIds) {
		toSerialize["transaction_ids"] = o.TransactionIds
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	return toSerialize, nil
}

func (o *TokenizationActivityInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activity_id",
		"token_id",
		"type",
		"status",
		"source",
		"initiator",
		"initiator_type",
		"updated_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationActivityInfo := _TokenizationActivityInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationActivityInfo)

	if err != nil {
		return err
	}

	*o = TokenizationActivityInfo(varTokenizationActivityInfo)

	return err
}

type NullableTokenizationActivityInfo struct {
	value *TokenizationActivityInfo
	isSet bool
}

func (v NullableTokenizationActivityInfo) Get() *TokenizationActivityInfo {
	return v.value
}

func (v *NullableTokenizationActivityInfo) Set(val *TokenizationActivityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationActivityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationActivityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationActivityInfo(val *TokenizationActivityInfo) *NullableTokenizationActivityInfo {
	return &NullableTokenizationActivityInfo{value: val, isSet: true}
}

func (v NullableTokenizationActivityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationActivityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


