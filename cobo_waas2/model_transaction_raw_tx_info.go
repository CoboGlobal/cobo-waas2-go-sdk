/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionRawTxInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionRawTxInfo{}

// TransactionRawTxInfo The raw transaction information.
type TransactionRawTxInfo struct {
	// The transaction nonce.
	UsedNonce *int32 `json:"used_nonce,omitempty"`
	// The selected UTXOs to be consumed in the transaction.
	SelectedUtxos []TransactionSelectedUtxo `json:"selected_utxos,omitempty"`
	// The raw transaction data.
	RawTx *string `json:"raw_tx,omitempty"`
	// The unsigned raw transaction data.
	UnsignedRawTx *string `json:"unsigned_raw_tx,omitempty"`
	UtxoChange *TransactionUtxoChange `json:"utxo_change,omitempty"`
}

// NewTransactionRawTxInfo instantiates a new TransactionRawTxInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionRawTxInfo() *TransactionRawTxInfo {
	this := TransactionRawTxInfo{}
	return &this
}

// NewTransactionRawTxInfoWithDefaults instantiates a new TransactionRawTxInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionRawTxInfoWithDefaults() *TransactionRawTxInfo {
	this := TransactionRawTxInfo{}
	return &this
}

// GetUsedNonce returns the UsedNonce field value if set, zero value otherwise.
func (o *TransactionRawTxInfo) GetUsedNonce() int32 {
	if o == nil || IsNil(o.UsedNonce) {
		var ret int32
		return ret
	}
	return *o.UsedNonce
}

// GetUsedNonceOk returns a tuple with the UsedNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawTxInfo) GetUsedNonceOk() (*int32, bool) {
	if o == nil || IsNil(o.UsedNonce) {
		return nil, false
	}
	return o.UsedNonce, true
}

// HasUsedNonce returns a boolean if a field has been set.
func (o *TransactionRawTxInfo) HasUsedNonce() bool {
	if o != nil && !IsNil(o.UsedNonce) {
		return true
	}

	return false
}

// SetUsedNonce gets a reference to the given int32 and assigns it to the UsedNonce field.
func (o *TransactionRawTxInfo) SetUsedNonce(v int32) {
	o.UsedNonce = &v
}

// GetSelectedUtxos returns the SelectedUtxos field value if set, zero value otherwise.
func (o *TransactionRawTxInfo) GetSelectedUtxos() []TransactionSelectedUtxo {
	if o == nil || IsNil(o.SelectedUtxos) {
		var ret []TransactionSelectedUtxo
		return ret
	}
	return o.SelectedUtxos
}

// GetSelectedUtxosOk returns a tuple with the SelectedUtxos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawTxInfo) GetSelectedUtxosOk() ([]TransactionSelectedUtxo, bool) {
	if o == nil || IsNil(o.SelectedUtxos) {
		return nil, false
	}
	return o.SelectedUtxos, true
}

// HasSelectedUtxos returns a boolean if a field has been set.
func (o *TransactionRawTxInfo) HasSelectedUtxos() bool {
	if o != nil && !IsNil(o.SelectedUtxos) {
		return true
	}

	return false
}

// SetSelectedUtxos gets a reference to the given []TransactionSelectedUtxo and assigns it to the SelectedUtxos field.
func (o *TransactionRawTxInfo) SetSelectedUtxos(v []TransactionSelectedUtxo) {
	o.SelectedUtxos = v
}

// GetRawTx returns the RawTx field value if set, zero value otherwise.
func (o *TransactionRawTxInfo) GetRawTx() string {
	if o == nil || IsNil(o.RawTx) {
		var ret string
		return ret
	}
	return *o.RawTx
}

// GetRawTxOk returns a tuple with the RawTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawTxInfo) GetRawTxOk() (*string, bool) {
	if o == nil || IsNil(o.RawTx) {
		return nil, false
	}
	return o.RawTx, true
}

// HasRawTx returns a boolean if a field has been set.
func (o *TransactionRawTxInfo) HasRawTx() bool {
	if o != nil && !IsNil(o.RawTx) {
		return true
	}

	return false
}

// SetRawTx gets a reference to the given string and assigns it to the RawTx field.
func (o *TransactionRawTxInfo) SetRawTx(v string) {
	o.RawTx = &v
}

// GetUnsignedRawTx returns the UnsignedRawTx field value if set, zero value otherwise.
func (o *TransactionRawTxInfo) GetUnsignedRawTx() string {
	if o == nil || IsNil(o.UnsignedRawTx) {
		var ret string
		return ret
	}
	return *o.UnsignedRawTx
}

// GetUnsignedRawTxOk returns a tuple with the UnsignedRawTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawTxInfo) GetUnsignedRawTxOk() (*string, bool) {
	if o == nil || IsNil(o.UnsignedRawTx) {
		return nil, false
	}
	return o.UnsignedRawTx, true
}

// HasUnsignedRawTx returns a boolean if a field has been set.
func (o *TransactionRawTxInfo) HasUnsignedRawTx() bool {
	if o != nil && !IsNil(o.UnsignedRawTx) {
		return true
	}

	return false
}

// SetUnsignedRawTx gets a reference to the given string and assigns it to the UnsignedRawTx field.
func (o *TransactionRawTxInfo) SetUnsignedRawTx(v string) {
	o.UnsignedRawTx = &v
}

// GetUtxoChange returns the UtxoChange field value if set, zero value otherwise.
func (o *TransactionRawTxInfo) GetUtxoChange() TransactionUtxoChange {
	if o == nil || IsNil(o.UtxoChange) {
		var ret TransactionUtxoChange
		return ret
	}
	return *o.UtxoChange
}

// GetUtxoChangeOk returns a tuple with the UtxoChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawTxInfo) GetUtxoChangeOk() (*TransactionUtxoChange, bool) {
	if o == nil || IsNil(o.UtxoChange) {
		return nil, false
	}
	return o.UtxoChange, true
}

// HasUtxoChange returns a boolean if a field has been set.
func (o *TransactionRawTxInfo) HasUtxoChange() bool {
	if o != nil && !IsNil(o.UtxoChange) {
		return true
	}

	return false
}

// SetUtxoChange gets a reference to the given TransactionUtxoChange and assigns it to the UtxoChange field.
func (o *TransactionRawTxInfo) SetUtxoChange(v TransactionUtxoChange) {
	o.UtxoChange = &v
}

func (o TransactionRawTxInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionRawTxInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UsedNonce) {
		toSerialize["used_nonce"] = o.UsedNonce
	}
	if !IsNil(o.SelectedUtxos) {
		toSerialize["selected_utxos"] = o.SelectedUtxos
	}
	if !IsNil(o.RawTx) {
		toSerialize["raw_tx"] = o.RawTx
	}
	if !IsNil(o.UnsignedRawTx) {
		toSerialize["unsigned_raw_tx"] = o.UnsignedRawTx
	}
	if !IsNil(o.UtxoChange) {
		toSerialize["utxo_change"] = o.UtxoChange
	}
	return toSerialize, nil
}

type NullableTransactionRawTxInfo struct {
	value *TransactionRawTxInfo
	isSet bool
}

func (v NullableTransactionRawTxInfo) Get() *TransactionRawTxInfo {
	return v.value
}

func (v *NullableTransactionRawTxInfo) Set(val *TransactionRawTxInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionRawTxInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionRawTxInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionRawTxInfo(val *TransactionRawTxInfo) *NullableTransactionRawTxInfo {
	return &NullableTransactionRawTxInfo{value: val, isSet: true}
}

func (v NullableTransactionRawTxInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionRawTxInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


