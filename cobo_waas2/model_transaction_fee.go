/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionFee - struct for TransactionFee
type TransactionFee struct {
	TransactionEvmEip1559Fee *TransactionEvmEip1559Fee
	TransactionEvmLegacyFee *TransactionEvmLegacyFee
	TransactionFixedFee *TransactionFixedFee
	TransactionUtxoFee *TransactionUtxoFee
}

// TransactionEvmEip1559FeeAsTransactionFee is a convenience function that returns TransactionEvmEip1559Fee wrapped in TransactionFee
func TransactionEvmEip1559FeeAsTransactionFee(v *TransactionEvmEip1559Fee) TransactionFee {
	return TransactionFee{
		TransactionEvmEip1559Fee: v,
	}
}

// TransactionEvmLegacyFeeAsTransactionFee is a convenience function that returns TransactionEvmLegacyFee wrapped in TransactionFee
func TransactionEvmLegacyFeeAsTransactionFee(v *TransactionEvmLegacyFee) TransactionFee {
	return TransactionFee{
		TransactionEvmLegacyFee: v,
	}
}

// TransactionFixedFeeAsTransactionFee is a convenience function that returns TransactionFixedFee wrapped in TransactionFee
func TransactionFixedFeeAsTransactionFee(v *TransactionFixedFee) TransactionFee {
	return TransactionFee{
		TransactionFixedFee: v,
	}
}

// TransactionUtxoFeeAsTransactionFee is a convenience function that returns TransactionUtxoFee wrapped in TransactionFee
func TransactionUtxoFeeAsTransactionFee(v *TransactionUtxoFee) TransactionFee {
	return TransactionFee{
		TransactionUtxoFee: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionFee) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EVM_EIP_1559'
	if jsonDict["fee_type"] == "EVM_EIP_1559" {
		// try to unmarshal JSON data into TransactionEvmEip1559Fee
		err = json.Unmarshal(data, &dst.TransactionEvmEip1559Fee)
		if err == nil {
			return nil // data stored in dst.TransactionEvmEip1559Fee, return on the first match
		} else {
			dst.TransactionEvmEip1559Fee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionEvmEip1559Fee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EVM_Legacy'
	if jsonDict["fee_type"] == "EVM_Legacy" {
		// try to unmarshal JSON data into TransactionEvmLegacyFee
		err = json.Unmarshal(data, &dst.TransactionEvmLegacyFee)
		if err == nil {
			return nil // data stored in dst.TransactionEvmLegacyFee, return on the first match
		} else {
			dst.TransactionEvmLegacyFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionEvmLegacyFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Fixed'
	if jsonDict["fee_type"] == "Fixed" {
		// try to unmarshal JSON data into TransactionFixedFee
		err = json.Unmarshal(data, &dst.TransactionFixedFee)
		if err == nil {
			return nil // data stored in dst.TransactionFixedFee, return on the first match
		} else {
			dst.TransactionFixedFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionFixedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UTXO'
	if jsonDict["fee_type"] == "UTXO" {
		// try to unmarshal JSON data into TransactionUtxoFee
		err = json.Unmarshal(data, &dst.TransactionUtxoFee)
		if err == nil {
			return nil // data stored in dst.TransactionUtxoFee, return on the first match
		} else {
			dst.TransactionUtxoFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionUtxoFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionEvmEip1559Fee'
	if jsonDict["fee_type"] == "TransactionEvmEip1559Fee" {
		// try to unmarshal JSON data into TransactionEvmEip1559Fee
		err = json.Unmarshal(data, &dst.TransactionEvmEip1559Fee)
		if err == nil {
			return nil // data stored in dst.TransactionEvmEip1559Fee, return on the first match
		} else {
			dst.TransactionEvmEip1559Fee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionEvmEip1559Fee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionEvmLegacyFee'
	if jsonDict["fee_type"] == "TransactionEvmLegacyFee" {
		// try to unmarshal JSON data into TransactionEvmLegacyFee
		err = json.Unmarshal(data, &dst.TransactionEvmLegacyFee)
		if err == nil {
			return nil // data stored in dst.TransactionEvmLegacyFee, return on the first match
		} else {
			dst.TransactionEvmLegacyFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionEvmLegacyFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionFixedFee'
	if jsonDict["fee_type"] == "TransactionFixedFee" {
		// try to unmarshal JSON data into TransactionFixedFee
		err = json.Unmarshal(data, &dst.TransactionFixedFee)
		if err == nil {
			return nil // data stored in dst.TransactionFixedFee, return on the first match
		} else {
			dst.TransactionFixedFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionFixedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionUtxoFee'
	if jsonDict["fee_type"] == "TransactionUtxoFee" {
		// try to unmarshal JSON data into TransactionUtxoFee
		err = json.Unmarshal(data, &dst.TransactionUtxoFee)
		if err == nil {
			return nil // data stored in dst.TransactionUtxoFee, return on the first match
		} else {
			dst.TransactionUtxoFee = nil
			return fmt.Errorf("failed to unmarshal TransactionFee as TransactionUtxoFee: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionFee) MarshalJSON() ([]byte, error) {
	if src.TransactionEvmEip1559Fee != nil {
		return json.Marshal(&src.TransactionEvmEip1559Fee)
	}

	if src.TransactionEvmLegacyFee != nil {
		return json.Marshal(&src.TransactionEvmLegacyFee)
	}

	if src.TransactionFixedFee != nil {
		return json.Marshal(&src.TransactionFixedFee)
	}

	if src.TransactionUtxoFee != nil {
		return json.Marshal(&src.TransactionUtxoFee)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionFee) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransactionEvmEip1559Fee != nil {
		return obj.TransactionEvmEip1559Fee
	}

	if obj.TransactionEvmLegacyFee != nil {
		return obj.TransactionEvmLegacyFee
	}

	if obj.TransactionFixedFee != nil {
		return obj.TransactionFixedFee
	}

	if obj.TransactionUtxoFee != nil {
		return obj.TransactionUtxoFee
	}

	// all schemas are nil
	return nil
}

type NullableTransactionFee struct {
	value *TransactionFee
	isSet bool
}

func (v NullableTransactionFee) Get() *TransactionFee {
	return v.value
}

func (v *NullableTransactionFee) Set(val *TransactionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFee(val *TransactionFee) *NullableTransactionFee {
	return &NullableTransactionFee{value: val, isSet: true}
}

func (v NullableTransactionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


