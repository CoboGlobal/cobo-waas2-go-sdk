/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// AddressEncoding The address encoding formats. This property only applies to blockchains that have a similar architecture to Bitcoin.
type AddressEncoding string

// List of AddressEncoding
const (
	ADDRESSENCODING_P2_PKH AddressEncoding = "ENCODING_P2PKH"
	ADDRESSENCODING_P2_SH_P2_WPKH AddressEncoding = "ENCODING_P2SH_P2WPKH"
	ADDRESSENCODING_BECH32 AddressEncoding = "ENCODING_BECH32"
	ADDRESSENCODING_P2_PKH_UNCOMPRESSED AddressEncoding = "ENCODING_P2PKH_UNCOMPRESSED"
	ADDRESSENCODING_P2_SH_P2_MS AddressEncoding = "ENCODING_P2SH_P2MS"
	ADDRESSENCODING_P2_SH_P2_WSH_P2_MS AddressEncoding = "ENCODING_P2SH_P2WSH_P2MS"
	ADDRESSENCODING_P2_TR AddressEncoding = "ENCODING_P2TR"
)

// All allowed values of AddressEncoding enum
var AllowedAddressEncodingEnumValues = []AddressEncoding{
	"ENCODING_P2PKH",
	"ENCODING_P2SH_P2WPKH",
	"ENCODING_BECH32",
	"ENCODING_P2PKH_UNCOMPRESSED",
	"ENCODING_P2SH_P2MS",
	"ENCODING_P2SH_P2WSH_P2MS",
	"ENCODING_P2TR",
}

func (v *AddressEncoding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddressEncoding(value)
	for _, existing := range AllowedAddressEncodingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = AddressEncoding("unknown")
    return nil
}

// NewAddressEncodingFromValue returns a pointer to a valid AddressEncoding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressEncodingFromValue(v string) (*AddressEncoding, error) {
	ev := AddressEncoding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddressEncoding: valid values are %v", v, AllowedAddressEncodingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressEncoding) IsValid() bool {
	for _, existing := range AllowedAddressEncodingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddressEncoding value
func (v AddressEncoding) Ptr() *AddressEncoding {
	return &v
}

type NullableAddressEncoding struct {
	value *AddressEncoding
	isSet bool
}

func (v NullableAddressEncoding) Get() *AddressEncoding {
	return v.value
}

func (v *NullableAddressEncoding) Set(val *AddressEncoding) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressEncoding) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressEncoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressEncoding(val *AddressEncoding) *NullableAddressEncoding {
	return &NullableAddressEncoding{value: val, isSet: true}
}

func (v NullableAddressEncoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressEncoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

