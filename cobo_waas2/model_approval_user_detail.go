/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the ApprovalUserDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalUserDetail{}

// ApprovalUserDetail Details about a user involved in a transaction approval workflow. 
type ApprovalUserDetail struct {
	// Name of the user who approved the transaction.
	Name *string `json:"name,omitempty"`
	// Email of the user.
	Email *string `json:"email,omitempty"`
	// Public key of the user.
	Pubkey *string `json:"pubkey,omitempty"`
	// Signature produced by the user for this approval.
	Signature *string `json:"signature,omitempty"`
	// UUID of the statement associated with this approval.
	StatementUuid *string `json:"statement_uuid,omitempty"`
	Result *ApprovalResult `json:"result,omitempty"`
	// Integer value representing the result of the approval.
	ApprovalResultCode *int32 `json:"approval_result_code,omitempty"`
	// Timestamp when the approval was created.
	CreatedTime *int32 `json:"created_time,omitempty"`
	// Version of the template used for the transaction approval.
	TemplateVersion *string `json:"template_version,omitempty"`
	// Display title used in the transaction approval.
	HeaderTitle *string `json:"header_title,omitempty"`
	// Indicates whether this approval requires signing: - `true`: The user must sign the transaction. - `false`: The user only needs to approve or reject without signing. 
	IsForSign *bool `json:"is_for_sign,omitempty"`
	// Additional information to show for the transaction approval.
	ShowInfo *string `json:"show_info,omitempty"`
	// Language used for the transaction approval.
	Language *string `json:"language,omitempty"`
	// Version of the message format used for the transaction approval.
	MessageVersion *string `json:"message_version,omitempty"`
	// Message associated with the transaction approval.
	Message *string `json:"message,omitempty"`
	// Any additional message or information related to the transaction approval.
	ExtraMessage *string `json:"extra_message,omitempty"`
}

// NewApprovalUserDetail instantiates a new ApprovalUserDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalUserDetail() *ApprovalUserDetail {
	this := ApprovalUserDetail{}
	return &this
}

// NewApprovalUserDetailWithDefaults instantiates a new ApprovalUserDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalUserDetailWithDefaults() *ApprovalUserDetail {
	this := ApprovalUserDetail{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApprovalUserDetail) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ApprovalUserDetail) SetEmail(v string) {
	o.Email = &v
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetPubkey() string {
	if o == nil || IsNil(o.Pubkey) {
		var ret string
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.Pubkey) {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasPubkey() bool {
	if o != nil && !IsNil(o.Pubkey) {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given string and assigns it to the Pubkey field.
func (o *ApprovalUserDetail) SetPubkey(v string) {
	o.Pubkey = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *ApprovalUserDetail) SetSignature(v string) {
	o.Signature = &v
}

// GetStatementUuid returns the StatementUuid field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetStatementUuid() string {
	if o == nil || IsNil(o.StatementUuid) {
		var ret string
		return ret
	}
	return *o.StatementUuid
}

// GetStatementUuidOk returns a tuple with the StatementUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetStatementUuidOk() (*string, bool) {
	if o == nil || IsNil(o.StatementUuid) {
		return nil, false
	}
	return o.StatementUuid, true
}

// HasStatementUuid returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasStatementUuid() bool {
	if o != nil && !IsNil(o.StatementUuid) {
		return true
	}

	return false
}

// SetStatementUuid gets a reference to the given string and assigns it to the StatementUuid field.
func (o *ApprovalUserDetail) SetStatementUuid(v string) {
	o.StatementUuid = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetResult() ApprovalResult {
	if o == nil || IsNil(o.Result) {
		var ret ApprovalResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetResultOk() (*ApprovalResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given ApprovalResult and assigns it to the Result field.
func (o *ApprovalUserDetail) SetResult(v ApprovalResult) {
	o.Result = &v
}

// GetApprovalResultCode returns the ApprovalResultCode field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetApprovalResultCode() int32 {
	if o == nil || IsNil(o.ApprovalResultCode) {
		var ret int32
		return ret
	}
	return *o.ApprovalResultCode
}

// GetApprovalResultCodeOk returns a tuple with the ApprovalResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetApprovalResultCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ApprovalResultCode) {
		return nil, false
	}
	return o.ApprovalResultCode, true
}

// HasApprovalResultCode returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasApprovalResultCode() bool {
	if o != nil && !IsNil(o.ApprovalResultCode) {
		return true
	}

	return false
}

// SetApprovalResultCode gets a reference to the given int32 and assigns it to the ApprovalResultCode field.
func (o *ApprovalUserDetail) SetApprovalResultCode(v int32) {
	o.ApprovalResultCode = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetCreatedTime() int32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetCreatedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int32 and assigns it to the CreatedTime field.
func (o *ApprovalUserDetail) SetCreatedTime(v int32) {
	o.CreatedTime = &v
}

// GetTemplateVersion returns the TemplateVersion field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetTemplateVersion() string {
	if o == nil || IsNil(o.TemplateVersion) {
		var ret string
		return ret
	}
	return *o.TemplateVersion
}

// GetTemplateVersionOk returns a tuple with the TemplateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetTemplateVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateVersion) {
		return nil, false
	}
	return o.TemplateVersion, true
}

// HasTemplateVersion returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasTemplateVersion() bool {
	if o != nil && !IsNil(o.TemplateVersion) {
		return true
	}

	return false
}

// SetTemplateVersion gets a reference to the given string and assigns it to the TemplateVersion field.
func (o *ApprovalUserDetail) SetTemplateVersion(v string) {
	o.TemplateVersion = &v
}

// GetHeaderTitle returns the HeaderTitle field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetHeaderTitle() string {
	if o == nil || IsNil(o.HeaderTitle) {
		var ret string
		return ret
	}
	return *o.HeaderTitle
}

// GetHeaderTitleOk returns a tuple with the HeaderTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetHeaderTitleOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderTitle) {
		return nil, false
	}
	return o.HeaderTitle, true
}

// HasHeaderTitle returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasHeaderTitle() bool {
	if o != nil && !IsNil(o.HeaderTitle) {
		return true
	}

	return false
}

// SetHeaderTitle gets a reference to the given string and assigns it to the HeaderTitle field.
func (o *ApprovalUserDetail) SetHeaderTitle(v string) {
	o.HeaderTitle = &v
}

// GetIsForSign returns the IsForSign field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetIsForSign() bool {
	if o == nil || IsNil(o.IsForSign) {
		var ret bool
		return ret
	}
	return *o.IsForSign
}

// GetIsForSignOk returns a tuple with the IsForSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetIsForSignOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForSign) {
		return nil, false
	}
	return o.IsForSign, true
}

// HasIsForSign returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasIsForSign() bool {
	if o != nil && !IsNil(o.IsForSign) {
		return true
	}

	return false
}

// SetIsForSign gets a reference to the given bool and assigns it to the IsForSign field.
func (o *ApprovalUserDetail) SetIsForSign(v bool) {
	o.IsForSign = &v
}

// GetShowInfo returns the ShowInfo field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetShowInfo() string {
	if o == nil || IsNil(o.ShowInfo) {
		var ret string
		return ret
	}
	return *o.ShowInfo
}

// GetShowInfoOk returns a tuple with the ShowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetShowInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ShowInfo) {
		return nil, false
	}
	return o.ShowInfo, true
}

// HasShowInfo returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasShowInfo() bool {
	if o != nil && !IsNil(o.ShowInfo) {
		return true
	}

	return false
}

// SetShowInfo gets a reference to the given string and assigns it to the ShowInfo field.
func (o *ApprovalUserDetail) SetShowInfo(v string) {
	o.ShowInfo = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ApprovalUserDetail) SetLanguage(v string) {
	o.Language = &v
}

// GetMessageVersion returns the MessageVersion field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetMessageVersion() string {
	if o == nil || IsNil(o.MessageVersion) {
		var ret string
		return ret
	}
	return *o.MessageVersion
}

// GetMessageVersionOk returns a tuple with the MessageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetMessageVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MessageVersion) {
		return nil, false
	}
	return o.MessageVersion, true
}

// HasMessageVersion returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasMessageVersion() bool {
	if o != nil && !IsNil(o.MessageVersion) {
		return true
	}

	return false
}

// SetMessageVersion gets a reference to the given string and assigns it to the MessageVersion field.
func (o *ApprovalUserDetail) SetMessageVersion(v string) {
	o.MessageVersion = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ApprovalUserDetail) SetMessage(v string) {
	o.Message = &v
}

// GetExtraMessage returns the ExtraMessage field value if set, zero value otherwise.
func (o *ApprovalUserDetail) GetExtraMessage() string {
	if o == nil || IsNil(o.ExtraMessage) {
		var ret string
		return ret
	}
	return *o.ExtraMessage
}

// GetExtraMessageOk returns a tuple with the ExtraMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalUserDetail) GetExtraMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraMessage) {
		return nil, false
	}
	return o.ExtraMessage, true
}

// HasExtraMessage returns a boolean if a field has been set.
func (o *ApprovalUserDetail) HasExtraMessage() bool {
	if o != nil && !IsNil(o.ExtraMessage) {
		return true
	}

	return false
}

// SetExtraMessage gets a reference to the given string and assigns it to the ExtraMessage field.
func (o *ApprovalUserDetail) SetExtraMessage(v string) {
	o.ExtraMessage = &v
}

func (o ApprovalUserDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalUserDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Pubkey) {
		toSerialize["pubkey"] = o.Pubkey
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.StatementUuid) {
		toSerialize["statement_uuid"] = o.StatementUuid
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.ApprovalResultCode) {
		toSerialize["approval_result_code"] = o.ApprovalResultCode
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.TemplateVersion) {
		toSerialize["template_version"] = o.TemplateVersion
	}
	if !IsNil(o.HeaderTitle) {
		toSerialize["header_title"] = o.HeaderTitle
	}
	if !IsNil(o.IsForSign) {
		toSerialize["is_for_sign"] = o.IsForSign
	}
	if !IsNil(o.ShowInfo) {
		toSerialize["show_info"] = o.ShowInfo
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MessageVersion) {
		toSerialize["message_version"] = o.MessageVersion
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ExtraMessage) {
		toSerialize["extra_message"] = o.ExtraMessage
	}
	return toSerialize, nil
}

type NullableApprovalUserDetail struct {
	value *ApprovalUserDetail
	isSet bool
}

func (v NullableApprovalUserDetail) Get() *ApprovalUserDetail {
	return v.value
}

func (v *NullableApprovalUserDetail) Set(val *ApprovalUserDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalUserDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalUserDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalUserDetail(val *ApprovalUserDetail) *NullableApprovalUserDetail {
	return &NullableApprovalUserDetail{value: val, isSet: true}
}

func (v NullableApprovalUserDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalUserDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


