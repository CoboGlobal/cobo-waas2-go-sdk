/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionExtra - struct for TransactionExtra
type TransactionExtra struct {
	TransactionBabylonBusinessInfo *TransactionBabylonBusinessInfo
	TransactionBabylonTxParameters *TransactionBabylonTxParameters
	TransactionCoreStakeInfo *TransactionCoreStakeInfo
}

// TransactionBabylonBusinessInfoAsTransactionExtra is a convenience function that returns TransactionBabylonBusinessInfo wrapped in TransactionExtra
func TransactionBabylonBusinessInfoAsTransactionExtra(v *TransactionBabylonBusinessInfo) TransactionExtra {
	return TransactionExtra{
		TransactionBabylonBusinessInfo: v,
	}
}

// TransactionBabylonTxParametersAsTransactionExtra is a convenience function that returns TransactionBabylonTxParameters wrapped in TransactionExtra
func TransactionBabylonTxParametersAsTransactionExtra(v *TransactionBabylonTxParameters) TransactionExtra {
	return TransactionExtra{
		TransactionBabylonTxParameters: v,
	}
}

// TransactionCoreStakeInfoAsTransactionExtra is a convenience function that returns TransactionCoreStakeInfo wrapped in TransactionExtra
func TransactionCoreStakeInfoAsTransactionExtra(v *TransactionCoreStakeInfo) TransactionExtra {
	return TransactionExtra{
		TransactionCoreStakeInfo: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionExtra) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BabylonBusinessInfo'
	if jsonDict["extra_type"] == "BabylonBusinessInfo" {
		// try to unmarshal JSON data into TransactionBabylonBusinessInfo
		err = json.Unmarshal(data, &dst.TransactionBabylonBusinessInfo)
		if err == nil {
			return nil // data stored in dst.TransactionBabylonBusinessInfo, return on the first match
		} else {
			dst.TransactionBabylonBusinessInfo = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionBabylonBusinessInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BabylonTxParameters'
	if jsonDict["extra_type"] == "BabylonTxParameters" {
		// try to unmarshal JSON data into TransactionBabylonTxParameters
		err = json.Unmarshal(data, &dst.TransactionBabylonTxParameters)
		if err == nil {
			return nil // data stored in dst.TransactionBabylonTxParameters, return on the first match
		} else {
			dst.TransactionBabylonTxParameters = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionBabylonTxParameters: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CoreStakeInfo'
	if jsonDict["extra_type"] == "CoreStakeInfo" {
		// try to unmarshal JSON data into TransactionCoreStakeInfo
		err = json.Unmarshal(data, &dst.TransactionCoreStakeInfo)
		if err == nil {
			return nil // data stored in dst.TransactionCoreStakeInfo, return on the first match
		} else {
			dst.TransactionCoreStakeInfo = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionCoreStakeInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionBabylonBusinessInfo'
	if jsonDict["extra_type"] == "TransactionBabylonBusinessInfo" {
		// try to unmarshal JSON data into TransactionBabylonBusinessInfo
		err = json.Unmarshal(data, &dst.TransactionBabylonBusinessInfo)
		if err == nil {
			return nil // data stored in dst.TransactionBabylonBusinessInfo, return on the first match
		} else {
			dst.TransactionBabylonBusinessInfo = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionBabylonBusinessInfo: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionBabylonTxParameters'
	if jsonDict["extra_type"] == "TransactionBabylonTxParameters" {
		// try to unmarshal JSON data into TransactionBabylonTxParameters
		err = json.Unmarshal(data, &dst.TransactionBabylonTxParameters)
		if err == nil {
			return nil // data stored in dst.TransactionBabylonTxParameters, return on the first match
		} else {
			dst.TransactionBabylonTxParameters = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionBabylonTxParameters: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionCoreStakeInfo'
	if jsonDict["extra_type"] == "TransactionCoreStakeInfo" {
		// try to unmarshal JSON data into TransactionCoreStakeInfo
		err = json.Unmarshal(data, &dst.TransactionCoreStakeInfo)
		if err == nil {
			return nil // data stored in dst.TransactionCoreStakeInfo, return on the first match
		} else {
			dst.TransactionCoreStakeInfo = nil
			return fmt.Errorf("failed to unmarshal TransactionExtra as TransactionCoreStakeInfo: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionExtra) MarshalJSON() ([]byte, error) {
	if src.TransactionBabylonBusinessInfo != nil {
		return json.Marshal(&src.TransactionBabylonBusinessInfo)
	}

	if src.TransactionBabylonTxParameters != nil {
		return json.Marshal(&src.TransactionBabylonTxParameters)
	}

	if src.TransactionCoreStakeInfo != nil {
		return json.Marshal(&src.TransactionCoreStakeInfo)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionExtra) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransactionBabylonBusinessInfo != nil {
		return obj.TransactionBabylonBusinessInfo
	}

	if obj.TransactionBabylonTxParameters != nil {
		return obj.TransactionBabylonTxParameters
	}

	if obj.TransactionCoreStakeInfo != nil {
		return obj.TransactionCoreStakeInfo
	}

	// all schemas are nil
	return nil
}

type NullableTransactionExtra struct {
	value *TransactionExtra
	isSet bool
}

func (v NullableTransactionExtra) Get() *TransactionExtra {
	return v.value
}

func (v *NullableTransactionExtra) Set(val *TransactionExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionExtra(val *TransactionExtra) *NullableTransactionExtra {
	return &NullableTransactionExtra{value: val, isSet: true}
}

func (v NullableTransactionExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


