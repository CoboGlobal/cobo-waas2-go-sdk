/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Merchant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Merchant{}

// Merchant struct for Merchant
type Merchant struct {
	// The merchant ID.
	MerchantId string `json:"merchant_id"`
	// The merchant name.
	Name string `json:"name"`
	// The ID of the linked wallet.
	WalletId string `json:"wallet_id"`
	// The developer fee rate applied to this merchant. Expressed as a string in decimal format where \"0.1\" represents 10%. This fee is deducted from the payment amount and only applies to top-up transactions. If you are a merchant (directly serving the payer), you do not need to configure the developer fee rate.
	DeveloperFeeRate *string `json:"developer_fee_rate,omitempty"`
	// The creation time of the merchant, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the merchant, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
}

type _Merchant Merchant

// NewMerchant instantiates a new Merchant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchant(merchantId string, name string, walletId string) *Merchant {
	this := Merchant{}
	this.MerchantId = merchantId
	this.Name = name
	this.WalletId = walletId
	return &this
}

// NewMerchantWithDefaults instantiates a new Merchant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantWithDefaults() *Merchant {
	this := Merchant{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *Merchant) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *Merchant) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *Merchant) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetName returns the Name field value
func (o *Merchant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Merchant) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Merchant) SetName(v string) {
	o.Name = v
}

// GetWalletId returns the WalletId field value
func (o *Merchant) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Merchant) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Merchant) SetWalletId(v string) {
	o.WalletId = v
}

// GetDeveloperFeeRate returns the DeveloperFeeRate field value if set, zero value otherwise.
func (o *Merchant) GetDeveloperFeeRate() string {
	if o == nil || IsNil(o.DeveloperFeeRate) {
		var ret string
		return ret
	}
	return *o.DeveloperFeeRate
}

// GetDeveloperFeeRateOk returns a tuple with the DeveloperFeeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Merchant) GetDeveloperFeeRateOk() (*string, bool) {
	if o == nil || IsNil(o.DeveloperFeeRate) {
		return nil, false
	}
	return o.DeveloperFeeRate, true
}

// HasDeveloperFeeRate returns a boolean if a field has been set.
func (o *Merchant) HasDeveloperFeeRate() bool {
	if o != nil && !IsNil(o.DeveloperFeeRate) {
		return true
	}

	return false
}

// SetDeveloperFeeRate gets a reference to the given string and assigns it to the DeveloperFeeRate field.
func (o *Merchant) SetDeveloperFeeRate(v string) {
	o.DeveloperFeeRate = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *Merchant) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Merchant) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *Merchant) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *Merchant) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *Merchant) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Merchant) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *Merchant) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *Merchant) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

func (o Merchant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Merchant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["name"] = o.Name
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.DeveloperFeeRate) {
		toSerialize["developer_fee_rate"] = o.DeveloperFeeRate
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	return toSerialize, nil
}

func (o *Merchant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"name",
		"wallet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerchant := _Merchant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerchant)

	if err != nil {
		return err
	}

	*o = Merchant(varMerchant)

	return err
}

type NullableMerchant struct {
	value *Merchant
	isSet bool
}

func (v NullableMerchant) Get() *Merchant {
	return v.value
}

func (v *NullableMerchant) Set(val *Merchant) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchant) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchant(val *Merchant) *NullableMerchant {
	return &NullableMerchant{value: val, isSet: true}
}

func (v NullableMerchant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


