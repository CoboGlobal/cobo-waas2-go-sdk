/*
Cobo Wallet as a Service 2.0

Testing DevelopersWebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cobo_waas2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	coboWaas2 "github.com/CoboGlobal/cobo-waas2-go-sdk/cobo_waas2"
	"github.com/CoboGlobal/cobo-waas2-go-sdk/cobo_waas2/crypto"
)

func Test_cobo_waas2_DevelopersWebhooksAPIService(t *testing.T) {

	configuration := coboWaas2.NewConfiguration()
	apiClient := coboWaas2.NewAPIClient(configuration)
	ctx := context.WithValue(context.Background(), waas2.ContextServerHost, "https://api[.xxxx].cobo.com/v2")
	ctx = context.WithValue(ctx, waas2.ContextPortalSigner, crypto.Ed25519Signer{
		Secret: "<YOUR_API_PRIV_KEY_IN_HEX>",
	})

	t.Run("Test DevelopersWebhooksAPIService CreateWebhookEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.CreateWebhookEndpoint(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEndpointById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEndpointById(ctx, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEventById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEventById(ctx, eventId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListWebhookEndpoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListWebhookEndpoints(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListWebhookEventDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListWebhookEventDefinitions(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListWebhookEventLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListWebhookEventLogs(ctx, eventId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListWebhookEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListWebhookEvents(ctx, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService RetryWebhookEventById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.RetryWebhookEventById(ctx, eventId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService UpdateWebhookEndpointById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.UpdateWebhookEndpointById(ctx, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
