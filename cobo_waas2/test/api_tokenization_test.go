/*
Cobo Wallet as a Service 2.0

Testing TokenizationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cobo_waas2

import (
	"context"
	"testing"

	coboWaas2 "github.com/CoboGlobal/cobo-waas2-go-sdk/cobo_waas2"
	"github.com/CoboGlobal/cobo-waas2-go-sdk/cobo_waas2/crypto"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
)

func Test_cobo_waas2_TokenizationAPIService(t *testing.T) {

	configuration := coboWaas2.NewConfiguration()
	apiClient := coboWaas2.NewAPIClient(configuration)
	ctx := context.WithValue(context.Background(), coboWaas2.ContextServerHost, "https://api[.xxxx].cobo.com/v2")
	ctx = context.WithValue(ctx, coboWaas2.ContextPortalSigner, crypto.Ed25519Signer{
		Secret: "<YOUR_API_PRIV_KEY_IN_HEX>",
	})

	t.Run("Test TokenizationAPIService BurnTokenization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.BurnTokenization(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService EstimateTokenizationFee", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokenizationAPI.EstimateTokenizationFee(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService GetTokenizationActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string

		resp, httpRes, err := apiClient.TokenizationAPI.GetTokenizationActivity(ctx, activityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService GetTokenizationAllowlistActivation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.GetTokenizationAllowlistActivation(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService GetTokenizationInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.GetTokenizationInfo(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService IssueToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokenizationAPI.IssueToken(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListIssuedTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokenizationAPI.ListIssuedTokens(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListTokenizationActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokenizationAPI.ListTokenizationActivities(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListTokenizationAllowlistAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.ListTokenizationAllowlistAddresses(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListTokenizationBlocklistAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.ListTokenizationBlocklistAddresses(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListTokenizationHoldings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.ListTokenizationHoldings(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService ListTokenizationSupportedChains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokenizationAPI.ListTokenizationSupportedChains(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService MintTokenization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.MintTokenization(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService PauseTokenization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.PauseTokenization(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService TokenizationContractCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.TokenizationContractCall(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService UnpauseTokenization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.UnpauseTokenization(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService UpdateTokenizationAllowlistActivation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.UpdateTokenizationAllowlistActivation(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService UpdateTokenizationAllowlistAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.UpdateTokenizationAllowlistAddresses(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenizationAPIService UpdateTokenizationBlocklistAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokenizationAPI.UpdateTokenizationBlocklistAddresses(ctx, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
