/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ContractCallDestination - struct for ContractCallDestination
type ContractCallDestination struct {
	EvmContractCallDestination *EvmContractCallDestination
}

// EvmContractCallDestinationAsContractCallDestination is a convenience function that returns EvmContractCallDestination wrapped in ContractCallDestination
func EvmContractCallDestinationAsContractCallDestination(v *EvmContractCallDestination) ContractCallDestination {
	return ContractCallDestination{
		EvmContractCallDestination: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContractCallDestination) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EVM'
	if jsonDict["destination_type"] == "EVM" {
		// try to unmarshal JSON data into EvmContractCallDestination
		err = json.Unmarshal(data, &dst.EvmContractCallDestination)
		if err == nil {
			return nil // data stored in dst.EvmContractCallDestination, return on the first match
		} else {
			dst.EvmContractCallDestination = nil
			return fmt.Errorf("failed to unmarshal ContractCallDestination as EvmContractCallDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmContractCallDestination'
	if jsonDict["destination_type"] == "EvmContractCallDestination" {
		// try to unmarshal JSON data into EvmContractCallDestination
		err = json.Unmarshal(data, &dst.EvmContractCallDestination)
		if err == nil {
			return nil // data stored in dst.EvmContractCallDestination, return on the first match
		} else {
			dst.EvmContractCallDestination = nil
			return fmt.Errorf("failed to unmarshal ContractCallDestination as EvmContractCallDestination: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContractCallDestination) MarshalJSON() ([]byte, error) {
	if src.EvmContractCallDestination != nil {
		return json.Marshal(&src.EvmContractCallDestination)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContractCallDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EvmContractCallDestination != nil {
		return obj.EvmContractCallDestination
	}

	// all schemas are nil
	return nil
}

type NullableContractCallDestination struct {
	value *ContractCallDestination
	isSet bool
}

func (v NullableContractCallDestination) Get() *ContractCallDestination {
	return v.value
}

func (v *NullableContractCallDestination) Set(val *ContractCallDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableContractCallDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableContractCallDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractCallDestination(val *ContractCallDestination) *NullableContractCallDestination {
	return &NullableContractCallDestination{value: val, isSet: true}
}

func (v NullableContractCallDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractCallDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


