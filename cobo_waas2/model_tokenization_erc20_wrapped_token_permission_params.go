/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TokenizationERC20WrappedTokenPermissionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationERC20WrappedTokenPermissionParams{}

// TokenizationERC20WrappedTokenPermissionParams Role-based permission settings for token contract. If not provided, all permissions will be granted to the issuance wallet by default.
type TokenizationERC20WrappedTokenPermissionParams struct {
	// List of addresses for the admin role.
	Admin []string `json:"admin,omitempty"`
	// List of addresses for the minter role.
	Minter []string `json:"minter,omitempty"`
	// List of addresses for the wrapper role.
	Wrapper []string `json:"wrapper,omitempty"`
	// List of addresses for the manager role.
	Manager []string `json:"manager,omitempty"`
	// List of addresses for the pauser role.
	Pauser []string `json:"pauser,omitempty"`
	// List of addresses for the salvager role.
	Salvager []string `json:"salvager,omitempty"`
	// List of addresses for the upgrader role.
	Upgrader []string `json:"upgrader,omitempty"`
}

// NewTokenizationERC20WrappedTokenPermissionParams instantiates a new TokenizationERC20WrappedTokenPermissionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationERC20WrappedTokenPermissionParams() *TokenizationERC20WrappedTokenPermissionParams {
	this := TokenizationERC20WrappedTokenPermissionParams{}
	return &this
}

// NewTokenizationERC20WrappedTokenPermissionParamsWithDefaults instantiates a new TokenizationERC20WrappedTokenPermissionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationERC20WrappedTokenPermissionParamsWithDefaults() *TokenizationERC20WrappedTokenPermissionParams {
	this := TokenizationERC20WrappedTokenPermissionParams{}
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetAdmin() []string {
	if o == nil || IsNil(o.Admin) {
		var ret []string
		return ret
	}
	return o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetAdminOk() ([]string, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given []string and assigns it to the Admin field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetAdmin(v []string) {
	o.Admin = v
}

// GetMinter returns the Minter field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetMinter() []string {
	if o == nil || IsNil(o.Minter) {
		var ret []string
		return ret
	}
	return o.Minter
}

// GetMinterOk returns a tuple with the Minter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetMinterOk() ([]string, bool) {
	if o == nil || IsNil(o.Minter) {
		return nil, false
	}
	return o.Minter, true
}

// HasMinter returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasMinter() bool {
	if o != nil && !IsNil(o.Minter) {
		return true
	}

	return false
}

// SetMinter gets a reference to the given []string and assigns it to the Minter field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetMinter(v []string) {
	o.Minter = v
}

// GetWrapper returns the Wrapper field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetWrapper() []string {
	if o == nil || IsNil(o.Wrapper) {
		var ret []string
		return ret
	}
	return o.Wrapper
}

// GetWrapperOk returns a tuple with the Wrapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetWrapperOk() ([]string, bool) {
	if o == nil || IsNil(o.Wrapper) {
		return nil, false
	}
	return o.Wrapper, true
}

// HasWrapper returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasWrapper() bool {
	if o != nil && !IsNil(o.Wrapper) {
		return true
	}

	return false
}

// SetWrapper gets a reference to the given []string and assigns it to the Wrapper field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetWrapper(v []string) {
	o.Wrapper = v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetManager() []string {
	if o == nil || IsNil(o.Manager) {
		var ret []string
		return ret
	}
	return o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetManagerOk() ([]string, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given []string and assigns it to the Manager field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetManager(v []string) {
	o.Manager = v
}

// GetPauser returns the Pauser field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetPauser() []string {
	if o == nil || IsNil(o.Pauser) {
		var ret []string
		return ret
	}
	return o.Pauser
}

// GetPauserOk returns a tuple with the Pauser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetPauserOk() ([]string, bool) {
	if o == nil || IsNil(o.Pauser) {
		return nil, false
	}
	return o.Pauser, true
}

// HasPauser returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasPauser() bool {
	if o != nil && !IsNil(o.Pauser) {
		return true
	}

	return false
}

// SetPauser gets a reference to the given []string and assigns it to the Pauser field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetPauser(v []string) {
	o.Pauser = v
}

// GetSalvager returns the Salvager field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetSalvager() []string {
	if o == nil || IsNil(o.Salvager) {
		var ret []string
		return ret
	}
	return o.Salvager
}

// GetSalvagerOk returns a tuple with the Salvager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetSalvagerOk() ([]string, bool) {
	if o == nil || IsNil(o.Salvager) {
		return nil, false
	}
	return o.Salvager, true
}

// HasSalvager returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasSalvager() bool {
	if o != nil && !IsNil(o.Salvager) {
		return true
	}

	return false
}

// SetSalvager gets a reference to the given []string and assigns it to the Salvager field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetSalvager(v []string) {
	o.Salvager = v
}

// GetUpgrader returns the Upgrader field value if set, zero value otherwise.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetUpgrader() []string {
	if o == nil || IsNil(o.Upgrader) {
		var ret []string
		return ret
	}
	return o.Upgrader
}

// GetUpgraderOk returns a tuple with the Upgrader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) GetUpgraderOk() ([]string, bool) {
	if o == nil || IsNil(o.Upgrader) {
		return nil, false
	}
	return o.Upgrader, true
}

// HasUpgrader returns a boolean if a field has been set.
func (o *TokenizationERC20WrappedTokenPermissionParams) HasUpgrader() bool {
	if o != nil && !IsNil(o.Upgrader) {
		return true
	}

	return false
}

// SetUpgrader gets a reference to the given []string and assigns it to the Upgrader field.
func (o *TokenizationERC20WrappedTokenPermissionParams) SetUpgrader(v []string) {
	o.Upgrader = v
}

func (o TokenizationERC20WrappedTokenPermissionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationERC20WrappedTokenPermissionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Minter) {
		toSerialize["minter"] = o.Minter
	}
	if !IsNil(o.Wrapper) {
		toSerialize["wrapper"] = o.Wrapper
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !IsNil(o.Pauser) {
		toSerialize["pauser"] = o.Pauser
	}
	if !IsNil(o.Salvager) {
		toSerialize["salvager"] = o.Salvager
	}
	if !IsNil(o.Upgrader) {
		toSerialize["upgrader"] = o.Upgrader
	}
	return toSerialize, nil
}

type NullableTokenizationERC20WrappedTokenPermissionParams struct {
	value *TokenizationERC20WrappedTokenPermissionParams
	isSet bool
}

func (v NullableTokenizationERC20WrappedTokenPermissionParams) Get() *TokenizationERC20WrappedTokenPermissionParams {
	return v.value
}

func (v *NullableTokenizationERC20WrappedTokenPermissionParams) Set(val *TokenizationERC20WrappedTokenPermissionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationERC20WrappedTokenPermissionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationERC20WrappedTokenPermissionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationERC20WrappedTokenPermissionParams(val *TokenizationERC20WrappedTokenPermissionParams) *NullableTokenizationERC20WrappedTokenPermissionParams {
	return &NullableTokenizationERC20WrappedTokenPermissionParams{value: val, isSet: true}
}

func (v NullableTokenizationERC20WrappedTokenPermissionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationERC20WrappedTokenPermissionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


