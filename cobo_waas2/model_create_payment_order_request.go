/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePaymentOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePaymentOrderRequest{}

// CreatePaymentOrderRequest struct for CreatePaymentOrderRequest
type CreatePaymentOrderRequest struct {
	// The merchant ID.
	MerchantId string `json:"merchant_id"`
	// The ID of the cryptocurrency used for payment. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId string `json:"token_id"`
	// The fiat currency for the base order amount and the developer fee. Currently, only `USD` is supported.  If left empty, both `order_amount` and `fee_amount` will be denominated in the cryptocurrency specified by `token_id` 
	Currency *string `json:"currency,omitempty"`
	//  The base amount of the order, excluding the developer fee (specified in `fee_amount`), in the currency specified by `currency`. If `currency` is not specified, the amount is in the cryptocurrency specified by `token_id`.   Values must be greater than `0` and contain two decimal places.  
	OrderAmount string `json:"order_amount"`
	//  The developer fee for the order, in the currency specified by `currency`. If `currency` is not specified, the fee is in the cryptocurrency specified by `token_id`.  If you are a merchant directly serving payers, set this field to `0`. Developer fees are only relevant for platforms like payment service providers (PSPs) that charge fees to their downstream merchants.  The developer fee is added to the base amount (`order_amount`) to determine the final charge. For example: - Base amount (`order_amount`): \"100.00\" - Developer fee (`fee_amount`): \"2.00\"  - Total charged to customer: \"102.00\"  Values can contain up to two decimal places. 
	FeeAmount string `json:"fee_amount"`
	// A unique reference code assigned by the merchant to identify this order in their system. The code should have a maximum length of 128 characters.
	MerchantOrderCode *string `json:"merchant_order_code,omitempty"`
	// A unique reference code assigned by you as a developer to identify this order in your system. This code must be unique across all orders in your system. The code should have a maximum length of 128 characters. 
	PspOrderCode string `json:"psp_order_code"`
	// The number of seconds until the pay-in order expires, counted from when the request is sent. For example, if set to `1800`, the order will expire in 30 minutes. Must be greater than zero and cannot exceed 3 hours (10800 seconds). After expiration:  - The order status becomes final and cannot be changed - The `received_token_amount` field will no longer be updated - Funds received after expiration will be categorized as late payments and can only be settled from the developer balance. - A late payment will trigger a `transactionLate` webhook event. 
	ExpiredIn *int32 `json:"expired_in,omitempty"`
	// Whether to allocate a dedicated address for this order.  - `true`: A dedicated address will be allocated for this order. - `false`: A shared address from the address pool will be used. 
	UseDedicatedAddress *bool `json:"use_dedicated_address,omitempty"`
}

type _CreatePaymentOrderRequest CreatePaymentOrderRequest

// NewCreatePaymentOrderRequest instantiates a new CreatePaymentOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePaymentOrderRequest(merchantId string, tokenId string, orderAmount string, feeAmount string, pspOrderCode string) *CreatePaymentOrderRequest {
	this := CreatePaymentOrderRequest{}
	this.MerchantId = merchantId
	this.TokenId = tokenId
	var currency string = ""
	this.Currency = &currency
	this.OrderAmount = orderAmount
	this.FeeAmount = feeAmount
	this.PspOrderCode = pspOrderCode
	var expiredIn int32 = 1800
	this.ExpiredIn = &expiredIn
	return &this
}

// NewCreatePaymentOrderRequestWithDefaults instantiates a new CreatePaymentOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePaymentOrderRequestWithDefaults() *CreatePaymentOrderRequest {
	this := CreatePaymentOrderRequest{}
	var currency string = ""
	this.Currency = &currency
	var expiredIn int32 = 1800
	this.ExpiredIn = &expiredIn
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *CreatePaymentOrderRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *CreatePaymentOrderRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetTokenId returns the TokenId field value
func (o *CreatePaymentOrderRequest) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *CreatePaymentOrderRequest) SetTokenId(v string) {
	o.TokenId = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreatePaymentOrderRequest) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreatePaymentOrderRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreatePaymentOrderRequest) SetCurrency(v string) {
	o.Currency = &v
}

// GetOrderAmount returns the OrderAmount field value
func (o *CreatePaymentOrderRequest) GetOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmount, true
}

// SetOrderAmount sets field value
func (o *CreatePaymentOrderRequest) SetOrderAmount(v string) {
	o.OrderAmount = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *CreatePaymentOrderRequest) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *CreatePaymentOrderRequest) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetMerchantOrderCode returns the MerchantOrderCode field value if set, zero value otherwise.
func (o *CreatePaymentOrderRequest) GetMerchantOrderCode() string {
	if o == nil || IsNil(o.MerchantOrderCode) {
		var ret string
		return ret
	}
	return *o.MerchantOrderCode
}

// GetMerchantOrderCodeOk returns a tuple with the MerchantOrderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetMerchantOrderCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantOrderCode) {
		return nil, false
	}
	return o.MerchantOrderCode, true
}

// HasMerchantOrderCode returns a boolean if a field has been set.
func (o *CreatePaymentOrderRequest) HasMerchantOrderCode() bool {
	if o != nil && !IsNil(o.MerchantOrderCode) {
		return true
	}

	return false
}

// SetMerchantOrderCode gets a reference to the given string and assigns it to the MerchantOrderCode field.
func (o *CreatePaymentOrderRequest) SetMerchantOrderCode(v string) {
	o.MerchantOrderCode = &v
}

// GetPspOrderCode returns the PspOrderCode field value
func (o *CreatePaymentOrderRequest) GetPspOrderCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PspOrderCode
}

// GetPspOrderCodeOk returns a tuple with the PspOrderCode field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetPspOrderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PspOrderCode, true
}

// SetPspOrderCode sets field value
func (o *CreatePaymentOrderRequest) SetPspOrderCode(v string) {
	o.PspOrderCode = v
}

// GetExpiredIn returns the ExpiredIn field value if set, zero value otherwise.
func (o *CreatePaymentOrderRequest) GetExpiredIn() int32 {
	if o == nil || IsNil(o.ExpiredIn) {
		var ret int32
		return ret
	}
	return *o.ExpiredIn
}

// GetExpiredInOk returns a tuple with the ExpiredIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetExpiredInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredIn) {
		return nil, false
	}
	return o.ExpiredIn, true
}

// HasExpiredIn returns a boolean if a field has been set.
func (o *CreatePaymentOrderRequest) HasExpiredIn() bool {
	if o != nil && !IsNil(o.ExpiredIn) {
		return true
	}

	return false
}

// SetExpiredIn gets a reference to the given int32 and assigns it to the ExpiredIn field.
func (o *CreatePaymentOrderRequest) SetExpiredIn(v int32) {
	o.ExpiredIn = &v
}

// GetUseDedicatedAddress returns the UseDedicatedAddress field value if set, zero value otherwise.
func (o *CreatePaymentOrderRequest) GetUseDedicatedAddress() bool {
	if o == nil || IsNil(o.UseDedicatedAddress) {
		var ret bool
		return ret
	}
	return *o.UseDedicatedAddress
}

// GetUseDedicatedAddressOk returns a tuple with the UseDedicatedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentOrderRequest) GetUseDedicatedAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDedicatedAddress) {
		return nil, false
	}
	return o.UseDedicatedAddress, true
}

// HasUseDedicatedAddress returns a boolean if a field has been set.
func (o *CreatePaymentOrderRequest) HasUseDedicatedAddress() bool {
	if o != nil && !IsNil(o.UseDedicatedAddress) {
		return true
	}

	return false
}

// SetUseDedicatedAddress gets a reference to the given bool and assigns it to the UseDedicatedAddress field.
func (o *CreatePaymentOrderRequest) SetUseDedicatedAddress(v bool) {
	o.UseDedicatedAddress = &v
}

func (o CreatePaymentOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePaymentOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["order_amount"] = o.OrderAmount
	toSerialize["fee_amount"] = o.FeeAmount
	if !IsNil(o.MerchantOrderCode) {
		toSerialize["merchant_order_code"] = o.MerchantOrderCode
	}
	toSerialize["psp_order_code"] = o.PspOrderCode
	if !IsNil(o.ExpiredIn) {
		toSerialize["expired_in"] = o.ExpiredIn
	}
	if !IsNil(o.UseDedicatedAddress) {
		toSerialize["use_dedicated_address"] = o.UseDedicatedAddress
	}
	return toSerialize, nil
}

func (o *CreatePaymentOrderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"token_id",
		"order_amount",
		"fee_amount",
		"psp_order_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePaymentOrderRequest := _CreatePaymentOrderRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePaymentOrderRequest)

	if err != nil {
		return err
	}

	*o = CreatePaymentOrderRequest(varCreatePaymentOrderRequest)

	return err
}

type NullableCreatePaymentOrderRequest struct {
	value *CreatePaymentOrderRequest
	isSet bool
}

func (v NullableCreatePaymentOrderRequest) Get() *CreatePaymentOrderRequest {
	return v.value
}

func (v *NullableCreatePaymentOrderRequest) Set(val *CreatePaymentOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePaymentOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePaymentOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePaymentOrderRequest(val *CreatePaymentOrderRequest) *NullableCreatePaymentOrderRequest {
	return &NullableCreatePaymentOrderRequest{value: val, isSet: true}
}

func (v NullableCreatePaymentOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePaymentOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


