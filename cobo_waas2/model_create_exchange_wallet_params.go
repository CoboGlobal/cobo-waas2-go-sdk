/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateExchangeWalletParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateExchangeWalletParams{}

// CreateExchangeWalletParams struct for CreateExchangeWalletParams
type CreateExchangeWalletParams struct {
	// The wallet name.
	Name string `json:"name"`
	WalletType WalletType `json:"wallet_type"`
	WalletSubtype WalletSubtype `json:"wallet_subtype"`
	ExchangeId ExchangeId `json:"exchange_id"`
	// The API key of your exchange account.
	Apikey string `json:"apikey"`
	// The API secret of your exchange account.
	Secret string `json:"secret"`
	// The passphrase of your exchange account.
	Passphrase *string `json:"passphrase,omitempty"`
	// The memo you use when applying for the API key of your exchange account.
	Memo *string `json:"memo,omitempty"`
	// The identifier of your exchange account. - For Binance, this is email address of your exchange account. - For OKX, this is the user name of your exchange account. 
	AccountIdentify *string `json:"account_identify,omitempty"`
	// The GA code for the exchange.
	GaCode *string `json:"ga_code,omitempty"`
	// The ID of the Exchange Wallet (Main Account).
	MainWalletId *string `json:"main_wallet_id,omitempty"`
}

type _CreateExchangeWalletParams CreateExchangeWalletParams

// NewCreateExchangeWalletParams instantiates a new CreateExchangeWalletParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExchangeWalletParams(name string, walletType WalletType, walletSubtype WalletSubtype, exchangeId ExchangeId, apikey string, secret string) *CreateExchangeWalletParams {
	this := CreateExchangeWalletParams{}
	this.Name = name
	this.WalletType = walletType
	this.WalletSubtype = walletSubtype
	this.ExchangeId = exchangeId
	this.Apikey = apikey
	this.Secret = secret
	return &this
}

// NewCreateExchangeWalletParamsWithDefaults instantiates a new CreateExchangeWalletParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExchangeWalletParamsWithDefaults() *CreateExchangeWalletParams {
	this := CreateExchangeWalletParams{}
	return &this
}

// GetName returns the Name field value
func (o *CreateExchangeWalletParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateExchangeWalletParams) SetName(v string) {
	o.Name = v
}

// GetWalletType returns the WalletType field value
func (o *CreateExchangeWalletParams) GetWalletType() WalletType {
	if o == nil {
		var ret WalletType
		return ret
	}

	return o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletType, true
}

// SetWalletType sets field value
func (o *CreateExchangeWalletParams) SetWalletType(v WalletType) {
	o.WalletType = v
}

// GetWalletSubtype returns the WalletSubtype field value
func (o *CreateExchangeWalletParams) GetWalletSubtype() WalletSubtype {
	if o == nil {
		var ret WalletSubtype
		return ret
	}

	return o.WalletSubtype
}

// GetWalletSubtypeOk returns a tuple with the WalletSubtype field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetWalletSubtypeOk() (*WalletSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletSubtype, true
}

// SetWalletSubtype sets field value
func (o *CreateExchangeWalletParams) SetWalletSubtype(v WalletSubtype) {
	o.WalletSubtype = v
}

// GetExchangeId returns the ExchangeId field value
func (o *CreateExchangeWalletParams) GetExchangeId() ExchangeId {
	if o == nil {
		var ret ExchangeId
		return ret
	}

	return o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetExchangeIdOk() (*ExchangeId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeId, true
}

// SetExchangeId sets field value
func (o *CreateExchangeWalletParams) SetExchangeId(v ExchangeId) {
	o.ExchangeId = v
}

// GetApikey returns the Apikey field value
func (o *CreateExchangeWalletParams) GetApikey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Apikey
}

// GetApikeyOk returns a tuple with the Apikey field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetApikeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Apikey, true
}

// SetApikey sets field value
func (o *CreateExchangeWalletParams) SetApikey(v string) {
	o.Apikey = v
}

// GetSecret returns the Secret field value
func (o *CreateExchangeWalletParams) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *CreateExchangeWalletParams) SetSecret(v string) {
	o.Secret = v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *CreateExchangeWalletParams) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *CreateExchangeWalletParams) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *CreateExchangeWalletParams) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *CreateExchangeWalletParams) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *CreateExchangeWalletParams) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *CreateExchangeWalletParams) SetMemo(v string) {
	o.Memo = &v
}

// GetAccountIdentify returns the AccountIdentify field value if set, zero value otherwise.
func (o *CreateExchangeWalletParams) GetAccountIdentify() string {
	if o == nil || IsNil(o.AccountIdentify) {
		var ret string
		return ret
	}
	return *o.AccountIdentify
}

// GetAccountIdentifyOk returns a tuple with the AccountIdentify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetAccountIdentifyOk() (*string, bool) {
	if o == nil || IsNil(o.AccountIdentify) {
		return nil, false
	}
	return o.AccountIdentify, true
}

// HasAccountIdentify returns a boolean if a field has been set.
func (o *CreateExchangeWalletParams) HasAccountIdentify() bool {
	if o != nil && !IsNil(o.AccountIdentify) {
		return true
	}

	return false
}

// SetAccountIdentify gets a reference to the given string and assigns it to the AccountIdentify field.
func (o *CreateExchangeWalletParams) SetAccountIdentify(v string) {
	o.AccountIdentify = &v
}

// GetGaCode returns the GaCode field value if set, zero value otherwise.
func (o *CreateExchangeWalletParams) GetGaCode() string {
	if o == nil || IsNil(o.GaCode) {
		var ret string
		return ret
	}
	return *o.GaCode
}

// GetGaCodeOk returns a tuple with the GaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetGaCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GaCode) {
		return nil, false
	}
	return o.GaCode, true
}

// HasGaCode returns a boolean if a field has been set.
func (o *CreateExchangeWalletParams) HasGaCode() bool {
	if o != nil && !IsNil(o.GaCode) {
		return true
	}

	return false
}

// SetGaCode gets a reference to the given string and assigns it to the GaCode field.
func (o *CreateExchangeWalletParams) SetGaCode(v string) {
	o.GaCode = &v
}

// GetMainWalletId returns the MainWalletId field value if set, zero value otherwise.
func (o *CreateExchangeWalletParams) GetMainWalletId() string {
	if o == nil || IsNil(o.MainWalletId) {
		var ret string
		return ret
	}
	return *o.MainWalletId
}

// GetMainWalletIdOk returns a tuple with the MainWalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExchangeWalletParams) GetMainWalletIdOk() (*string, bool) {
	if o == nil || IsNil(o.MainWalletId) {
		return nil, false
	}
	return o.MainWalletId, true
}

// HasMainWalletId returns a boolean if a field has been set.
func (o *CreateExchangeWalletParams) HasMainWalletId() bool {
	if o != nil && !IsNil(o.MainWalletId) {
		return true
	}

	return false
}

// SetMainWalletId gets a reference to the given string and assigns it to the MainWalletId field.
func (o *CreateExchangeWalletParams) SetMainWalletId(v string) {
	o.MainWalletId = &v
}

func (o CreateExchangeWalletParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateExchangeWalletParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["wallet_type"] = o.WalletType
	toSerialize["wallet_subtype"] = o.WalletSubtype
	toSerialize["exchange_id"] = o.ExchangeId
	toSerialize["apikey"] = o.Apikey
	toSerialize["secret"] = o.Secret
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.AccountIdentify) {
		toSerialize["account_identify"] = o.AccountIdentify
	}
	if !IsNil(o.GaCode) {
		toSerialize["ga_code"] = o.GaCode
	}
	if !IsNil(o.MainWalletId) {
		toSerialize["main_wallet_id"] = o.MainWalletId
	}
	return toSerialize, nil
}

func (o *CreateExchangeWalletParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"wallet_type",
		"wallet_subtype",
		"exchange_id",
		"apikey",
		"secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateExchangeWalletParams := _CreateExchangeWalletParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateExchangeWalletParams)

	if err != nil {
		return err
	}

	*o = CreateExchangeWalletParams(varCreateExchangeWalletParams)

	return err
}

type NullableCreateExchangeWalletParams struct {
	value *CreateExchangeWalletParams
	isSet bool
}

func (v NullableCreateExchangeWalletParams) Get() *CreateExchangeWalletParams {
	return v.value
}

func (v *NullableCreateExchangeWalletParams) Set(val *CreateExchangeWalletParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExchangeWalletParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExchangeWalletParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExchangeWalletParams(val *CreateExchangeWalletParams) *NullableCreateExchangeWalletParams {
	return &NullableCreateExchangeWalletParams{value: val, isSet: true}
}

func (v NullableCreateExchangeWalletParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExchangeWalletParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


