/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationHoldingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationHoldingInfo{}

// TokenizationHoldingInfo struct for TokenizationHoldingInfo
type TokenizationHoldingInfo struct {
	// The unique identifier of the wallet holding the token.
	WalletId string `json:"wallet_id"`
	// The name of the wallet.
	WalletName *string `json:"wallet_name,omitempty"`
	// The address holding the token.
	Address string `json:"address"`
	// The token balance held by this address.
	Balance string `json:"balance"`
	// The label of the address.
	AddressLabel *string `json:"address_label,omitempty"`
}

type _TokenizationHoldingInfo TokenizationHoldingInfo

// NewTokenizationHoldingInfo instantiates a new TokenizationHoldingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationHoldingInfo(walletId string, address string, balance string) *TokenizationHoldingInfo {
	this := TokenizationHoldingInfo{}
	this.WalletId = walletId
	this.Address = address
	this.Balance = balance
	return &this
}

// NewTokenizationHoldingInfoWithDefaults instantiates a new TokenizationHoldingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationHoldingInfoWithDefaults() *TokenizationHoldingInfo {
	this := TokenizationHoldingInfo{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *TokenizationHoldingInfo) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *TokenizationHoldingInfo) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *TokenizationHoldingInfo) SetWalletId(v string) {
	o.WalletId = v
}

// GetWalletName returns the WalletName field value if set, zero value otherwise.
func (o *TokenizationHoldingInfo) GetWalletName() string {
	if o == nil || IsNil(o.WalletName) {
		var ret string
		return ret
	}
	return *o.WalletName
}

// GetWalletNameOk returns a tuple with the WalletName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationHoldingInfo) GetWalletNameOk() (*string, bool) {
	if o == nil || IsNil(o.WalletName) {
		return nil, false
	}
	return o.WalletName, true
}

// HasWalletName returns a boolean if a field has been set.
func (o *TokenizationHoldingInfo) HasWalletName() bool {
	if o != nil && !IsNil(o.WalletName) {
		return true
	}

	return false
}

// SetWalletName gets a reference to the given string and assigns it to the WalletName field.
func (o *TokenizationHoldingInfo) SetWalletName(v string) {
	o.WalletName = &v
}

// GetAddress returns the Address field value
func (o *TokenizationHoldingInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenizationHoldingInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenizationHoldingInfo) SetAddress(v string) {
	o.Address = v
}

// GetBalance returns the Balance field value
func (o *TokenizationHoldingInfo) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *TokenizationHoldingInfo) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *TokenizationHoldingInfo) SetBalance(v string) {
	o.Balance = v
}

// GetAddressLabel returns the AddressLabel field value if set, zero value otherwise.
func (o *TokenizationHoldingInfo) GetAddressLabel() string {
	if o == nil || IsNil(o.AddressLabel) {
		var ret string
		return ret
	}
	return *o.AddressLabel
}

// GetAddressLabelOk returns a tuple with the AddressLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationHoldingInfo) GetAddressLabelOk() (*string, bool) {
	if o == nil || IsNil(o.AddressLabel) {
		return nil, false
	}
	return o.AddressLabel, true
}

// HasAddressLabel returns a boolean if a field has been set.
func (o *TokenizationHoldingInfo) HasAddressLabel() bool {
	if o != nil && !IsNil(o.AddressLabel) {
		return true
	}

	return false
}

// SetAddressLabel gets a reference to the given string and assigns it to the AddressLabel field.
func (o *TokenizationHoldingInfo) SetAddressLabel(v string) {
	o.AddressLabel = &v
}

func (o TokenizationHoldingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationHoldingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.WalletName) {
		toSerialize["wallet_name"] = o.WalletName
	}
	toSerialize["address"] = o.Address
	toSerialize["balance"] = o.Balance
	if !IsNil(o.AddressLabel) {
		toSerialize["address_label"] = o.AddressLabel
	}
	return toSerialize, nil
}

func (o *TokenizationHoldingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"address",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationHoldingInfo := _TokenizationHoldingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationHoldingInfo)

	if err != nil {
		return err
	}

	*o = TokenizationHoldingInfo(varTokenizationHoldingInfo)

	return err
}

type NullableTokenizationHoldingInfo struct {
	value *TokenizationHoldingInfo
	isSet bool
}

func (v NullableTokenizationHoldingInfo) Get() *TokenizationHoldingInfo {
	return v.value
}

func (v *NullableTokenizationHoldingInfo) Set(val *TokenizationHoldingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationHoldingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationHoldingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationHoldingInfo(val *TokenizationHoldingInfo) *NullableTokenizationHoldingInfo {
	return &NullableTokenizationHoldingInfo{value: val, isSet: true}
}

func (v NullableTokenizationHoldingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationHoldingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


