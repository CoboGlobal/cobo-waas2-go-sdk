/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SweepToAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SweepToAddress{}

// SweepToAddress Information about the sweep-to address.
type SweepToAddress struct {
	// The wallet address.
	Address string `json:"address"`
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
	ChainId string `json:"chain_id"`
	Status *SweepToAddressStatus `json:"status,omitempty"`
}

type _SweepToAddress SweepToAddress

// NewSweepToAddress instantiates a new SweepToAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSweepToAddress(address string, chainId string) *SweepToAddress {
	this := SweepToAddress{}
	this.Address = address
	this.ChainId = chainId
	return &this
}

// NewSweepToAddressWithDefaults instantiates a new SweepToAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSweepToAddressWithDefaults() *SweepToAddress {
	this := SweepToAddress{}
	return &this
}

// GetAddress returns the Address field value
func (o *SweepToAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *SweepToAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *SweepToAddress) SetAddress(v string) {
	o.Address = v
}

// GetChainId returns the ChainId field value
func (o *SweepToAddress) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SweepToAddress) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SweepToAddress) SetChainId(v string) {
	o.ChainId = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SweepToAddress) GetStatus() SweepToAddressStatus {
	if o == nil || IsNil(o.Status) {
		var ret SweepToAddressStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SweepToAddress) GetStatusOk() (*SweepToAddressStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SweepToAddress) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SweepToAddressStatus and assigns it to the Status field.
func (o *SweepToAddress) SetStatus(v SweepToAddressStatus) {
	o.Status = &v
}

func (o SweepToAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SweepToAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *SweepToAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSweepToAddress := _SweepToAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSweepToAddress)

	if err != nil {
		return err
	}

	*o = SweepToAddress(varSweepToAddress)

	return err
}

type NullableSweepToAddress struct {
	value *SweepToAddress
	isSet bool
}

func (v NullableSweepToAddress) Get() *SweepToAddress {
	return v.value
}

func (v *NullableSweepToAddress) Set(val *SweepToAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepToAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepToAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepToAddress(val *SweepToAddress) *NullableSweepToAddress {
	return &NullableSweepToAddress{value: val, isSet: true}
}

func (v NullableSweepToAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepToAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


