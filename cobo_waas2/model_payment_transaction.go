/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentTransaction{}

// PaymentTransaction struct for PaymentTransaction
type PaymentTransaction struct {
	// Unique identifier for the transaction.
	TxId string `json:"tx_id"`
	// The blockchain transaction hash, may be initially null and populated after submission.
	TxHash *string `json:"tx_hash,omitempty"`
	// Source cryptocurrency address for the transaction.
	FromAddress string `json:"from_address"`
	// Destination cryptocurrency address for the transaction.
	ToAddress string `json:"to_address"`
	// The amount of cryptocurrency transferred, as a decimal string.
	Amount string `json:"amount"`
	Status TransactionStatus `json:"status"`
	// The time when the transaction was created, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp int64 `json:"created_timestamp"`
	// The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.
	UpdatedTimestamp int64 `json:"updated_timestamp"`
}

type _PaymentTransaction PaymentTransaction

// NewPaymentTransaction instantiates a new PaymentTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentTransaction(txId string, fromAddress string, toAddress string, amount string, status TransactionStatus, createdTimestamp int64, updatedTimestamp int64) *PaymentTransaction {
	this := PaymentTransaction{}
	this.TxId = txId
	this.FromAddress = fromAddress
	this.ToAddress = toAddress
	this.Amount = amount
	this.Status = status
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewPaymentTransactionWithDefaults instantiates a new PaymentTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentTransactionWithDefaults() *PaymentTransaction {
	this := PaymentTransaction{}
	return &this
}

// GetTxId returns the TxId field value
func (o *PaymentTransaction) GetTxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetTxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *PaymentTransaction) SetTxId(v string) {
	o.TxId = v
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *PaymentTransaction) GetTxHash() string {
	if o == nil || IsNil(o.TxHash) {
		var ret string
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *PaymentTransaction) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given string and assigns it to the TxHash field.
func (o *PaymentTransaction) SetTxHash(v string) {
	o.TxHash = &v
}

// GetFromAddress returns the FromAddress field value
func (o *PaymentTransaction) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *PaymentTransaction) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetToAddress returns the ToAddress field value
func (o *PaymentTransaction) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *PaymentTransaction) SetToAddress(v string) {
	o.ToAddress = v
}

// GetAmount returns the Amount field value
func (o *PaymentTransaction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentTransaction) SetAmount(v string) {
	o.Amount = v
}

// GetStatus returns the Status field value
func (o *PaymentTransaction) GetStatus() TransactionStatus {
	if o == nil {
		var ret TransactionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentTransaction) SetStatus(v TransactionStatus) {
	o.Status = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *PaymentTransaction) GetCreatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *PaymentTransaction) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *PaymentTransaction) GetUpdatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *PaymentTransaction) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *PaymentTransaction) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = v
}

func (o PaymentTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tx_id"] = o.TxId
	if !IsNil(o.TxHash) {
		toSerialize["tx_hash"] = o.TxHash
	}
	toSerialize["from_address"] = o.FromAddress
	toSerialize["to_address"] = o.ToAddress
	toSerialize["amount"] = o.Amount
	toSerialize["status"] = o.Status
	toSerialize["created_timestamp"] = o.CreatedTimestamp
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	return toSerialize, nil
}

func (o *PaymentTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tx_id",
		"from_address",
		"to_address",
		"amount",
		"status",
		"created_timestamp",
		"updated_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentTransaction := _PaymentTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentTransaction)

	if err != nil {
		return err
	}

	*o = PaymentTransaction(varPaymentTransaction)

	return err
}

type NullablePaymentTransaction struct {
	value *PaymentTransaction
	isSet bool
}

func (v NullablePaymentTransaction) Get() *PaymentTransaction {
	return v.value
}

func (v *NullablePaymentTransaction) Set(val *PaymentTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTransaction(val *PaymentTransaction) *NullablePaymentTransaction {
	return &NullablePaymentTransaction{value: val, isSet: true}
}

func (v NullablePaymentTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


