/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmEIP712MessageSignDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmEIP712MessageSignDestination{}

// EvmEIP712MessageSignDestination The information about the destination `EVM_EIP_712_Signature`.
type EvmEIP712MessageSignDestination struct {
	DestinationType MessageSignDestinationType `json:"destination_type"`
	// The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.
	StructuredData map[string]interface{} `json:"structured_data"`
}

type _EvmEIP712MessageSignDestination EvmEIP712MessageSignDestination

// NewEvmEIP712MessageSignDestination instantiates a new EvmEIP712MessageSignDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmEIP712MessageSignDestination(destinationType MessageSignDestinationType, structuredData map[string]interface{}) *EvmEIP712MessageSignDestination {
	this := EvmEIP712MessageSignDestination{}
	this.DestinationType = destinationType
	this.StructuredData = structuredData
	return &this
}

// NewEvmEIP712MessageSignDestinationWithDefaults instantiates a new EvmEIP712MessageSignDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmEIP712MessageSignDestinationWithDefaults() *EvmEIP712MessageSignDestination {
	this := EvmEIP712MessageSignDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *EvmEIP712MessageSignDestination) GetDestinationType() MessageSignDestinationType {
	if o == nil {
		var ret MessageSignDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *EvmEIP712MessageSignDestination) GetDestinationTypeOk() (*MessageSignDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *EvmEIP712MessageSignDestination) SetDestinationType(v MessageSignDestinationType) {
	o.DestinationType = v
}

// GetStructuredData returns the StructuredData field value
func (o *EvmEIP712MessageSignDestination) GetStructuredData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StructuredData
}

// GetStructuredDataOk returns a tuple with the StructuredData field value
// and a boolean to check if the value has been set.
func (o *EvmEIP712MessageSignDestination) GetStructuredDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StructuredData, true
}

// SetStructuredData sets field value
func (o *EvmEIP712MessageSignDestination) SetStructuredData(v map[string]interface{}) {
	o.StructuredData = v
}

func (o EvmEIP712MessageSignDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmEIP712MessageSignDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["structured_data"] = o.StructuredData
	return toSerialize, nil
}

func (o *EvmEIP712MessageSignDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
		"structured_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmEIP712MessageSignDestination := _EvmEIP712MessageSignDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmEIP712MessageSignDestination)

	if err != nil {
		return err
	}

	*o = EvmEIP712MessageSignDestination(varEvmEIP712MessageSignDestination)

	return err
}

type NullableEvmEIP712MessageSignDestination struct {
	value *EvmEIP712MessageSignDestination
	isSet bool
}

func (v NullableEvmEIP712MessageSignDestination) Get() *EvmEIP712MessageSignDestination {
	return v.value
}

func (v *NullableEvmEIP712MessageSignDestination) Set(val *EvmEIP712MessageSignDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmEIP712MessageSignDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmEIP712MessageSignDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmEIP712MessageSignDestination(val *EvmEIP712MessageSignDestination) *NullableEvmEIP712MessageSignDestination {
	return &NullableEvmEIP712MessageSignDestination{value: val, isSet: true}
}

func (v NullableEvmEIP712MessageSignDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmEIP712MessageSignDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


