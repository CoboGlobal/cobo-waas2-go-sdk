/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MerchantBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantBalance{}

// MerchantBalance struct for MerchantBalance
type MerchantBalance struct {
	// The merchant ID.
	MerchantId string `json:"merchant_id"`
	// The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.
	TokenId string `json:"token_id"`
	AcquiringType AcquiringType `json:"acquiring_type"`
	// The total amount of the token that has been received by the merchant.
	TotalReceivedAmount *string `json:"total_received_amount,omitempty"`
	// The total amount of the token that has been paid out from the merchant's balance.
	SettledAmount *string `json:"settled_amount,omitempty"`
	// The total amount of the token that has been refunded from the merchant's balance.
	RefundedAmount *string `json:"refunded_amount,omitempty"`
	//  The total balance of the token available for payout or refund for the merchant.  `total_balance` = `total_received_amount` - `settled_amount` - `refunded_amount`  For more information, please refer to [Amounts and Balances](/v2_cn/payments/amounts-and-balances) 
	TotalBalance *string `json:"total_balance,omitempty"`
	// This field has been deprecated.
	AvailableBalance *string `json:"available_balance,omitempty"`
}

type _MerchantBalance MerchantBalance

// NewMerchantBalance instantiates a new MerchantBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantBalance(merchantId string, tokenId string, acquiringType AcquiringType) *MerchantBalance {
	this := MerchantBalance{}
	this.MerchantId = merchantId
	this.TokenId = tokenId
	this.AcquiringType = acquiringType
	return &this
}

// NewMerchantBalanceWithDefaults instantiates a new MerchantBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantBalanceWithDefaults() *MerchantBalance {
	this := MerchantBalance{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *MerchantBalance) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *MerchantBalance) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetTokenId returns the TokenId field value
func (o *MerchantBalance) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *MerchantBalance) SetTokenId(v string) {
	o.TokenId = v
}

// GetAcquiringType returns the AcquiringType field value
func (o *MerchantBalance) GetAcquiringType() AcquiringType {
	if o == nil {
		var ret AcquiringType
		return ret
	}

	return o.AcquiringType
}

// GetAcquiringTypeOk returns a tuple with the AcquiringType field value
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetAcquiringTypeOk() (*AcquiringType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcquiringType, true
}

// SetAcquiringType sets field value
func (o *MerchantBalance) SetAcquiringType(v AcquiringType) {
	o.AcquiringType = v
}

// GetTotalReceivedAmount returns the TotalReceivedAmount field value if set, zero value otherwise.
func (o *MerchantBalance) GetTotalReceivedAmount() string {
	if o == nil || IsNil(o.TotalReceivedAmount) {
		var ret string
		return ret
	}
	return *o.TotalReceivedAmount
}

// GetTotalReceivedAmountOk returns a tuple with the TotalReceivedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetTotalReceivedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalReceivedAmount) {
		return nil, false
	}
	return o.TotalReceivedAmount, true
}

// HasTotalReceivedAmount returns a boolean if a field has been set.
func (o *MerchantBalance) HasTotalReceivedAmount() bool {
	if o != nil && !IsNil(o.TotalReceivedAmount) {
		return true
	}

	return false
}

// SetTotalReceivedAmount gets a reference to the given string and assigns it to the TotalReceivedAmount field.
func (o *MerchantBalance) SetTotalReceivedAmount(v string) {
	o.TotalReceivedAmount = &v
}

// GetSettledAmount returns the SettledAmount field value if set, zero value otherwise.
func (o *MerchantBalance) GetSettledAmount() string {
	if o == nil || IsNil(o.SettledAmount) {
		var ret string
		return ret
	}
	return *o.SettledAmount
}

// GetSettledAmountOk returns a tuple with the SettledAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetSettledAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SettledAmount) {
		return nil, false
	}
	return o.SettledAmount, true
}

// HasSettledAmount returns a boolean if a field has been set.
func (o *MerchantBalance) HasSettledAmount() bool {
	if o != nil && !IsNil(o.SettledAmount) {
		return true
	}

	return false
}

// SetSettledAmount gets a reference to the given string and assigns it to the SettledAmount field.
func (o *MerchantBalance) SetSettledAmount(v string) {
	o.SettledAmount = &v
}

// GetRefundedAmount returns the RefundedAmount field value if set, zero value otherwise.
func (o *MerchantBalance) GetRefundedAmount() string {
	if o == nil || IsNil(o.RefundedAmount) {
		var ret string
		return ret
	}
	return *o.RefundedAmount
}

// GetRefundedAmountOk returns a tuple with the RefundedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetRefundedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RefundedAmount) {
		return nil, false
	}
	return o.RefundedAmount, true
}

// HasRefundedAmount returns a boolean if a field has been set.
func (o *MerchantBalance) HasRefundedAmount() bool {
	if o != nil && !IsNil(o.RefundedAmount) {
		return true
	}

	return false
}

// SetRefundedAmount gets a reference to the given string and assigns it to the RefundedAmount field.
func (o *MerchantBalance) SetRefundedAmount(v string) {
	o.RefundedAmount = &v
}

// GetTotalBalance returns the TotalBalance field value if set, zero value otherwise.
func (o *MerchantBalance) GetTotalBalance() string {
	if o == nil || IsNil(o.TotalBalance) {
		var ret string
		return ret
	}
	return *o.TotalBalance
}

// GetTotalBalanceOk returns a tuple with the TotalBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetTotalBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalBalance) {
		return nil, false
	}
	return o.TotalBalance, true
}

// HasTotalBalance returns a boolean if a field has been set.
func (o *MerchantBalance) HasTotalBalance() bool {
	if o != nil && !IsNil(o.TotalBalance) {
		return true
	}

	return false
}

// SetTotalBalance gets a reference to the given string and assigns it to the TotalBalance field.
func (o *MerchantBalance) SetTotalBalance(v string) {
	o.TotalBalance = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *MerchantBalance) GetAvailableBalance() string {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret string
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBalance) GetAvailableBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *MerchantBalance) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given string and assigns it to the AvailableBalance field.
func (o *MerchantBalance) SetAvailableBalance(v string) {
	o.AvailableBalance = &v
}

func (o MerchantBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["token_id"] = o.TokenId
	toSerialize["acquiring_type"] = o.AcquiringType
	if !IsNil(o.TotalReceivedAmount) {
		toSerialize["total_received_amount"] = o.TotalReceivedAmount
	}
	if !IsNil(o.SettledAmount) {
		toSerialize["settled_amount"] = o.SettledAmount
	}
	if !IsNil(o.RefundedAmount) {
		toSerialize["refunded_amount"] = o.RefundedAmount
	}
	if !IsNil(o.TotalBalance) {
		toSerialize["total_balance"] = o.TotalBalance
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	return toSerialize, nil
}

func (o *MerchantBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"token_id",
		"acquiring_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerchantBalance := _MerchantBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerchantBalance)

	if err != nil {
		return err
	}

	*o = MerchantBalance(varMerchantBalance)

	return err
}

type NullableMerchantBalance struct {
	value *MerchantBalance
	isSet bool
}

func (v NullableMerchantBalance) Get() *MerchantBalance {
	return v.value
}

func (v *NullableMerchantBalance) Set(val *MerchantBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantBalance(val *MerchantBalance) *NullableMerchantBalance {
	return &NullableMerchantBalance{value: val, isSet: true}
}

func (v NullableMerchantBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


