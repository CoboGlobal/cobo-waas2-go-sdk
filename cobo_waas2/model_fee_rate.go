/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// FeeRate - struct for FeeRate
type FeeRate struct {
	EvmEip1559FeeRate *EvmEip1559FeeRate
	EvmLegacyFeeRate *EvmLegacyFeeRate
	FixedFeeRate *FixedFeeRate
	UtxoFeeRate *UtxoFeeRate
}

// EvmEip1559FeeRateAsFeeRate is a convenience function that returns EvmEip1559FeeRate wrapped in FeeRate
func EvmEip1559FeeRateAsFeeRate(v *EvmEip1559FeeRate) FeeRate {
	return FeeRate{
		EvmEip1559FeeRate: v,
	}
}

// EvmLegacyFeeRateAsFeeRate is a convenience function that returns EvmLegacyFeeRate wrapped in FeeRate
func EvmLegacyFeeRateAsFeeRate(v *EvmLegacyFeeRate) FeeRate {
	return FeeRate{
		EvmLegacyFeeRate: v,
	}
}

// FixedFeeRateAsFeeRate is a convenience function that returns FixedFeeRate wrapped in FeeRate
func FixedFeeRateAsFeeRate(v *FixedFeeRate) FeeRate {
	return FeeRate{
		FixedFeeRate: v,
	}
}

// UtxoFeeRateAsFeeRate is a convenience function that returns UtxoFeeRate wrapped in FeeRate
func UtxoFeeRateAsFeeRate(v *UtxoFeeRate) FeeRate {
	return FeeRate{
		UtxoFeeRate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FeeRate) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EVM_EIP_1559'
	if jsonDict["fee_type"] == "EVM_EIP_1559" {
		// try to unmarshal JSON data into EvmEip1559FeeRate
		err = json.Unmarshal(data, &dst.EvmEip1559FeeRate)
		if err == nil {
			return nil // data stored in dst.EvmEip1559FeeRate, return on the first match
		} else {
			dst.EvmEip1559FeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmEip1559FeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EVM_Legacy'
	if jsonDict["fee_type"] == "EVM_Legacy" {
		// try to unmarshal JSON data into EvmLegacyFeeRate
		err = json.Unmarshal(data, &dst.EvmLegacyFeeRate)
		if err == nil {
			return nil // data stored in dst.EvmLegacyFeeRate, return on the first match
		} else {
			dst.EvmLegacyFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmLegacyFeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Fixed'
	if jsonDict["fee_type"] == "Fixed" {
		// try to unmarshal JSON data into FixedFeeRate
		err = json.Unmarshal(data, &dst.FixedFeeRate)
		if err == nil {
			return nil // data stored in dst.FixedFeeRate, return on the first match
		} else {
			dst.FixedFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as FixedFeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UTXO'
	if jsonDict["fee_type"] == "UTXO" {
		// try to unmarshal JSON data into UtxoFeeRate
		err = json.Unmarshal(data, &dst.UtxoFeeRate)
		if err == nil {
			return nil // data stored in dst.UtxoFeeRate, return on the first match
		} else {
			dst.UtxoFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as UtxoFeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmEip1559FeeRate'
	if jsonDict["fee_type"] == "EvmEip1559FeeRate" {
		// try to unmarshal JSON data into EvmEip1559FeeRate
		err = json.Unmarshal(data, &dst.EvmEip1559FeeRate)
		if err == nil {
			return nil // data stored in dst.EvmEip1559FeeRate, return on the first match
		} else {
			dst.EvmEip1559FeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmEip1559FeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmLegacyFeeRate'
	if jsonDict["fee_type"] == "EvmLegacyFeeRate" {
		// try to unmarshal JSON data into EvmLegacyFeeRate
		err = json.Unmarshal(data, &dst.EvmLegacyFeeRate)
		if err == nil {
			return nil // data stored in dst.EvmLegacyFeeRate, return on the first match
		} else {
			dst.EvmLegacyFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as EvmLegacyFeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FixedFeeRate'
	if jsonDict["fee_type"] == "FixedFeeRate" {
		// try to unmarshal JSON data into FixedFeeRate
		err = json.Unmarshal(data, &dst.FixedFeeRate)
		if err == nil {
			return nil // data stored in dst.FixedFeeRate, return on the first match
		} else {
			dst.FixedFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as FixedFeeRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UtxoFeeRate'
	if jsonDict["fee_type"] == "UtxoFeeRate" {
		// try to unmarshal JSON data into UtxoFeeRate
		err = json.Unmarshal(data, &dst.UtxoFeeRate)
		if err == nil {
			return nil // data stored in dst.UtxoFeeRate, return on the first match
		} else {
			dst.UtxoFeeRate = nil
			return fmt.Errorf("failed to unmarshal FeeRate as UtxoFeeRate: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FeeRate) MarshalJSON() ([]byte, error) {
	if src.EvmEip1559FeeRate != nil {
		return json.Marshal(&src.EvmEip1559FeeRate)
	}

	if src.EvmLegacyFeeRate != nil {
		return json.Marshal(&src.EvmLegacyFeeRate)
	}

	if src.FixedFeeRate != nil {
		return json.Marshal(&src.FixedFeeRate)
	}

	if src.UtxoFeeRate != nil {
		return json.Marshal(&src.UtxoFeeRate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FeeRate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EvmEip1559FeeRate != nil {
		return obj.EvmEip1559FeeRate
	}

	if obj.EvmLegacyFeeRate != nil {
		return obj.EvmLegacyFeeRate
	}

	if obj.FixedFeeRate != nil {
		return obj.FixedFeeRate
	}

	if obj.UtxoFeeRate != nil {
		return obj.UtxoFeeRate
	}

	// all schemas are nil
	return nil
}

type NullableFeeRate struct {
	value *FeeRate
	isSet bool
}

func (v NullableFeeRate) Get() *FeeRate {
	return v.value
}

func (v *NullableFeeRate) Set(val *FeeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRate(val *FeeRate) *NullableFeeRate {
	return &NullableFeeRate{value: val, isSet: true}
}

func (v NullableFeeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


