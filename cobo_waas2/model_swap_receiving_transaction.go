/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapReceivingTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapReceivingTransaction{}

// SwapReceivingTransaction Receiving transaction information for the swap activity.
type SwapReceivingTransaction struct {
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
	ChainId string `json:"chain_id"`
	// The transaction hash.
	TransactionHash *string `json:"transaction_hash,omitempty"`
	// Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer. - `true`: The transaction was executed as a Cobo Loop transfer. - `false`: The transaction was not executed as a Cobo Loop transfer. 
	IsLoop *bool `json:"is_loop,omitempty"`
}

type _SwapReceivingTransaction SwapReceivingTransaction

// NewSwapReceivingTransaction instantiates a new SwapReceivingTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapReceivingTransaction(chainId string) *SwapReceivingTransaction {
	this := SwapReceivingTransaction{}
	this.ChainId = chainId
	return &this
}

// NewSwapReceivingTransactionWithDefaults instantiates a new SwapReceivingTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapReceivingTransactionWithDefaults() *SwapReceivingTransaction {
	this := SwapReceivingTransaction{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *SwapReceivingTransaction) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SwapReceivingTransaction) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SwapReceivingTransaction) SetChainId(v string) {
	o.ChainId = v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *SwapReceivingTransaction) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapReceivingTransaction) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *SwapReceivingTransaction) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *SwapReceivingTransaction) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetIsLoop returns the IsLoop field value if set, zero value otherwise.
func (o *SwapReceivingTransaction) GetIsLoop() bool {
	if o == nil || IsNil(o.IsLoop) {
		var ret bool
		return ret
	}
	return *o.IsLoop
}

// GetIsLoopOk returns a tuple with the IsLoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapReceivingTransaction) GetIsLoopOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoop) {
		return nil, false
	}
	return o.IsLoop, true
}

// HasIsLoop returns a boolean if a field has been set.
func (o *SwapReceivingTransaction) HasIsLoop() bool {
	if o != nil && !IsNil(o.IsLoop) {
		return true
	}

	return false
}

// SetIsLoop gets a reference to the given bool and assigns it to the IsLoop field.
func (o *SwapReceivingTransaction) SetIsLoop(v bool) {
	o.IsLoop = &v
}

func (o SwapReceivingTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapReceivingTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.IsLoop) {
		toSerialize["is_loop"] = o.IsLoop
	}
	return toSerialize, nil
}

func (o *SwapReceivingTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapReceivingTransaction := _SwapReceivingTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapReceivingTransaction)

	if err != nil {
		return err
	}

	*o = SwapReceivingTransaction(varSwapReceivingTransaction)

	return err
}

type NullableSwapReceivingTransaction struct {
	value *SwapReceivingTransaction
	isSet bool
}

func (v NullableSwapReceivingTransaction) Get() *SwapReceivingTransaction {
	return v.value
}

func (v *NullableSwapReceivingTransaction) Set(val *SwapReceivingTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapReceivingTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapReceivingTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapReceivingTransaction(val *SwapReceivingTransaction) *NullableSwapReceivingTransaction {
	return &NullableSwapReceivingTransaction{value: val, isSet: true}
}

func (v NullableSwapReceivingTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapReceivingTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


