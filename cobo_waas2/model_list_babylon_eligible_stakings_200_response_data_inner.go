/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the ListBabylonEligibleStakings200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBabylonEligibleStakings200ResponseDataInner{}

// ListBabylonEligibleStakings200ResponseDataInner The babylon staking position eligible for Phase-2 registration.
type ListBabylonEligibleStakings200ResponseDataInner struct {
	// The ID of the Phase-1 BTC staking position.
	StakingId *string `json:"staking_id,omitempty"`
	BtcAddress *StakingSource `json:"btc_address,omitempty"`
	BabylonAddress *StakingSource `json:"babylon_address,omitempty"`
	// The current amount of BTC staked.
	StakedAmount *string `json:"staked_amount,omitempty"`
	Status *BabylonRegistrationStatus `json:"status,omitempty"`
}

// NewListBabylonEligibleStakings200ResponseDataInner instantiates a new ListBabylonEligibleStakings200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBabylonEligibleStakings200ResponseDataInner() *ListBabylonEligibleStakings200ResponseDataInner {
	this := ListBabylonEligibleStakings200ResponseDataInner{}
	return &this
}

// NewListBabylonEligibleStakings200ResponseDataInnerWithDefaults instantiates a new ListBabylonEligibleStakings200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBabylonEligibleStakings200ResponseDataInnerWithDefaults() *ListBabylonEligibleStakings200ResponseDataInner {
	this := ListBabylonEligibleStakings200ResponseDataInner{}
	return &this
}

// GetStakingId returns the StakingId field value if set, zero value otherwise.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStakingId() string {
	if o == nil || IsNil(o.StakingId) {
		var ret string
		return ret
	}
	return *o.StakingId
}

// GetStakingIdOk returns a tuple with the StakingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStakingIdOk() (*string, bool) {
	if o == nil || IsNil(o.StakingId) {
		return nil, false
	}
	return o.StakingId, true
}

// HasStakingId returns a boolean if a field has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) HasStakingId() bool {
	if o != nil && !IsNil(o.StakingId) {
		return true
	}

	return false
}

// SetStakingId gets a reference to the given string and assigns it to the StakingId field.
func (o *ListBabylonEligibleStakings200ResponseDataInner) SetStakingId(v string) {
	o.StakingId = &v
}

// GetBtcAddress returns the BtcAddress field value if set, zero value otherwise.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetBtcAddress() StakingSource {
	if o == nil || IsNil(o.BtcAddress) {
		var ret StakingSource
		return ret
	}
	return *o.BtcAddress
}

// GetBtcAddressOk returns a tuple with the BtcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetBtcAddressOk() (*StakingSource, bool) {
	if o == nil || IsNil(o.BtcAddress) {
		return nil, false
	}
	return o.BtcAddress, true
}

// HasBtcAddress returns a boolean if a field has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) HasBtcAddress() bool {
	if o != nil && !IsNil(o.BtcAddress) {
		return true
	}

	return false
}

// SetBtcAddress gets a reference to the given StakingSource and assigns it to the BtcAddress field.
func (o *ListBabylonEligibleStakings200ResponseDataInner) SetBtcAddress(v StakingSource) {
	o.BtcAddress = &v
}

// GetBabylonAddress returns the BabylonAddress field value if set, zero value otherwise.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetBabylonAddress() StakingSource {
	if o == nil || IsNil(o.BabylonAddress) {
		var ret StakingSource
		return ret
	}
	return *o.BabylonAddress
}

// GetBabylonAddressOk returns a tuple with the BabylonAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetBabylonAddressOk() (*StakingSource, bool) {
	if o == nil || IsNil(o.BabylonAddress) {
		return nil, false
	}
	return o.BabylonAddress, true
}

// HasBabylonAddress returns a boolean if a field has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) HasBabylonAddress() bool {
	if o != nil && !IsNil(o.BabylonAddress) {
		return true
	}

	return false
}

// SetBabylonAddress gets a reference to the given StakingSource and assigns it to the BabylonAddress field.
func (o *ListBabylonEligibleStakings200ResponseDataInner) SetBabylonAddress(v StakingSource) {
	o.BabylonAddress = &v
}

// GetStakedAmount returns the StakedAmount field value if set, zero value otherwise.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStakedAmount() string {
	if o == nil || IsNil(o.StakedAmount) {
		var ret string
		return ret
	}
	return *o.StakedAmount
}

// GetStakedAmountOk returns a tuple with the StakedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStakedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.StakedAmount) {
		return nil, false
	}
	return o.StakedAmount, true
}

// HasStakedAmount returns a boolean if a field has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) HasStakedAmount() bool {
	if o != nil && !IsNil(o.StakedAmount) {
		return true
	}

	return false
}

// SetStakedAmount gets a reference to the given string and assigns it to the StakedAmount field.
func (o *ListBabylonEligibleStakings200ResponseDataInner) SetStakedAmount(v string) {
	o.StakedAmount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStatus() BabylonRegistrationStatus {
	if o == nil || IsNil(o.Status) {
		var ret BabylonRegistrationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) GetStatusOk() (*BabylonRegistrationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ListBabylonEligibleStakings200ResponseDataInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BabylonRegistrationStatus and assigns it to the Status field.
func (o *ListBabylonEligibleStakings200ResponseDataInner) SetStatus(v BabylonRegistrationStatus) {
	o.Status = &v
}

func (o ListBabylonEligibleStakings200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBabylonEligibleStakings200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StakingId) {
		toSerialize["staking_id"] = o.StakingId
	}
	if !IsNil(o.BtcAddress) {
		toSerialize["btc_address"] = o.BtcAddress
	}
	if !IsNil(o.BabylonAddress) {
		toSerialize["babylon_address"] = o.BabylonAddress
	}
	if !IsNil(o.StakedAmount) {
		toSerialize["staked_amount"] = o.StakedAmount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableListBabylonEligibleStakings200ResponseDataInner struct {
	value *ListBabylonEligibleStakings200ResponseDataInner
	isSet bool
}

func (v NullableListBabylonEligibleStakings200ResponseDataInner) Get() *ListBabylonEligibleStakings200ResponseDataInner {
	return v.value
}

func (v *NullableListBabylonEligibleStakings200ResponseDataInner) Set(val *ListBabylonEligibleStakings200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListBabylonEligibleStakings200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListBabylonEligibleStakings200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBabylonEligibleStakings200ResponseDataInner(val *ListBabylonEligibleStakings200ResponseDataInner) *NullableListBabylonEligibleStakings200ResponseDataInner {
	return &NullableListBabylonEligibleStakings200ResponseDataInner{value: val, isSet: true}
}

func (v NullableListBabylonEligibleStakings200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBabylonEligibleStakings200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


