/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the FeeReserved type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeReserved{}

// FeeReserved struct for FeeReserved
type FeeReserved struct {
	// The estimated fee required for submitting the transaction data to L1 (Layer 1), measured in wei.
	ReservedFee *string `json:"reserved_fee,omitempty"`
}

// NewFeeReserved instantiates a new FeeReserved object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeReserved() *FeeReserved {
	this := FeeReserved{}
	return &this
}

// NewFeeReservedWithDefaults instantiates a new FeeReserved object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeReservedWithDefaults() *FeeReserved {
	this := FeeReserved{}
	return &this
}

// GetReservedFee returns the ReservedFee field value if set, zero value otherwise.
func (o *FeeReserved) GetReservedFee() string {
	if o == nil || IsNil(o.ReservedFee) {
		var ret string
		return ret
	}
	return *o.ReservedFee
}

// GetReservedFeeOk returns a tuple with the ReservedFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeReserved) GetReservedFeeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedFee) {
		return nil, false
	}
	return o.ReservedFee, true
}

// HasReservedFee returns a boolean if a field has been set.
func (o *FeeReserved) HasReservedFee() bool {
	if o != nil && !IsNil(o.ReservedFee) {
		return true
	}

	return false
}

// SetReservedFee gets a reference to the given string and assigns it to the ReservedFee field.
func (o *FeeReserved) SetReservedFee(v string) {
	o.ReservedFee = &v
}

func (o FeeReserved) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeReserved) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservedFee) {
		toSerialize["reserved_fee"] = o.ReservedFee
	}
	return toSerialize, nil
}

type NullableFeeReserved struct {
	value *FeeReserved
	isSet bool
}

func (v NullableFeeReserved) Get() *FeeReserved {
	return v.value
}

func (v *NullableFeeReserved) Set(val *FeeReserved) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeReserved) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeReserved) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeReserved(val *FeeReserved) *NullableFeeReserved {
	return &NullableFeeReserved{value: val, isSet: true}
}

func (v NullableFeeReserved) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeReserved) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


