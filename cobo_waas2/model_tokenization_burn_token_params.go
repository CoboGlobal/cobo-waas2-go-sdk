/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationBurnTokenParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationBurnTokenParams{}

// TokenizationBurnTokenParams struct for TokenizationBurnTokenParams
type TokenizationBurnTokenParams struct {
	Source TokenizationTokenOperationSource `json:"source"`
	// Details for each token burn, including amount and address to burn from.
	Burns []TokenizationBurnTokenParamsBurnsInner `json:"burns"`
}

type _TokenizationBurnTokenParams TokenizationBurnTokenParams

// NewTokenizationBurnTokenParams instantiates a new TokenizationBurnTokenParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationBurnTokenParams(source TokenizationTokenOperationSource, burns []TokenizationBurnTokenParamsBurnsInner) *TokenizationBurnTokenParams {
	this := TokenizationBurnTokenParams{}
	this.Source = source
	this.Burns = burns
	return &this
}

// NewTokenizationBurnTokenParamsWithDefaults instantiates a new TokenizationBurnTokenParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationBurnTokenParamsWithDefaults() *TokenizationBurnTokenParams {
	this := TokenizationBurnTokenParams{}
	return &this
}

// GetSource returns the Source field value
func (o *TokenizationBurnTokenParams) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenParams) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationBurnTokenParams) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetBurns returns the Burns field value
func (o *TokenizationBurnTokenParams) GetBurns() []TokenizationBurnTokenParamsBurnsInner {
	if o == nil {
		var ret []TokenizationBurnTokenParamsBurnsInner
		return ret
	}

	return o.Burns
}

// GetBurnsOk returns a tuple with the Burns field value
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenParams) GetBurnsOk() ([]TokenizationBurnTokenParamsBurnsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Burns, true
}

// SetBurns sets field value
func (o *TokenizationBurnTokenParams) SetBurns(v []TokenizationBurnTokenParamsBurnsInner) {
	o.Burns = v
}

func (o TokenizationBurnTokenParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationBurnTokenParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["burns"] = o.Burns
	return toSerialize, nil
}

func (o *TokenizationBurnTokenParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"burns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationBurnTokenParams := _TokenizationBurnTokenParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationBurnTokenParams)

	if err != nil {
		return err
	}

	*o = TokenizationBurnTokenParams(varTokenizationBurnTokenParams)

	return err
}

type NullableTokenizationBurnTokenParams struct {
	value *TokenizationBurnTokenParams
	isSet bool
}

func (v NullableTokenizationBurnTokenParams) Get() *TokenizationBurnTokenParams {
	return v.value
}

func (v *NullableTokenizationBurnTokenParams) Set(val *TokenizationBurnTokenParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationBurnTokenParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationBurnTokenParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationBurnTokenParams(val *TokenizationBurnTokenParams) *NullableTokenizationBurnTokenParams {
	return &NullableTokenizationBurnTokenParams{value: val, isSet: true}
}

func (v NullableTokenizationBurnTokenParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationBurnTokenParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


