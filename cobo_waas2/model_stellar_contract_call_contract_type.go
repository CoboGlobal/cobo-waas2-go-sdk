/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// StellarContractCallContractType The type of the Stellar contract. 
type StellarContractCallContractType string

// List of StellarContractCallContractType
const (
	STELLARCONTRACTCALLCONTRACTTYPE_TRUST_LINE StellarContractCallContractType = "TrustLine"
)

// All allowed values of StellarContractCallContractType enum
var AllowedStellarContractCallContractTypeEnumValues = []StellarContractCallContractType{
	"TrustLine",
}

func (v *StellarContractCallContractType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StellarContractCallContractType(value)
	for _, existing := range AllowedStellarContractCallContractTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = StellarContractCallContractType("unknown")
	return nil
}

// NewStellarContractCallContractTypeFromValue returns a pointer to a valid StellarContractCallContractType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStellarContractCallContractTypeFromValue(v string) (*StellarContractCallContractType, error) {
	ev := StellarContractCallContractType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StellarContractCallContractType: valid values are %v", v, AllowedStellarContractCallContractTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StellarContractCallContractType) IsValid() bool {
	for _, existing := range AllowedStellarContractCallContractTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StellarContractCallContractType value
func (v StellarContractCallContractType) Ptr() *StellarContractCallContractType {
	return &v
}

type NullableStellarContractCallContractType struct {
	value *StellarContractCallContractType
	isSet bool
}

func (v NullableStellarContractCallContractType) Get() *StellarContractCallContractType {
	return v.value
}

func (v *NullableStellarContractCallContractType) Set(val *StellarContractCallContractType) {
	v.value = val
	v.isSet = true
}

func (v NullableStellarContractCallContractType) IsSet() bool {
	return v.isSet
}

func (v *NullableStellarContractCallContractType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStellarContractCallContractType(val *StellarContractCallContractType) *NullableStellarContractCallContractType {
	return &NullableStellarContractCallContractType{value: val, isSet: true}
}

func (v NullableStellarContractCallContractType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStellarContractCallContractType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

