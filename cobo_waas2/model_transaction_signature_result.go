/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionSignatureResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSignatureResult{}

// TransactionSignatureResult The result of a message signing transaction.
type TransactionSignatureResult struct {
	ResultType *TransactionResultType `json:"result_type,omitempty"`
	// The raw data of the signature.
	Signature string `json:"signature"`
}

type _TransactionSignatureResult TransactionSignatureResult

// NewTransactionSignatureResult instantiates a new TransactionSignatureResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSignatureResult(signature string) *TransactionSignatureResult {
	this := TransactionSignatureResult{}
	this.Signature = signature
	return &this
}

// NewTransactionSignatureResultWithDefaults instantiates a new TransactionSignatureResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSignatureResultWithDefaults() *TransactionSignatureResult {
	this := TransactionSignatureResult{}
	return &this
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *TransactionSignatureResult) GetResultType() TransactionResultType {
	if o == nil || IsNil(o.ResultType) {
		var ret TransactionResultType
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSignatureResult) GetResultTypeOk() (*TransactionResultType, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *TransactionSignatureResult) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given TransactionResultType and assigns it to the ResultType field.
func (o *TransactionSignatureResult) SetResultType(v TransactionResultType) {
	o.ResultType = &v
}

// GetSignature returns the Signature field value
func (o *TransactionSignatureResult) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *TransactionSignatureResult) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *TransactionSignatureResult) SetSignature(v string) {
	o.Signature = v
}

func (o TransactionSignatureResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSignatureResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResultType) {
		toSerialize["result_type"] = o.ResultType
	}
	toSerialize["signature"] = o.Signature
	return toSerialize, nil
}

func (o *TransactionSignatureResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionSignatureResult := _TransactionSignatureResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSignatureResult)

	if err != nil {
		return err
	}

	*o = TransactionSignatureResult(varTransactionSignatureResult)

	return err
}

type NullableTransactionSignatureResult struct {
	value *TransactionSignatureResult
	isSet bool
}

func (v NullableTransactionSignatureResult) Get() *TransactionSignatureResult {
	return v.value
}

func (v *NullableTransactionSignatureResult) Set(val *TransactionSignatureResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSignatureResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSignatureResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSignatureResult(val *TransactionSignatureResult) *NullableTransactionSignatureResult {
	return &NullableTransactionSignatureResult{value: val, isSet: true}
}

func (v NullableTransactionSignatureResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSignatureResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


