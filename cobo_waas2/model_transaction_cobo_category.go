/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionCoboCategory The transaction category defined by Cobo. Possible values include:    - `AutoSweep`: An auto-sweep transaction.   - `AutoFueling`: A transaction where Fee Station pays transaction fees to an address within your MPC Wallets.   - `AutoFuelingRefund`: A refund for an auto-fueling transaction.   - `SafeTxMessage`: A message signing transaction initiated by an MPC wallet to authorize a Smart Contract Wallet (Safe\\{Wallet\\}) transaction.   - `BillPayment`: A transaction to pay Cobo bills through Fee Station.   - `BillRefund`: A refund for a previously made bill payment.   - `CommissionFeeCharge`: A transaction to charge commission fees via Fee Station.   - `CommissionFeeRefund`: A refund of previously charged commission fees.   - `StakingBabylonBtcDelegation`: A transaction for delegating BTC in Babylon staking.   - `StakingBabylonBtcSignBabylon`: A transaction for signing Babylon operations with BTC.   - `StakingBabylonClaim`: A transaction for claiming rewards from Babylon staking.   - `StakingBabylonSlashing`: A transaction related to slashing penalties in Babylon staking.   - `StakingBabylonStake`: A transaction for staking assets in the Babylon platform.   - `StakingBabylonUnstake`: A transaction for unstaking assets from the Babylon platform.   - `StakingBabylonWithdraw`: A transaction for withdrawing assets from Babylon staking.   - `StakingBithiveClaim`: A transaction for claiming rewards from BitHive staking.   - `StakingBithiveStake`: A transaction for staking assets in the BitHive platform.   - `StakingBithiveUnstake`: A transaction for unstaking assets from the BitHive platform.   - `StakingBithiveWithdraw`: A transaction for withdrawing assets from BitHive staking.   - `StakingCoreStake`: A transaction for staking assets in the Core staking platform.   - `StakingCoreWithdraw`: A transaction for withdrawing assets from Core staking.   - `StakingEthClaim`: A transaction for claiming rewards from ETH staking.   - `StakingEthStake`: A transaction for staking ETH assets.   - `StakingEthUnstake`: A transaction for unstaking ETH assets.   - `StakingSkyfarmClaim`: A transaction for claiming rewards from Skyfarm staking.   - `StakingSkyfarmStake`: A transaction for staking assets in the Skyfarm platform.   - `StakingSkyfarmUnstake`: A transaction for unstaking assets from the Skyfarm platform.   - `ScreenAppRefund`: A refund transaction initiated through the Screening App.   - `ScreenAppIsolate`: An isolation transaction initiated through the Screening App.   - `ComplianceRefund`: A refund transaction initiated by Cobo KYT.   - `ComplianceIsolate`: An isolation transaction initiated by Cobo KYT.   - `StellarChangeTrust`: A transaction to manage trustlines on the Stellar network. 
type TransactionCoboCategory string

// List of TransactionCoboCategory
const (
	TRANSACTIONCOBOCATEGORY_AUTO_FUELING TransactionCoboCategory = "AutoFueling"
	TRANSACTIONCOBOCATEGORY_AUTO_FUELING_REFUND TransactionCoboCategory = "AutoFuelingRefund"
	TRANSACTIONCOBOCATEGORY_AUTO_SWEEP TransactionCoboCategory = "AutoSweep"
	TRANSACTIONCOBOCATEGORY_BILL_PAYMENT TransactionCoboCategory = "BillPayment"
	TRANSACTIONCOBOCATEGORY_BILL_REFUND TransactionCoboCategory = "BillRefund"
	TRANSACTIONCOBOCATEGORY_COMMISSION_FEE_CHARGE TransactionCoboCategory = "CommissionFeeCharge"
	TRANSACTIONCOBOCATEGORY_COMMISSION_FEE_REFUND TransactionCoboCategory = "CommissionFeeRefund"
	TRANSACTIONCOBOCATEGORY_SAFE_TX_MESSAGE TransactionCoboCategory = "SafeTxMessage"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_BTC_DELEGATION TransactionCoboCategory = "StakingBabylonBtcDelegation"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_BTC_SIGN_BABYLON TransactionCoboCategory = "StakingBabylonBtcSignBabylon"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_CLAIM TransactionCoboCategory = "StakingBabylonClaim"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_SLASHING TransactionCoboCategory = "StakingBabylonSlashing"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_STAKE TransactionCoboCategory = "StakingBabylonStake"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_UNSTAKE TransactionCoboCategory = "StakingBabylonUnstake"
	TRANSACTIONCOBOCATEGORY_STAKING_BABYLON_WITHDRAW TransactionCoboCategory = "StakingBabylonWithdraw"
	TRANSACTIONCOBOCATEGORY_STAKING_BITHIVE_CLAIM TransactionCoboCategory = "StakingBithiveClaim"
	TRANSACTIONCOBOCATEGORY_STAKING_BITHIVE_STAKE TransactionCoboCategory = "StakingBithiveStake"
	TRANSACTIONCOBOCATEGORY_STAKING_BITHIVE_UNSTAKE TransactionCoboCategory = "StakingBithiveUnstake"
	TRANSACTIONCOBOCATEGORY_STAKING_BITHIVE_WITHDRAW TransactionCoboCategory = "StakingBithiveWithdraw"
	TRANSACTIONCOBOCATEGORY_STAKING_CORE_STAKE TransactionCoboCategory = "StakingCoreStake"
	TRANSACTIONCOBOCATEGORY_STAKING_CORE_WITHDRAW TransactionCoboCategory = "StakingCoreWithdraw"
	TRANSACTIONCOBOCATEGORY_STAKING_ETH_CLAIM TransactionCoboCategory = "StakingEthClaim"
	TRANSACTIONCOBOCATEGORY_STAKING_ETH_STAKE TransactionCoboCategory = "StakingEthStake"
	TRANSACTIONCOBOCATEGORY_STAKING_ETH_UNSTAKE TransactionCoboCategory = "StakingEthUnstake"
	TRANSACTIONCOBOCATEGORY_STAKING_SKYFARM_CLAIM TransactionCoboCategory = "StakingSkyfarmClaim"
	TRANSACTIONCOBOCATEGORY_STAKING_SKYFARM_STAKE TransactionCoboCategory = "StakingSkyfarmStake"
	TRANSACTIONCOBOCATEGORY_STAKING_SKYFARM_UNSTAKE TransactionCoboCategory = "StakingSkyfarmUnstake"
	TRANSACTIONCOBOCATEGORY_SCREEN_APP_REFUND TransactionCoboCategory = "ScreenAppRefund"
	TRANSACTIONCOBOCATEGORY_SCREEN_APP_ISOLATE TransactionCoboCategory = "ScreenAppIsolate"
	TRANSACTIONCOBOCATEGORY_COMPLIANCE_REFUND TransactionCoboCategory = "ComplianceRefund"
	TRANSACTIONCOBOCATEGORY_COMPLIANCE_ISOLATE TransactionCoboCategory = "ComplianceIsolate"
	TRANSACTIONCOBOCATEGORY_STELLAR_CHANGE_TRUST TransactionCoboCategory = "StellarChangeTrust"
)

// All allowed values of TransactionCoboCategory enum
var AllowedTransactionCoboCategoryEnumValues = []TransactionCoboCategory{
	"AutoFueling",
	"AutoFuelingRefund",
	"AutoSweep",
	"BillPayment",
	"BillRefund",
	"CommissionFeeCharge",
	"CommissionFeeRefund",
	"SafeTxMessage",
	"StakingBabylonBtcDelegation",
	"StakingBabylonBtcSignBabylon",
	"StakingBabylonClaim",
	"StakingBabylonSlashing",
	"StakingBabylonStake",
	"StakingBabylonUnstake",
	"StakingBabylonWithdraw",
	"StakingBithiveClaim",
	"StakingBithiveStake",
	"StakingBithiveUnstake",
	"StakingBithiveWithdraw",
	"StakingCoreStake",
	"StakingCoreWithdraw",
	"StakingEthClaim",
	"StakingEthStake",
	"StakingEthUnstake",
	"StakingSkyfarmClaim",
	"StakingSkyfarmStake",
	"StakingSkyfarmUnstake",
	"ScreenAppRefund",
	"ScreenAppIsolate",
	"ComplianceRefund",
	"ComplianceIsolate",
	"StellarChangeTrust",
}

func (v *TransactionCoboCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionCoboCategory(value)
	for _, existing := range AllowedTransactionCoboCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TransactionCoboCategory("unknown")
	return nil
}

// NewTransactionCoboCategoryFromValue returns a pointer to a valid TransactionCoboCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionCoboCategoryFromValue(v string) (*TransactionCoboCategory, error) {
	ev := TransactionCoboCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionCoboCategory: valid values are %v", v, AllowedTransactionCoboCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionCoboCategory) IsValid() bool {
	for _, existing := range AllowedTransactionCoboCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionCoboCategory value
func (v TransactionCoboCategory) Ptr() *TransactionCoboCategory {
	return &v
}

type NullableTransactionCoboCategory struct {
	value *TransactionCoboCategory
	isSet bool
}

func (v NullableTransactionCoboCategory) Get() *TransactionCoboCategory {
	return v.value
}

func (v *NullableTransactionCoboCategory) Set(val *TransactionCoboCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCoboCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCoboCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCoboCategory(val *TransactionCoboCategory) *NullableTransactionCoboCategory {
	return &NullableTransactionCoboCategory{value: val, isSet: true}
}

func (v NullableTransactionCoboCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCoboCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

