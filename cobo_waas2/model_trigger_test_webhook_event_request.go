/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TriggerTestWebhookEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerTestWebhookEventRequest{}

// TriggerTestWebhookEventRequest struct for TriggerTestWebhookEventRequest
type TriggerTestWebhookEventRequest struct {
	EventType WebhookEventType `json:"event_type"`
	// An object for customization of the webhook event payload. You only need to include the fields you want to customize.   The provided fields must match the webhook event data structure, depending on the specified event type. For a complete introduction of the webhook event data structure, refer to the `data.data` property in the response of [List all webhook events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-webhook-events).  If this property is not provided, a default payload will be returned. 
	OverrideData map[string]interface{} `json:"override_data,omitempty"`
}

type _TriggerTestWebhookEventRequest TriggerTestWebhookEventRequest

// NewTriggerTestWebhookEventRequest instantiates a new TriggerTestWebhookEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerTestWebhookEventRequest(eventType WebhookEventType) *TriggerTestWebhookEventRequest {
	this := TriggerTestWebhookEventRequest{}
	this.EventType = eventType
	return &this
}

// NewTriggerTestWebhookEventRequestWithDefaults instantiates a new TriggerTestWebhookEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerTestWebhookEventRequestWithDefaults() *TriggerTestWebhookEventRequest {
	this := TriggerTestWebhookEventRequest{}
	return &this
}

// GetEventType returns the EventType field value
func (o *TriggerTestWebhookEventRequest) GetEventType() WebhookEventType {
	if o == nil {
		var ret WebhookEventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TriggerTestWebhookEventRequest) GetEventTypeOk() (*WebhookEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TriggerTestWebhookEventRequest) SetEventType(v WebhookEventType) {
	o.EventType = v
}

// GetOverrideData returns the OverrideData field value if set, zero value otherwise.
func (o *TriggerTestWebhookEventRequest) GetOverrideData() map[string]interface{} {
	if o == nil || IsNil(o.OverrideData) {
		var ret map[string]interface{}
		return ret
	}
	return o.OverrideData
}

// GetOverrideDataOk returns a tuple with the OverrideData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerTestWebhookEventRequest) GetOverrideDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OverrideData) {
		return map[string]interface{}{}, false
	}
	return o.OverrideData, true
}

// HasOverrideData returns a boolean if a field has been set.
func (o *TriggerTestWebhookEventRequest) HasOverrideData() bool {
	if o != nil && !IsNil(o.OverrideData) {
		return true
	}

	return false
}

// SetOverrideData gets a reference to the given map[string]interface{} and assigns it to the OverrideData field.
func (o *TriggerTestWebhookEventRequest) SetOverrideData(v map[string]interface{}) {
	o.OverrideData = v
}

func (o TriggerTestWebhookEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerTestWebhookEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_type"] = o.EventType
	if !IsNil(o.OverrideData) {
		toSerialize["override_data"] = o.OverrideData
	}
	return toSerialize, nil
}

func (o *TriggerTestWebhookEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTriggerTestWebhookEventRequest := _TriggerTestWebhookEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTriggerTestWebhookEventRequest)

	if err != nil {
		return err
	}

	*o = TriggerTestWebhookEventRequest(varTriggerTestWebhookEventRequest)

	return err
}

type NullableTriggerTestWebhookEventRequest struct {
	value *TriggerTestWebhookEventRequest
	isSet bool
}

func (v NullableTriggerTestWebhookEventRequest) Get() *TriggerTestWebhookEventRequest {
	return v.value
}

func (v *NullableTriggerTestWebhookEventRequest) Set(val *TriggerTestWebhookEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerTestWebhookEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerTestWebhookEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerTestWebhookEventRequest(val *TriggerTestWebhookEventRequest) *NullableTriggerTestWebhookEventRequest {
	return &NullableTriggerTestWebhookEventRequest{value: val, isSet: true}
}

func (v NullableTriggerTestWebhookEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerTestWebhookEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


