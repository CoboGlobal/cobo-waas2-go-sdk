/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionBabylonTxParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionBabylonTxParameters{}

// TransactionBabylonTxParameters The Babylon transaction parameters.
type TransactionBabylonTxParameters struct {
	ExtraType TransactionExtraType `json:"extra_type"`
	// The origin staking amount.
	StakeAmount *string `json:"stake_amount,omitempty"`
	// The public key of the finality provider.
	FinalityProviderPublicKey *string `json:"finality_provider_public_key,omitempty"`
	// The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
	StakeBlockTime *int64 `json:"stake_block_time,omitempty"`
	// The version of babylon global parameters.
	ParamVersion *int64 `json:"param_version,omitempty"`
	WithdrawFromType *ActivityType `json:"withdraw_from_type,omitempty"`
	SlashFromType *ActivityType `json:"slash_from_type,omitempty"`
}

type _TransactionBabylonTxParameters TransactionBabylonTxParameters

// NewTransactionBabylonTxParameters instantiates a new TransactionBabylonTxParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionBabylonTxParameters(extraType TransactionExtraType) *TransactionBabylonTxParameters {
	this := TransactionBabylonTxParameters{}
	this.ExtraType = extraType
	return &this
}

// NewTransactionBabylonTxParametersWithDefaults instantiates a new TransactionBabylonTxParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionBabylonTxParametersWithDefaults() *TransactionBabylonTxParameters {
	this := TransactionBabylonTxParameters{}
	return &this
}

// GetExtraType returns the ExtraType field value
func (o *TransactionBabylonTxParameters) GetExtraType() TransactionExtraType {
	if o == nil {
		var ret TransactionExtraType
		return ret
	}

	return o.ExtraType
}

// GetExtraTypeOk returns a tuple with the ExtraType field value
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetExtraTypeOk() (*TransactionExtraType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraType, true
}

// SetExtraType sets field value
func (o *TransactionBabylonTxParameters) SetExtraType(v TransactionExtraType) {
	o.ExtraType = v
}

// GetStakeAmount returns the StakeAmount field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetStakeAmount() string {
	if o == nil || IsNil(o.StakeAmount) {
		var ret string
		return ret
	}
	return *o.StakeAmount
}

// GetStakeAmountOk returns a tuple with the StakeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetStakeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.StakeAmount) {
		return nil, false
	}
	return o.StakeAmount, true
}

// HasStakeAmount returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasStakeAmount() bool {
	if o != nil && !IsNil(o.StakeAmount) {
		return true
	}

	return false
}

// SetStakeAmount gets a reference to the given string and assigns it to the StakeAmount field.
func (o *TransactionBabylonTxParameters) SetStakeAmount(v string) {
	o.StakeAmount = &v
}

// GetFinalityProviderPublicKey returns the FinalityProviderPublicKey field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetFinalityProviderPublicKey() string {
	if o == nil || IsNil(o.FinalityProviderPublicKey) {
		var ret string
		return ret
	}
	return *o.FinalityProviderPublicKey
}

// GetFinalityProviderPublicKeyOk returns a tuple with the FinalityProviderPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetFinalityProviderPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FinalityProviderPublicKey) {
		return nil, false
	}
	return o.FinalityProviderPublicKey, true
}

// HasFinalityProviderPublicKey returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasFinalityProviderPublicKey() bool {
	if o != nil && !IsNil(o.FinalityProviderPublicKey) {
		return true
	}

	return false
}

// SetFinalityProviderPublicKey gets a reference to the given string and assigns it to the FinalityProviderPublicKey field.
func (o *TransactionBabylonTxParameters) SetFinalityProviderPublicKey(v string) {
	o.FinalityProviderPublicKey = &v
}

// GetStakeBlockTime returns the StakeBlockTime field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetStakeBlockTime() int64 {
	if o == nil || IsNil(o.StakeBlockTime) {
		var ret int64
		return ret
	}
	return *o.StakeBlockTime
}

// GetStakeBlockTimeOk returns a tuple with the StakeBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetStakeBlockTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StakeBlockTime) {
		return nil, false
	}
	return o.StakeBlockTime, true
}

// HasStakeBlockTime returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasStakeBlockTime() bool {
	if o != nil && !IsNil(o.StakeBlockTime) {
		return true
	}

	return false
}

// SetStakeBlockTime gets a reference to the given int64 and assigns it to the StakeBlockTime field.
func (o *TransactionBabylonTxParameters) SetStakeBlockTime(v int64) {
	o.StakeBlockTime = &v
}

// GetParamVersion returns the ParamVersion field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetParamVersion() int64 {
	if o == nil || IsNil(o.ParamVersion) {
		var ret int64
		return ret
	}
	return *o.ParamVersion
}

// GetParamVersionOk returns a tuple with the ParamVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetParamVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.ParamVersion) {
		return nil, false
	}
	return o.ParamVersion, true
}

// HasParamVersion returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasParamVersion() bool {
	if o != nil && !IsNil(o.ParamVersion) {
		return true
	}

	return false
}

// SetParamVersion gets a reference to the given int64 and assigns it to the ParamVersion field.
func (o *TransactionBabylonTxParameters) SetParamVersion(v int64) {
	o.ParamVersion = &v
}

// GetWithdrawFromType returns the WithdrawFromType field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetWithdrawFromType() ActivityType {
	if o == nil || IsNil(o.WithdrawFromType) {
		var ret ActivityType
		return ret
	}
	return *o.WithdrawFromType
}

// GetWithdrawFromTypeOk returns a tuple with the WithdrawFromType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetWithdrawFromTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.WithdrawFromType) {
		return nil, false
	}
	return o.WithdrawFromType, true
}

// HasWithdrawFromType returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasWithdrawFromType() bool {
	if o != nil && !IsNil(o.WithdrawFromType) {
		return true
	}

	return false
}

// SetWithdrawFromType gets a reference to the given ActivityType and assigns it to the WithdrawFromType field.
func (o *TransactionBabylonTxParameters) SetWithdrawFromType(v ActivityType) {
	o.WithdrawFromType = &v
}

// GetSlashFromType returns the SlashFromType field value if set, zero value otherwise.
func (o *TransactionBabylonTxParameters) GetSlashFromType() ActivityType {
	if o == nil || IsNil(o.SlashFromType) {
		var ret ActivityType
		return ret
	}
	return *o.SlashFromType
}

// GetSlashFromTypeOk returns a tuple with the SlashFromType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonTxParameters) GetSlashFromTypeOk() (*ActivityType, bool) {
	if o == nil || IsNil(o.SlashFromType) {
		return nil, false
	}
	return o.SlashFromType, true
}

// HasSlashFromType returns a boolean if a field has been set.
func (o *TransactionBabylonTxParameters) HasSlashFromType() bool {
	if o != nil && !IsNil(o.SlashFromType) {
		return true
	}

	return false
}

// SetSlashFromType gets a reference to the given ActivityType and assigns it to the SlashFromType field.
func (o *TransactionBabylonTxParameters) SetSlashFromType(v ActivityType) {
	o.SlashFromType = &v
}

func (o TransactionBabylonTxParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionBabylonTxParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extra_type"] = o.ExtraType
	if !IsNil(o.StakeAmount) {
		toSerialize["stake_amount"] = o.StakeAmount
	}
	if !IsNil(o.FinalityProviderPublicKey) {
		toSerialize["finality_provider_public_key"] = o.FinalityProviderPublicKey
	}
	if !IsNil(o.StakeBlockTime) {
		toSerialize["stake_block_time"] = o.StakeBlockTime
	}
	if !IsNil(o.ParamVersion) {
		toSerialize["param_version"] = o.ParamVersion
	}
	if !IsNil(o.WithdrawFromType) {
		toSerialize["withdraw_from_type"] = o.WithdrawFromType
	}
	if !IsNil(o.SlashFromType) {
		toSerialize["slash_from_type"] = o.SlashFromType
	}
	return toSerialize, nil
}

func (o *TransactionBabylonTxParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extra_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionBabylonTxParameters := _TransactionBabylonTxParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionBabylonTxParameters)

	if err != nil {
		return err
	}

	*o = TransactionBabylonTxParameters(varTransactionBabylonTxParameters)

	return err
}

type NullableTransactionBabylonTxParameters struct {
	value *TransactionBabylonTxParameters
	isSet bool
}

func (v NullableTransactionBabylonTxParameters) Get() *TransactionBabylonTxParameters {
	return v.value
}

func (v *NullableTransactionBabylonTxParameters) Set(val *TransactionBabylonTxParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionBabylonTxParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionBabylonTxParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionBabylonTxParameters(val *TransactionBabylonTxParameters) *NullableTransactionBabylonTxParameters {
	return &NullableTransactionBabylonTxParameters{value: val, isSet: true}
}

func (v NullableTransactionBabylonTxParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionBabylonTxParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


