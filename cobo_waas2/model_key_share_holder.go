/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the KeyShareHolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyShareHolder{}

// KeyShareHolder The data for MPC Wallets' key share holder information.
type KeyShareHolder struct {
	// The key share holder name.
	Name *string `json:"name,omitempty"`
	Type *KeyShareHolderType `json:"type,omitempty"`
	// The key share holder's TSS Node ID.
	TssNodeId *string `json:"tss_node_id,omitempty"`
	// Whether the key share holder's TSS Node is online. - `true`: The TSS Node is online.  - `false`: The TSS Node is offline. 
	Online *bool `json:"online,omitempty"`
	// Whether the key share holder's TSS Node is a designated transaction signer. - `true`: The TSS Node is a designated transaction signer.  - `false`: The TSS Node is not a designated transaction signer. 
	Signer *bool `json:"signer,omitempty"`
	Status *KeyShareHolderStatus `json:"status,omitempty"`
	// The key share holder's Cobo Portal account ID.
	AccountId *string `json:"account_id,omitempty"`
}

// NewKeyShareHolder instantiates a new KeyShareHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyShareHolder() *KeyShareHolder {
	this := KeyShareHolder{}
	return &this
}

// NewKeyShareHolderWithDefaults instantiates a new KeyShareHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyShareHolderWithDefaults() *KeyShareHolder {
	this := KeyShareHolder{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KeyShareHolder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KeyShareHolder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KeyShareHolder) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyShareHolder) GetType() KeyShareHolderType {
	if o == nil || IsNil(o.Type) {
		var ret KeyShareHolderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetTypeOk() (*KeyShareHolderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyShareHolder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyShareHolderType and assigns it to the Type field.
func (o *KeyShareHolder) SetType(v KeyShareHolderType) {
	o.Type = &v
}

// GetTssNodeId returns the TssNodeId field value if set, zero value otherwise.
func (o *KeyShareHolder) GetTssNodeId() string {
	if o == nil || IsNil(o.TssNodeId) {
		var ret string
		return ret
	}
	return *o.TssNodeId
}

// GetTssNodeIdOk returns a tuple with the TssNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetTssNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TssNodeId) {
		return nil, false
	}
	return o.TssNodeId, true
}

// HasTssNodeId returns a boolean if a field has been set.
func (o *KeyShareHolder) HasTssNodeId() bool {
	if o != nil && !IsNil(o.TssNodeId) {
		return true
	}

	return false
}

// SetTssNodeId gets a reference to the given string and assigns it to the TssNodeId field.
func (o *KeyShareHolder) SetTssNodeId(v string) {
	o.TssNodeId = &v
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *KeyShareHolder) GetOnline() bool {
	if o == nil || IsNil(o.Online) {
		var ret bool
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.Online) {
		return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *KeyShareHolder) HasOnline() bool {
	if o != nil && !IsNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given bool and assigns it to the Online field.
func (o *KeyShareHolder) SetOnline(v bool) {
	o.Online = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *KeyShareHolder) GetSigner() bool {
	if o == nil || IsNil(o.Signer) {
		var ret bool
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetSignerOk() (*bool, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *KeyShareHolder) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given bool and assigns it to the Signer field.
func (o *KeyShareHolder) SetSigner(v bool) {
	o.Signer = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyShareHolder) GetStatus() KeyShareHolderStatus {
	if o == nil || IsNil(o.Status) {
		var ret KeyShareHolderStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetStatusOk() (*KeyShareHolderStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyShareHolder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given KeyShareHolderStatus and assigns it to the Status field.
func (o *KeyShareHolder) SetStatus(v KeyShareHolderStatus) {
	o.Status = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *KeyShareHolder) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolder) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *KeyShareHolder) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *KeyShareHolder) SetAccountId(v string) {
	o.AccountId = &v
}

func (o KeyShareHolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyShareHolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TssNodeId) {
		toSerialize["tss_node_id"] = o.TssNodeId
	}
	if !IsNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	return toSerialize, nil
}

type NullableKeyShareHolder struct {
	value *KeyShareHolder
	isSet bool
}

func (v NullableKeyShareHolder) Get() *KeyShareHolder {
	return v.value
}

func (v *NullableKeyShareHolder) Set(val *KeyShareHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyShareHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyShareHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyShareHolder(val *KeyShareHolder) *NullableKeyShareHolder {
	return &NullableKeyShareHolder{value: val, isSet: true}
}

func (v NullableKeyShareHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyShareHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


