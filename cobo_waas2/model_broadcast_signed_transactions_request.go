/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the BroadcastSignedTransactionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BroadcastSignedTransactionsRequest{}

// BroadcastSignedTransactionsRequest struct for BroadcastSignedTransactionsRequest
type BroadcastSignedTransactionsRequest struct {
	// The transaction IDs of the signed transactions to be broadcast. You can retrieve the transactions corresponding to a staking activity by calling [Get staking activity details](/v2/api-references/stakings/get-staking-activity-details).
	TransactionIds []string `json:"transaction_ids,omitempty"`
}

// NewBroadcastSignedTransactionsRequest instantiates a new BroadcastSignedTransactionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastSignedTransactionsRequest() *BroadcastSignedTransactionsRequest {
	this := BroadcastSignedTransactionsRequest{}
	return &this
}

// NewBroadcastSignedTransactionsRequestWithDefaults instantiates a new BroadcastSignedTransactionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastSignedTransactionsRequestWithDefaults() *BroadcastSignedTransactionsRequest {
	this := BroadcastSignedTransactionsRequest{}
	return &this
}

// GetTransactionIds returns the TransactionIds field value if set, zero value otherwise.
func (o *BroadcastSignedTransactionsRequest) GetTransactionIds() []string {
	if o == nil || IsNil(o.TransactionIds) {
		var ret []string
		return ret
	}
	return o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastSignedTransactionsRequest) GetTransactionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TransactionIds) {
		return nil, false
	}
	return o.TransactionIds, true
}

// HasTransactionIds returns a boolean if a field has been set.
func (o *BroadcastSignedTransactionsRequest) HasTransactionIds() bool {
	if o != nil && !IsNil(o.TransactionIds) {
		return true
	}

	return false
}

// SetTransactionIds gets a reference to the given []string and assigns it to the TransactionIds field.
func (o *BroadcastSignedTransactionsRequest) SetTransactionIds(v []string) {
	o.TransactionIds = v
}

func (o BroadcastSignedTransactionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BroadcastSignedTransactionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionIds) {
		toSerialize["transaction_ids"] = o.TransactionIds
	}
	return toSerialize, nil
}

type NullableBroadcastSignedTransactionsRequest struct {
	value *BroadcastSignedTransactionsRequest
	isSet bool
}

func (v NullableBroadcastSignedTransactionsRequest) Get() *BroadcastSignedTransactionsRequest {
	return v.value
}

func (v *NullableBroadcastSignedTransactionsRequest) Set(val *BroadcastSignedTransactionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastSignedTransactionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastSignedTransactionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastSignedTransactionsRequest(val *BroadcastSignedTransactionsRequest) *NullableBroadcastSignedTransactionsRequest {
	return &NullableBroadcastSignedTransactionsRequest{value: val, isSet: true}
}

func (v NullableBroadcastSignedTransactionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastSignedTransactionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


