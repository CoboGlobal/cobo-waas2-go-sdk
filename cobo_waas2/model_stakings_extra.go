/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// StakingsExtra - struct for StakingsExtra
type StakingsExtra struct {
	BabylonStakingExtra *BabylonStakingExtra
	CoreStakingExtra *CoreStakingExtra
	EthStakingExtra *EthStakingExtra
}

// BabylonStakingExtraAsStakingsExtra is a convenience function that returns BabylonStakingExtra wrapped in StakingsExtra
func BabylonStakingExtraAsStakingsExtra(v *BabylonStakingExtra) StakingsExtra {
	return StakingsExtra{
		BabylonStakingExtra: v,
	}
}

// CoreStakingExtraAsStakingsExtra is a convenience function that returns CoreStakingExtra wrapped in StakingsExtra
func CoreStakingExtraAsStakingsExtra(v *CoreStakingExtra) StakingsExtra {
	return StakingsExtra{
		CoreStakingExtra: v,
	}
}

// EthStakingExtraAsStakingsExtra is a convenience function that returns EthStakingExtra wrapped in StakingsExtra
func EthStakingExtraAsStakingsExtra(v *EthStakingExtra) StakingsExtra {
	return StakingsExtra{
		EthStakingExtra: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StakingsExtra) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Babylon'
	if jsonDict["pool_type"] == "Babylon" {
		// try to unmarshal JSON data into BabylonStakingExtra
		err = json.Unmarshal(data, &dst.BabylonStakingExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakingExtra, return on the first match
		} else {
			dst.BabylonStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as BabylonStakingExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CoreBTC'
	if jsonDict["pool_type"] == "CoreBTC" {
		// try to unmarshal JSON data into CoreStakingExtra
		err = json.Unmarshal(data, &dst.CoreStakingExtra)
		if err == nil {
			return nil // data stored in dst.CoreStakingExtra, return on the first match
		} else {
			dst.CoreStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as CoreStakingExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ETHBeacon'
	if jsonDict["pool_type"] == "ETHBeacon" {
		// try to unmarshal JSON data into EthStakingExtra
		err = json.Unmarshal(data, &dst.EthStakingExtra)
		if err == nil {
			return nil // data stored in dst.EthStakingExtra, return on the first match
		} else {
			dst.EthStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as EthStakingExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BabylonStakingExtra'
	if jsonDict["pool_type"] == "BabylonStakingExtra" {
		// try to unmarshal JSON data into BabylonStakingExtra
		err = json.Unmarshal(data, &dst.BabylonStakingExtra)
		if err == nil {
			return nil // data stored in dst.BabylonStakingExtra, return on the first match
		} else {
			dst.BabylonStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as BabylonStakingExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CoreStakingExtra'
	if jsonDict["pool_type"] == "CoreStakingExtra" {
		// try to unmarshal JSON data into CoreStakingExtra
		err = json.Unmarshal(data, &dst.CoreStakingExtra)
		if err == nil {
			return nil // data stored in dst.CoreStakingExtra, return on the first match
		} else {
			dst.CoreStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as CoreStakingExtra: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EthStakingExtra'
	if jsonDict["pool_type"] == "EthStakingExtra" {
		// try to unmarshal JSON data into EthStakingExtra
		err = json.Unmarshal(data, &dst.EthStakingExtra)
		if err == nil {
			return nil // data stored in dst.EthStakingExtra, return on the first match
		} else {
			dst.EthStakingExtra = nil
			return fmt.Errorf("failed to unmarshal StakingsExtra as EthStakingExtra: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StakingsExtra) MarshalJSON() ([]byte, error) {
	if src.BabylonStakingExtra != nil {
		return json.Marshal(&src.BabylonStakingExtra)
	}

	if src.CoreStakingExtra != nil {
		return json.Marshal(&src.CoreStakingExtra)
	}

	if src.EthStakingExtra != nil {
		return json.Marshal(&src.EthStakingExtra)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StakingsExtra) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BabylonStakingExtra != nil {
		return obj.BabylonStakingExtra
	}

	if obj.CoreStakingExtra != nil {
		return obj.CoreStakingExtra
	}

	if obj.EthStakingExtra != nil {
		return obj.EthStakingExtra
	}

	// all schemas are nil
	return nil
}

type NullableStakingsExtra struct {
	value *StakingsExtra
	isSet bool
}

func (v NullableStakingsExtra) Get() *StakingsExtra {
	return v.value
}

func (v *NullableStakingsExtra) Set(val *StakingsExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingsExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingsExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingsExtra(val *StakingsExtra) *NullableStakingsExtra {
	return &NullableStakingsExtra{value: val, isSet: true}
}

func (v NullableStakingsExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingsExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


