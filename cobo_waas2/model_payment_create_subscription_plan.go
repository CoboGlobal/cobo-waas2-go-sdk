/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentCreateSubscriptionPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentCreateSubscriptionPlan{}

// PaymentCreateSubscriptionPlan struct for PaymentCreateSubscriptionPlan
type PaymentCreateSubscriptionPlan struct {
	// The developer plan id.
	DeveloperPlanId string `json:"developer_plan_id"`
	PeriodType PaymentSubscriptionPeriodType `json:"period_type"`
	Periods int32 `json:"periods"`
	// The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. 
	Amount string `json:"amount"`
	// The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId *string `json:"token_id,omitempty"`
	// The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.
	Currency *string `json:"currency,omitempty"`
}

type _PaymentCreateSubscriptionPlan PaymentCreateSubscriptionPlan

// NewPaymentCreateSubscriptionPlan instantiates a new PaymentCreateSubscriptionPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentCreateSubscriptionPlan(developerPlanId string, periodType PaymentSubscriptionPeriodType, periods int32, amount string) *PaymentCreateSubscriptionPlan {
	this := PaymentCreateSubscriptionPlan{}
	this.DeveloperPlanId = developerPlanId
	this.PeriodType = periodType
	this.Periods = periods
	this.Amount = amount
	return &this
}

// NewPaymentCreateSubscriptionPlanWithDefaults instantiates a new PaymentCreateSubscriptionPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentCreateSubscriptionPlanWithDefaults() *PaymentCreateSubscriptionPlan {
	this := PaymentCreateSubscriptionPlan{}
	return &this
}

// GetDeveloperPlanId returns the DeveloperPlanId field value
func (o *PaymentCreateSubscriptionPlan) GetDeveloperPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperPlanId
}

// GetDeveloperPlanIdOk returns a tuple with the DeveloperPlanId field value
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetDeveloperPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperPlanId, true
}

// SetDeveloperPlanId sets field value
func (o *PaymentCreateSubscriptionPlan) SetDeveloperPlanId(v string) {
	o.DeveloperPlanId = v
}

// GetPeriodType returns the PeriodType field value
func (o *PaymentCreateSubscriptionPlan) GetPeriodType() PaymentSubscriptionPeriodType {
	if o == nil {
		var ret PaymentSubscriptionPeriodType
		return ret
	}

	return o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetPeriodTypeOk() (*PaymentSubscriptionPeriodType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodType, true
}

// SetPeriodType sets field value
func (o *PaymentCreateSubscriptionPlan) SetPeriodType(v PaymentSubscriptionPeriodType) {
	o.PeriodType = v
}

// GetPeriods returns the Periods field value
func (o *PaymentCreateSubscriptionPlan) GetPeriods() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetPeriodsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periods, true
}

// SetPeriods sets field value
func (o *PaymentCreateSubscriptionPlan) SetPeriods(v int32) {
	o.Periods = v
}

// GetAmount returns the Amount field value
func (o *PaymentCreateSubscriptionPlan) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentCreateSubscriptionPlan) SetAmount(v string) {
	o.Amount = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *PaymentCreateSubscriptionPlan) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *PaymentCreateSubscriptionPlan) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *PaymentCreateSubscriptionPlan) SetTokenId(v string) {
	o.TokenId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentCreateSubscriptionPlan) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreateSubscriptionPlan) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentCreateSubscriptionPlan) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentCreateSubscriptionPlan) SetCurrency(v string) {
	o.Currency = &v
}

func (o PaymentCreateSubscriptionPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentCreateSubscriptionPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["developer_plan_id"] = o.DeveloperPlanId
	toSerialize["period_type"] = o.PeriodType
	toSerialize["periods"] = o.Periods
	toSerialize["amount"] = o.Amount
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

func (o *PaymentCreateSubscriptionPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"developer_plan_id",
		"period_type",
		"periods",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentCreateSubscriptionPlan := _PaymentCreateSubscriptionPlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentCreateSubscriptionPlan)

	if err != nil {
		return err
	}

	*o = PaymentCreateSubscriptionPlan(varPaymentCreateSubscriptionPlan)

	return err
}

type NullablePaymentCreateSubscriptionPlan struct {
	value *PaymentCreateSubscriptionPlan
	isSet bool
}

func (v NullablePaymentCreateSubscriptionPlan) Get() *PaymentCreateSubscriptionPlan {
	return v.value
}

func (v *NullablePaymentCreateSubscriptionPlan) Set(val *PaymentCreateSubscriptionPlan) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentCreateSubscriptionPlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentCreateSubscriptionPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentCreateSubscriptionPlan(val *PaymentCreateSubscriptionPlan) *NullablePaymentCreateSubscriptionPlan {
	return &NullablePaymentCreateSubscriptionPlan{value: val, isSet: true}
}

func (v NullablePaymentCreateSubscriptionPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentCreateSubscriptionPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


