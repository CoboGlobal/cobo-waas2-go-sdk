/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentSettlementEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentSettlementEvent{}

// PaymentSettlementEvent struct for PaymentSettlementEvent
type PaymentSettlementEvent struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The suspended token event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
	DataType string `json:"data_type"`
	// The settlement request ID generated by Cobo.
	SettlementRequestId string `json:"settlement_request_id"`
	// The request ID provided by you when creating the settlement request.
	RequestId string `json:"request_id"`
	Status SettleRequestStatus `json:"status"`
	Settlements []SettlementDetail `json:"settlements"`
	// The created time of the settlement request, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The updated time of the settlement request, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// The initiator of this settlement request, usually the user's API key.
	Initiator *string `json:"initiator,omitempty"`
	AcquiringType *AcquiringType `json:"acquiring_type,omitempty"`
	PayoutChannel *PayoutChannel `json:"payout_channel,omitempty"`
	SettlementType *SettlementType `json:"settlement_type,omitempty"`
	// The fiat currency for the settlement request.
	Currency *string `json:"currency,omitempty"`
	// The received fiat amount of this settlement request. 
	ReceivedAmountFiat *string `json:"received_amount_fiat,omitempty"`
	BankAccount *BankAccount `json:"bank_account,omitempty"`
}

type _PaymentSettlementEvent PaymentSettlementEvent

// NewPaymentSettlementEvent instantiates a new PaymentSettlementEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentSettlementEvent(dataType string, settlementRequestId string, requestId string, status SettleRequestStatus, settlements []SettlementDetail) *PaymentSettlementEvent {
	this := PaymentSettlementEvent{}
	this.DataType = dataType
	this.SettlementRequestId = settlementRequestId
	this.RequestId = requestId
	this.Status = status
	this.Settlements = settlements
	return &this
}

// NewPaymentSettlementEventWithDefaults instantiates a new PaymentSettlementEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentSettlementEventWithDefaults() *PaymentSettlementEvent {
	this := PaymentSettlementEvent{}
	return &this
}

// GetDataType returns the DataType field value
func (o *PaymentSettlementEvent) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *PaymentSettlementEvent) SetDataType(v string) {
	o.DataType = v
}

// GetSettlementRequestId returns the SettlementRequestId field value
func (o *PaymentSettlementEvent) GetSettlementRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettlementRequestId
}

// GetSettlementRequestIdOk returns a tuple with the SettlementRequestId field value
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetSettlementRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettlementRequestId, true
}

// SetSettlementRequestId sets field value
func (o *PaymentSettlementEvent) SetSettlementRequestId(v string) {
	o.SettlementRequestId = v
}

// GetRequestId returns the RequestId field value
func (o *PaymentSettlementEvent) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *PaymentSettlementEvent) SetRequestId(v string) {
	o.RequestId = v
}

// GetStatus returns the Status field value
func (o *PaymentSettlementEvent) GetStatus() SettleRequestStatus {
	if o == nil {
		var ret SettleRequestStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetStatusOk() (*SettleRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentSettlementEvent) SetStatus(v SettleRequestStatus) {
	o.Status = v
}

// GetSettlements returns the Settlements field value
func (o *PaymentSettlementEvent) GetSettlements() []SettlementDetail {
	if o == nil {
		var ret []SettlementDetail
		return ret
	}

	return o.Settlements
}

// GetSettlementsOk returns a tuple with the Settlements field value
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetSettlementsOk() ([]SettlementDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settlements, true
}

// SetSettlements sets field value
func (o *PaymentSettlementEvent) SetSettlements(v []SettlementDetail) {
	o.Settlements = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *PaymentSettlementEvent) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *PaymentSettlementEvent) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *PaymentSettlementEvent) SetInitiator(v string) {
	o.Initiator = &v
}

// GetAcquiringType returns the AcquiringType field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetAcquiringType() AcquiringType {
	if o == nil || IsNil(o.AcquiringType) {
		var ret AcquiringType
		return ret
	}
	return *o.AcquiringType
}

// GetAcquiringTypeOk returns a tuple with the AcquiringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetAcquiringTypeOk() (*AcquiringType, bool) {
	if o == nil || IsNil(o.AcquiringType) {
		return nil, false
	}
	return o.AcquiringType, true
}

// HasAcquiringType returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasAcquiringType() bool {
	if o != nil && !IsNil(o.AcquiringType) {
		return true
	}

	return false
}

// SetAcquiringType gets a reference to the given AcquiringType and assigns it to the AcquiringType field.
func (o *PaymentSettlementEvent) SetAcquiringType(v AcquiringType) {
	o.AcquiringType = &v
}

// GetPayoutChannel returns the PayoutChannel field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetPayoutChannel() PayoutChannel {
	if o == nil || IsNil(o.PayoutChannel) {
		var ret PayoutChannel
		return ret
	}
	return *o.PayoutChannel
}

// GetPayoutChannelOk returns a tuple with the PayoutChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetPayoutChannelOk() (*PayoutChannel, bool) {
	if o == nil || IsNil(o.PayoutChannel) {
		return nil, false
	}
	return o.PayoutChannel, true
}

// HasPayoutChannel returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasPayoutChannel() bool {
	if o != nil && !IsNil(o.PayoutChannel) {
		return true
	}

	return false
}

// SetPayoutChannel gets a reference to the given PayoutChannel and assigns it to the PayoutChannel field.
func (o *PaymentSettlementEvent) SetPayoutChannel(v PayoutChannel) {
	o.PayoutChannel = &v
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetSettlementType() SettlementType {
	if o == nil || IsNil(o.SettlementType) {
		var ret SettlementType
		return ret
	}
	return *o.SettlementType
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetSettlementTypeOk() (*SettlementType, bool) {
	if o == nil || IsNil(o.SettlementType) {
		return nil, false
	}
	return o.SettlementType, true
}

// HasSettlementType returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasSettlementType() bool {
	if o != nil && !IsNil(o.SettlementType) {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given SettlementType and assigns it to the SettlementType field.
func (o *PaymentSettlementEvent) SetSettlementType(v SettlementType) {
	o.SettlementType = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentSettlementEvent) SetCurrency(v string) {
	o.Currency = &v
}

// GetReceivedAmountFiat returns the ReceivedAmountFiat field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetReceivedAmountFiat() string {
	if o == nil || IsNil(o.ReceivedAmountFiat) {
		var ret string
		return ret
	}
	return *o.ReceivedAmountFiat
}

// GetReceivedAmountFiatOk returns a tuple with the ReceivedAmountFiat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetReceivedAmountFiatOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedAmountFiat) {
		return nil, false
	}
	return o.ReceivedAmountFiat, true
}

// HasReceivedAmountFiat returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasReceivedAmountFiat() bool {
	if o != nil && !IsNil(o.ReceivedAmountFiat) {
		return true
	}

	return false
}

// SetReceivedAmountFiat gets a reference to the given string and assigns it to the ReceivedAmountFiat field.
func (o *PaymentSettlementEvent) SetReceivedAmountFiat(v string) {
	o.ReceivedAmountFiat = &v
}

// GetBankAccount returns the BankAccount field value if set, zero value otherwise.
func (o *PaymentSettlementEvent) GetBankAccount() BankAccount {
	if o == nil || IsNil(o.BankAccount) {
		var ret BankAccount
		return ret
	}
	return *o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSettlementEvent) GetBankAccountOk() (*BankAccount, bool) {
	if o == nil || IsNil(o.BankAccount) {
		return nil, false
	}
	return o.BankAccount, true
}

// HasBankAccount returns a boolean if a field has been set.
func (o *PaymentSettlementEvent) HasBankAccount() bool {
	if o != nil && !IsNil(o.BankAccount) {
		return true
	}

	return false
}

// SetBankAccount gets a reference to the given BankAccount and assigns it to the BankAccount field.
func (o *PaymentSettlementEvent) SetBankAccount(v BankAccount) {
	o.BankAccount = &v
}

func (o PaymentSettlementEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentSettlementEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["settlement_request_id"] = o.SettlementRequestId
	toSerialize["request_id"] = o.RequestId
	toSerialize["status"] = o.Status
	toSerialize["settlements"] = o.Settlements
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.AcquiringType) {
		toSerialize["acquiring_type"] = o.AcquiringType
	}
	if !IsNil(o.PayoutChannel) {
		toSerialize["payout_channel"] = o.PayoutChannel
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlement_type"] = o.SettlementType
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.ReceivedAmountFiat) {
		toSerialize["received_amount_fiat"] = o.ReceivedAmountFiat
	}
	if !IsNil(o.BankAccount) {
		toSerialize["bank_account"] = o.BankAccount
	}
	return toSerialize, nil
}

func (o *PaymentSettlementEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"settlement_request_id",
		"request_id",
		"status",
		"settlements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentSettlementEvent := _PaymentSettlementEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentSettlementEvent)

	if err != nil {
		return err
	}

	*o = PaymentSettlementEvent(varPaymentSettlementEvent)

	return err
}

type NullablePaymentSettlementEvent struct {
	value *PaymentSettlementEvent
	isSet bool
}

func (v NullablePaymentSettlementEvent) Get() *PaymentSettlementEvent {
	return v.value
}

func (v *NullablePaymentSettlementEvent) Set(val *PaymentSettlementEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSettlementEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSettlementEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSettlementEvent(val *PaymentSettlementEvent) *NullablePaymentSettlementEvent {
	return &NullablePaymentSettlementEvent{value: val, isSet: true}
}

func (v NullablePaymentSettlementEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSettlementEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


