/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TokenizationTokenPermissionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationTokenPermissionParams{}

// TokenizationTokenPermissionParams Role-based permission settings for token contract. If not provided, all permissions will be granted to the issuing wallet by default.
type TokenizationTokenPermissionParams struct {
	// List of addresses for the admin role.
	Admin []string `json:"admin,omitempty"`
	// List of addresses for the minter role.
	Minter []string `json:"minter,omitempty"`
	// List of addresses for the burner role.
	Burner []string `json:"burner,omitempty"`
	// List of addresses for the manager role.
	Manager []string `json:"manager,omitempty"`
	// List of addresses for the pauser role.
	Pauser []string `json:"pauser,omitempty"`
	// List of addresses for the salvager role.
	Salvager []string `json:"salvager,omitempty"`
	// List of addresses for the upgrader role.
	Upgrader []string `json:"upgrader,omitempty"`
}

// NewTokenizationTokenPermissionParams instantiates a new TokenizationTokenPermissionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationTokenPermissionParams() *TokenizationTokenPermissionParams {
	this := TokenizationTokenPermissionParams{}
	return &this
}

// NewTokenizationTokenPermissionParamsWithDefaults instantiates a new TokenizationTokenPermissionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationTokenPermissionParamsWithDefaults() *TokenizationTokenPermissionParams {
	this := TokenizationTokenPermissionParams{}
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetAdmin() []string {
	if o == nil || IsNil(o.Admin) {
		var ret []string
		return ret
	}
	return o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetAdminOk() ([]string, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given []string and assigns it to the Admin field.
func (o *TokenizationTokenPermissionParams) SetAdmin(v []string) {
	o.Admin = v
}

// GetMinter returns the Minter field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetMinter() []string {
	if o == nil || IsNil(o.Minter) {
		var ret []string
		return ret
	}
	return o.Minter
}

// GetMinterOk returns a tuple with the Minter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetMinterOk() ([]string, bool) {
	if o == nil || IsNil(o.Minter) {
		return nil, false
	}
	return o.Minter, true
}

// HasMinter returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasMinter() bool {
	if o != nil && !IsNil(o.Minter) {
		return true
	}

	return false
}

// SetMinter gets a reference to the given []string and assigns it to the Minter field.
func (o *TokenizationTokenPermissionParams) SetMinter(v []string) {
	o.Minter = v
}

// GetBurner returns the Burner field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetBurner() []string {
	if o == nil || IsNil(o.Burner) {
		var ret []string
		return ret
	}
	return o.Burner
}

// GetBurnerOk returns a tuple with the Burner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetBurnerOk() ([]string, bool) {
	if o == nil || IsNil(o.Burner) {
		return nil, false
	}
	return o.Burner, true
}

// HasBurner returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasBurner() bool {
	if o != nil && !IsNil(o.Burner) {
		return true
	}

	return false
}

// SetBurner gets a reference to the given []string and assigns it to the Burner field.
func (o *TokenizationTokenPermissionParams) SetBurner(v []string) {
	o.Burner = v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetManager() []string {
	if o == nil || IsNil(o.Manager) {
		var ret []string
		return ret
	}
	return o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetManagerOk() ([]string, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given []string and assigns it to the Manager field.
func (o *TokenizationTokenPermissionParams) SetManager(v []string) {
	o.Manager = v
}

// GetPauser returns the Pauser field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetPauser() []string {
	if o == nil || IsNil(o.Pauser) {
		var ret []string
		return ret
	}
	return o.Pauser
}

// GetPauserOk returns a tuple with the Pauser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetPauserOk() ([]string, bool) {
	if o == nil || IsNil(o.Pauser) {
		return nil, false
	}
	return o.Pauser, true
}

// HasPauser returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasPauser() bool {
	if o != nil && !IsNil(o.Pauser) {
		return true
	}

	return false
}

// SetPauser gets a reference to the given []string and assigns it to the Pauser field.
func (o *TokenizationTokenPermissionParams) SetPauser(v []string) {
	o.Pauser = v
}

// GetSalvager returns the Salvager field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetSalvager() []string {
	if o == nil || IsNil(o.Salvager) {
		var ret []string
		return ret
	}
	return o.Salvager
}

// GetSalvagerOk returns a tuple with the Salvager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetSalvagerOk() ([]string, bool) {
	if o == nil || IsNil(o.Salvager) {
		return nil, false
	}
	return o.Salvager, true
}

// HasSalvager returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasSalvager() bool {
	if o != nil && !IsNil(o.Salvager) {
		return true
	}

	return false
}

// SetSalvager gets a reference to the given []string and assigns it to the Salvager field.
func (o *TokenizationTokenPermissionParams) SetSalvager(v []string) {
	o.Salvager = v
}

// GetUpgrader returns the Upgrader field value if set, zero value otherwise.
func (o *TokenizationTokenPermissionParams) GetUpgrader() []string {
	if o == nil || IsNil(o.Upgrader) {
		var ret []string
		return ret
	}
	return o.Upgrader
}

// GetUpgraderOk returns a tuple with the Upgrader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationTokenPermissionParams) GetUpgraderOk() ([]string, bool) {
	if o == nil || IsNil(o.Upgrader) {
		return nil, false
	}
	return o.Upgrader, true
}

// HasUpgrader returns a boolean if a field has been set.
func (o *TokenizationTokenPermissionParams) HasUpgrader() bool {
	if o != nil && !IsNil(o.Upgrader) {
		return true
	}

	return false
}

// SetUpgrader gets a reference to the given []string and assigns it to the Upgrader field.
func (o *TokenizationTokenPermissionParams) SetUpgrader(v []string) {
	o.Upgrader = v
}

func (o TokenizationTokenPermissionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationTokenPermissionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Minter) {
		toSerialize["minter"] = o.Minter
	}
	if !IsNil(o.Burner) {
		toSerialize["burner"] = o.Burner
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !IsNil(o.Pauser) {
		toSerialize["pauser"] = o.Pauser
	}
	if !IsNil(o.Salvager) {
		toSerialize["salvager"] = o.Salvager
	}
	if !IsNil(o.Upgrader) {
		toSerialize["upgrader"] = o.Upgrader
	}
	return toSerialize, nil
}

type NullableTokenizationTokenPermissionParams struct {
	value *TokenizationTokenPermissionParams
	isSet bool
}

func (v NullableTokenizationTokenPermissionParams) Get() *TokenizationTokenPermissionParams {
	return v.value
}

func (v *NullableTokenizationTokenPermissionParams) Set(val *TokenizationTokenPermissionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenPermissionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenPermissionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenPermissionParams(val *TokenizationTokenPermissionParams) *NullableTokenizationTokenPermissionParams {
	return &NullableTokenizationTokenPermissionParams{value: val, isSet: true}
}

func (v NullableTokenizationTokenPermissionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenPermissionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


