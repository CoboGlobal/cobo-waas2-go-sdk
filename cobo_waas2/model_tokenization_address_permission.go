/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationAddressPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationAddressPermission{}

// TokenizationAddressPermission struct for TokenizationAddressPermission
type TokenizationAddressPermission struct {
	// The execution address.
	ExecutionAddress string `json:"execution_address"`
	// List of permissions granted to this address.
	Permissions []TokenizationTokenPermissionType `json:"permissions"`
	// The time when the permission was created, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
}

type _TokenizationAddressPermission TokenizationAddressPermission

// NewTokenizationAddressPermission instantiates a new TokenizationAddressPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationAddressPermission(executionAddress string, permissions []TokenizationTokenPermissionType) *TokenizationAddressPermission {
	this := TokenizationAddressPermission{}
	this.ExecutionAddress = executionAddress
	this.Permissions = permissions
	return &this
}

// NewTokenizationAddressPermissionWithDefaults instantiates a new TokenizationAddressPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationAddressPermissionWithDefaults() *TokenizationAddressPermission {
	this := TokenizationAddressPermission{}
	return &this
}

// GetExecutionAddress returns the ExecutionAddress field value
func (o *TokenizationAddressPermission) GetExecutionAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionAddress
}

// GetExecutionAddressOk returns a tuple with the ExecutionAddress field value
// and a boolean to check if the value has been set.
func (o *TokenizationAddressPermission) GetExecutionAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionAddress, true
}

// SetExecutionAddress sets field value
func (o *TokenizationAddressPermission) SetExecutionAddress(v string) {
	o.ExecutionAddress = v
}

// GetPermissions returns the Permissions field value
func (o *TokenizationAddressPermission) GetPermissions() []TokenizationTokenPermissionType {
	if o == nil {
		var ret []TokenizationTokenPermissionType
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *TokenizationAddressPermission) GetPermissionsOk() ([]TokenizationTokenPermissionType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *TokenizationAddressPermission) SetPermissions(v []TokenizationTokenPermissionType) {
	o.Permissions = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TokenizationAddressPermission) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationAddressPermission) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TokenizationAddressPermission) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *TokenizationAddressPermission) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

func (o TokenizationAddressPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationAddressPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["execution_address"] = o.ExecutionAddress
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	return toSerialize, nil
}

func (o *TokenizationAddressPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"execution_address",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationAddressPermission := _TokenizationAddressPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationAddressPermission)

	if err != nil {
		return err
	}

	*o = TokenizationAddressPermission(varTokenizationAddressPermission)

	return err
}

type NullableTokenizationAddressPermission struct {
	value *TokenizationAddressPermission
	isSet bool
}

func (v NullableTokenizationAddressPermission) Get() *TokenizationAddressPermission {
	return v.value
}

func (v *NullableTokenizationAddressPermission) Set(val *TokenizationAddressPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationAddressPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationAddressPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationAddressPermission(val *TokenizationAddressPermission) *NullableTokenizationAddressPermission {
	return &NullableTokenizationAddressPermission{value: val, isSet: true}
}

func (v NullableTokenizationAddressPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationAddressPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


