/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the FILBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FILBase{}

// FILBase The transaction gas base based on the FIL fee model.
type FILBase struct {
	// This is the minimum fee required to include a transaction in a block. It is determined by the network's congestion level, which adjusts to maintain a target block utilization rate. The base fee is burned, reducing the total supply of Filecoin over time.
	GasBase *string `json:"gas_base,omitempty"`
}

// NewFILBase instantiates a new FILBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFILBase() *FILBase {
	this := FILBase{}
	return &this
}

// NewFILBaseWithDefaults instantiates a new FILBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFILBaseWithDefaults() *FILBase {
	this := FILBase{}
	return &this
}

// GetGasBase returns the GasBase field value if set, zero value otherwise.
func (o *FILBase) GetGasBase() string {
	if o == nil || IsNil(o.GasBase) {
		var ret string
		return ret
	}
	return *o.GasBase
}

// GetGasBaseOk returns a tuple with the GasBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FILBase) GetGasBaseOk() (*string, bool) {
	if o == nil || IsNil(o.GasBase) {
		return nil, false
	}
	return o.GasBase, true
}

// HasGasBase returns a boolean if a field has been set.
func (o *FILBase) HasGasBase() bool {
	if o != nil && !IsNil(o.GasBase) {
		return true
	}

	return false
}

// SetGasBase gets a reference to the given string and assigns it to the GasBase field.
func (o *FILBase) SetGasBase(v string) {
	o.GasBase = &v
}

func (o FILBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FILBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasBase) {
		toSerialize["gas_base"] = o.GasBase
	}
	return toSerialize, nil
}

type NullableFILBase struct {
	value *FILBase
	isSet bool
}

func (v NullableFILBase) Get() *FILBase {
	return v.value
}

func (v *NullableFILBase) Set(val *FILBase) {
	v.value = val
	v.isSet = true
}

func (v NullableFILBase) IsSet() bool {
	return v.isSet
}

func (v *NullableFILBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFILBase(val *FILBase) *NullableFILBase {
	return &NullableFILBase{value: val, isSet: true}
}

func (v NullableFILBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFILBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


