/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the KeyShareHolderGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyShareHolderGroup{}

// KeyShareHolderGroup The data for key share holder group information.
type KeyShareHolderGroup struct {
	// The key share holder group ID.
	KeyShareHolderGroupId *string `json:"key_share_holder_group_id,omitempty"`
	Type *KeyShareHolderGroupType `json:"type,omitempty"`
	TssKeyShareGroups []TSSGroups `json:"tss_key_share_groups,omitempty"`
	KeyShareHolders []KeyShareHolder `json:"key_share_holders,omitempty"`
	// The number of key share holders in this key share holder group.
	Participants *int32 `json:"participants,omitempty"`
	// The number of key share holders required to approve each operation in this key share holder group.
	Threshold *int32 `json:"threshold,omitempty"`
	Status *KeyShareHolderGroupStatus `json:"status,omitempty"`
	// The key share holder group's creation time in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
}

// NewKeyShareHolderGroup instantiates a new KeyShareHolderGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyShareHolderGroup() *KeyShareHolderGroup {
	this := KeyShareHolderGroup{}
	return &this
}

// NewKeyShareHolderGroupWithDefaults instantiates a new KeyShareHolderGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyShareHolderGroupWithDefaults() *KeyShareHolderGroup {
	this := KeyShareHolderGroup{}
	return &this
}

// GetKeyShareHolderGroupId returns the KeyShareHolderGroupId field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetKeyShareHolderGroupId() string {
	if o == nil || IsNil(o.KeyShareHolderGroupId) {
		var ret string
		return ret
	}
	return *o.KeyShareHolderGroupId
}

// GetKeyShareHolderGroupIdOk returns a tuple with the KeyShareHolderGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetKeyShareHolderGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.KeyShareHolderGroupId) {
		return nil, false
	}
	return o.KeyShareHolderGroupId, true
}

// HasKeyShareHolderGroupId returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasKeyShareHolderGroupId() bool {
	if o != nil && !IsNil(o.KeyShareHolderGroupId) {
		return true
	}

	return false
}

// SetKeyShareHolderGroupId gets a reference to the given string and assigns it to the KeyShareHolderGroupId field.
func (o *KeyShareHolderGroup) SetKeyShareHolderGroupId(v string) {
	o.KeyShareHolderGroupId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetType() KeyShareHolderGroupType {
	if o == nil || IsNil(o.Type) {
		var ret KeyShareHolderGroupType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetTypeOk() (*KeyShareHolderGroupType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyShareHolderGroupType and assigns it to the Type field.
func (o *KeyShareHolderGroup) SetType(v KeyShareHolderGroupType) {
	o.Type = &v
}

// GetTssKeyShareGroups returns the TssKeyShareGroups field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetTssKeyShareGroups() []TSSGroups {
	if o == nil || IsNil(o.TssKeyShareGroups) {
		var ret []TSSGroups
		return ret
	}
	return o.TssKeyShareGroups
}

// GetTssKeyShareGroupsOk returns a tuple with the TssKeyShareGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetTssKeyShareGroupsOk() ([]TSSGroups, bool) {
	if o == nil || IsNil(o.TssKeyShareGroups) {
		return nil, false
	}
	return o.TssKeyShareGroups, true
}

// HasTssKeyShareGroups returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasTssKeyShareGroups() bool {
	if o != nil && !IsNil(o.TssKeyShareGroups) {
		return true
	}

	return false
}

// SetTssKeyShareGroups gets a reference to the given []TSSGroups and assigns it to the TssKeyShareGroups field.
func (o *KeyShareHolderGroup) SetTssKeyShareGroups(v []TSSGroups) {
	o.TssKeyShareGroups = v
}

// GetKeyShareHolders returns the KeyShareHolders field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetKeyShareHolders() []KeyShareHolder {
	if o == nil || IsNil(o.KeyShareHolders) {
		var ret []KeyShareHolder
		return ret
	}
	return o.KeyShareHolders
}

// GetKeyShareHoldersOk returns a tuple with the KeyShareHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetKeyShareHoldersOk() ([]KeyShareHolder, bool) {
	if o == nil || IsNil(o.KeyShareHolders) {
		return nil, false
	}
	return o.KeyShareHolders, true
}

// HasKeyShareHolders returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasKeyShareHolders() bool {
	if o != nil && !IsNil(o.KeyShareHolders) {
		return true
	}

	return false
}

// SetKeyShareHolders gets a reference to the given []KeyShareHolder and assigns it to the KeyShareHolders field.
func (o *KeyShareHolderGroup) SetKeyShareHolders(v []KeyShareHolder) {
	o.KeyShareHolders = v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetParticipants() int32 {
	if o == nil || IsNil(o.Participants) {
		var ret int32
		return ret
	}
	return *o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetParticipantsOk() (*int32, bool) {
	if o == nil || IsNil(o.Participants) {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasParticipants() bool {
	if o != nil && !IsNil(o.Participants) {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given int32 and assigns it to the Participants field.
func (o *KeyShareHolderGroup) SetParticipants(v int32) {
	o.Participants = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *KeyShareHolderGroup) SetThreshold(v int32) {
	o.Threshold = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetStatus() KeyShareHolderGroupStatus {
	if o == nil || IsNil(o.Status) {
		var ret KeyShareHolderGroupStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetStatusOk() (*KeyShareHolderGroupStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given KeyShareHolderGroupStatus and assigns it to the Status field.
func (o *KeyShareHolderGroup) SetStatus(v KeyShareHolderGroupStatus) {
	o.Status = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *KeyShareHolderGroup) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyShareHolderGroup) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *KeyShareHolderGroup) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *KeyShareHolderGroup) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

func (o KeyShareHolderGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyShareHolderGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyShareHolderGroupId) {
		toSerialize["key_share_holder_group_id"] = o.KeyShareHolderGroupId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TssKeyShareGroups) {
		toSerialize["tss_key_share_groups"] = o.TssKeyShareGroups
	}
	if !IsNil(o.KeyShareHolders) {
		toSerialize["key_share_holders"] = o.KeyShareHolders
	}
	if !IsNil(o.Participants) {
		toSerialize["participants"] = o.Participants
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	return toSerialize, nil
}

type NullableKeyShareHolderGroup struct {
	value *KeyShareHolderGroup
	isSet bool
}

func (v NullableKeyShareHolderGroup) Get() *KeyShareHolderGroup {
	return v.value
}

func (v *NullableKeyShareHolderGroup) Set(val *KeyShareHolderGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyShareHolderGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyShareHolderGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyShareHolderGroup(val *KeyShareHolderGroup) *NullableKeyShareHolderGroup {
	return &NullableKeyShareHolderGroup{value: val, isSet: true}
}

func (v NullableKeyShareHolderGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyShareHolderGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


