/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationSOLTokenParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationSOLTokenParams{}

// TokenizationSOLTokenParams struct for TokenizationSOLTokenParams
type TokenizationSOLTokenParams struct {
	Standard TokenizationTokenStandard `json:"standard"`
	// The name of the token.
	Name string `json:"name"`
	// The symbol of the token.
	Symbol string `json:"symbol"`
	// The number of decimals for the token (0-18).
	Decimals int32 `json:"decimals"`
	// Whether the allowlist feature is activated for the token. When activated, only addresses in the allowlist can perform token operations.
	TokenAccessActivated *bool `json:"token_access_activated,omitempty"`
	Permissions *TokenizationSolTokenPermissionParams `json:"permissions,omitempty"`
}

type _TokenizationSOLTokenParams TokenizationSOLTokenParams

// NewTokenizationSOLTokenParams instantiates a new TokenizationSOLTokenParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationSOLTokenParams(standard TokenizationTokenStandard, name string, symbol string, decimals int32) *TokenizationSOLTokenParams {
	this := TokenizationSOLTokenParams{}
	this.Standard = standard
	this.Name = name
	this.Symbol = symbol
	this.Decimals = decimals
	var tokenAccessActivated bool = false
	this.TokenAccessActivated = &tokenAccessActivated
	return &this
}

// NewTokenizationSOLTokenParamsWithDefaults instantiates a new TokenizationSOLTokenParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationSOLTokenParamsWithDefaults() *TokenizationSOLTokenParams {
	this := TokenizationSOLTokenParams{}
	var tokenAccessActivated bool = false
	this.TokenAccessActivated = &tokenAccessActivated
	return &this
}

// GetStandard returns the Standard field value
func (o *TokenizationSOLTokenParams) GetStandard() TokenizationTokenStandard {
	if o == nil {
		var ret TokenizationTokenStandard
		return ret
	}

	return o.Standard
}

// GetStandardOk returns a tuple with the Standard field value
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetStandardOk() (*TokenizationTokenStandard, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Standard, true
}

// SetStandard sets field value
func (o *TokenizationSOLTokenParams) SetStandard(v TokenizationTokenStandard) {
	o.Standard = v
}

// GetName returns the Name field value
func (o *TokenizationSOLTokenParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenizationSOLTokenParams) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *TokenizationSOLTokenParams) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenizationSOLTokenParams) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value
func (o *TokenizationSOLTokenParams) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenizationSOLTokenParams) SetDecimals(v int32) {
	o.Decimals = v
}

// GetTokenAccessActivated returns the TokenAccessActivated field value if set, zero value otherwise.
func (o *TokenizationSOLTokenParams) GetTokenAccessActivated() bool {
	if o == nil || IsNil(o.TokenAccessActivated) {
		var ret bool
		return ret
	}
	return *o.TokenAccessActivated
}

// GetTokenAccessActivatedOk returns a tuple with the TokenAccessActivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetTokenAccessActivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.TokenAccessActivated) {
		return nil, false
	}
	return o.TokenAccessActivated, true
}

// HasTokenAccessActivated returns a boolean if a field has been set.
func (o *TokenizationSOLTokenParams) HasTokenAccessActivated() bool {
	if o != nil && !IsNil(o.TokenAccessActivated) {
		return true
	}

	return false
}

// SetTokenAccessActivated gets a reference to the given bool and assigns it to the TokenAccessActivated field.
func (o *TokenizationSOLTokenParams) SetTokenAccessActivated(v bool) {
	o.TokenAccessActivated = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *TokenizationSOLTokenParams) GetPermissions() TokenizationSolTokenPermissionParams {
	if o == nil || IsNil(o.Permissions) {
		var ret TokenizationSolTokenPermissionParams
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSOLTokenParams) GetPermissionsOk() (*TokenizationSolTokenPermissionParams, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *TokenizationSOLTokenParams) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given TokenizationSolTokenPermissionParams and assigns it to the Permissions field.
func (o *TokenizationSOLTokenParams) SetPermissions(v TokenizationSolTokenPermissionParams) {
	o.Permissions = &v
}

func (o TokenizationSOLTokenParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationSOLTokenParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["standard"] = o.Standard
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimals"] = o.Decimals
	if !IsNil(o.TokenAccessActivated) {
		toSerialize["token_access_activated"] = o.TokenAccessActivated
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *TokenizationSOLTokenParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"standard",
		"name",
		"symbol",
		"decimals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationSOLTokenParams := _TokenizationSOLTokenParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationSOLTokenParams)

	if err != nil {
		return err
	}

	*o = TokenizationSOLTokenParams(varTokenizationSOLTokenParams)

	return err
}

type NullableTokenizationSOLTokenParams struct {
	value *TokenizationSOLTokenParams
	isSet bool
}

func (v NullableTokenizationSOLTokenParams) Get() *TokenizationSOLTokenParams {
	return v.value
}

func (v *NullableTokenizationSOLTokenParams) Set(val *TokenizationSOLTokenParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationSOLTokenParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationSOLTokenParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationSOLTokenParams(val *TokenizationSOLTokenParams) *NullableTokenizationSOLTokenParams {
	return &NullableTokenizationSOLTokenParams{value: val, isSet: true}
}

func (v NullableTokenizationSOLTokenParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationSOLTokenParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


