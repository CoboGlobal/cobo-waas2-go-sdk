/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SafeWalletDelegatesTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SafeWalletDelegatesTransfer{}

// SafeWalletDelegatesTransfer struct for SafeWalletDelegatesTransfer
type SafeWalletDelegatesTransfer struct {
	RequestType EstimateFeeRequestType `json:"request_type"`
	// The token ID.
	TokenId string `json:"token_id"`
	// The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
	Amount *string `json:"amount,omitempty"`
	// The address of the recipient.
	Address *string `json:"address,omitempty"`
}

type _SafeWalletDelegatesTransfer SafeWalletDelegatesTransfer

// NewSafeWalletDelegatesTransfer instantiates a new SafeWalletDelegatesTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafeWalletDelegatesTransfer(requestType EstimateFeeRequestType, tokenId string) *SafeWalletDelegatesTransfer {
	this := SafeWalletDelegatesTransfer{}
	this.RequestType = requestType
	this.TokenId = tokenId
	return &this
}

// NewSafeWalletDelegatesTransferWithDefaults instantiates a new SafeWalletDelegatesTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafeWalletDelegatesTransferWithDefaults() *SafeWalletDelegatesTransfer {
	this := SafeWalletDelegatesTransfer{}
	return &this
}

// GetRequestType returns the RequestType field value
func (o *SafeWalletDelegatesTransfer) GetRequestType() EstimateFeeRequestType {
	if o == nil {
		var ret EstimateFeeRequestType
		return ret
	}

	return o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value
// and a boolean to check if the value has been set.
func (o *SafeWalletDelegatesTransfer) GetRequestTypeOk() (*EstimateFeeRequestType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestType, true
}

// SetRequestType sets field value
func (o *SafeWalletDelegatesTransfer) SetRequestType(v EstimateFeeRequestType) {
	o.RequestType = v
}

// GetTokenId returns the TokenId field value
func (o *SafeWalletDelegatesTransfer) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *SafeWalletDelegatesTransfer) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *SafeWalletDelegatesTransfer) SetTokenId(v string) {
	o.TokenId = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SafeWalletDelegatesTransfer) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeWalletDelegatesTransfer) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SafeWalletDelegatesTransfer) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *SafeWalletDelegatesTransfer) SetAmount(v string) {
	o.Amount = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SafeWalletDelegatesTransfer) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafeWalletDelegatesTransfer) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SafeWalletDelegatesTransfer) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SafeWalletDelegatesTransfer) SetAddress(v string) {
	o.Address = &v
}

func (o SafeWalletDelegatesTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SafeWalletDelegatesTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_type"] = o.RequestType
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return toSerialize, nil
}

func (o *SafeWalletDelegatesTransfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSafeWalletDelegatesTransfer := _SafeWalletDelegatesTransfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSafeWalletDelegatesTransfer)

	if err != nil {
		return err
	}

	*o = SafeWalletDelegatesTransfer(varSafeWalletDelegatesTransfer)

	return err
}

type NullableSafeWalletDelegatesTransfer struct {
	value *SafeWalletDelegatesTransfer
	isSet bool
}

func (v NullableSafeWalletDelegatesTransfer) Get() *SafeWalletDelegatesTransfer {
	return v.value
}

func (v *NullableSafeWalletDelegatesTransfer) Set(val *SafeWalletDelegatesTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeWalletDelegatesTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeWalletDelegatesTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeWalletDelegatesTransfer(val *SafeWalletDelegatesTransfer) *NullableSafeWalletDelegatesTransfer {
	return &NullableSafeWalletDelegatesTransfer{value: val, isSet: true}
}

func (v NullableSafeWalletDelegatesTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeWalletDelegatesTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


