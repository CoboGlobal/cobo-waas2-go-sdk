/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyCondition{}

// PolicyCondition The information of an app workflow policy condition.
type PolicyCondition struct {
	// The app workflow field name.
	Field string `json:"field"`
	ValueType PolicyFieldValueType `json:"value_type"`
	// The app workflow field value.
	Value string `json:"value"`
	Operator PolicyFieldOperator `json:"operator"`
}

type _PolicyCondition PolicyCondition

// NewPolicyCondition instantiates a new PolicyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyCondition(field string, valueType PolicyFieldValueType, value string, operator PolicyFieldOperator) *PolicyCondition {
	this := PolicyCondition{}
	this.Field = field
	this.ValueType = valueType
	this.Value = value
	this.Operator = operator
	return &this
}

// NewPolicyConditionWithDefaults instantiates a new PolicyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyConditionWithDefaults() *PolicyCondition {
	this := PolicyCondition{}
	return &this
}

// GetField returns the Field field value
func (o *PolicyCondition) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *PolicyCondition) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *PolicyCondition) SetField(v string) {
	o.Field = v
}

// GetValueType returns the ValueType field value
func (o *PolicyCondition) GetValueType() PolicyFieldValueType {
	if o == nil {
		var ret PolicyFieldValueType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *PolicyCondition) GetValueTypeOk() (*PolicyFieldValueType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *PolicyCondition) SetValueType(v PolicyFieldValueType) {
	o.ValueType = v
}

// GetValue returns the Value field value
func (o *PolicyCondition) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PolicyCondition) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PolicyCondition) SetValue(v string) {
	o.Value = v
}

// GetOperator returns the Operator field value
func (o *PolicyCondition) GetOperator() PolicyFieldOperator {
	if o == nil {
		var ret PolicyFieldOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PolicyCondition) GetOperatorOk() (*PolicyFieldOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PolicyCondition) SetOperator(v PolicyFieldOperator) {
	o.Operator = v
}

func (o PolicyCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["value_type"] = o.ValueType
	toSerialize["value"] = o.Value
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *PolicyCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"value_type",
		"value",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyCondition := _PolicyCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyCondition)

	if err != nil {
		return err
	}

	*o = PolicyCondition(varPolicyCondition)

	return err
}

type NullablePolicyCondition struct {
	value *PolicyCondition
	isSet bool
}

func (v NullablePolicyCondition) Get() *PolicyCondition {
	return v.value
}

func (v *NullablePolicyCondition) Set(val *PolicyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyCondition(val *PolicyCondition) *NullablePolicyCondition {
	return &NullablePolicyCondition{value: val, isSet: true}
}

func (v NullablePolicyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


