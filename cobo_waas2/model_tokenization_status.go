/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationStatus The status of the token.
type TokenizationStatus string

// List of TokenizationStatus
const (
	TOKENIZATIONSTATUS_PROCESSING TokenizationStatus = "Processing"
	TOKENIZATIONSTATUS_ACTIVE TokenizationStatus = "Active"
	TOKENIZATIONSTATUS_FAILED TokenizationStatus = "Failed"
	TOKENIZATIONSTATUS_PAUSING TokenizationStatus = "Pausing"
)

// All allowed values of TokenizationStatus enum
var AllowedTokenizationStatusEnumValues = []TokenizationStatus{
	"Processing",
	"Active",
	"Failed",
	"Pausing",
}

func (v *TokenizationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationStatus(value)
	for _, existing := range AllowedTokenizationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationStatus("unknown")
	return nil
}

// NewTokenizationStatusFromValue returns a pointer to a valid TokenizationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationStatusFromValue(v string) (*TokenizationStatus, error) {
	ev := TokenizationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationStatus: valid values are %v", v, AllowedTokenizationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationStatus) IsValid() bool {
	for _, existing := range AllowedTokenizationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationStatus value
func (v TokenizationStatus) Ptr() *TokenizationStatus {
	return &v
}

type NullableTokenizationStatus struct {
	value *TokenizationStatus
	isSet bool
}

func (v NullableTokenizationStatus) Get() *TokenizationStatus {
	return v.value
}

func (v *NullableTokenizationStatus) Set(val *TokenizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationStatus(val *TokenizationStatus) *NullableTokenizationStatus {
	return &NullableTokenizationStatus{value: val, isSet: true}
}

func (v NullableTokenizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

