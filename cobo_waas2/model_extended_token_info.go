/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtendedTokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedTokenInfo{}

// ExtendedTokenInfo The token information, including whether the token can be deposited or withdrawn.
type ExtendedTokenInfo struct {
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The ID of the chain on which the token operates.
	ChainId string `json:"chain_id"`
	// (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
	AssetId *string `json:"asset_id,omitempty"`
	// The token symbol, which is the abbreviated name of a token.
	Symbol *string `json:"symbol,omitempty"`
	// The token name, which is the full name of a token.
	Name *string `json:"name,omitempty"`
	// The token decimal.
	Decimal *int32 `json:"decimal,omitempty"`
	// The URL of the token icon.
	IconUrl *string `json:"icon_url,omitempty"`
	// The token address, if applicable.
	TokenAddress *string `json:"token_address,omitempty"`
	// The fee token ID. A fee token is the token with which you pay transaction fees.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// Whether the token can be deposited.  - `true`: The token can be deposited.  - `false`: The token cannot be deposited. 
	CanDeposit *bool `json:"can_deposit,omitempty"`
	// Whether the token can be withdrawn.  - `true`: The token can be withdrawn.  - `false`: The token cannot be withdrawn. 
	CanWithdraw *bool `json:"can_withdraw,omitempty"`
	// Minimum amount of token that can be transacted, such as 0.00000546 for BTC.
	DustThreshold *string `json:"dust_threshold,omitempty"`
	// Minimum amount of token that can be deposit, such as 0.0001 for BTC.
	CustodialMinimumDepositThreshold *string `json:"custodial_minimum_deposit_threshold,omitempty"`
}

type _ExtendedTokenInfo ExtendedTokenInfo

// NewExtendedTokenInfo instantiates a new ExtendedTokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedTokenInfo(tokenId string, chainId string) *ExtendedTokenInfo {
	this := ExtendedTokenInfo{}
	this.TokenId = tokenId
	this.ChainId = chainId
	var canDeposit bool = false
	this.CanDeposit = &canDeposit
	var canWithdraw bool = false
	this.CanWithdraw = &canWithdraw
	return &this
}

// NewExtendedTokenInfoWithDefaults instantiates a new ExtendedTokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedTokenInfoWithDefaults() *ExtendedTokenInfo {
	this := ExtendedTokenInfo{}
	var canDeposit bool = false
	this.CanDeposit = &canDeposit
	var canWithdraw bool = false
	this.CanWithdraw = &canWithdraw
	return &this
}

// GetTokenId returns the TokenId field value
func (o *ExtendedTokenInfo) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *ExtendedTokenInfo) SetTokenId(v string) {
	o.TokenId = v
}

// GetChainId returns the ChainId field value
func (o *ExtendedTokenInfo) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *ExtendedTokenInfo) SetChainId(v string) {
	o.ChainId = v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *ExtendedTokenInfo) SetAssetId(v string) {
	o.AssetId = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ExtendedTokenInfo) SetSymbol(v string) {
	o.Symbol = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExtendedTokenInfo) SetName(v string) {
	o.Name = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetDecimal() int32 {
	if o == nil || IsNil(o.Decimal) {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetDecimalOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimal) {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasDecimal() bool {
	if o != nil && !IsNil(o.Decimal) {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *ExtendedTokenInfo) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *ExtendedTokenInfo) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetTokenAddress returns the TokenAddress field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetTokenAddress() string {
	if o == nil || IsNil(o.TokenAddress) {
		var ret string
		return ret
	}
	return *o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetTokenAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TokenAddress) {
		return nil, false
	}
	return o.TokenAddress, true
}

// HasTokenAddress returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasTokenAddress() bool {
	if o != nil && !IsNil(o.TokenAddress) {
		return true
	}

	return false
}

// SetTokenAddress gets a reference to the given string and assigns it to the TokenAddress field.
func (o *ExtendedTokenInfo) SetTokenAddress(v string) {
	o.TokenAddress = &v
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *ExtendedTokenInfo) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetCanDeposit returns the CanDeposit field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetCanDeposit() bool {
	if o == nil || IsNil(o.CanDeposit) {
		var ret bool
		return ret
	}
	return *o.CanDeposit
}

// GetCanDepositOk returns a tuple with the CanDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetCanDepositOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDeposit) {
		return nil, false
	}
	return o.CanDeposit, true
}

// HasCanDeposit returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasCanDeposit() bool {
	if o != nil && !IsNil(o.CanDeposit) {
		return true
	}

	return false
}

// SetCanDeposit gets a reference to the given bool and assigns it to the CanDeposit field.
func (o *ExtendedTokenInfo) SetCanDeposit(v bool) {
	o.CanDeposit = &v
}

// GetCanWithdraw returns the CanWithdraw field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetCanWithdraw() bool {
	if o == nil || IsNil(o.CanWithdraw) {
		var ret bool
		return ret
	}
	return *o.CanWithdraw
}

// GetCanWithdrawOk returns a tuple with the CanWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetCanWithdrawOk() (*bool, bool) {
	if o == nil || IsNil(o.CanWithdraw) {
		return nil, false
	}
	return o.CanWithdraw, true
}

// HasCanWithdraw returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasCanWithdraw() bool {
	if o != nil && !IsNil(o.CanWithdraw) {
		return true
	}

	return false
}

// SetCanWithdraw gets a reference to the given bool and assigns it to the CanWithdraw field.
func (o *ExtendedTokenInfo) SetCanWithdraw(v bool) {
	o.CanWithdraw = &v
}

// GetDustThreshold returns the DustThreshold field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetDustThreshold() string {
	if o == nil || IsNil(o.DustThreshold) {
		var ret string
		return ret
	}
	return *o.DustThreshold
}

// GetDustThresholdOk returns a tuple with the DustThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetDustThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.DustThreshold) {
		return nil, false
	}
	return o.DustThreshold, true
}

// HasDustThreshold returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasDustThreshold() bool {
	if o != nil && !IsNil(o.DustThreshold) {
		return true
	}

	return false
}

// SetDustThreshold gets a reference to the given string and assigns it to the DustThreshold field.
func (o *ExtendedTokenInfo) SetDustThreshold(v string) {
	o.DustThreshold = &v
}

// GetCustodialMinimumDepositThreshold returns the CustodialMinimumDepositThreshold field value if set, zero value otherwise.
func (o *ExtendedTokenInfo) GetCustodialMinimumDepositThreshold() string {
	if o == nil || IsNil(o.CustodialMinimumDepositThreshold) {
		var ret string
		return ret
	}
	return *o.CustodialMinimumDepositThreshold
}

// GetCustodialMinimumDepositThresholdOk returns a tuple with the CustodialMinimumDepositThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTokenInfo) GetCustodialMinimumDepositThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.CustodialMinimumDepositThreshold) {
		return nil, false
	}
	return o.CustodialMinimumDepositThreshold, true
}

// HasCustodialMinimumDepositThreshold returns a boolean if a field has been set.
func (o *ExtendedTokenInfo) HasCustodialMinimumDepositThreshold() bool {
	if o != nil && !IsNil(o.CustodialMinimumDepositThreshold) {
		return true
	}

	return false
}

// SetCustodialMinimumDepositThreshold gets a reference to the given string and assigns it to the CustodialMinimumDepositThreshold field.
func (o *ExtendedTokenInfo) SetCustodialMinimumDepositThreshold(v string) {
	o.CustodialMinimumDepositThreshold = &v
}

func (o ExtendedTokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedTokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["chain_id"] = o.ChainId
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Decimal) {
		toSerialize["decimal"] = o.Decimal
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.TokenAddress) {
		toSerialize["token_address"] = o.TokenAddress
	}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	if !IsNil(o.CanDeposit) {
		toSerialize["can_deposit"] = o.CanDeposit
	}
	if !IsNil(o.CanWithdraw) {
		toSerialize["can_withdraw"] = o.CanWithdraw
	}
	if !IsNil(o.DustThreshold) {
		toSerialize["dust_threshold"] = o.DustThreshold
	}
	if !IsNil(o.CustodialMinimumDepositThreshold) {
		toSerialize["custodial_minimum_deposit_threshold"] = o.CustodialMinimumDepositThreshold
	}
	return toSerialize, nil
}

func (o *ExtendedTokenInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtendedTokenInfo := _ExtendedTokenInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtendedTokenInfo)

	if err != nil {
		return err
	}

	*o = ExtendedTokenInfo(varExtendedTokenInfo)

	return err
}

type NullableExtendedTokenInfo struct {
	value *ExtendedTokenInfo
	isSet bool
}

func (v NullableExtendedTokenInfo) Get() *ExtendedTokenInfo {
	return v.value
}

func (v *NullableExtendedTokenInfo) Set(val *ExtendedTokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedTokenInfo(val *ExtendedTokenInfo) *NullableExtendedTokenInfo {
	return &NullableExtendedTokenInfo{value: val, isSet: true}
}

func (v NullableExtendedTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


