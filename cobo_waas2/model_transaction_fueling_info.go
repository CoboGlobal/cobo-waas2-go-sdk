/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionFuelingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFuelingInfo{}

// TransactionFuelingInfo Details of the auto-fueling transaction that provides gas for the current transaction.
type TransactionFuelingInfo struct {
	// The request ID of the transaction.
	RequestId *string `json:"request_id,omitempty"`
	// The transaction ID.
	TransactionId *string `json:"transaction_id,omitempty"`
}

// NewTransactionFuelingInfo instantiates a new TransactionFuelingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFuelingInfo() *TransactionFuelingInfo {
	this := TransactionFuelingInfo{}
	return &this
}

// NewTransactionFuelingInfoWithDefaults instantiates a new TransactionFuelingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFuelingInfoWithDefaults() *TransactionFuelingInfo {
	this := TransactionFuelingInfo{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TransactionFuelingInfo) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFuelingInfo) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TransactionFuelingInfo) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TransactionFuelingInfo) SetRequestId(v string) {
	o.RequestId = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *TransactionFuelingInfo) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFuelingInfo) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TransactionFuelingInfo) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *TransactionFuelingInfo) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o TransactionFuelingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFuelingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	return toSerialize, nil
}

type NullableTransactionFuelingInfo struct {
	value *TransactionFuelingInfo
	isSet bool
}

func (v NullableTransactionFuelingInfo) Get() *TransactionFuelingInfo {
	return v.value
}

func (v *NullableTransactionFuelingInfo) Set(val *TransactionFuelingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFuelingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFuelingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFuelingInfo(val *TransactionFuelingInfo) *NullableTransactionFuelingInfo {
	return &NullableTransactionFuelingInfo{value: val, isSet: true}
}

func (v NullableTransactionFuelingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFuelingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


