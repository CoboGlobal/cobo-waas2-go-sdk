/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionProcessType Transaction processing type. Possible values are: - `AutoProcess` (default): After the transaction is constructed, it will be automatically signed and broadcast.   - `BuildOnly`: Set to this value if you want to build the transaction first without automatically signing and broadcasting it. You can manually call the [Sign and broadcast transaction](https://www.cobo.com/developers/v2/api-references/transactions/sign-and-broadcast-transaction) operation to complete the signing and broadcasting process. 
type TransactionProcessType string

// List of TransactionProcessType
const (
	TRANSACTIONPROCESSTYPE_AUTO_PROCESS TransactionProcessType = "AutoProcess"
	TRANSACTIONPROCESSTYPE_BUILD_ONLY TransactionProcessType = "BuildOnly"
)

// All allowed values of TransactionProcessType enum
var AllowedTransactionProcessTypeEnumValues = []TransactionProcessType{
	"AutoProcess",
	"BuildOnly",
}

func (v *TransactionProcessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionProcessType(value)
	for _, existing := range AllowedTransactionProcessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = TransactionProcessType("unknown")
    return nil
}

// NewTransactionProcessTypeFromValue returns a pointer to a valid TransactionProcessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionProcessTypeFromValue(v string) (*TransactionProcessType, error) {
	ev := TransactionProcessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionProcessType: valid values are %v", v, AllowedTransactionProcessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionProcessType) IsValid() bool {
	for _, existing := range AllowedTransactionProcessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionProcessType value
func (v TransactionProcessType) Ptr() *TransactionProcessType {
	return &v
}

type NullableTransactionProcessType struct {
	value *TransactionProcessType
	isSet bool
}

func (v NullableTransactionProcessType) Get() *TransactionProcessType {
	return v.value
}

func (v *NullableTransactionProcessType) Set(val *TransactionProcessType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionProcessType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionProcessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionProcessType(val *TransactionProcessType) *NullableTransactionProcessType {
	return &NullableTransactionProcessType{value: val, isSet: true}
}

func (v NullableTransactionProcessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionProcessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

