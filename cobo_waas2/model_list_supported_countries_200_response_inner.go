/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListSupportedCountries200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSupportedCountries200ResponseInner{}

// ListSupportedCountries200ResponseInner struct for ListSupportedCountries200ResponseInner
type ListSupportedCountries200ResponseInner struct {
	// The English name of the country.
	En string `json:"en"`
	// The simplified Chinese name of the country.
	ZhHans string `json:"zh_hans"`
	// The 2-letter country code (ISO 3166-1 alpha-2).
	Code2 string `json:"code2"`
}

type _ListSupportedCountries200ResponseInner ListSupportedCountries200ResponseInner

// NewListSupportedCountries200ResponseInner instantiates a new ListSupportedCountries200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSupportedCountries200ResponseInner(en string, zhHans string, code2 string) *ListSupportedCountries200ResponseInner {
	this := ListSupportedCountries200ResponseInner{}
	this.En = en
	this.ZhHans = zhHans
	this.Code2 = code2
	return &this
}

// NewListSupportedCountries200ResponseInnerWithDefaults instantiates a new ListSupportedCountries200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSupportedCountries200ResponseInnerWithDefaults() *ListSupportedCountries200ResponseInner {
	this := ListSupportedCountries200ResponseInner{}
	return &this
}

// GetEn returns the En field value
func (o *ListSupportedCountries200ResponseInner) GetEn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.En
}

// GetEnOk returns a tuple with the En field value
// and a boolean to check if the value has been set.
func (o *ListSupportedCountries200ResponseInner) GetEnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.En, true
}

// SetEn sets field value
func (o *ListSupportedCountries200ResponseInner) SetEn(v string) {
	o.En = v
}

// GetZhHans returns the ZhHans field value
func (o *ListSupportedCountries200ResponseInner) GetZhHans() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZhHans
}

// GetZhHansOk returns a tuple with the ZhHans field value
// and a boolean to check if the value has been set.
func (o *ListSupportedCountries200ResponseInner) GetZhHansOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZhHans, true
}

// SetZhHans sets field value
func (o *ListSupportedCountries200ResponseInner) SetZhHans(v string) {
	o.ZhHans = v
}

// GetCode2 returns the Code2 field value
func (o *ListSupportedCountries200ResponseInner) GetCode2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code2
}

// GetCode2Ok returns a tuple with the Code2 field value
// and a boolean to check if the value has been set.
func (o *ListSupportedCountries200ResponseInner) GetCode2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code2, true
}

// SetCode2 sets field value
func (o *ListSupportedCountries200ResponseInner) SetCode2(v string) {
	o.Code2 = v
}

func (o ListSupportedCountries200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSupportedCountries200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["en"] = o.En
	toSerialize["zh_hans"] = o.ZhHans
	toSerialize["code2"] = o.Code2
	return toSerialize, nil
}

func (o *ListSupportedCountries200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"en",
		"zh_hans",
		"code2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListSupportedCountries200ResponseInner := _ListSupportedCountries200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListSupportedCountries200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListSupportedCountries200ResponseInner(varListSupportedCountries200ResponseInner)

	return err
}

type NullableListSupportedCountries200ResponseInner struct {
	value *ListSupportedCountries200ResponseInner
	isSet bool
}

func (v NullableListSupportedCountries200ResponseInner) Get() *ListSupportedCountries200ResponseInner {
	return v.value
}

func (v *NullableListSupportedCountries200ResponseInner) Set(val *ListSupportedCountries200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListSupportedCountries200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListSupportedCountries200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSupportedCountries200ResponseInner(val *ListSupportedCountries200ResponseInner) *NullableListSupportedCountries200ResponseInner {
	return &NullableListSupportedCountries200ResponseInner{value: val, isSet: true}
}

func (v NullableListSupportedCountries200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSupportedCountries200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


