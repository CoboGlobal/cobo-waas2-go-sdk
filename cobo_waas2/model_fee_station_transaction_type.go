/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// FeeStationTransactionType The transaction type. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction. 
type FeeStationTransactionType string

// List of FeeStationTransactionType
const (
	FEESTATIONTRANSACTIONTYPE_DEPOSIT FeeStationTransactionType = "Deposit"
	FEESTATIONTRANSACTIONTYPE_WITHDRAWAL FeeStationTransactionType = "Withdrawal"
)

// All allowed values of FeeStationTransactionType enum
var AllowedFeeStationTransactionTypeEnumValues = []FeeStationTransactionType{
	"Deposit",
	"Withdrawal",
}

func (v *FeeStationTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeeStationTransactionType(value)
	for _, existing := range AllowedFeeStationTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = FeeStationTransactionType("unknown")
    return nil
}

// NewFeeStationTransactionTypeFromValue returns a pointer to a valid FeeStationTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeeStationTransactionTypeFromValue(v string) (*FeeStationTransactionType, error) {
	ev := FeeStationTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeeStationTransactionType: valid values are %v", v, AllowedFeeStationTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeeStationTransactionType) IsValid() bool {
	for _, existing := range AllowedFeeStationTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeeStationTransactionType value
func (v FeeStationTransactionType) Ptr() *FeeStationTransactionType {
	return &v
}

type NullableFeeStationTransactionType struct {
	value *FeeStationTransactionType
	isSet bool
}

func (v NullableFeeStationTransactionType) Get() *FeeStationTransactionType {
	return v.value
}

func (v *NullableFeeStationTransactionType) Set(val *FeeStationTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeStationTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeStationTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeStationTransactionType(val *FeeStationTransactionType) *NullableFeeStationTransactionType {
	return &NullableFeeStationTransactionType{value: val, isSet: true}
}

func (v NullableFeeStationTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeStationTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

