/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionSigner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSigner{}

// TransactionSigner The signer data for transaction.
type TransactionSigner struct {
	// The signer name of the transaction.
	Signer *string `json:"signer,omitempty"`
	// The signing status.
	Status *string `json:"status,omitempty"`
	// Failed reason of signing process.
	FailedReason *string `json:"failed_reason,omitempty"`
}

// NewTransactionSigner instantiates a new TransactionSigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSigner() *TransactionSigner {
	this := TransactionSigner{}
	return &this
}

// NewTransactionSignerWithDefaults instantiates a new TransactionSigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSignerWithDefaults() *TransactionSigner {
	this := TransactionSigner{}
	return &this
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *TransactionSigner) GetSigner() string {
	if o == nil || IsNil(o.Signer) {
		var ret string
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSigner) GetSignerOk() (*string, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *TransactionSigner) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given string and assigns it to the Signer field.
func (o *TransactionSigner) SetSigner(v string) {
	o.Signer = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionSigner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSigner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionSigner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TransactionSigner) SetStatus(v string) {
	o.Status = &v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *TransactionSigner) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSigner) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *TransactionSigner) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *TransactionSigner) SetFailedReason(v string) {
	o.FailedReason = &v
}

func (o TransactionSigner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSigner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failed_reason"] = o.FailedReason
	}
	return toSerialize, nil
}

type NullableTransactionSigner struct {
	value *TransactionSigner
	isSet bool
}

func (v NullableTransactionSigner) Get() *TransactionSigner {
	return v.value
}

func (v *NullableTransactionSigner) Set(val *TransactionSigner) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSigner(val *TransactionSigner) *NullableTransactionSigner {
	return &NullableTransactionSigner{value: val, isSet: true}
}

func (v NullableTransactionSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


