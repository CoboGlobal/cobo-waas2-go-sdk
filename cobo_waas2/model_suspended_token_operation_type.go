/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SuspendedTokenOperationType The operation type applied to the list of suspended tokens: - Added: The token was added to the suspension list. - Removed: The token was removed from the suspension list. 
type SuspendedTokenOperationType string

// List of SuspendedTokenOperationType
const (
	SUSPENDEDTOKENOPERATIONTYPE_ADDED SuspendedTokenOperationType = "Added"
	SUSPENDEDTOKENOPERATIONTYPE_REMOVED SuspendedTokenOperationType = "Removed"
)

// All allowed values of SuspendedTokenOperationType enum
var AllowedSuspendedTokenOperationTypeEnumValues = []SuspendedTokenOperationType{
	"Added",
	"Removed",
}

func (v *SuspendedTokenOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuspendedTokenOperationType(value)
	for _, existing := range AllowedSuspendedTokenOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SuspendedTokenOperationType("unknown")
	return nil
}

// NewSuspendedTokenOperationTypeFromValue returns a pointer to a valid SuspendedTokenOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuspendedTokenOperationTypeFromValue(v string) (*SuspendedTokenOperationType, error) {
	ev := SuspendedTokenOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuspendedTokenOperationType: valid values are %v", v, AllowedSuspendedTokenOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuspendedTokenOperationType) IsValid() bool {
	for _, existing := range AllowedSuspendedTokenOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuspendedTokenOperationType value
func (v SuspendedTokenOperationType) Ptr() *SuspendedTokenOperationType {
	return &v
}

type NullableSuspendedTokenOperationType struct {
	value *SuspendedTokenOperationType
	isSet bool
}

func (v NullableSuspendedTokenOperationType) Get() *SuspendedTokenOperationType {
	return v.value
}

func (v *NullableSuspendedTokenOperationType) Set(val *SuspendedTokenOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendedTokenOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendedTokenOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendedTokenOperationType(val *SuspendedTokenOperationType) *NullableSuspendedTokenOperationType {
	return &NullableSuspendedTokenOperationType{value: val, isSet: true}
}

func (v NullableSuspendedTokenOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendedTokenOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

