/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimatedFixedFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedFixedFee{}

// EstimatedFixedFee The transaction fee that you are willing to pay based on the fixed fee model for some blockchains. The fee can vary between different chains.
type EstimatedFixedFee struct {
	// The fee that you need to pay for the transaction.
	FeeAmount string `json:"fee_amount"`
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId string `json:"token_id"`
	// Whether the transaction can be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/). - `true`: The transaction is a Loop transfer. - `false`: The transaction is not a Loop transfer. 
	IsLoop *bool `json:"is_loop,omitempty"`
}

type _EstimatedFixedFee EstimatedFixedFee

// NewEstimatedFixedFee instantiates a new EstimatedFixedFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedFixedFee(feeAmount string, feeType FeeType, tokenId string) *EstimatedFixedFee {
	this := EstimatedFixedFee{}
	this.FeeAmount = feeAmount
	this.FeeType = feeType
	this.TokenId = tokenId
	return &this
}

// NewEstimatedFixedFeeWithDefaults instantiates a new EstimatedFixedFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedFixedFeeWithDefaults() *EstimatedFixedFee {
	this := EstimatedFixedFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetFeeAmount returns the FeeAmount field value
func (o *EstimatedFixedFee) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *EstimatedFixedFee) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *EstimatedFixedFee) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetFeeType returns the FeeType field value
func (o *EstimatedFixedFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *EstimatedFixedFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *EstimatedFixedFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value
func (o *EstimatedFixedFee) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *EstimatedFixedFee) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *EstimatedFixedFee) SetTokenId(v string) {
	o.TokenId = v
}

// GetIsLoop returns the IsLoop field value if set, zero value otherwise.
func (o *EstimatedFixedFee) GetIsLoop() bool {
	if o == nil || IsNil(o.IsLoop) {
		var ret bool
		return ret
	}
	return *o.IsLoop
}

// GetIsLoopOk returns a tuple with the IsLoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedFixedFee) GetIsLoopOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoop) {
		return nil, false
	}
	return o.IsLoop, true
}

// HasIsLoop returns a boolean if a field has been set.
func (o *EstimatedFixedFee) HasIsLoop() bool {
	if o != nil && !IsNil(o.IsLoop) {
		return true
	}

	return false
}

// SetIsLoop gets a reference to the given bool and assigns it to the IsLoop field.
func (o *EstimatedFixedFee) SetIsLoop(v bool) {
	o.IsLoop = &v
}

func (o EstimatedFixedFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedFixedFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_amount"] = o.FeeAmount
	toSerialize["fee_type"] = o.FeeType
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.IsLoop) {
		toSerialize["is_loop"] = o.IsLoop
	}
	return toSerialize, nil
}

func (o *EstimatedFixedFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_amount",
		"fee_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimatedFixedFee := _EstimatedFixedFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimatedFixedFee)

	if err != nil {
		return err
	}

	*o = EstimatedFixedFee(varEstimatedFixedFee)

	return err
}

type NullableEstimatedFixedFee struct {
	value *EstimatedFixedFee
	isSet bool
}

func (v NullableEstimatedFixedFee) Get() *EstimatedFixedFee {
	return v.value
}

func (v *NullableEstimatedFixedFee) Set(val *EstimatedFixedFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedFixedFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedFixedFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedFixedFee(val *EstimatedFixedFee) *NullableEstimatedFixedFee {
	return &NullableEstimatedFixedFee{value: val, isSet: true}
}

func (v NullableEstimatedFixedFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedFixedFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


