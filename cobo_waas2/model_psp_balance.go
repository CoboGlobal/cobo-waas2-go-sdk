/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PspBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PspBalance{}

// PspBalance struct for PspBalance
type PspBalance struct {
	// The ID of the cryptocurrency.
	TokenId string `json:"token_id"`
	// The psp developer fee amount.
	DeveloperFeeAmount *string `json:"developer_fee_amount,omitempty"`
	// The psp settled amount.
	SettledAmount *string `json:"settled_amount,omitempty"`
	// The psp total refunded amount.
	RefundedAmount *string `json:"refunded_amount,omitempty"`
	// The psp total balance.
	TotalBalance *string `json:"total_balance,omitempty"`
	// The psp available balance.
	AvailableBalance *string `json:"available_balance,omitempty"`
}

type _PspBalance PspBalance

// NewPspBalance instantiates a new PspBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPspBalance(tokenId string) *PspBalance {
	this := PspBalance{}
	this.TokenId = tokenId
	return &this
}

// NewPspBalanceWithDefaults instantiates a new PspBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPspBalanceWithDefaults() *PspBalance {
	this := PspBalance{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *PspBalance) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PspBalance) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PspBalance) SetTokenId(v string) {
	o.TokenId = v
}

// GetDeveloperFeeAmount returns the DeveloperFeeAmount field value if set, zero value otherwise.
func (o *PspBalance) GetDeveloperFeeAmount() string {
	if o == nil || IsNil(o.DeveloperFeeAmount) {
		var ret string
		return ret
	}
	return *o.DeveloperFeeAmount
}

// GetDeveloperFeeAmountOk returns a tuple with the DeveloperFeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PspBalance) GetDeveloperFeeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.DeveloperFeeAmount) {
		return nil, false
	}
	return o.DeveloperFeeAmount, true
}

// HasDeveloperFeeAmount returns a boolean if a field has been set.
func (o *PspBalance) HasDeveloperFeeAmount() bool {
	if o != nil && !IsNil(o.DeveloperFeeAmount) {
		return true
	}

	return false
}

// SetDeveloperFeeAmount gets a reference to the given string and assigns it to the DeveloperFeeAmount field.
func (o *PspBalance) SetDeveloperFeeAmount(v string) {
	o.DeveloperFeeAmount = &v
}

// GetSettledAmount returns the SettledAmount field value if set, zero value otherwise.
func (o *PspBalance) GetSettledAmount() string {
	if o == nil || IsNil(o.SettledAmount) {
		var ret string
		return ret
	}
	return *o.SettledAmount
}

// GetSettledAmountOk returns a tuple with the SettledAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PspBalance) GetSettledAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SettledAmount) {
		return nil, false
	}
	return o.SettledAmount, true
}

// HasSettledAmount returns a boolean if a field has been set.
func (o *PspBalance) HasSettledAmount() bool {
	if o != nil && !IsNil(o.SettledAmount) {
		return true
	}

	return false
}

// SetSettledAmount gets a reference to the given string and assigns it to the SettledAmount field.
func (o *PspBalance) SetSettledAmount(v string) {
	o.SettledAmount = &v
}

// GetRefundedAmount returns the RefundedAmount field value if set, zero value otherwise.
func (o *PspBalance) GetRefundedAmount() string {
	if o == nil || IsNil(o.RefundedAmount) {
		var ret string
		return ret
	}
	return *o.RefundedAmount
}

// GetRefundedAmountOk returns a tuple with the RefundedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PspBalance) GetRefundedAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RefundedAmount) {
		return nil, false
	}
	return o.RefundedAmount, true
}

// HasRefundedAmount returns a boolean if a field has been set.
func (o *PspBalance) HasRefundedAmount() bool {
	if o != nil && !IsNil(o.RefundedAmount) {
		return true
	}

	return false
}

// SetRefundedAmount gets a reference to the given string and assigns it to the RefundedAmount field.
func (o *PspBalance) SetRefundedAmount(v string) {
	o.RefundedAmount = &v
}

// GetTotalBalance returns the TotalBalance field value if set, zero value otherwise.
func (o *PspBalance) GetTotalBalance() string {
	if o == nil || IsNil(o.TotalBalance) {
		var ret string
		return ret
	}
	return *o.TotalBalance
}

// GetTotalBalanceOk returns a tuple with the TotalBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PspBalance) GetTotalBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalBalance) {
		return nil, false
	}
	return o.TotalBalance, true
}

// HasTotalBalance returns a boolean if a field has been set.
func (o *PspBalance) HasTotalBalance() bool {
	if o != nil && !IsNil(o.TotalBalance) {
		return true
	}

	return false
}

// SetTotalBalance gets a reference to the given string and assigns it to the TotalBalance field.
func (o *PspBalance) SetTotalBalance(v string) {
	o.TotalBalance = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *PspBalance) GetAvailableBalance() string {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret string
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PspBalance) GetAvailableBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *PspBalance) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given string and assigns it to the AvailableBalance field.
func (o *PspBalance) SetAvailableBalance(v string) {
	o.AvailableBalance = &v
}

func (o PspBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PspBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.DeveloperFeeAmount) {
		toSerialize["developer_fee_amount"] = o.DeveloperFeeAmount
	}
	if !IsNil(o.SettledAmount) {
		toSerialize["settled_amount"] = o.SettledAmount
	}
	if !IsNil(o.RefundedAmount) {
		toSerialize["refunded_amount"] = o.RefundedAmount
	}
	if !IsNil(o.TotalBalance) {
		toSerialize["total_balance"] = o.TotalBalance
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	return toSerialize, nil
}

func (o *PspBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPspBalance := _PspBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPspBalance)

	if err != nil {
		return err
	}

	*o = PspBalance(varPspBalance)

	return err
}

type NullablePspBalance struct {
	value *PspBalance
	isSet bool
}

func (v NullablePspBalance) Get() *PspBalance {
	return v.value
}

func (v *NullablePspBalance) Set(val *PspBalance) {
	v.value = val
	v.isSet = true
}

func (v NullablePspBalance) IsSet() bool {
	return v.isSet
}

func (v *NullablePspBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePspBalance(val *PspBalance) *NullablePspBalance {
	return &NullablePspBalance{value: val, isSet: true}
}

func (v NullablePspBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePspBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


