/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the CreateKeyShareHolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateKeyShareHolder{}

// CreateKeyShareHolder When creating MainKeyGroup and SigningKeyGroup, the Cobo key share holder will be added automatically.
type CreateKeyShareHolder struct {
	// Key share holder's name.
	Name *string `json:"name,omitempty"`
	Type *KeyShareHolderType `json:"type,omitempty"`
	// Key share holder's TSS Node ID.
	TssNodeId *string `json:"tss_node_id,omitempty"`
	// Whether the key share holder's TSS Node is a designated transaction signer. - `true`: The TSS Node is a designated transaction signer.  - `false`: The TSS Node is not a designated transaction signer. 
	Signer *bool `json:"signer,omitempty"`
}

// NewCreateKeyShareHolder instantiates a new CreateKeyShareHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateKeyShareHolder() *CreateKeyShareHolder {
	this := CreateKeyShareHolder{}
	return &this
}

// NewCreateKeyShareHolderWithDefaults instantiates a new CreateKeyShareHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateKeyShareHolderWithDefaults() *CreateKeyShareHolder {
	this := CreateKeyShareHolder{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateKeyShareHolder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyShareHolder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateKeyShareHolder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateKeyShareHolder) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateKeyShareHolder) GetType() KeyShareHolderType {
	if o == nil || IsNil(o.Type) {
		var ret KeyShareHolderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyShareHolder) GetTypeOk() (*KeyShareHolderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateKeyShareHolder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyShareHolderType and assigns it to the Type field.
func (o *CreateKeyShareHolder) SetType(v KeyShareHolderType) {
	o.Type = &v
}

// GetTssNodeId returns the TssNodeId field value if set, zero value otherwise.
func (o *CreateKeyShareHolder) GetTssNodeId() string {
	if o == nil || IsNil(o.TssNodeId) {
		var ret string
		return ret
	}
	return *o.TssNodeId
}

// GetTssNodeIdOk returns a tuple with the TssNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyShareHolder) GetTssNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TssNodeId) {
		return nil, false
	}
	return o.TssNodeId, true
}

// HasTssNodeId returns a boolean if a field has been set.
func (o *CreateKeyShareHolder) HasTssNodeId() bool {
	if o != nil && !IsNil(o.TssNodeId) {
		return true
	}

	return false
}

// SetTssNodeId gets a reference to the given string and assigns it to the TssNodeId field.
func (o *CreateKeyShareHolder) SetTssNodeId(v string) {
	o.TssNodeId = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *CreateKeyShareHolder) GetSigner() bool {
	if o == nil || IsNil(o.Signer) {
		var ret bool
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyShareHolder) GetSignerOk() (*bool, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *CreateKeyShareHolder) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given bool and assigns it to the Signer field.
func (o *CreateKeyShareHolder) SetSigner(v bool) {
	o.Signer = &v
}

func (o CreateKeyShareHolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateKeyShareHolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TssNodeId) {
		toSerialize["tss_node_id"] = o.TssNodeId
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	return toSerialize, nil
}

type NullableCreateKeyShareHolder struct {
	value *CreateKeyShareHolder
	isSet bool
}

func (v NullableCreateKeyShareHolder) Get() *CreateKeyShareHolder {
	return v.value
}

func (v *NullableCreateKeyShareHolder) Set(val *CreateKeyShareHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateKeyShareHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateKeyShareHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateKeyShareHolder(val *CreateKeyShareHolder) *NullableCreateKeyShareHolder {
	return &NullableCreateKeyShareHolder{value: val, isSet: true}
}

func (v NullableCreateKeyShareHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateKeyShareHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


