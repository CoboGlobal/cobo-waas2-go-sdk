/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationEstimateFeeRequestOperationParams - struct for TokenizationEstimateFeeRequestOperationParams
type TokenizationEstimateFeeRequestOperationParams struct {
	TokenizationBurnEstimateFeeParams *TokenizationBurnEstimateFeeParams
	TokenizationContractCallEstimateFeeParams *TokenizationContractCallEstimateFeeParams
	TokenizationDeployEstimateFeeParams *TokenizationDeployEstimateFeeParams
	TokenizationIssueEstimateFeeParams *TokenizationIssueEstimateFeeParams
	TokenizationMintEstimateFeeParams *TokenizationMintEstimateFeeParams
	TokenizationPauseEstimateFeeParams *TokenizationPauseEstimateFeeParams
	TokenizationToggleAllowlistEstimateFeeParams *TokenizationToggleAllowlistEstimateFeeParams
	TokenizationUnpauseEstimateFeeParams *TokenizationUnpauseEstimateFeeParams
	TokenizationUpdateAllowlistAddressesEstimateFeeParams *TokenizationUpdateAllowlistAddressesEstimateFeeParams
	TokenizationUpdateBlocklistAddressesEstimateFeeParams *TokenizationUpdateBlocklistAddressesEstimateFeeParams
}

// TokenizationBurnEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationBurnEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationBurnEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationBurnEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationBurnEstimateFeeParams: v,
	}
}

// TokenizationContractCallEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationContractCallEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationContractCallEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationContractCallEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationContractCallEstimateFeeParams: v,
	}
}

// TokenizationDeployEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationDeployEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationDeployEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationDeployEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationDeployEstimateFeeParams: v,
	}
}

// TokenizationIssueEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationIssueEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationIssueEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationIssueEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationIssueEstimateFeeParams: v,
	}
}

// TokenizationMintEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationMintEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationMintEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationMintEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationMintEstimateFeeParams: v,
	}
}

// TokenizationPauseEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationPauseEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationPauseEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationPauseEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationPauseEstimateFeeParams: v,
	}
}

// TokenizationToggleAllowlistEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationToggleAllowlistEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationToggleAllowlistEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationToggleAllowlistEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationToggleAllowlistEstimateFeeParams: v,
	}
}

// TokenizationUnpauseEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationUnpauseEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationUnpauseEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationUnpauseEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationUnpauseEstimateFeeParams: v,
	}
}

// TokenizationUpdateAllowlistAddressesEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationUpdateAllowlistAddressesEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationUpdateAllowlistAddressesEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationUpdateAllowlistAddressesEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationUpdateAllowlistAddressesEstimateFeeParams: v,
	}
}

// TokenizationUpdateBlocklistAddressesEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams is a convenience function that returns TokenizationUpdateBlocklistAddressesEstimateFeeParams wrapped in TokenizationEstimateFeeRequestOperationParams
func TokenizationUpdateBlocklistAddressesEstimateFeeParamsAsTokenizationEstimateFeeRequestOperationParams(v *TokenizationUpdateBlocklistAddressesEstimateFeeParams) TokenizationEstimateFeeRequestOperationParams {
	return TokenizationEstimateFeeRequestOperationParams{
		TokenizationUpdateBlocklistAddressesEstimateFeeParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenizationEstimateFeeRequestOperationParams) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Burn'
	if jsonDict["operation_type"] == "Burn" {
		// try to unmarshal JSON data into TokenizationBurnEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationBurnEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationBurnEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationBurnEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationBurnEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ContractCall'
	if jsonDict["operation_type"] == "ContractCall" {
		// try to unmarshal JSON data into TokenizationContractCallEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationContractCallEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationContractCallEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationContractCallEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationContractCallEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Deploy'
	if jsonDict["operation_type"] == "Deploy" {
		// try to unmarshal JSON data into TokenizationDeployEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationDeployEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationDeployEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationDeployEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationDeployEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Issue'
	if jsonDict["operation_type"] == "Issue" {
		// try to unmarshal JSON data into TokenizationIssueEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationIssueEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationIssueEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationIssueEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationIssueEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Mint'
	if jsonDict["operation_type"] == "Mint" {
		// try to unmarshal JSON data into TokenizationMintEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationMintEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationMintEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationMintEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationMintEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Pause'
	if jsonDict["operation_type"] == "Pause" {
		// try to unmarshal JSON data into TokenizationPauseEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationPauseEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationPauseEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationPauseEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationPauseEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ToggleAllowlist'
	if jsonDict["operation_type"] == "ToggleAllowlist" {
		// try to unmarshal JSON data into TokenizationToggleAllowlistEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationToggleAllowlistEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationToggleAllowlistEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationToggleAllowlistEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationToggleAllowlistEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Unpause'
	if jsonDict["operation_type"] == "Unpause" {
		// try to unmarshal JSON data into TokenizationUnpauseEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUnpauseEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUnpauseEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUnpauseEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUnpauseEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateAllowlistAddresses'
	if jsonDict["operation_type"] == "UpdateAllowlistAddresses" {
		// try to unmarshal JSON data into TokenizationUpdateAllowlistAddressesEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUpdateAllowlistAddressesEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateBlocklistAddresses'
	if jsonDict["operation_type"] == "UpdateBlocklistAddresses" {
		// try to unmarshal JSON data into TokenizationUpdateBlocklistAddressesEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUpdateBlocklistAddressesEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationBurnEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationBurnEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationBurnEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationBurnEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationBurnEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationBurnEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationBurnEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationContractCallEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationContractCallEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationContractCallEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationContractCallEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationContractCallEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationContractCallEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationContractCallEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationDeployEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationDeployEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationDeployEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationDeployEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationDeployEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationDeployEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationDeployEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationIssueEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationIssueEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationIssueEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationIssueEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationIssueEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationIssueEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationIssueEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationMintEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationMintEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationMintEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationMintEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationMintEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationMintEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationMintEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationPauseEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationPauseEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationPauseEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationPauseEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationPauseEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationPauseEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationPauseEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationToggleAllowlistEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationToggleAllowlistEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationToggleAllowlistEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationToggleAllowlistEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationToggleAllowlistEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationToggleAllowlistEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationToggleAllowlistEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationUnpauseEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationUnpauseEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationUnpauseEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUnpauseEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUnpauseEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUnpauseEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUnpauseEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationUpdateAllowlistAddressesEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationUpdateAllowlistAddressesEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationUpdateAllowlistAddressesEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUpdateAllowlistAddressesEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUpdateAllowlistAddressesEstimateFeeParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationUpdateBlocklistAddressesEstimateFeeParams'
	if jsonDict["operation_type"] == "TokenizationUpdateBlocklistAddressesEstimateFeeParams" {
		// try to unmarshal JSON data into TokenizationUpdateBlocklistAddressesEstimateFeeParams
		err = json.Unmarshal(data, &dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams)
		if err == nil {
			return nil // data stored in dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams, return on the first match
		} else {
			dst.TokenizationUpdateBlocklistAddressesEstimateFeeParams = nil
			return fmt.Errorf("failed to unmarshal TokenizationEstimateFeeRequestOperationParams as TokenizationUpdateBlocklistAddressesEstimateFeeParams: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenizationEstimateFeeRequestOperationParams) MarshalJSON() ([]byte, error) {
	if src.TokenizationBurnEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationBurnEstimateFeeParams)
	}

	if src.TokenizationContractCallEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationContractCallEstimateFeeParams)
	}

	if src.TokenizationDeployEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationDeployEstimateFeeParams)
	}

	if src.TokenizationIssueEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationIssueEstimateFeeParams)
	}

	if src.TokenizationMintEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationMintEstimateFeeParams)
	}

	if src.TokenizationPauseEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationPauseEstimateFeeParams)
	}

	if src.TokenizationToggleAllowlistEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationToggleAllowlistEstimateFeeParams)
	}

	if src.TokenizationUnpauseEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationUnpauseEstimateFeeParams)
	}

	if src.TokenizationUpdateAllowlistAddressesEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationUpdateAllowlistAddressesEstimateFeeParams)
	}

	if src.TokenizationUpdateBlocklistAddressesEstimateFeeParams != nil {
		return json.Marshal(&src.TokenizationUpdateBlocklistAddressesEstimateFeeParams)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenizationEstimateFeeRequestOperationParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokenizationBurnEstimateFeeParams != nil {
		return obj.TokenizationBurnEstimateFeeParams
	}

	if obj.TokenizationContractCallEstimateFeeParams != nil {
		return obj.TokenizationContractCallEstimateFeeParams
	}

	if obj.TokenizationDeployEstimateFeeParams != nil {
		return obj.TokenizationDeployEstimateFeeParams
	}

	if obj.TokenizationIssueEstimateFeeParams != nil {
		return obj.TokenizationIssueEstimateFeeParams
	}

	if obj.TokenizationMintEstimateFeeParams != nil {
		return obj.TokenizationMintEstimateFeeParams
	}

	if obj.TokenizationPauseEstimateFeeParams != nil {
		return obj.TokenizationPauseEstimateFeeParams
	}

	if obj.TokenizationToggleAllowlistEstimateFeeParams != nil {
		return obj.TokenizationToggleAllowlistEstimateFeeParams
	}

	if obj.TokenizationUnpauseEstimateFeeParams != nil {
		return obj.TokenizationUnpauseEstimateFeeParams
	}

	if obj.TokenizationUpdateAllowlistAddressesEstimateFeeParams != nil {
		return obj.TokenizationUpdateAllowlistAddressesEstimateFeeParams
	}

	if obj.TokenizationUpdateBlocklistAddressesEstimateFeeParams != nil {
		return obj.TokenizationUpdateBlocklistAddressesEstimateFeeParams
	}

	// all schemas are nil
	return nil
}

type NullableTokenizationEstimateFeeRequestOperationParams struct {
	value *TokenizationEstimateFeeRequestOperationParams
	isSet bool
}

func (v NullableTokenizationEstimateFeeRequestOperationParams) Get() *TokenizationEstimateFeeRequestOperationParams {
	return v.value
}

func (v *NullableTokenizationEstimateFeeRequestOperationParams) Set(val *TokenizationEstimateFeeRequestOperationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationEstimateFeeRequestOperationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationEstimateFeeRequestOperationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationEstimateFeeRequestOperationParams(val *TokenizationEstimateFeeRequestOperationParams) *NullableTokenizationEstimateFeeRequestOperationParams {
	return &NullableTokenizationEstimateFeeRequestOperationParams{value: val, isSet: true}
}

func (v NullableTokenizationEstimateFeeRequestOperationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationEstimateFeeRequestOperationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


