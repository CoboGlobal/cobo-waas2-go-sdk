/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SettlementInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementInfo{}

// SettlementInfo struct for SettlementInfo
type SettlementInfo struct {
	// The merchant ID. For developer balance, this field will be empty.
	MerchantId *string `json:"merchant_id,omitempty"`
	// The ID of the cryptocurrency.
	TokenId *string `json:"token_id,omitempty"`
	// The amount available for settlement or refund, in the specified cryptocurrency.
	AvailableAmount string `json:"available_amount"`
	// The amount available for settlement or refund, in the specified fiat currency.
	AvailableCurrencyBalance *string `json:"available_currency_balance,omitempty"`
	// The amount unavailable for settlement or refund, in the specified cryptocurrency.
	PendingAmount *string `json:"pending_amount,omitempty"`
	// The amount unavailable for settlement or refund, in the specified fiat currency.
	PendingCurrencyBalance *string `json:"pending_currency_balance,omitempty"`
	// The amount already settled, in the specified cryptocurrency.
	SettledAmount *string `json:"settled_amount,omitempty"`
	// The balance available for settlement or refund, in the specified fiat currency.
	AvailableBalance *string `json:"available_balance,omitempty"`
	// The balance total for settlement or refund, in the specified fiat currency.
	TotalBalance *string `json:"total_balance,omitempty"`
	AcquiringType *AcquiringType `json:"acquiring_type,omitempty"`
	// The creation time of the settlement, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the settlement, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
}

type _SettlementInfo SettlementInfo

// NewSettlementInfo instantiates a new SettlementInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlementInfo(availableAmount string) *SettlementInfo {
	this := SettlementInfo{}
	this.AvailableAmount = availableAmount
	return &this
}

// NewSettlementInfoWithDefaults instantiates a new SettlementInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementInfoWithDefaults() *SettlementInfo {
	this := SettlementInfo{}
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *SettlementInfo) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *SettlementInfo) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *SettlementInfo) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *SettlementInfo) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *SettlementInfo) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *SettlementInfo) SetTokenId(v string) {
	o.TokenId = &v
}

// GetAvailableAmount returns the AvailableAmount field value
func (o *SettlementInfo) GetAvailableAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailableAmount
}

// GetAvailableAmountOk returns a tuple with the AvailableAmount field value
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetAvailableAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableAmount, true
}

// SetAvailableAmount sets field value
func (o *SettlementInfo) SetAvailableAmount(v string) {
	o.AvailableAmount = v
}

// GetAvailableCurrencyBalance returns the AvailableCurrencyBalance field value if set, zero value otherwise.
func (o *SettlementInfo) GetAvailableCurrencyBalance() string {
	if o == nil || IsNil(o.AvailableCurrencyBalance) {
		var ret string
		return ret
	}
	return *o.AvailableCurrencyBalance
}

// GetAvailableCurrencyBalanceOk returns a tuple with the AvailableCurrencyBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetAvailableCurrencyBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableCurrencyBalance) {
		return nil, false
	}
	return o.AvailableCurrencyBalance, true
}

// HasAvailableCurrencyBalance returns a boolean if a field has been set.
func (o *SettlementInfo) HasAvailableCurrencyBalance() bool {
	if o != nil && !IsNil(o.AvailableCurrencyBalance) {
		return true
	}

	return false
}

// SetAvailableCurrencyBalance gets a reference to the given string and assigns it to the AvailableCurrencyBalance field.
func (o *SettlementInfo) SetAvailableCurrencyBalance(v string) {
	o.AvailableCurrencyBalance = &v
}

// GetPendingAmount returns the PendingAmount field value if set, zero value otherwise.
func (o *SettlementInfo) GetPendingAmount() string {
	if o == nil || IsNil(o.PendingAmount) {
		var ret string
		return ret
	}
	return *o.PendingAmount
}

// GetPendingAmountOk returns a tuple with the PendingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetPendingAmountOk() (*string, bool) {
	if o == nil || IsNil(o.PendingAmount) {
		return nil, false
	}
	return o.PendingAmount, true
}

// HasPendingAmount returns a boolean if a field has been set.
func (o *SettlementInfo) HasPendingAmount() bool {
	if o != nil && !IsNil(o.PendingAmount) {
		return true
	}

	return false
}

// SetPendingAmount gets a reference to the given string and assigns it to the PendingAmount field.
func (o *SettlementInfo) SetPendingAmount(v string) {
	o.PendingAmount = &v
}

// GetPendingCurrencyBalance returns the PendingCurrencyBalance field value if set, zero value otherwise.
func (o *SettlementInfo) GetPendingCurrencyBalance() string {
	if o == nil || IsNil(o.PendingCurrencyBalance) {
		var ret string
		return ret
	}
	return *o.PendingCurrencyBalance
}

// GetPendingCurrencyBalanceOk returns a tuple with the PendingCurrencyBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetPendingCurrencyBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.PendingCurrencyBalance) {
		return nil, false
	}
	return o.PendingCurrencyBalance, true
}

// HasPendingCurrencyBalance returns a boolean if a field has been set.
func (o *SettlementInfo) HasPendingCurrencyBalance() bool {
	if o != nil && !IsNil(o.PendingCurrencyBalance) {
		return true
	}

	return false
}

// SetPendingCurrencyBalance gets a reference to the given string and assigns it to the PendingCurrencyBalance field.
func (o *SettlementInfo) SetPendingCurrencyBalance(v string) {
	o.PendingCurrencyBalance = &v
}

// GetSettledAmount returns the SettledAmount field value if set, zero value otherwise.
func (o *SettlementInfo) GetSettledAmount() string {
	if o == nil || IsNil(o.SettledAmount) {
		var ret string
		return ret
	}
	return *o.SettledAmount
}

// GetSettledAmountOk returns a tuple with the SettledAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetSettledAmountOk() (*string, bool) {
	if o == nil || IsNil(o.SettledAmount) {
		return nil, false
	}
	return o.SettledAmount, true
}

// HasSettledAmount returns a boolean if a field has been set.
func (o *SettlementInfo) HasSettledAmount() bool {
	if o != nil && !IsNil(o.SettledAmount) {
		return true
	}

	return false
}

// SetSettledAmount gets a reference to the given string and assigns it to the SettledAmount field.
func (o *SettlementInfo) SetSettledAmount(v string) {
	o.SettledAmount = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *SettlementInfo) GetAvailableBalance() string {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret string
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetAvailableBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *SettlementInfo) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given string and assigns it to the AvailableBalance field.
func (o *SettlementInfo) SetAvailableBalance(v string) {
	o.AvailableBalance = &v
}

// GetTotalBalance returns the TotalBalance field value if set, zero value otherwise.
func (o *SettlementInfo) GetTotalBalance() string {
	if o == nil || IsNil(o.TotalBalance) {
		var ret string
		return ret
	}
	return *o.TotalBalance
}

// GetTotalBalanceOk returns a tuple with the TotalBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetTotalBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalBalance) {
		return nil, false
	}
	return o.TotalBalance, true
}

// HasTotalBalance returns a boolean if a field has been set.
func (o *SettlementInfo) HasTotalBalance() bool {
	if o != nil && !IsNil(o.TotalBalance) {
		return true
	}

	return false
}

// SetTotalBalance gets a reference to the given string and assigns it to the TotalBalance field.
func (o *SettlementInfo) SetTotalBalance(v string) {
	o.TotalBalance = &v
}

// GetAcquiringType returns the AcquiringType field value if set, zero value otherwise.
func (o *SettlementInfo) GetAcquiringType() AcquiringType {
	if o == nil || IsNil(o.AcquiringType) {
		var ret AcquiringType
		return ret
	}
	return *o.AcquiringType
}

// GetAcquiringTypeOk returns a tuple with the AcquiringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetAcquiringTypeOk() (*AcquiringType, bool) {
	if o == nil || IsNil(o.AcquiringType) {
		return nil, false
	}
	return o.AcquiringType, true
}

// HasAcquiringType returns a boolean if a field has been set.
func (o *SettlementInfo) HasAcquiringType() bool {
	if o != nil && !IsNil(o.AcquiringType) {
		return true
	}

	return false
}

// SetAcquiringType gets a reference to the given AcquiringType and assigns it to the AcquiringType field.
func (o *SettlementInfo) SetAcquiringType(v AcquiringType) {
	o.AcquiringType = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *SettlementInfo) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *SettlementInfo) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *SettlementInfo) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *SettlementInfo) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementInfo) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *SettlementInfo) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *SettlementInfo) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

func (o SettlementInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	toSerialize["available_amount"] = o.AvailableAmount
	if !IsNil(o.AvailableCurrencyBalance) {
		toSerialize["available_currency_balance"] = o.AvailableCurrencyBalance
	}
	if !IsNil(o.PendingAmount) {
		toSerialize["pending_amount"] = o.PendingAmount
	}
	if !IsNil(o.PendingCurrencyBalance) {
		toSerialize["pending_currency_balance"] = o.PendingCurrencyBalance
	}
	if !IsNil(o.SettledAmount) {
		toSerialize["settled_amount"] = o.SettledAmount
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	if !IsNil(o.TotalBalance) {
		toSerialize["total_balance"] = o.TotalBalance
	}
	if !IsNil(o.AcquiringType) {
		toSerialize["acquiring_type"] = o.AcquiringType
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	return toSerialize, nil
}

func (o *SettlementInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettlementInfo := _SettlementInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettlementInfo)

	if err != nil {
		return err
	}

	*o = SettlementInfo(varSettlementInfo)

	return err
}

type NullableSettlementInfo struct {
	value *SettlementInfo
	isSet bool
}

func (v NullableSettlementInfo) Get() *SettlementInfo {
	return v.value
}

func (v *NullableSettlementInfo) Set(val *SettlementInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlementInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlementInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlementInfo(val *SettlementInfo) *NullableSettlementInfo {
	return &NullableSettlementInfo{value: val, isSet: true}
}

func (v NullableSettlementInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlementInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


