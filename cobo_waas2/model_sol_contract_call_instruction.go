/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolContractCallInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolContractCallInstruction{}

// SolContractCallInstruction The information about the Solana instruction.
type SolContractCallInstruction struct {
	Accounts []SolContractCallAccount `json:"accounts"`
	// The Base64-encoded instruction data used for interacting with a Solana program. 
	Data string `json:"data"`
	// The address of the Solana program (smart contract).  
	ProgramId string `json:"program_id"`
}

type _SolContractCallInstruction SolContractCallInstruction

// NewSolContractCallInstruction instantiates a new SolContractCallInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolContractCallInstruction(accounts []SolContractCallAccount, data string, programId string) *SolContractCallInstruction {
	this := SolContractCallInstruction{}
	this.Accounts = accounts
	this.Data = data
	this.ProgramId = programId
	return &this
}

// NewSolContractCallInstructionWithDefaults instantiates a new SolContractCallInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolContractCallInstructionWithDefaults() *SolContractCallInstruction {
	this := SolContractCallInstruction{}
	return &this
}

// GetAccounts returns the Accounts field value
func (o *SolContractCallInstruction) GetAccounts() []SolContractCallAccount {
	if o == nil {
		var ret []SolContractCallAccount
		return ret
	}

	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value
// and a boolean to check if the value has been set.
func (o *SolContractCallInstruction) GetAccountsOk() ([]SolContractCallAccount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Accounts, true
}

// SetAccounts sets field value
func (o *SolContractCallInstruction) SetAccounts(v []SolContractCallAccount) {
	o.Accounts = v
}

// GetData returns the Data field value
func (o *SolContractCallInstruction) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SolContractCallInstruction) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *SolContractCallInstruction) SetData(v string) {
	o.Data = v
}

// GetProgramId returns the ProgramId field value
func (o *SolContractCallInstruction) GetProgramId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *SolContractCallInstruction) GetProgramIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *SolContractCallInstruction) SetProgramId(v string) {
	o.ProgramId = v
}

func (o SolContractCallInstruction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolContractCallInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accounts"] = o.Accounts
	toSerialize["data"] = o.Data
	toSerialize["program_id"] = o.ProgramId
	return toSerialize, nil
}

func (o *SolContractCallInstruction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accounts",
		"data",
		"program_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolContractCallInstruction := _SolContractCallInstruction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolContractCallInstruction)

	if err != nil {
		return err
	}

	*o = SolContractCallInstruction(varSolContractCallInstruction)

	return err
}

type NullableSolContractCallInstruction struct {
	value *SolContractCallInstruction
	isSet bool
}

func (v NullableSolContractCallInstruction) Get() *SolContractCallInstruction {
	return v.value
}

func (v *NullableSolContractCallInstruction) Set(val *SolContractCallInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableSolContractCallInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableSolContractCallInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolContractCallInstruction(val *SolContractCallInstruction) *NullableSolContractCallInstruction {
	return &NullableSolContractCallInstruction{value: val, isSet: true}
}

func (v NullableSolContractCallInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolContractCallInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


