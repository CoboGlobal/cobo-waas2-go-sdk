/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionBabylonBusinessInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionBabylonBusinessInfo{}

// TransactionBabylonBusinessInfo The Babylon business information.
type TransactionBabylonBusinessInfo struct {
	ExtraType TransactionExtraType `json:"extra_type"`
	BabylonAddressInfo *AddressInfo `json:"babylon_address_info,omitempty"`
	BtcAddressInfo *AddressInfo `json:"btc_address_info,omitempty"`
}

type _TransactionBabylonBusinessInfo TransactionBabylonBusinessInfo

// NewTransactionBabylonBusinessInfo instantiates a new TransactionBabylonBusinessInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionBabylonBusinessInfo(extraType TransactionExtraType) *TransactionBabylonBusinessInfo {
	this := TransactionBabylonBusinessInfo{}
	this.ExtraType = extraType
	return &this
}

// NewTransactionBabylonBusinessInfoWithDefaults instantiates a new TransactionBabylonBusinessInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionBabylonBusinessInfoWithDefaults() *TransactionBabylonBusinessInfo {
	this := TransactionBabylonBusinessInfo{}
	return &this
}

// GetExtraType returns the ExtraType field value
func (o *TransactionBabylonBusinessInfo) GetExtraType() TransactionExtraType {
	if o == nil {
		var ret TransactionExtraType
		return ret
	}

	return o.ExtraType
}

// GetExtraTypeOk returns a tuple with the ExtraType field value
// and a boolean to check if the value has been set.
func (o *TransactionBabylonBusinessInfo) GetExtraTypeOk() (*TransactionExtraType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraType, true
}

// SetExtraType sets field value
func (o *TransactionBabylonBusinessInfo) SetExtraType(v TransactionExtraType) {
	o.ExtraType = v
}

// GetBabylonAddressInfo returns the BabylonAddressInfo field value if set, zero value otherwise.
func (o *TransactionBabylonBusinessInfo) GetBabylonAddressInfo() AddressInfo {
	if o == nil || IsNil(o.BabylonAddressInfo) {
		var ret AddressInfo
		return ret
	}
	return *o.BabylonAddressInfo
}

// GetBabylonAddressInfoOk returns a tuple with the BabylonAddressInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonBusinessInfo) GetBabylonAddressInfoOk() (*AddressInfo, bool) {
	if o == nil || IsNil(o.BabylonAddressInfo) {
		return nil, false
	}
	return o.BabylonAddressInfo, true
}

// HasBabylonAddressInfo returns a boolean if a field has been set.
func (o *TransactionBabylonBusinessInfo) HasBabylonAddressInfo() bool {
	if o != nil && !IsNil(o.BabylonAddressInfo) {
		return true
	}

	return false
}

// SetBabylonAddressInfo gets a reference to the given AddressInfo and assigns it to the BabylonAddressInfo field.
func (o *TransactionBabylonBusinessInfo) SetBabylonAddressInfo(v AddressInfo) {
	o.BabylonAddressInfo = &v
}

// GetBtcAddressInfo returns the BtcAddressInfo field value if set, zero value otherwise.
func (o *TransactionBabylonBusinessInfo) GetBtcAddressInfo() AddressInfo {
	if o == nil || IsNil(o.BtcAddressInfo) {
		var ret AddressInfo
		return ret
	}
	return *o.BtcAddressInfo
}

// GetBtcAddressInfoOk returns a tuple with the BtcAddressInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBabylonBusinessInfo) GetBtcAddressInfoOk() (*AddressInfo, bool) {
	if o == nil || IsNil(o.BtcAddressInfo) {
		return nil, false
	}
	return o.BtcAddressInfo, true
}

// HasBtcAddressInfo returns a boolean if a field has been set.
func (o *TransactionBabylonBusinessInfo) HasBtcAddressInfo() bool {
	if o != nil && !IsNil(o.BtcAddressInfo) {
		return true
	}

	return false
}

// SetBtcAddressInfo gets a reference to the given AddressInfo and assigns it to the BtcAddressInfo field.
func (o *TransactionBabylonBusinessInfo) SetBtcAddressInfo(v AddressInfo) {
	o.BtcAddressInfo = &v
}

func (o TransactionBabylonBusinessInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionBabylonBusinessInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extra_type"] = o.ExtraType
	if !IsNil(o.BabylonAddressInfo) {
		toSerialize["babylon_address_info"] = o.BabylonAddressInfo
	}
	if !IsNil(o.BtcAddressInfo) {
		toSerialize["btc_address_info"] = o.BtcAddressInfo
	}
	return toSerialize, nil
}

func (o *TransactionBabylonBusinessInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extra_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionBabylonBusinessInfo := _TransactionBabylonBusinessInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionBabylonBusinessInfo)

	if err != nil {
		return err
	}

	*o = TransactionBabylonBusinessInfo(varTransactionBabylonBusinessInfo)

	return err
}

type NullableTransactionBabylonBusinessInfo struct {
	value *TransactionBabylonBusinessInfo
	isSet bool
}

func (v NullableTransactionBabylonBusinessInfo) Get() *TransactionBabylonBusinessInfo {
	return v.value
}

func (v *NullableTransactionBabylonBusinessInfo) Set(val *TransactionBabylonBusinessInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionBabylonBusinessInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionBabylonBusinessInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionBabylonBusinessInfo(val *TransactionBabylonBusinessInfo) *NullableTransactionBabylonBusinessInfo {
	return &NullableTransactionBabylonBusinessInfo{value: val, isSet: true}
}

func (v NullableTransactionBabylonBusinessInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionBabylonBusinessInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


