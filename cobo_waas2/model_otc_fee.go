/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OtcFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtcFee{}

// OtcFee struct for OtcFee
type OtcFee struct {
	// The otc fee rate.
	FeeRate string `json:"fee_rate"`
	// The token id in otc.
	TokenId *string `json:"token_id,omitempty"`
}

type _OtcFee OtcFee

// NewOtcFee instantiates a new OtcFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtcFee(feeRate string) *OtcFee {
	this := OtcFee{}
	this.FeeRate = feeRate
	return &this
}

// NewOtcFeeWithDefaults instantiates a new OtcFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtcFeeWithDefaults() *OtcFee {
	this := OtcFee{}
	return &this
}

// GetFeeRate returns the FeeRate field value
func (o *OtcFee) GetFeeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeRate
}

// GetFeeRateOk returns a tuple with the FeeRate field value
// and a boolean to check if the value has been set.
func (o *OtcFee) GetFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeRate, true
}

// SetFeeRate sets field value
func (o *OtcFee) SetFeeRate(v string) {
	o.FeeRate = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *OtcFee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtcFee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *OtcFee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *OtcFee) SetTokenId(v string) {
	o.TokenId = &v
}

func (o OtcFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtcFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_rate"] = o.FeeRate
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	return toSerialize, nil
}

func (o *OtcFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOtcFee := _OtcFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOtcFee)

	if err != nil {
		return err
	}

	*o = OtcFee(varOtcFee)

	return err
}

type NullableOtcFee struct {
	value *OtcFee
	isSet bool
}

func (v NullableOtcFee) Get() *OtcFee {
	return v.value
}

func (v *NullableOtcFee) Set(val *OtcFee) {
	v.value = val
	v.isSet = true
}

func (v NullableOtcFee) IsSet() bool {
	return v.isSet
}

func (v *NullableOtcFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtcFee(val *OtcFee) *NullableOtcFee {
	return &NullableOtcFee{value: val, isSet: true}
}

func (v NullableOtcFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtcFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


