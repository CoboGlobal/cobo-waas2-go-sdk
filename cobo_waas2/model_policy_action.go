/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyAction{}

// PolicyAction The action to be executed when the policy conditions are satisfied.
type PolicyAction struct {
	ActionType PolicyActionType `json:"action_type"`
	Content *PolicyActionContent `json:"content,omitempty"`
}

type _PolicyAction PolicyAction

// NewPolicyAction instantiates a new PolicyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyAction(actionType PolicyActionType) *PolicyAction {
	this := PolicyAction{}
	this.ActionType = actionType
	return &this
}

// NewPolicyActionWithDefaults instantiates a new PolicyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyActionWithDefaults() *PolicyAction {
	this := PolicyAction{}
	return &this
}

// GetActionType returns the ActionType field value
func (o *PolicyAction) GetActionType() PolicyActionType {
	if o == nil {
		var ret PolicyActionType
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *PolicyAction) GetActionTypeOk() (*PolicyActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *PolicyAction) SetActionType(v PolicyActionType) {
	o.ActionType = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *PolicyAction) GetContent() PolicyActionContent {
	if o == nil || IsNil(o.Content) {
		var ret PolicyActionContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyAction) GetContentOk() (*PolicyActionContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *PolicyAction) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given PolicyActionContent and assigns it to the Content field.
func (o *PolicyAction) SetContent(v PolicyActionContent) {
	o.Content = &v
}

func (o PolicyAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action_type"] = o.ActionType
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

func (o *PolicyAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyAction := _PolicyAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyAction)

	if err != nil {
		return err
	}

	*o = PolicyAction(varPolicyAction)

	return err
}

type NullablePolicyAction struct {
	value *PolicyAction
	isSet bool
}

func (v NullablePolicyAction) Get() *PolicyAction {
	return v.value
}

func (v *NullablePolicyAction) Set(val *PolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyAction(val *PolicyAction) *NullablePolicyAction {
	return &NullablePolicyAction{value: val, isSet: true}
}

func (v NullablePolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


