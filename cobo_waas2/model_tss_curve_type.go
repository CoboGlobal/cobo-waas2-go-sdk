/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSCurveType The elliptic curve type. Possible values include:  - `secp256k1` : The `SECP256K1` elliptic curve. - `ed25519` : The `ED25519` elliptic curve. 
type TSSCurveType string

// List of TSSCurveType
const (
	TSSCURVETYPE_SECP256K1 TSSCurveType = "secp256k1"
	TSSCURVETYPE_ED25519 TSSCurveType = "ed25519"
)

// All allowed values of TSSCurveType enum
var AllowedTSSCurveTypeEnumValues = []TSSCurveType{
	"secp256k1",
	"ed25519",
}

func (v *TSSCurveType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSCurveType(value)
	for _, existing := range AllowedTSSCurveTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSCurveType("unknown")
	return nil
}

// NewTSSCurveTypeFromValue returns a pointer to a valid TSSCurveType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSCurveTypeFromValue(v string) (*TSSCurveType, error) {
	ev := TSSCurveType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSCurveType: valid values are %v", v, AllowedTSSCurveTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSCurveType) IsValid() bool {
	for _, existing := range AllowedTSSCurveTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSCurveType value
func (v TSSCurveType) Ptr() *TSSCurveType {
	return &v
}

type NullableTSSCurveType struct {
	value *TSSCurveType
	isSet bool
}

func (v NullableTSSCurveType) Get() *TSSCurveType {
	return v.value
}

func (v *NullableTSSCurveType) Set(val *TSSCurveType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSCurveType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSCurveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSCurveType(val *TSSCurveType) *NullableTSSCurveType {
	return &NullableTSSCurveType{value: val, isSet: true}
}

func (v NullableTSSCurveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSCurveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

