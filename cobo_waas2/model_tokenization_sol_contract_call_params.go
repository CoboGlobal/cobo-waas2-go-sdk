/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationSolContractCallParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationSolContractCallParams{}

// TokenizationSolContractCallParams The information about the Solana program call.
type TokenizationSolContractCallParams struct {
	Type *TokenizationContractCallType `json:"type,omitempty"`
	Instructions []SolContractCallInstruction `json:"instructions"`
}

type _TokenizationSolContractCallParams TokenizationSolContractCallParams

// NewTokenizationSolContractCallParams instantiates a new TokenizationSolContractCallParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationSolContractCallParams(instructions []SolContractCallInstruction) *TokenizationSolContractCallParams {
	this := TokenizationSolContractCallParams{}
	this.Instructions = instructions
	return &this
}

// NewTokenizationSolContractCallParamsWithDefaults instantiates a new TokenizationSolContractCallParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationSolContractCallParamsWithDefaults() *TokenizationSolContractCallParams {
	this := TokenizationSolContractCallParams{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TokenizationSolContractCallParams) GetType() TokenizationContractCallType {
	if o == nil || IsNil(o.Type) {
		var ret TokenizationContractCallType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolContractCallParams) GetTypeOk() (*TokenizationContractCallType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TokenizationSolContractCallParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TokenizationContractCallType and assigns it to the Type field.
func (o *TokenizationSolContractCallParams) SetType(v TokenizationContractCallType) {
	o.Type = &v
}

// GetInstructions returns the Instructions field value
func (o *TokenizationSolContractCallParams) GetInstructions() []SolContractCallInstruction {
	if o == nil {
		var ret []SolContractCallInstruction
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *TokenizationSolContractCallParams) GetInstructionsOk() ([]SolContractCallInstruction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions, true
}

// SetInstructions sets field value
func (o *TokenizationSolContractCallParams) SetInstructions(v []SolContractCallInstruction) {
	o.Instructions = v
}

func (o TokenizationSolContractCallParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationSolContractCallParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["instructions"] = o.Instructions
	return toSerialize, nil
}

func (o *TokenizationSolContractCallParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationSolContractCallParams := _TokenizationSolContractCallParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationSolContractCallParams)

	if err != nil {
		return err
	}

	*o = TokenizationSolContractCallParams(varTokenizationSolContractCallParams)

	return err
}

type NullableTokenizationSolContractCallParams struct {
	value *TokenizationSolContractCallParams
	isSet bool
}

func (v NullableTokenizationSolContractCallParams) Get() *TokenizationSolContractCallParams {
	return v.value
}

func (v *NullableTokenizationSolContractCallParams) Set(val *TokenizationSolContractCallParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationSolContractCallParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationSolContractCallParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationSolContractCallParams(val *TokenizationSolContractCallParams) *NullableTokenizationSolContractCallParams {
	return &NullableTokenizationSolContractCallParams{value: val, isSet: true}
}

func (v NullableTokenizationSolContractCallParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationSolContractCallParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


