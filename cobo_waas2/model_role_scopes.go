/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleScopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleScopes{}

// RoleScopes struct for RoleScopes
type RoleScopes struct {
	// The user role associated with this API key.
	RoleName string `json:"role_name"`
	Scopes Scopes `json:"scopes"`
}

type _RoleScopes RoleScopes

// NewRoleScopes instantiates a new RoleScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleScopes(roleName string, scopes Scopes) *RoleScopes {
	this := RoleScopes{}
	this.RoleName = roleName
	this.Scopes = scopes
	return &this
}

// NewRoleScopesWithDefaults instantiates a new RoleScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleScopesWithDefaults() *RoleScopes {
	this := RoleScopes{}
	return &this
}

// GetRoleName returns the RoleName field value
func (o *RoleScopes) GetRoleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value
// and a boolean to check if the value has been set.
func (o *RoleScopes) GetRoleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleName, true
}

// SetRoleName sets field value
func (o *RoleScopes) SetRoleName(v string) {
	o.RoleName = v
}

// GetScopes returns the Scopes field value
func (o *RoleScopes) GetScopes() Scopes {
	if o == nil {
		var ret Scopes
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *RoleScopes) GetScopesOk() (*Scopes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scopes, true
}

// SetScopes sets field value
func (o *RoleScopes) SetScopes(v Scopes) {
	o.Scopes = v
}

func (o RoleScopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleScopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role_name"] = o.RoleName
	toSerialize["scopes"] = o.Scopes
	return toSerialize, nil
}

func (o *RoleScopes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role_name",
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleScopes := _RoleScopes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleScopes)

	if err != nil {
		return err
	}

	*o = RoleScopes(varRoleScopes)

	return err
}

type NullableRoleScopes struct {
	value *RoleScopes
	isSet bool
}

func (v NullableRoleScopes) Get() *RoleScopes {
	return v.value
}

func (v *NullableRoleScopes) Set(val *RoleScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleScopes(val *RoleScopes) *NullableRoleScopes {
	return &NullableRoleScopes{value: val, isSet: true}
}

func (v NullableRoleScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


