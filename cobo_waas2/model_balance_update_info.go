/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BalanceUpdateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceUpdateInfo{}

// BalanceUpdateInfo The balance information.
type BalanceUpdateInfo struct {
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The wallet address.
	Address string `json:"address"`
	// The wallet ID.
	WalletUuid string `json:"wallet_uuid"`
	// The time when the balance updated, in Unix timestamp format, measured in milliseconds. 
	UpdatedTimestamp int64 `json:"updated_timestamp"`
	Balance Balance `json:"balance"`
}

type _BalanceUpdateInfo BalanceUpdateInfo

// NewBalanceUpdateInfo instantiates a new BalanceUpdateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceUpdateInfo(tokenId string, address string, walletUuid string, updatedTimestamp int64, balance Balance) *BalanceUpdateInfo {
	this := BalanceUpdateInfo{}
	this.TokenId = tokenId
	this.Address = address
	this.WalletUuid = walletUuid
	this.UpdatedTimestamp = updatedTimestamp
	this.Balance = balance
	return &this
}

// NewBalanceUpdateInfoWithDefaults instantiates a new BalanceUpdateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceUpdateInfoWithDefaults() *BalanceUpdateInfo {
	this := BalanceUpdateInfo{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *BalanceUpdateInfo) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfo) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *BalanceUpdateInfo) SetTokenId(v string) {
	o.TokenId = v
}

// GetAddress returns the Address field value
func (o *BalanceUpdateInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BalanceUpdateInfo) SetAddress(v string) {
	o.Address = v
}

// GetWalletUuid returns the WalletUuid field value
func (o *BalanceUpdateInfo) GetWalletUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletUuid
}

// GetWalletUuidOk returns a tuple with the WalletUuid field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfo) GetWalletUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletUuid, true
}

// SetWalletUuid sets field value
func (o *BalanceUpdateInfo) SetWalletUuid(v string) {
	o.WalletUuid = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *BalanceUpdateInfo) GetUpdatedTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfo) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *BalanceUpdateInfo) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = v
}

// GetBalance returns the Balance field value
func (o *BalanceUpdateInfo) GetBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *BalanceUpdateInfo) GetBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *BalanceUpdateInfo) SetBalance(v Balance) {
	o.Balance = v
}

func (o BalanceUpdateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceUpdateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["address"] = o.Address
	toSerialize["wallet_uuid"] = o.WalletUuid
	toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *BalanceUpdateInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"address",
		"wallet_uuid",
		"updated_timestamp",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBalanceUpdateInfo := _BalanceUpdateInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBalanceUpdateInfo)

	if err != nil {
		return err
	}

	*o = BalanceUpdateInfo(varBalanceUpdateInfo)

	return err
}

type NullableBalanceUpdateInfo struct {
	value *BalanceUpdateInfo
	isSet bool
}

func (v NullableBalanceUpdateInfo) Get() *BalanceUpdateInfo {
	return v.value
}

func (v *NullableBalanceUpdateInfo) Set(val *BalanceUpdateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceUpdateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceUpdateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceUpdateInfo(val *BalanceUpdateInfo) *NullableBalanceUpdateInfo {
	return &NullableBalanceUpdateInfo{value: val, isSet: true}
}

func (v NullableBalanceUpdateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceUpdateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


