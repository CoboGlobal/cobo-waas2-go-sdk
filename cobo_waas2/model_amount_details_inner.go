/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AmountDetailsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmountDetailsInner{}

// AmountDetailsInner struct for AmountDetailsInner
type AmountDetailsInner struct {
	Status AmountStatus `json:"status"`
	// The staking amount.
	Amount string `json:"amount"`
	// The related staking activity ID.
	ActivityId *string `json:"activity_id,omitempty"`
}

type _AmountDetailsInner AmountDetailsInner

// NewAmountDetailsInner instantiates a new AmountDetailsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmountDetailsInner(status AmountStatus, amount string) *AmountDetailsInner {
	this := AmountDetailsInner{}
	this.Status = status
	this.Amount = amount
	return &this
}

// NewAmountDetailsInnerWithDefaults instantiates a new AmountDetailsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountDetailsInnerWithDefaults() *AmountDetailsInner {
	this := AmountDetailsInner{}
	return &this
}

// GetStatus returns the Status field value
func (o *AmountDetailsInner) GetStatus() AmountStatus {
	if o == nil {
		var ret AmountStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AmountDetailsInner) GetStatusOk() (*AmountStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AmountDetailsInner) SetStatus(v AmountStatus) {
	o.Status = v
}

// GetAmount returns the Amount field value
func (o *AmountDetailsInner) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AmountDetailsInner) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AmountDetailsInner) SetAmount(v string) {
	o.Amount = v
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *AmountDetailsInner) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId) {
		var ret string
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetailsInner) GetActivityIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityId) {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *AmountDetailsInner) HasActivityId() bool {
	if o != nil && !IsNil(o.ActivityId) {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given string and assigns it to the ActivityId field.
func (o *AmountDetailsInner) SetActivityId(v string) {
	o.ActivityId = &v
}

func (o AmountDetailsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmountDetailsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["amount"] = o.Amount
	if !IsNil(o.ActivityId) {
		toSerialize["activity_id"] = o.ActivityId
	}
	return toSerialize, nil
}

func (o *AmountDetailsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAmountDetailsInner := _AmountDetailsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAmountDetailsInner)

	if err != nil {
		return err
	}

	*o = AmountDetailsInner(varAmountDetailsInner)

	return err
}

type NullableAmountDetailsInner struct {
	value *AmountDetailsInner
	isSet bool
}

func (v NullableAmountDetailsInner) Get() *AmountDetailsInner {
	return v.value
}

func (v *NullableAmountDetailsInner) Set(val *AmountDetailsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountDetailsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountDetailsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountDetailsInner(val *AmountDetailsInner) *NullableAmountDetailsInner {
	return &NullableAmountDetailsInner{value: val, isSet: true}
}

func (v NullableAmountDetailsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountDetailsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


