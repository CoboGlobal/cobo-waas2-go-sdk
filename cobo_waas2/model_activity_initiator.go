/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the ActivityInitiator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityInitiator{}

// ActivityInitiator struct for ActivityInitiator
type ActivityInitiator struct {
	// The initiator of the staking activity.
	Initiator *string `json:"initiator,omitempty"`
}

// NewActivityInitiator instantiates a new ActivityInitiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityInitiator() *ActivityInitiator {
	this := ActivityInitiator{}
	return &this
}

// NewActivityInitiatorWithDefaults instantiates a new ActivityInitiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityInitiatorWithDefaults() *ActivityInitiator {
	this := ActivityInitiator{}
	return &this
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *ActivityInitiator) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInitiator) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *ActivityInitiator) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *ActivityInitiator) SetInitiator(v string) {
	o.Initiator = &v
}

func (o ActivityInitiator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInitiator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

type NullableActivityInitiator struct {
	value *ActivityInitiator
	isSet bool
}

func (v NullableActivityInitiator) Get() *ActivityInitiator {
	return v.value
}

func (v *NullableActivityInitiator) Set(val *ActivityInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityInitiator(val *ActivityInitiator) *NullableActivityInitiator {
	return &NullableActivityInitiator{value: val, isSet: true}
}

func (v NullableActivityInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


