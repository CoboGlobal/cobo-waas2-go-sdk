/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentSubscriptionPeriodType Specifies the period of charge for the subscription plan: - `Yearly`: The subscription period of charge is one year. - `Quarterly`: The subscription period of charge is one quarter. - `Monthly`: The subscription period of charge is one month. 
type PaymentSubscriptionPeriodType string

// List of PaymentSubscriptionPeriodType
const (
	PAYMENTSUBSCRIPTIONPERIODTYPE_YEARLY PaymentSubscriptionPeriodType = "Yearly"
	PAYMENTSUBSCRIPTIONPERIODTYPE_QUARTERLY PaymentSubscriptionPeriodType = "Quarterly"
	PAYMENTSUBSCRIPTIONPERIODTYPE_MONTHLY PaymentSubscriptionPeriodType = "Monthly"
)

// All allowed values of PaymentSubscriptionPeriodType enum
var AllowedPaymentSubscriptionPeriodTypeEnumValues = []PaymentSubscriptionPeriodType{
	"Yearly",
	"Quarterly",
	"Monthly",
}

func (v *PaymentSubscriptionPeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentSubscriptionPeriodType(value)
	for _, existing := range AllowedPaymentSubscriptionPeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PaymentSubscriptionPeriodType("unknown")
	return nil
}

// NewPaymentSubscriptionPeriodTypeFromValue returns a pointer to a valid PaymentSubscriptionPeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentSubscriptionPeriodTypeFromValue(v string) (*PaymentSubscriptionPeriodType, error) {
	ev := PaymentSubscriptionPeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentSubscriptionPeriodType: valid values are %v", v, AllowedPaymentSubscriptionPeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentSubscriptionPeriodType) IsValid() bool {
	for _, existing := range AllowedPaymentSubscriptionPeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentSubscriptionPeriodType value
func (v PaymentSubscriptionPeriodType) Ptr() *PaymentSubscriptionPeriodType {
	return &v
}

type NullablePaymentSubscriptionPeriodType struct {
	value *PaymentSubscriptionPeriodType
	isSet bool
}

func (v NullablePaymentSubscriptionPeriodType) Get() *PaymentSubscriptionPeriodType {
	return v.value
}

func (v *NullablePaymentSubscriptionPeriodType) Set(val *PaymentSubscriptionPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionPeriodType(val *PaymentSubscriptionPeriodType) *NullablePaymentSubscriptionPeriodType {
	return &NullablePaymentSubscriptionPeriodType{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

