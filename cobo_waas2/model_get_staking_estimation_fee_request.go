/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// GetStakingEstimationFeeRequest - struct for GetStakingEstimationFeeRequest
type GetStakingEstimationFeeRequest struct {
	EstimateClaimFee *EstimateClaimFee
	EstimateStakeFee *EstimateStakeFee
	EstimateUnstakeFee *EstimateUnstakeFee
	EstimateWithdrawFee *EstimateWithdrawFee
}

// EstimateClaimFeeAsGetStakingEstimationFeeRequest is a convenience function that returns EstimateClaimFee wrapped in GetStakingEstimationFeeRequest
func EstimateClaimFeeAsGetStakingEstimationFeeRequest(v *EstimateClaimFee) GetStakingEstimationFeeRequest {
	return GetStakingEstimationFeeRequest{
		EstimateClaimFee: v,
	}
}

// EstimateStakeFeeAsGetStakingEstimationFeeRequest is a convenience function that returns EstimateStakeFee wrapped in GetStakingEstimationFeeRequest
func EstimateStakeFeeAsGetStakingEstimationFeeRequest(v *EstimateStakeFee) GetStakingEstimationFeeRequest {
	return GetStakingEstimationFeeRequest{
		EstimateStakeFee: v,
	}
}

// EstimateUnstakeFeeAsGetStakingEstimationFeeRequest is a convenience function that returns EstimateUnstakeFee wrapped in GetStakingEstimationFeeRequest
func EstimateUnstakeFeeAsGetStakingEstimationFeeRequest(v *EstimateUnstakeFee) GetStakingEstimationFeeRequest {
	return GetStakingEstimationFeeRequest{
		EstimateUnstakeFee: v,
	}
}

// EstimateWithdrawFeeAsGetStakingEstimationFeeRequest is a convenience function that returns EstimateWithdrawFee wrapped in GetStakingEstimationFeeRequest
func EstimateWithdrawFeeAsGetStakingEstimationFeeRequest(v *EstimateWithdrawFee) GetStakingEstimationFeeRequest {
	return GetStakingEstimationFeeRequest{
		EstimateWithdrawFee: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetStakingEstimationFeeRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Claim'
	if jsonDict["activity_type"] == "Claim" {
		// try to unmarshal JSON data into EstimateClaimFee
		err = json.Unmarshal(data, &dst.EstimateClaimFee)
		if err == nil {
			return nil // data stored in dst.EstimateClaimFee, return on the first match
		} else {
			dst.EstimateClaimFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateClaimFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Stake'
	if jsonDict["activity_type"] == "Stake" {
		// try to unmarshal JSON data into EstimateStakeFee
		err = json.Unmarshal(data, &dst.EstimateStakeFee)
		if err == nil {
			return nil // data stored in dst.EstimateStakeFee, return on the first match
		} else {
			dst.EstimateStakeFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateStakeFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Unstake'
	if jsonDict["activity_type"] == "Unstake" {
		// try to unmarshal JSON data into EstimateUnstakeFee
		err = json.Unmarshal(data, &dst.EstimateUnstakeFee)
		if err == nil {
			return nil // data stored in dst.EstimateUnstakeFee, return on the first match
		} else {
			dst.EstimateUnstakeFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateUnstakeFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Withdraw'
	if jsonDict["activity_type"] == "Withdraw" {
		// try to unmarshal JSON data into EstimateWithdrawFee
		err = json.Unmarshal(data, &dst.EstimateWithdrawFee)
		if err == nil {
			return nil // data stored in dst.EstimateWithdrawFee, return on the first match
		} else {
			dst.EstimateWithdrawFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateWithdrawFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateClaimFee'
	if jsonDict["activity_type"] == "EstimateClaimFee" {
		// try to unmarshal JSON data into EstimateClaimFee
		err = json.Unmarshal(data, &dst.EstimateClaimFee)
		if err == nil {
			return nil // data stored in dst.EstimateClaimFee, return on the first match
		} else {
			dst.EstimateClaimFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateClaimFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateStakeFee'
	if jsonDict["activity_type"] == "EstimateStakeFee" {
		// try to unmarshal JSON data into EstimateStakeFee
		err = json.Unmarshal(data, &dst.EstimateStakeFee)
		if err == nil {
			return nil // data stored in dst.EstimateStakeFee, return on the first match
		} else {
			dst.EstimateStakeFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateStakeFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateUnstakeFee'
	if jsonDict["activity_type"] == "EstimateUnstakeFee" {
		// try to unmarshal JSON data into EstimateUnstakeFee
		err = json.Unmarshal(data, &dst.EstimateUnstakeFee)
		if err == nil {
			return nil // data stored in dst.EstimateUnstakeFee, return on the first match
		} else {
			dst.EstimateUnstakeFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateUnstakeFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EstimateWithdrawFee'
	if jsonDict["activity_type"] == "EstimateWithdrawFee" {
		// try to unmarshal JSON data into EstimateWithdrawFee
		err = json.Unmarshal(data, &dst.EstimateWithdrawFee)
		if err == nil {
			return nil // data stored in dst.EstimateWithdrawFee, return on the first match
		} else {
			dst.EstimateWithdrawFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFeeRequest as EstimateWithdrawFee: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetStakingEstimationFeeRequest) MarshalJSON() ([]byte, error) {
	if src.EstimateClaimFee != nil {
		return json.Marshal(&src.EstimateClaimFee)
	}

	if src.EstimateStakeFee != nil {
		return json.Marshal(&src.EstimateStakeFee)
	}

	if src.EstimateUnstakeFee != nil {
		return json.Marshal(&src.EstimateUnstakeFee)
	}

	if src.EstimateWithdrawFee != nil {
		return json.Marshal(&src.EstimateWithdrawFee)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetStakingEstimationFeeRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EstimateClaimFee != nil {
		return obj.EstimateClaimFee
	}

	if obj.EstimateStakeFee != nil {
		return obj.EstimateStakeFee
	}

	if obj.EstimateUnstakeFee != nil {
		return obj.EstimateUnstakeFee
	}

	if obj.EstimateWithdrawFee != nil {
		return obj.EstimateWithdrawFee
	}

	// all schemas are nil
	return nil
}

type NullableGetStakingEstimationFeeRequest struct {
	value *GetStakingEstimationFeeRequest
	isSet bool
}

func (v NullableGetStakingEstimationFeeRequest) Get() *GetStakingEstimationFeeRequest {
	return v.value
}

func (v *NullableGetStakingEstimationFeeRequest) Set(val *GetStakingEstimationFeeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStakingEstimationFeeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStakingEstimationFeeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStakingEstimationFeeRequest(val *GetStakingEstimationFeeRequest) *NullableGetStakingEstimationFeeRequest {
	return &NullableGetStakingEstimationFeeRequest{value: val, isSet: true}
}

func (v NullableGetStakingEstimationFeeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStakingEstimationFeeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


