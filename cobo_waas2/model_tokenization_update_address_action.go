/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationUpdateAddressAction The operation to perform on the blocklist or allowlist.
type TokenizationUpdateAddressAction string

// List of TokenizationUpdateAddressAction
const (
	TOKENIZATIONUPDATEADDRESSACTION_GRANT TokenizationUpdateAddressAction = "Grant"
	TOKENIZATIONUPDATEADDRESSACTION_REVOKE TokenizationUpdateAddressAction = "Revoke"
)

// All allowed values of TokenizationUpdateAddressAction enum
var AllowedTokenizationUpdateAddressActionEnumValues = []TokenizationUpdateAddressAction{
	"Grant",
	"Revoke",
}

func (v *TokenizationUpdateAddressAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationUpdateAddressAction(value)
	for _, existing := range AllowedTokenizationUpdateAddressActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationUpdateAddressAction("unknown")
	return nil
}

// NewTokenizationUpdateAddressActionFromValue returns a pointer to a valid TokenizationUpdateAddressAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationUpdateAddressActionFromValue(v string) (*TokenizationUpdateAddressAction, error) {
	ev := TokenizationUpdateAddressAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationUpdateAddressAction: valid values are %v", v, AllowedTokenizationUpdateAddressActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationUpdateAddressAction) IsValid() bool {
	for _, existing := range AllowedTokenizationUpdateAddressActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationUpdateAddressAction value
func (v TokenizationUpdateAddressAction) Ptr() *TokenizationUpdateAddressAction {
	return &v
}

type NullableTokenizationUpdateAddressAction struct {
	value *TokenizationUpdateAddressAction
	isSet bool
}

func (v NullableTokenizationUpdateAddressAction) Get() *TokenizationUpdateAddressAction {
	return v.value
}

func (v *NullableTokenizationUpdateAddressAction) Set(val *TokenizationUpdateAddressAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationUpdateAddressAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationUpdateAddressAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationUpdateAddressAction(val *TokenizationUpdateAddressAction) *NullableTokenizationUpdateAddressAction {
	return &NullableTokenizationUpdateAddressAction{value: val, isSet: true}
}

func (v NullableTokenizationUpdateAddressAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationUpdateAddressAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

