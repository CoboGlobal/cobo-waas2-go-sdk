/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSSignatureType The type of signature. Possible values include:  - 1 : ECDSA signature - 2 : EdDSA signature - 3 : Schnorr signature 
type TSSSignatureType int32

// List of TSSSignatureType
const (
	TSSSIGNATURETYPE_ECDSA TSSSignatureType = 1
	TSSSIGNATURETYPE_EdDSA TSSSignatureType = 2
	TSSSIGNATURETYPE_Schnorr TSSSignatureType = 3
)

// All allowed values of TSSSignatureType enum
var AllowedTSSSignatureTypeEnumValues = []TSSSignatureType{
	1,
	2,
	3,
}

func (v *TSSSignatureType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSSignatureType(value)
	for _, existing := range AllowedTSSSignatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSSignatureType(-1)
	return nil
}

// NewTSSSignatureTypeFromValue returns a pointer to a valid TSSSignatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSSignatureTypeFromValue(v int32) (*TSSSignatureType, error) {
	ev := TSSSignatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSSignatureType: valid values are %v", v, AllowedTSSSignatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSSignatureType) IsValid() bool {
	for _, existing := range AllowedTSSSignatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSSignatureType value
func (v TSSSignatureType) Ptr() *TSSSignatureType {
	return &v
}

type NullableTSSSignatureType struct {
	value *TSSSignatureType
	isSet bool
}

func (v NullableTSSSignatureType) Get() *TSSSignatureType {
	return v.value
}

func (v *NullableTSSSignatureType) Set(val *TSSSignatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSSignatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSSignatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSSignatureType(val *TSSSignatureType) *NullableTSSSignatureType {
	return &NullableTSSSignatureType{value: val, isSet: true}
}

func (v NullableTSSSignatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSSignatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

