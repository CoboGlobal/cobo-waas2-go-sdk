/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the BabylonEligibleAirdrop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BabylonEligibleAirdrop{}

// BabylonEligibleAirdrop The babylon airdrop eligibility.
type BabylonEligibleAirdrop struct {
	BtcAddress *StakingSource `json:"btc_address,omitempty"`
	BabylonAddress *StakingSource `json:"babylon_address,omitempty"`
	// The current Babylon points balance accumulated by the BTC address.
	BabylonPoints *string `json:"babylon_points,omitempty"`
	// The estimated airdrop amount based on the current Babylon points balance.
	AirdropAmount *string `json:"airdrop_amount,omitempty"`
	Status *BabylonRegistrationStatus `json:"status,omitempty"`
	Pop *BabylonAirdropPop `json:"pop,omitempty"`
}

// NewBabylonEligibleAirdrop instantiates a new BabylonEligibleAirdrop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonEligibleAirdrop() *BabylonEligibleAirdrop {
	this := BabylonEligibleAirdrop{}
	return &this
}

// NewBabylonEligibleAirdropWithDefaults instantiates a new BabylonEligibleAirdrop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonEligibleAirdropWithDefaults() *BabylonEligibleAirdrop {
	this := BabylonEligibleAirdrop{}
	return &this
}

// GetBtcAddress returns the BtcAddress field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetBtcAddress() StakingSource {
	if o == nil || IsNil(o.BtcAddress) {
		var ret StakingSource
		return ret
	}
	return *o.BtcAddress
}

// GetBtcAddressOk returns a tuple with the BtcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetBtcAddressOk() (*StakingSource, bool) {
	if o == nil || IsNil(o.BtcAddress) {
		return nil, false
	}
	return o.BtcAddress, true
}

// HasBtcAddress returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasBtcAddress() bool {
	if o != nil && !IsNil(o.BtcAddress) {
		return true
	}

	return false
}

// SetBtcAddress gets a reference to the given StakingSource and assigns it to the BtcAddress field.
func (o *BabylonEligibleAirdrop) SetBtcAddress(v StakingSource) {
	o.BtcAddress = &v
}

// GetBabylonAddress returns the BabylonAddress field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetBabylonAddress() StakingSource {
	if o == nil || IsNil(o.BabylonAddress) {
		var ret StakingSource
		return ret
	}
	return *o.BabylonAddress
}

// GetBabylonAddressOk returns a tuple with the BabylonAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetBabylonAddressOk() (*StakingSource, bool) {
	if o == nil || IsNil(o.BabylonAddress) {
		return nil, false
	}
	return o.BabylonAddress, true
}

// HasBabylonAddress returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasBabylonAddress() bool {
	if o != nil && !IsNil(o.BabylonAddress) {
		return true
	}

	return false
}

// SetBabylonAddress gets a reference to the given StakingSource and assigns it to the BabylonAddress field.
func (o *BabylonEligibleAirdrop) SetBabylonAddress(v StakingSource) {
	o.BabylonAddress = &v
}

// GetBabylonPoints returns the BabylonPoints field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetBabylonPoints() string {
	if o == nil || IsNil(o.BabylonPoints) {
		var ret string
		return ret
	}
	return *o.BabylonPoints
}

// GetBabylonPointsOk returns a tuple with the BabylonPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetBabylonPointsOk() (*string, bool) {
	if o == nil || IsNil(o.BabylonPoints) {
		return nil, false
	}
	return o.BabylonPoints, true
}

// HasBabylonPoints returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasBabylonPoints() bool {
	if o != nil && !IsNil(o.BabylonPoints) {
		return true
	}

	return false
}

// SetBabylonPoints gets a reference to the given string and assigns it to the BabylonPoints field.
func (o *BabylonEligibleAirdrop) SetBabylonPoints(v string) {
	o.BabylonPoints = &v
}

// GetAirdropAmount returns the AirdropAmount field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetAirdropAmount() string {
	if o == nil || IsNil(o.AirdropAmount) {
		var ret string
		return ret
	}
	return *o.AirdropAmount
}

// GetAirdropAmountOk returns a tuple with the AirdropAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetAirdropAmountOk() (*string, bool) {
	if o == nil || IsNil(o.AirdropAmount) {
		return nil, false
	}
	return o.AirdropAmount, true
}

// HasAirdropAmount returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasAirdropAmount() bool {
	if o != nil && !IsNil(o.AirdropAmount) {
		return true
	}

	return false
}

// SetAirdropAmount gets a reference to the given string and assigns it to the AirdropAmount field.
func (o *BabylonEligibleAirdrop) SetAirdropAmount(v string) {
	o.AirdropAmount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetStatus() BabylonRegistrationStatus {
	if o == nil || IsNil(o.Status) {
		var ret BabylonRegistrationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetStatusOk() (*BabylonRegistrationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BabylonRegistrationStatus and assigns it to the Status field.
func (o *BabylonEligibleAirdrop) SetStatus(v BabylonRegistrationStatus) {
	o.Status = &v
}

// GetPop returns the Pop field value if set, zero value otherwise.
func (o *BabylonEligibleAirdrop) GetPop() BabylonAirdropPop {
	if o == nil || IsNil(o.Pop) {
		var ret BabylonAirdropPop
		return ret
	}
	return *o.Pop
}

// GetPopOk returns a tuple with the Pop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonEligibleAirdrop) GetPopOk() (*BabylonAirdropPop, bool) {
	if o == nil || IsNil(o.Pop) {
		return nil, false
	}
	return o.Pop, true
}

// HasPop returns a boolean if a field has been set.
func (o *BabylonEligibleAirdrop) HasPop() bool {
	if o != nil && !IsNil(o.Pop) {
		return true
	}

	return false
}

// SetPop gets a reference to the given BabylonAirdropPop and assigns it to the Pop field.
func (o *BabylonEligibleAirdrop) SetPop(v BabylonAirdropPop) {
	o.Pop = &v
}

func (o BabylonEligibleAirdrop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BabylonEligibleAirdrop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BtcAddress) {
		toSerialize["btc_address"] = o.BtcAddress
	}
	if !IsNil(o.BabylonAddress) {
		toSerialize["babylon_address"] = o.BabylonAddress
	}
	if !IsNil(o.BabylonPoints) {
		toSerialize["babylon_points"] = o.BabylonPoints
	}
	if !IsNil(o.AirdropAmount) {
		toSerialize["airdrop_amount"] = o.AirdropAmount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Pop) {
		toSerialize["pop"] = o.Pop
	}
	return toSerialize, nil
}

type NullableBabylonEligibleAirdrop struct {
	value *BabylonEligibleAirdrop
	isSet bool
}

func (v NullableBabylonEligibleAirdrop) Get() *BabylonEligibleAirdrop {
	return v.value
}

func (v *NullableBabylonEligibleAirdrop) Set(val *BabylonEligibleAirdrop) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonEligibleAirdrop) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonEligibleAirdrop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonEligibleAirdrop(val *BabylonEligibleAirdrop) *NullableBabylonEligibleAirdrop {
	return &NullableBabylonEligibleAirdrop{value: val, isSet: true}
}

func (v NullableBabylonEligibleAirdrop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonEligibleAirdrop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


