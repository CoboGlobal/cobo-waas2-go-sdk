/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ActivityAction The specific action taken within an activity. Possible values include: - `Submitted`: Submit the staking, unstaking, or withdrawal request. - `BTCConfirmation`: The Bitcoin chain confirms the request. - `BabylonConfirmation`: The Babylon protocol confirms the request. - `DepositETH`: Deposit ETH to the validator to start staking. - `ClaimRewards`: Claim the rewards from the validator. - `ActivateValidator`: Activate the validator to start staking. - `UnstakeETH`: Unstake ETH from the validator. - `ApproveUSDC`: Approve the USDC token to be used for staking. - `ConvertToUSDS`: Convert the USDC token to the USDS token. - `ApproveUSDS`: Approve the USDS token to be used for staking. - `DepositUSDS`: Deposit the USDS token to the validator. - `WithdrawUSDS`: Withdraw the USDS token from the validator. - `ConvertToUSDC`: Convert the USDS token to the USDC token. 
type ActivityAction string

// List of ActivityAction
const (
	ACTIVITYACTION_SUBMITTED ActivityAction = "Submitted"
	ACTIVITYACTION_BTC_CONFIRMATION ActivityAction = "BTCConfirmation"
	ACTIVITYACTION_BABYLON_CONFIRMATION ActivityAction = "BabylonConfirmation"
	ACTIVITYACTION_DEPOSIT_ETH ActivityAction = "DepositETH"
	ACTIVITYACTION_CLAIM_REWARDS ActivityAction = "ClaimRewards"
	ACTIVITYACTION_ACTIVATE_VALIDATOR ActivityAction = "ActivateValidator"
	ACTIVITYACTION_UNSTAKE_ETH ActivityAction = "UnstakeETH"
	ACTIVITYACTION_APPROVE_USDC ActivityAction = "ApproveUSDC"
	ACTIVITYACTION_CONVERT_TO_USDS ActivityAction = "ConvertToUSDS"
	ACTIVITYACTION_APPROVE_USDS ActivityAction = "ApproveUSDS"
	ACTIVITYACTION_DEPOSIT_USDS ActivityAction = "DepositUSDS"
	ACTIVITYACTION_WITHDRAW_USDS ActivityAction = "WithdrawUSDS"
	ACTIVITYACTION_CONVERT_TO_USDC ActivityAction = "ConvertToUSDC"
)

// All allowed values of ActivityAction enum
var AllowedActivityActionEnumValues = []ActivityAction{
	"Submitted",
	"BTCConfirmation",
	"BabylonConfirmation",
	"DepositETH",
	"ClaimRewards",
	"ActivateValidator",
	"UnstakeETH",
	"ApproveUSDC",
	"ConvertToUSDS",
	"ApproveUSDS",
	"DepositUSDS",
	"WithdrawUSDS",
	"ConvertToUSDC",
}

func (v *ActivityAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityAction(value)
	for _, existing := range AllowedActivityActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ActivityAction("unknown")
    return nil
}

// NewActivityActionFromValue returns a pointer to a valid ActivityAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityActionFromValue(v string) (*ActivityAction, error) {
	ev := ActivityAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityAction: valid values are %v", v, AllowedActivityActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityAction) IsValid() bool {
	for _, existing := range AllowedActivityActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivityAction value
func (v ActivityAction) Ptr() *ActivityAction {
	return &v
}

type NullableActivityAction struct {
	value *ActivityAction
	isSet bool
}

func (v NullableActivityAction) Get() *ActivityAction {
	return v.value
}

func (v *NullableActivityAction) Set(val *ActivityAction) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityAction) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityAction(val *ActivityAction) *NullableActivityAction {
	return &NullableActivityAction{value: val, isSet: true}
}

func (v NullableActivityAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

