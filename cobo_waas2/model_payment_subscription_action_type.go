/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentSubscriptionActionType Specifies the period of charge for the subscription plan: - `Create`: The subscription create action. - `Approve`: The subscription approve action. - `Subscribe`: The subscription subscribe action. - `SubscribeAndCharge`: The subscription subscript and charge action. - `Charge`: The subscription charge action. - `Cancel`: The subscription cancel action. - `DeveloperPause`: The subscription developer pause action. - `DeveloperUnpause`: The subscription developer unpause action. - `ExtendPeriod`: The subscription extend period action. - `Upgrade`: The subscription upgrade action. - `Downgrade`: The subscription downgrade action. - `UpdateTokenId`: The subscription update token id action. 
type PaymentSubscriptionActionType string

// List of PaymentSubscriptionActionType
const (
	PAYMENTSUBSCRIPTIONACTIONTYPE_CREATE PaymentSubscriptionActionType = "Create"
	PAYMENTSUBSCRIPTIONACTIONTYPE_APPROVE PaymentSubscriptionActionType = "Approve"
	PAYMENTSUBSCRIPTIONACTIONTYPE_SUBSCRIBE PaymentSubscriptionActionType = "Subscribe"
	PAYMENTSUBSCRIPTIONACTIONTYPE_SUBSCRIBE_AND_CHARGE PaymentSubscriptionActionType = "SubscribeAndCharge"
	PAYMENTSUBSCRIPTIONACTIONTYPE_CHARGE PaymentSubscriptionActionType = "Charge"
	PAYMENTSUBSCRIPTIONACTIONTYPE_CANCEL PaymentSubscriptionActionType = "Cancel"
	PAYMENTSUBSCRIPTIONACTIONTYPE_DEVELOPER_PAUSE PaymentSubscriptionActionType = "DeveloperPause"
	PAYMENTSUBSCRIPTIONACTIONTYPE_DEVELOPER_UNPAUSE PaymentSubscriptionActionType = "DeveloperUnpause"
	PAYMENTSUBSCRIPTIONACTIONTYPE_EXTEND_PERIOD PaymentSubscriptionActionType = "ExtendPeriod"
	PAYMENTSUBSCRIPTIONACTIONTYPE_UPGRADE PaymentSubscriptionActionType = "Upgrade"
	PAYMENTSUBSCRIPTIONACTIONTYPE_DOWNGRADE PaymentSubscriptionActionType = "Downgrade"
	PAYMENTSUBSCRIPTIONACTIONTYPE_UPDATE_TOKEN_ID PaymentSubscriptionActionType = "UpdateTokenId"
)

// All allowed values of PaymentSubscriptionActionType enum
var AllowedPaymentSubscriptionActionTypeEnumValues = []PaymentSubscriptionActionType{
	"Create",
	"Approve",
	"Subscribe",
	"SubscribeAndCharge",
	"Charge",
	"Cancel",
	"DeveloperPause",
	"DeveloperUnpause",
	"ExtendPeriod",
	"Upgrade",
	"Downgrade",
	"UpdateTokenId",
}

func (v *PaymentSubscriptionActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentSubscriptionActionType(value)
	for _, existing := range AllowedPaymentSubscriptionActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PaymentSubscriptionActionType("unknown")
	return nil
}

// NewPaymentSubscriptionActionTypeFromValue returns a pointer to a valid PaymentSubscriptionActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentSubscriptionActionTypeFromValue(v string) (*PaymentSubscriptionActionType, error) {
	ev := PaymentSubscriptionActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentSubscriptionActionType: valid values are %v", v, AllowedPaymentSubscriptionActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentSubscriptionActionType) IsValid() bool {
	for _, existing := range AllowedPaymentSubscriptionActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentSubscriptionActionType value
func (v PaymentSubscriptionActionType) Ptr() *PaymentSubscriptionActionType {
	return &v
}

type NullablePaymentSubscriptionActionType struct {
	value *PaymentSubscriptionActionType
	isSet bool
}

func (v NullablePaymentSubscriptionActionType) Get() *PaymentSubscriptionActionType {
	return v.value
}

func (v *NullablePaymentSubscriptionActionType) Set(val *PaymentSubscriptionActionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionActionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionActionType(val *PaymentSubscriptionActionType) *NullablePaymentSubscriptionActionType {
	return &NullablePaymentSubscriptionActionType{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

