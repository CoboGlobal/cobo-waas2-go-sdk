/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationTokenPermissionType The type of permission for token operations.
type TokenizationTokenPermissionType string

// List of TokenizationTokenPermissionType
const (
	TOKENIZATIONTOKENPERMISSIONTYPE_MANAGE_PERMISSIONS TokenizationTokenPermissionType = "ManagePermissions"
	TOKENIZATIONTOKENPERMISSIONTYPE_MANAGE_ACCESS_AND_CONTROLS TokenizationTokenPermissionType = "ManageAccessAndControls"
	TOKENIZATIONTOKENPERMISSIONTYPE_MINT_TOKENS TokenizationTokenPermissionType = "MintTokens"
	TOKENIZATIONTOKENPERMISSIONTYPE_BURN_TOKENS TokenizationTokenPermissionType = "BurnTokens"
	TOKENIZATIONTOKENPERMISSIONTYPE_RECOVER_TOKENS TokenizationTokenPermissionType = "RecoverTokens"
	TOKENIZATIONTOKENPERMISSIONTYPE_UPGRADE_CONTRACT TokenizationTokenPermissionType = "UpgradeContract"
	TOKENIZATIONTOKENPERMISSIONTYPE_PAUSE_CONTRACT TokenizationTokenPermissionType = "PauseContract"
)

// All allowed values of TokenizationTokenPermissionType enum
var AllowedTokenizationTokenPermissionTypeEnumValues = []TokenizationTokenPermissionType{
	"ManagePermissions",
	"ManageAccessAndControls",
	"MintTokens",
	"BurnTokens",
	"RecoverTokens",
	"UpgradeContract",
	"PauseContract",
}

func (v *TokenizationTokenPermissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationTokenPermissionType(value)
	for _, existing := range AllowedTokenizationTokenPermissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationTokenPermissionType("unknown")
	return nil
}

// NewTokenizationTokenPermissionTypeFromValue returns a pointer to a valid TokenizationTokenPermissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationTokenPermissionTypeFromValue(v string) (*TokenizationTokenPermissionType, error) {
	ev := TokenizationTokenPermissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationTokenPermissionType: valid values are %v", v, AllowedTokenizationTokenPermissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationTokenPermissionType) IsValid() bool {
	for _, existing := range AllowedTokenizationTokenPermissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationTokenPermissionType value
func (v TokenizationTokenPermissionType) Ptr() *TokenizationTokenPermissionType {
	return &v
}

type NullableTokenizationTokenPermissionType struct {
	value *TokenizationTokenPermissionType
	isSet bool
}

func (v NullableTokenizationTokenPermissionType) Get() *TokenizationTokenPermissionType {
	return v.value
}

func (v *NullableTokenizationTokenPermissionType) Set(val *TokenizationTokenPermissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenPermissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenPermissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenPermissionType(val *TokenizationTokenPermissionType) *NullableTokenizationTokenPermissionType {
	return &NullableTokenizationTokenPermissionType{value: val, isSet: true}
}

func (v NullableTokenizationTokenPermissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenPermissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

