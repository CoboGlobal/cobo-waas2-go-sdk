/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PayoutChannel The channel through which settlement funds will be transferred. Available options: - `Crypto`: Direct withdrawal to a registered crypto address. - `OffRamp`: Settle to a registered bank account. 
type PayoutChannel string

// List of PayoutChannel
const (
	PAYOUTCHANNEL_CRYPTO PayoutChannel = "Crypto"
	PAYOUTCHANNEL_OFF_RAMP PayoutChannel = "OffRamp"
)

// All allowed values of PayoutChannel enum
var AllowedPayoutChannelEnumValues = []PayoutChannel{
	"Crypto",
	"OffRamp",
}

func (v *PayoutChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PayoutChannel(value)
	for _, existing := range AllowedPayoutChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PayoutChannel("unknown")
	return nil
}

// NewPayoutChannelFromValue returns a pointer to a valid PayoutChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPayoutChannelFromValue(v string) (*PayoutChannel, error) {
	ev := PayoutChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PayoutChannel: valid values are %v", v, AllowedPayoutChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PayoutChannel) IsValid() bool {
	for _, existing := range AllowedPayoutChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PayoutChannel value
func (v PayoutChannel) Ptr() *PayoutChannel {
	return &v
}

type NullablePayoutChannel struct {
	value *PayoutChannel
	isSet bool
}

func (v NullablePayoutChannel) Get() *PayoutChannel {
	return v.value
}

func (v *NullablePayoutChannel) Set(val *PayoutChannel) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutChannel) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutChannel(val *PayoutChannel) *NullablePayoutChannel {
	return &NullablePayoutChannel{value: val, isSet: true}
}

func (v NullablePayoutChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

