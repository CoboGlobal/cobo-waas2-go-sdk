/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyActionContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyActionContent{}

// PolicyActionContent The information of an app workflow policy quorum action content.
type PolicyActionContent struct {
	// The quorum action content type. Possible values include:    - `FULL_APPROVAL`: The content type is approved by all persons.   - `PART_APPROVAL`: The content type is approved by some persons. 
	Type string `json:"type"`
	Roles []string `json:"roles,omitempty"`
	UserIds []string `json:"user_ids,omitempty"`
	// The number of persons need approved, such as 2.
	Threshold *int32 `json:"threshold,omitempty"`
}

type _PolicyActionContent PolicyActionContent

// NewPolicyActionContent instantiates a new PolicyActionContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyActionContent(type_ string) *PolicyActionContent {
	this := PolicyActionContent{}
	this.Type = type_
	return &this
}

// NewPolicyActionContentWithDefaults instantiates a new PolicyActionContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyActionContentWithDefaults() *PolicyActionContent {
	this := PolicyActionContent{}
	return &this
}

// GetType returns the Type field value
func (o *PolicyActionContent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PolicyActionContent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PolicyActionContent) SetType(v string) {
	o.Type = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *PolicyActionContent) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyActionContent) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *PolicyActionContent) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *PolicyActionContent) SetRoles(v []string) {
	o.Roles = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *PolicyActionContent) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyActionContent) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *PolicyActionContent) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *PolicyActionContent) SetUserIds(v []string) {
	o.UserIds = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *PolicyActionContent) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyActionContent) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *PolicyActionContent) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *PolicyActionContent) SetThreshold(v int32) {
	o.Threshold = &v
}

func (o PolicyActionContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyActionContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

func (o *PolicyActionContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyActionContent := _PolicyActionContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyActionContent)

	if err != nil {
		return err
	}

	*o = PolicyActionContent(varPolicyActionContent)

	return err
}

type NullablePolicyActionContent struct {
	value *PolicyActionContent
	isSet bool
}

func (v NullablePolicyActionContent) Get() *PolicyActionContent {
	return v.value
}

func (v *NullablePolicyActionContent) Set(val *PolicyActionContent) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyActionContent) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyActionContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyActionContent(val *PolicyActionContent) *NullablePolicyActionContent {
	return &NullablePolicyActionContent{value: val, isSet: true}
}

func (v NullablePolicyActionContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyActionContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


