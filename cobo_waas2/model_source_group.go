/*
Cobo Wallet as a Service 2.0

Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceGroup{}

// SourceGroup The source key share holder group.  **Note:** `source_key_share_holder_group` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the `target_key_share_holder_group`. 
type SourceGroup struct {
	// The source key share holder group ID.
	KeyShareHolderGroupId string `json:"key_share_holder_group_id"`
	// The TSS Node IDs participating in creating a new key share holder group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`.   **Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) such as the 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format), for `tss_node_ids`, you only need to fill in 1 Cobo TSS Node ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers specified in `threshold`. To obtain the Cobo TSS Node ID, run [List all Cobo key share holders](/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders). 
	TssNodeIds []string `json:"tss_node_ids,omitempty"`
}

type _SourceGroup SourceGroup

// NewSourceGroup instantiates a new SourceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceGroup(keyShareHolderGroupId string) *SourceGroup {
	this := SourceGroup{}
	this.KeyShareHolderGroupId = keyShareHolderGroupId
	return &this
}

// NewSourceGroupWithDefaults instantiates a new SourceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceGroupWithDefaults() *SourceGroup {
	this := SourceGroup{}
	return &this
}

// GetKeyShareHolderGroupId returns the KeyShareHolderGroupId field value
func (o *SourceGroup) GetKeyShareHolderGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyShareHolderGroupId
}

// GetKeyShareHolderGroupIdOk returns a tuple with the KeyShareHolderGroupId field value
// and a boolean to check if the value has been set.
func (o *SourceGroup) GetKeyShareHolderGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyShareHolderGroupId, true
}

// SetKeyShareHolderGroupId sets field value
func (o *SourceGroup) SetKeyShareHolderGroupId(v string) {
	o.KeyShareHolderGroupId = v
}

// GetTssNodeIds returns the TssNodeIds field value if set, zero value otherwise.
func (o *SourceGroup) GetTssNodeIds() []string {
	if o == nil || IsNil(o.TssNodeIds) {
		var ret []string
		return ret
	}
	return o.TssNodeIds
}

// GetTssNodeIdsOk returns a tuple with the TssNodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceGroup) GetTssNodeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TssNodeIds) {
		return nil, false
	}
	return o.TssNodeIds, true
}

// HasTssNodeIds returns a boolean if a field has been set.
func (o *SourceGroup) HasTssNodeIds() bool {
	if o != nil && !IsNil(o.TssNodeIds) {
		return true
	}

	return false
}

// SetTssNodeIds gets a reference to the given []string and assigns it to the TssNodeIds field.
func (o *SourceGroup) SetTssNodeIds(v []string) {
	o.TssNodeIds = v
}

func (o SourceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key_share_holder_group_id"] = o.KeyShareHolderGroupId
	if !IsNil(o.TssNodeIds) {
		toSerialize["tss_node_ids"] = o.TssNodeIds
	}
	return toSerialize, nil
}

func (o *SourceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key_share_holder_group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceGroup := _SourceGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceGroup)

	if err != nil {
		return err
	}

	*o = SourceGroup(varSourceGroup)

	return err
}

type NullableSourceGroup struct {
	value *SourceGroup
	isSet bool
}

func (v NullableSourceGroup) Get() *SourceGroup {
	return v.value
}

func (v *NullableSourceGroup) Set(val *SourceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceGroup(val *SourceGroup) *NullableSourceGroup {
	return &NullableSourceGroup{value: val, isSet: true}
}

func (v NullableSourceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


