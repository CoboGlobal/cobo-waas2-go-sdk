/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationPermissionAction The permission action to perform: - `add`: Grant permissions to specified addresses - `remove`: Revoke permissions from specified addresses - `set`: Set permissions for specified addresses exclusively  Supported actions by chain: - **EVM**: add, remove - **Solana**: set 
type TokenizationPermissionAction string

// List of TokenizationPermissionAction
const (
	TOKENIZATIONPERMISSIONACTION_ADD TokenizationPermissionAction = "add"
	TOKENIZATIONPERMISSIONACTION_REMOVE TokenizationPermissionAction = "remove"
	TOKENIZATIONPERMISSIONACTION_SET TokenizationPermissionAction = "set"
)

// All allowed values of TokenizationPermissionAction enum
var AllowedTokenizationPermissionActionEnumValues = []TokenizationPermissionAction{
	"add",
	"remove",
	"set",
}

func (v *TokenizationPermissionAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationPermissionAction(value)
	for _, existing := range AllowedTokenizationPermissionActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationPermissionAction("unknown")
	return nil
}

// NewTokenizationPermissionActionFromValue returns a pointer to a valid TokenizationPermissionAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationPermissionActionFromValue(v string) (*TokenizationPermissionAction, error) {
	ev := TokenizationPermissionAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationPermissionAction: valid values are %v", v, AllowedTokenizationPermissionActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationPermissionAction) IsValid() bool {
	for _, existing := range AllowedTokenizationPermissionActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationPermissionAction value
func (v TokenizationPermissionAction) Ptr() *TokenizationPermissionAction {
	return &v
}

type NullableTokenizationPermissionAction struct {
	value *TokenizationPermissionAction
	isSet bool
}

func (v NullableTokenizationPermissionAction) Get() *TokenizationPermissionAction {
	return v.value
}

func (v *NullableTokenizationPermissionAction) Set(val *TokenizationPermissionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationPermissionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationPermissionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationPermissionAction(val *TokenizationPermissionAction) *NullableTokenizationPermissionAction {
	return &NullableTokenizationPermissionAction{value: val, isSet: true}
}

func (v NullableTokenizationPermissionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationPermissionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

