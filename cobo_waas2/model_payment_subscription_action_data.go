/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentSubscriptionActionData - struct for PaymentSubscriptionActionData
type PaymentSubscriptionActionData struct {
	PaymentApproveSubscriptionActionData *PaymentApproveSubscriptionActionData
	PaymentBaseSubscriptionActionData *PaymentBaseSubscriptionActionData
	PaymentCreateSubscriptionActionData *PaymentCreateSubscriptionActionData
	PaymentDeveloperSubscriptionActionData *PaymentDeveloperSubscriptionActionData
	PaymentExtendPeriodSubscriptionActionData *PaymentExtendPeriodSubscriptionActionData
	PaymentUpdateAmountSubscriptionActionData *PaymentUpdateAmountSubscriptionActionData
}

// PaymentApproveSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentApproveSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentApproveSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentApproveSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentApproveSubscriptionActionData: v,
	}
}

// PaymentBaseSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentBaseSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentBaseSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentBaseSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentBaseSubscriptionActionData: v,
	}
}

// PaymentCreateSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentCreateSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentCreateSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentCreateSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentCreateSubscriptionActionData: v,
	}
}

// PaymentDeveloperSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentDeveloperSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentDeveloperSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentDeveloperSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentDeveloperSubscriptionActionData: v,
	}
}

// PaymentExtendPeriodSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentExtendPeriodSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentExtendPeriodSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentExtendPeriodSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentExtendPeriodSubscriptionActionData: v,
	}
}

// PaymentUpdateAmountSubscriptionActionDataAsPaymentSubscriptionActionData is a convenience function that returns PaymentUpdateAmountSubscriptionActionData wrapped in PaymentSubscriptionActionData
func PaymentUpdateAmountSubscriptionActionDataAsPaymentSubscriptionActionData(v *PaymentUpdateAmountSubscriptionActionData) PaymentSubscriptionActionData {
	return PaymentSubscriptionActionData{
		PaymentUpdateAmountSubscriptionActionData: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentSubscriptionActionData) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Approve'
	if jsonDict["action_type"] == "Approve" {
		// try to unmarshal JSON data into PaymentBaseSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentBaseSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentBaseSubscriptionActionData, return on the first match
		} else {
			dst.PaymentBaseSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentBaseSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Charge'
	if jsonDict["action_type"] == "Charge" {
		// try to unmarshal JSON data into PaymentBaseSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentBaseSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentBaseSubscriptionActionData, return on the first match
		} else {
			dst.PaymentBaseSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentBaseSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Create'
	if jsonDict["action_type"] == "Create" {
		// try to unmarshal JSON data into PaymentCreateSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentCreateSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentCreateSubscriptionActionData, return on the first match
		} else {
			dst.PaymentCreateSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentCreateSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DeveloperPause'
	if jsonDict["action_type"] == "DeveloperPause" {
		// try to unmarshal JSON data into PaymentDeveloperSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentDeveloperSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentDeveloperSubscriptionActionData, return on the first match
		} else {
			dst.PaymentDeveloperSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentDeveloperSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DeveloperUnpause'
	if jsonDict["action_type"] == "DeveloperUnpause" {
		// try to unmarshal JSON data into PaymentDeveloperSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentDeveloperSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentDeveloperSubscriptionActionData, return on the first match
		} else {
			dst.PaymentDeveloperSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentDeveloperSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Downgrade'
	if jsonDict["action_type"] == "Downgrade" {
		// try to unmarshal JSON data into PaymentUpdateAmountSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentUpdateAmountSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentUpdateAmountSubscriptionActionData, return on the first match
		} else {
			dst.PaymentUpdateAmountSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentUpdateAmountSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtendPeriod'
	if jsonDict["action_type"] == "ExtendPeriod" {
		// try to unmarshal JSON data into PaymentExtendPeriodSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentExtendPeriodSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentExtendPeriodSubscriptionActionData, return on the first match
		} else {
			dst.PaymentExtendPeriodSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentExtendPeriodSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Subscribe'
	if jsonDict["action_type"] == "Subscribe" {
		// try to unmarshal JSON data into PaymentBaseSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentBaseSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentBaseSubscriptionActionData, return on the first match
		} else {
			dst.PaymentBaseSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentBaseSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SubscribeAndCharge'
	if jsonDict["action_type"] == "SubscribeAndCharge" {
		// try to unmarshal JSON data into PaymentBaseSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentBaseSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentBaseSubscriptionActionData, return on the first match
		} else {
			dst.PaymentBaseSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentBaseSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Upgrade'
	if jsonDict["action_type"] == "Upgrade" {
		// try to unmarshal JSON data into PaymentUpdateAmountSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentUpdateAmountSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentUpdateAmountSubscriptionActionData, return on the first match
		} else {
			dst.PaymentUpdateAmountSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentUpdateAmountSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentApproveSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentApproveSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentApproveSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentApproveSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentApproveSubscriptionActionData, return on the first match
		} else {
			dst.PaymentApproveSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentApproveSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentBaseSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentBaseSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentBaseSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentBaseSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentBaseSubscriptionActionData, return on the first match
		} else {
			dst.PaymentBaseSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentBaseSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentCreateSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentCreateSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentCreateSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentCreateSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentCreateSubscriptionActionData, return on the first match
		} else {
			dst.PaymentCreateSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentCreateSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentDeveloperSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentDeveloperSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentDeveloperSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentDeveloperSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentDeveloperSubscriptionActionData, return on the first match
		} else {
			dst.PaymentDeveloperSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentDeveloperSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentExtendPeriodSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentExtendPeriodSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentExtendPeriodSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentExtendPeriodSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentExtendPeriodSubscriptionActionData, return on the first match
		} else {
			dst.PaymentExtendPeriodSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentExtendPeriodSubscriptionActionData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentUpdateAmountSubscriptionActionData'
	if jsonDict["action_type"] == "PaymentUpdateAmountSubscriptionActionData" {
		// try to unmarshal JSON data into PaymentUpdateAmountSubscriptionActionData
		err = json.Unmarshal(data, &dst.PaymentUpdateAmountSubscriptionActionData)
		if err == nil {
			return nil // data stored in dst.PaymentUpdateAmountSubscriptionActionData, return on the first match
		} else {
			dst.PaymentUpdateAmountSubscriptionActionData = nil
			return fmt.Errorf("failed to unmarshal PaymentSubscriptionActionData as PaymentUpdateAmountSubscriptionActionData: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentSubscriptionActionData) MarshalJSON() ([]byte, error) {
	if src.PaymentApproveSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentApproveSubscriptionActionData)
	}

	if src.PaymentBaseSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentBaseSubscriptionActionData)
	}

	if src.PaymentCreateSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentCreateSubscriptionActionData)
	}

	if src.PaymentDeveloperSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentDeveloperSubscriptionActionData)
	}

	if src.PaymentExtendPeriodSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentExtendPeriodSubscriptionActionData)
	}

	if src.PaymentUpdateAmountSubscriptionActionData != nil {
		return json.Marshal(&src.PaymentUpdateAmountSubscriptionActionData)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentSubscriptionActionData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaymentApproveSubscriptionActionData != nil {
		return obj.PaymentApproveSubscriptionActionData
	}

	if obj.PaymentBaseSubscriptionActionData != nil {
		return obj.PaymentBaseSubscriptionActionData
	}

	if obj.PaymentCreateSubscriptionActionData != nil {
		return obj.PaymentCreateSubscriptionActionData
	}

	if obj.PaymentDeveloperSubscriptionActionData != nil {
		return obj.PaymentDeveloperSubscriptionActionData
	}

	if obj.PaymentExtendPeriodSubscriptionActionData != nil {
		return obj.PaymentExtendPeriodSubscriptionActionData
	}

	if obj.PaymentUpdateAmountSubscriptionActionData != nil {
		return obj.PaymentUpdateAmountSubscriptionActionData
	}

	// all schemas are nil
	return nil
}

type NullablePaymentSubscriptionActionData struct {
	value *PaymentSubscriptionActionData
	isSet bool
}

func (v NullablePaymentSubscriptionActionData) Get() *PaymentSubscriptionActionData {
	return v.value
}

func (v *NullablePaymentSubscriptionActionData) Set(val *PaymentSubscriptionActionData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionActionData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionActionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionActionData(val *PaymentSubscriptionActionData) *NullablePaymentSubscriptionActionData {
	return &NullablePaymentSubscriptionActionData{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionActionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionActionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


