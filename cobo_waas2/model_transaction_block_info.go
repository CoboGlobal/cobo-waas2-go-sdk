/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionBlockInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionBlockInfo{}

// TransactionBlockInfo The information about the transaction block.
type TransactionBlockInfo struct {
	// The block number.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// The time when the block was created, in Unix timestamp format, measured in milliseconds.
	BlockTimestamp *int64 `json:"block_timestamp,omitempty"`
	// The block hash.
	BlockHash *string `json:"block_hash,omitempty"`
}

// NewTransactionBlockInfo instantiates a new TransactionBlockInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionBlockInfo() *TransactionBlockInfo {
	this := TransactionBlockInfo{}
	return &this
}

// NewTransactionBlockInfoWithDefaults instantiates a new TransactionBlockInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionBlockInfoWithDefaults() *TransactionBlockInfo {
	this := TransactionBlockInfo{}
	return &this
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *TransactionBlockInfo) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlockInfo) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *TransactionBlockInfo) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *TransactionBlockInfo) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockTimestamp returns the BlockTimestamp field value if set, zero value otherwise.
func (o *TransactionBlockInfo) GetBlockTimestamp() int64 {
	if o == nil || IsNil(o.BlockTimestamp) {
		var ret int64
		return ret
	}
	return *o.BlockTimestamp
}

// GetBlockTimestampOk returns a tuple with the BlockTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlockInfo) GetBlockTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockTimestamp) {
		return nil, false
	}
	return o.BlockTimestamp, true
}

// HasBlockTimestamp returns a boolean if a field has been set.
func (o *TransactionBlockInfo) HasBlockTimestamp() bool {
	if o != nil && !IsNil(o.BlockTimestamp) {
		return true
	}

	return false
}

// SetBlockTimestamp gets a reference to the given int64 and assigns it to the BlockTimestamp field.
func (o *TransactionBlockInfo) SetBlockTimestamp(v int64) {
	o.BlockTimestamp = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *TransactionBlockInfo) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlockInfo) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *TransactionBlockInfo) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *TransactionBlockInfo) SetBlockHash(v string) {
	o.BlockHash = &v
}

func (o TransactionBlockInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionBlockInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.BlockTimestamp) {
		toSerialize["block_timestamp"] = o.BlockTimestamp
	}
	if !IsNil(o.BlockHash) {
		toSerialize["block_hash"] = o.BlockHash
	}
	return toSerialize, nil
}

type NullableTransactionBlockInfo struct {
	value *TransactionBlockInfo
	isSet bool
}

func (v NullableTransactionBlockInfo) Get() *TransactionBlockInfo {
	return v.value
}

func (v *NullableTransactionBlockInfo) Set(val *TransactionBlockInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionBlockInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionBlockInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionBlockInfo(val *TransactionBlockInfo) *NullableTransactionBlockInfo {
	return &NullableTransactionBlockInfo{value: val, isSet: true}
}

func (v NullableTransactionBlockInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionBlockInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


