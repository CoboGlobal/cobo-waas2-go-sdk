/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// ReplaceType The `replaced_by_type` property indicates the replacement type of the transaction that this transaction was replaced by, and the `replaced_type` property indicates the replacement type of the transaction that this transaction replaced. Possible values include:    - `Drop`: To drop a transaction.   - `Resend`: To resend a transaction.   - `SpeedUp`: To speed up a transaction. 
type ReplaceType string

// List of ReplaceType
const (
	REPLACETYPE_DROP ReplaceType = "Drop"
	REPLACETYPE_RESEND ReplaceType = "Resend"
	REPLACETYPE_SPEED_UP ReplaceType = "SpeedUp"
)

// All allowed values of ReplaceType enum
var AllowedReplaceTypeEnumValues = []ReplaceType{
	"Drop",
	"Resend",
	"SpeedUp",
}

func (v *ReplaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplaceType(value)
	for _, existing := range AllowedReplaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ReplaceType("unknown")
    return nil
}

// NewReplaceTypeFromValue returns a pointer to a valid ReplaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplaceTypeFromValue(v string) (*ReplaceType, error) {
	ev := ReplaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplaceType: valid values are %v", v, AllowedReplaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplaceType) IsValid() bool {
	for _, existing := range AllowedReplaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplaceType value
func (v ReplaceType) Ptr() *ReplaceType {
	return &v
}

type NullableReplaceType struct {
	value *ReplaceType
	isSet bool
}

func (v NullableReplaceType) Get() *ReplaceType {
	return v.value
}

func (v *NullableReplaceType) Set(val *ReplaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceType(val *ReplaceType) *NullableReplaceType {
	return &NullableReplaceType{value: val, isSet: true}
}

func (v NullableReplaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

