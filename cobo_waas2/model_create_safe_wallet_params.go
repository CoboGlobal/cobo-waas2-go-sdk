/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSafeWalletParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSafeWalletParams{}

// CreateSafeWalletParams struct for CreateSafeWalletParams
type CreateSafeWalletParams struct {
	// The wallet name.
	Name string `json:"name"`
	WalletType WalletType `json:"wallet_type"`
	WalletSubtype WalletSubtype `json:"wallet_subtype"`
	// Enable the auto-sweep feature for the wallet. This parameter only applies to MPC Wallets and Web3 Wallets.
	EnableAutoSweep *bool `json:"enable_auto_sweep,omitempty"`
	// The ID of the chain that the wallet operates on.
	ChainId string `json:"chain_id"`
	SmartContractWalletType SmartContractWalletType `json:"smart_contract_wallet_type"`
	// The address of the Smart Contract Wallet. If this is not provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe for you. In that case, the `threshold` and `signers` properties are required.
	SafeAddress *string `json:"safe_address,omitempty"`
	// The signers of the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.
	Signers []string `json:"signers,omitempty"`
	// The minimum number of confirmations required for the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.
	Threshold *int32 `json:"threshold,omitempty"`
	// The address of Cobo Safe. If you are importing an existing Safe{Wallet}, Cobo Safe must have been created and enabled.
	CoboSafeAddress *string `json:"cobo_safe_address,omitempty"`
	Initiator *SmartContractInitiator `json:"initiator,omitempty"`
}

type _CreateSafeWalletParams CreateSafeWalletParams

// NewCreateSafeWalletParams instantiates a new CreateSafeWalletParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSafeWalletParams(name string, walletType WalletType, walletSubtype WalletSubtype, chainId string, smartContractWalletType SmartContractWalletType) *CreateSafeWalletParams {
	this := CreateSafeWalletParams{}
	this.Name = name
	this.WalletType = walletType
	this.WalletSubtype = walletSubtype
	this.ChainId = chainId
	this.SmartContractWalletType = smartContractWalletType
	return &this
}

// NewCreateSafeWalletParamsWithDefaults instantiates a new CreateSafeWalletParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSafeWalletParamsWithDefaults() *CreateSafeWalletParams {
	this := CreateSafeWalletParams{}
	var smartContractWalletType SmartContractWalletType = SMARTCONTRACTWALLETTYPE_SAFEWALLET
	this.SmartContractWalletType = smartContractWalletType
	return &this
}

// GetName returns the Name field value
func (o *CreateSafeWalletParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateSafeWalletParams) SetName(v string) {
	o.Name = v
}

// GetWalletType returns the WalletType field value
func (o *CreateSafeWalletParams) GetWalletType() WalletType {
	if o == nil {
		var ret WalletType
		return ret
	}

	return o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletType, true
}

// SetWalletType sets field value
func (o *CreateSafeWalletParams) SetWalletType(v WalletType) {
	o.WalletType = v
}

// GetWalletSubtype returns the WalletSubtype field value
func (o *CreateSafeWalletParams) GetWalletSubtype() WalletSubtype {
	if o == nil {
		var ret WalletSubtype
		return ret
	}

	return o.WalletSubtype
}

// GetWalletSubtypeOk returns a tuple with the WalletSubtype field value
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetWalletSubtypeOk() (*WalletSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletSubtype, true
}

// SetWalletSubtype sets field value
func (o *CreateSafeWalletParams) SetWalletSubtype(v WalletSubtype) {
	o.WalletSubtype = v
}

// GetEnableAutoSweep returns the EnableAutoSweep field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetEnableAutoSweep() bool {
	if o == nil || IsNil(o.EnableAutoSweep) {
		var ret bool
		return ret
	}
	return *o.EnableAutoSweep
}

// GetEnableAutoSweepOk returns a tuple with the EnableAutoSweep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetEnableAutoSweepOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutoSweep) {
		return nil, false
	}
	return o.EnableAutoSweep, true
}

// HasEnableAutoSweep returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasEnableAutoSweep() bool {
	if o != nil && !IsNil(o.EnableAutoSweep) {
		return true
	}

	return false
}

// SetEnableAutoSweep gets a reference to the given bool and assigns it to the EnableAutoSweep field.
func (o *CreateSafeWalletParams) SetEnableAutoSweep(v bool) {
	o.EnableAutoSweep = &v
}

// GetChainId returns the ChainId field value
func (o *CreateSafeWalletParams) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *CreateSafeWalletParams) SetChainId(v string) {
	o.ChainId = v
}

// GetSmartContractWalletType returns the SmartContractWalletType field value
func (o *CreateSafeWalletParams) GetSmartContractWalletType() SmartContractWalletType {
	if o == nil {
		var ret SmartContractWalletType
		return ret
	}

	return o.SmartContractWalletType
}

// GetSmartContractWalletTypeOk returns a tuple with the SmartContractWalletType field value
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetSmartContractWalletTypeOk() (*SmartContractWalletType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartContractWalletType, true
}

// SetSmartContractWalletType sets field value
func (o *CreateSafeWalletParams) SetSmartContractWalletType(v SmartContractWalletType) {
	o.SmartContractWalletType = v
}

// GetSafeAddress returns the SafeAddress field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetSafeAddress() string {
	if o == nil || IsNil(o.SafeAddress) {
		var ret string
		return ret
	}
	return *o.SafeAddress
}

// GetSafeAddressOk returns a tuple with the SafeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetSafeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SafeAddress) {
		return nil, false
	}
	return o.SafeAddress, true
}

// HasSafeAddress returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasSafeAddress() bool {
	if o != nil && !IsNil(o.SafeAddress) {
		return true
	}

	return false
}

// SetSafeAddress gets a reference to the given string and assigns it to the SafeAddress field.
func (o *CreateSafeWalletParams) SetSafeAddress(v string) {
	o.SafeAddress = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetSigners() []string {
	if o == nil || IsNil(o.Signers) {
		var ret []string
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetSignersOk() ([]string, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []string and assigns it to the Signers field.
func (o *CreateSafeWalletParams) SetSigners(v []string) {
	o.Signers = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetThreshold() int32 {
	if o == nil || IsNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *CreateSafeWalletParams) SetThreshold(v int32) {
	o.Threshold = &v
}

// GetCoboSafeAddress returns the CoboSafeAddress field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetCoboSafeAddress() string {
	if o == nil || IsNil(o.CoboSafeAddress) {
		var ret string
		return ret
	}
	return *o.CoboSafeAddress
}

// GetCoboSafeAddressOk returns a tuple with the CoboSafeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetCoboSafeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CoboSafeAddress) {
		return nil, false
	}
	return o.CoboSafeAddress, true
}

// HasCoboSafeAddress returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasCoboSafeAddress() bool {
	if o != nil && !IsNil(o.CoboSafeAddress) {
		return true
	}

	return false
}

// SetCoboSafeAddress gets a reference to the given string and assigns it to the CoboSafeAddress field.
func (o *CreateSafeWalletParams) SetCoboSafeAddress(v string) {
	o.CoboSafeAddress = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *CreateSafeWalletParams) GetInitiator() SmartContractInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret SmartContractInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSafeWalletParams) GetInitiatorOk() (*SmartContractInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *CreateSafeWalletParams) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given SmartContractInitiator and assigns it to the Initiator field.
func (o *CreateSafeWalletParams) SetInitiator(v SmartContractInitiator) {
	o.Initiator = &v
}

func (o CreateSafeWalletParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSafeWalletParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["wallet_type"] = o.WalletType
	toSerialize["wallet_subtype"] = o.WalletSubtype
	if !IsNil(o.EnableAutoSweep) {
		toSerialize["enable_auto_sweep"] = o.EnableAutoSweep
	}
	toSerialize["chain_id"] = o.ChainId
	toSerialize["smart_contract_wallet_type"] = o.SmartContractWalletType
	if !IsNil(o.SafeAddress) {
		toSerialize["safe_address"] = o.SafeAddress
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.CoboSafeAddress) {
		toSerialize["cobo_safe_address"] = o.CoboSafeAddress
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *CreateSafeWalletParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"wallet_type",
		"wallet_subtype",
		"chain_id",
		"smart_contract_wallet_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSafeWalletParams := _CreateSafeWalletParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSafeWalletParams)

	if err != nil {
		return err
	}

	*o = CreateSafeWalletParams(varCreateSafeWalletParams)

	return err
}

type NullableCreateSafeWalletParams struct {
	value *CreateSafeWalletParams
	isSet bool
}

func (v NullableCreateSafeWalletParams) Get() *CreateSafeWalletParams {
	return v.value
}

func (v *NullableCreateSafeWalletParams) Set(val *CreateSafeWalletParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSafeWalletParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSafeWalletParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSafeWalletParams(val *CreateSafeWalletParams) *NullableCreateSafeWalletParams {
	return &NullableCreateSafeWalletParams{value: val, isSet: true}
}

func (v NullableCreateSafeWalletParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSafeWalletParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


