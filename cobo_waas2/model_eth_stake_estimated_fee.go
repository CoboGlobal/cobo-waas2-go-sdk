/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the EthStakeEstimatedFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthStakeEstimatedFee{}

// EthStakeEstimatedFee struct for EthStakeEstimatedFee
type EthStakeEstimatedFee struct {
	PoolType *StakingPoolType `json:"pool_type,omitempty"`
	Fee *EstimatedFee `json:"fee,omitempty"`
	// A list of public keys associated with the Ethereum validators for this staking operation.
	ValidatorPubkeys []string `json:"validator_pubkeys,omitempty"`
	// P2WSH address generated for this staking operation(If the estimated fee is for core BTC staking).
	CoreBtcStakingAddress *string `json:"core_btc_staking_address,omitempty"`
}

// NewEthStakeEstimatedFee instantiates a new EthStakeEstimatedFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthStakeEstimatedFee() *EthStakeEstimatedFee {
	this := EthStakeEstimatedFee{}
	return &this
}

// NewEthStakeEstimatedFeeWithDefaults instantiates a new EthStakeEstimatedFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthStakeEstimatedFeeWithDefaults() *EthStakeEstimatedFee {
	this := EthStakeEstimatedFee{}
	return &this
}

// GetPoolType returns the PoolType field value if set, zero value otherwise.
func (o *EthStakeEstimatedFee) GetPoolType() StakingPoolType {
	if o == nil || IsNil(o.PoolType) {
		var ret StakingPoolType
		return ret
	}
	return *o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthStakeEstimatedFee) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil || IsNil(o.PoolType) {
		return nil, false
	}
	return o.PoolType, true
}

// HasPoolType returns a boolean if a field has been set.
func (o *EthStakeEstimatedFee) HasPoolType() bool {
	if o != nil && !IsNil(o.PoolType) {
		return true
	}

	return false
}

// SetPoolType gets a reference to the given StakingPoolType and assigns it to the PoolType field.
func (o *EthStakeEstimatedFee) SetPoolType(v StakingPoolType) {
	o.PoolType = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *EthStakeEstimatedFee) GetFee() EstimatedFee {
	if o == nil || IsNil(o.Fee) {
		var ret EstimatedFee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthStakeEstimatedFee) GetFeeOk() (*EstimatedFee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *EthStakeEstimatedFee) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given EstimatedFee and assigns it to the Fee field.
func (o *EthStakeEstimatedFee) SetFee(v EstimatedFee) {
	o.Fee = &v
}

// GetValidatorPubkeys returns the ValidatorPubkeys field value if set, zero value otherwise.
func (o *EthStakeEstimatedFee) GetValidatorPubkeys() []string {
	if o == nil || IsNil(o.ValidatorPubkeys) {
		var ret []string
		return ret
	}
	return o.ValidatorPubkeys
}

// GetValidatorPubkeysOk returns a tuple with the ValidatorPubkeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthStakeEstimatedFee) GetValidatorPubkeysOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidatorPubkeys) {
		return nil, false
	}
	return o.ValidatorPubkeys, true
}

// HasValidatorPubkeys returns a boolean if a field has been set.
func (o *EthStakeEstimatedFee) HasValidatorPubkeys() bool {
	if o != nil && !IsNil(o.ValidatorPubkeys) {
		return true
	}

	return false
}

// SetValidatorPubkeys gets a reference to the given []string and assigns it to the ValidatorPubkeys field.
func (o *EthStakeEstimatedFee) SetValidatorPubkeys(v []string) {
	o.ValidatorPubkeys = v
}

// GetCoreBtcStakingAddress returns the CoreBtcStakingAddress field value if set, zero value otherwise.
func (o *EthStakeEstimatedFee) GetCoreBtcStakingAddress() string {
	if o == nil || IsNil(o.CoreBtcStakingAddress) {
		var ret string
		return ret
	}
	return *o.CoreBtcStakingAddress
}

// GetCoreBtcStakingAddressOk returns a tuple with the CoreBtcStakingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthStakeEstimatedFee) GetCoreBtcStakingAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CoreBtcStakingAddress) {
		return nil, false
	}
	return o.CoreBtcStakingAddress, true
}

// HasCoreBtcStakingAddress returns a boolean if a field has been set.
func (o *EthStakeEstimatedFee) HasCoreBtcStakingAddress() bool {
	if o != nil && !IsNil(o.CoreBtcStakingAddress) {
		return true
	}

	return false
}

// SetCoreBtcStakingAddress gets a reference to the given string and assigns it to the CoreBtcStakingAddress field.
func (o *EthStakeEstimatedFee) SetCoreBtcStakingAddress(v string) {
	o.CoreBtcStakingAddress = &v
}

func (o EthStakeEstimatedFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthStakeEstimatedFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PoolType) {
		toSerialize["pool_type"] = o.PoolType
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.ValidatorPubkeys) {
		toSerialize["validator_pubkeys"] = o.ValidatorPubkeys
	}
	if !IsNil(o.CoreBtcStakingAddress) {
		toSerialize["core_btc_staking_address"] = o.CoreBtcStakingAddress
	}
	return toSerialize, nil
}

type NullableEthStakeEstimatedFee struct {
	value *EthStakeEstimatedFee
	isSet bool
}

func (v NullableEthStakeEstimatedFee) Get() *EthStakeEstimatedFee {
	return v.value
}

func (v *NullableEthStakeEstimatedFee) Set(val *EthStakeEstimatedFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEthStakeEstimatedFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEthStakeEstimatedFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthStakeEstimatedFee(val *EthStakeEstimatedFee) *NullableEthStakeEstimatedFee {
	return &NullableEthStakeEstimatedFee{value: val, isSet: true}
}

func (v NullableEthStakeEstimatedFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthStakeEstimatedFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


