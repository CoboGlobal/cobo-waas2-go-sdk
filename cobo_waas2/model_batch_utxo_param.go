/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchUTXOParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchUTXOParam{}

// BatchUTXOParam The UTXO information.
type BatchUTXOParam struct {
	// The transaction hash.
	TxHash string `json:"tx_hash"`
	VoutNs []int32 `json:"vout_ns,omitempty"`
}

type _BatchUTXOParam BatchUTXOParam

// NewBatchUTXOParam instantiates a new BatchUTXOParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUTXOParam(txHash string) *BatchUTXOParam {
	this := BatchUTXOParam{}
	this.TxHash = txHash
	return &this
}

// NewBatchUTXOParamWithDefaults instantiates a new BatchUTXOParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUTXOParamWithDefaults() *BatchUTXOParam {
	this := BatchUTXOParam{}
	return &this
}

// GetTxHash returns the TxHash field value
func (o *BatchUTXOParam) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *BatchUTXOParam) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *BatchUTXOParam) SetTxHash(v string) {
	o.TxHash = v
}

// GetVoutNs returns the VoutNs field value if set, zero value otherwise.
func (o *BatchUTXOParam) GetVoutNs() []int32 {
	if o == nil || IsNil(o.VoutNs) {
		var ret []int32
		return ret
	}
	return o.VoutNs
}

// GetVoutNsOk returns a tuple with the VoutNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUTXOParam) GetVoutNsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VoutNs) {
		return nil, false
	}
	return o.VoutNs, true
}

// HasVoutNs returns a boolean if a field has been set.
func (o *BatchUTXOParam) HasVoutNs() bool {
	if o != nil && !IsNil(o.VoutNs) {
		return true
	}

	return false
}

// SetVoutNs gets a reference to the given []int32 and assigns it to the VoutNs field.
func (o *BatchUTXOParam) SetVoutNs(v []int32) {
	o.VoutNs = v
}

func (o BatchUTXOParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchUTXOParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tx_hash"] = o.TxHash
	if !IsNil(o.VoutNs) {
		toSerialize["vout_ns"] = o.VoutNs
	}
	return toSerialize, nil
}

func (o *BatchUTXOParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tx_hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchUTXOParam := _BatchUTXOParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchUTXOParam)

	if err != nil {
		return err
	}

	*o = BatchUTXOParam(varBatchUTXOParam)

	return err
}

type NullableBatchUTXOParam struct {
	value *BatchUTXOParam
	isSet bool
}

func (v NullableBatchUTXOParam) Get() *BatchUTXOParam {
	return v.value
}

func (v *NullableBatchUTXOParam) Set(val *BatchUTXOParam) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUTXOParam) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUTXOParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUTXOParam(val *BatchUTXOParam) *NullableBatchUTXOParam {
	return &NullableBatchUTXOParam{value: val, isSet: true}
}

func (v NullableBatchUTXOParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUTXOParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


