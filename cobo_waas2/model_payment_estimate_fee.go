/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentEstimateFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentEstimateFee{}

// PaymentEstimateFee struct for PaymentEstimateFee
type PaymentEstimateFee struct {
	// The token ID for which fees will be calculated.
	TokenId string `json:"token_id"`
	// The transaction amount for which fees will be calculated.
	Amount string `json:"amount"`
}

type _PaymentEstimateFee PaymentEstimateFee

// NewPaymentEstimateFee instantiates a new PaymentEstimateFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentEstimateFee(tokenId string, amount string) *PaymentEstimateFee {
	this := PaymentEstimateFee{}
	this.TokenId = tokenId
	this.Amount = amount
	return &this
}

// NewPaymentEstimateFeeWithDefaults instantiates a new PaymentEstimateFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentEstimateFeeWithDefaults() *PaymentEstimateFee {
	this := PaymentEstimateFee{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *PaymentEstimateFee) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PaymentEstimateFee) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PaymentEstimateFee) SetTokenId(v string) {
	o.TokenId = v
}

// GetAmount returns the Amount field value
func (o *PaymentEstimateFee) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentEstimateFee) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentEstimateFee) SetAmount(v string) {
	o.Amount = v
}

func (o PaymentEstimateFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentEstimateFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *PaymentEstimateFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentEstimateFee := _PaymentEstimateFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentEstimateFee)

	if err != nil {
		return err
	}

	*o = PaymentEstimateFee(varPaymentEstimateFee)

	return err
}

type NullablePaymentEstimateFee struct {
	value *PaymentEstimateFee
	isSet bool
}

func (v NullablePaymentEstimateFee) Get() *PaymentEstimateFee {
	return v.value
}

func (v *NullablePaymentEstimateFee) Set(val *PaymentEstimateFee) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentEstimateFee) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentEstimateFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentEstimateFee(val *PaymentEstimateFee) *NullablePaymentEstimateFee {
	return &NullablePaymentEstimateFee{value: val, isSet: true}
}

func (v NullablePaymentEstimateFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentEstimateFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


