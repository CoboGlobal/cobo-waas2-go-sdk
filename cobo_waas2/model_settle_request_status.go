/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// SettleRequestStatus The current status of a settlement request: - `Pending`: The settlement request has been created and is awaiting processing. - `Processing`: The settlement request is currently being processed, with at least one settlement in progress. - `Completed`: All requested settlements have been completed. - `PartiallyCompleted`: Some requested settlements have been completed successfully, while others have failed. - `Failed`: All requested settlements have failed. - `Canceled`: The settlement request has been canceled due to bank transfer failure. Contact Cobo's support team through [help@cobo.com](mailto:help@cobo.com) for assistance. 
type SettleRequestStatus string

// List of SettleRequestStatus
const (
	SETTLEREQUESTSTATUS_PENDING SettleRequestStatus = "Pending"
	SETTLEREQUESTSTATUS_PROCESSING SettleRequestStatus = "Processing"
	SETTLEREQUESTSTATUS_COMPLETED SettleRequestStatus = "Completed"
	SETTLEREQUESTSTATUS_PARTIALLY_COMPLETED SettleRequestStatus = "PartiallyCompleted"
	SETTLEREQUESTSTATUS_FAILED SettleRequestStatus = "Failed"
	SETTLEREQUESTSTATUS_CANCELED SettleRequestStatus = "Canceled"
)

// All allowed values of SettleRequestStatus enum
var AllowedSettleRequestStatusEnumValues = []SettleRequestStatus{
	"Pending",
	"Processing",
	"Completed",
	"PartiallyCompleted",
	"Failed",
	"Canceled",
}

func (v *SettleRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettleRequestStatus(value)
	for _, existing := range AllowedSettleRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = SettleRequestStatus("unknown")
	return nil
}

// NewSettleRequestStatusFromValue returns a pointer to a valid SettleRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettleRequestStatusFromValue(v string) (*SettleRequestStatus, error) {
	ev := SettleRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettleRequestStatus: valid values are %v", v, AllowedSettleRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettleRequestStatus) IsValid() bool {
	for _, existing := range AllowedSettleRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SettleRequestStatus value
func (v SettleRequestStatus) Ptr() *SettleRequestStatus {
	return &v
}

type NullableSettleRequestStatus struct {
	value *SettleRequestStatus
	isSet bool
}

func (v NullableSettleRequestStatus) Get() *SettleRequestStatus {
	return v.value
}

func (v *NullableSettleRequestStatus) Set(val *SettleRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSettleRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSettleRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettleRequestStatus(val *SettleRequestStatus) *NullableSettleRequestStatus {
	return &NullableSettleRequestStatus{value: val, isSet: true}
}

func (v NullableSettleRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettleRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

