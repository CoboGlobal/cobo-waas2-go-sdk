/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSweepToAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSweepToAddress{}

// CreateSweepToAddress The information of create sweep to address.
type CreateSweepToAddress struct {
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	// The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
	ChainId string `json:"chain_id"`
}

type _CreateSweepToAddress CreateSweepToAddress

// NewCreateSweepToAddress instantiates a new CreateSweepToAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSweepToAddress(walletId string, chainId string) *CreateSweepToAddress {
	this := CreateSweepToAddress{}
	this.WalletId = walletId
	this.ChainId = chainId
	return &this
}

// NewCreateSweepToAddressWithDefaults instantiates a new CreateSweepToAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSweepToAddressWithDefaults() *CreateSweepToAddress {
	this := CreateSweepToAddress{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *CreateSweepToAddress) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *CreateSweepToAddress) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *CreateSweepToAddress) SetWalletId(v string) {
	o.WalletId = v
}

// GetChainId returns the ChainId field value
func (o *CreateSweepToAddress) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *CreateSweepToAddress) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *CreateSweepToAddress) SetChainId(v string) {
	o.ChainId = v
}

func (o CreateSweepToAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSweepToAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["chain_id"] = o.ChainId
	return toSerialize, nil
}

func (o *CreateSweepToAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"chain_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSweepToAddress := _CreateSweepToAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSweepToAddress)

	if err != nil {
		return err
	}

	*o = CreateSweepToAddress(varCreateSweepToAddress)

	return err
}

type NullableCreateSweepToAddress struct {
	value *CreateSweepToAddress
	isSet bool
}

func (v NullableCreateSweepToAddress) Get() *CreateSweepToAddress {
	return v.value
}

func (v *NullableCreateSweepToAddress) Set(val *CreateSweepToAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSweepToAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSweepToAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSweepToAddress(val *CreateSweepToAddress) *NullableCreateSweepToAddress {
	return &NullableCreateSweepToAddress{value: val, isSet: true}
}

func (v NullableCreateSweepToAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSweepToAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


