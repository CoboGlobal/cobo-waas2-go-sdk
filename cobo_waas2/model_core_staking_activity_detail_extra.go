/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreStakingActivityDetailExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreStakingActivityDetailExtra{}

// CoreStakingActivityDetailExtra struct for CoreStakingActivityDetailExtra
type CoreStakingActivityDetailExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
	Timelock *int32 `json:"timelock,omitempty"`
	// The change bitcoin address. If not provided, the source wallet's address will be used as the change address.
	ChangeAddress *string `json:"change_address,omitempty"`
	// The validator evm address.
	ValidatorAddress *string `json:"validator_address,omitempty"`
	// The reward evm address.
	RewardAddress *string `json:"reward_address,omitempty"`
}

type _CoreStakingActivityDetailExtra CoreStakingActivityDetailExtra

// NewCoreStakingActivityDetailExtra instantiates a new CoreStakingActivityDetailExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreStakingActivityDetailExtra(poolType StakingPoolType) *CoreStakingActivityDetailExtra {
	this := CoreStakingActivityDetailExtra{}
	this.PoolType = poolType
	return &this
}

// NewCoreStakingActivityDetailExtraWithDefaults instantiates a new CoreStakingActivityDetailExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreStakingActivityDetailExtraWithDefaults() *CoreStakingActivityDetailExtra {
	this := CoreStakingActivityDetailExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *CoreStakingActivityDetailExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *CoreStakingActivityDetailExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *CoreStakingActivityDetailExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetTimelock returns the Timelock field value if set, zero value otherwise.
func (o *CoreStakingActivityDetailExtra) GetTimelock() int32 {
	if o == nil || IsNil(o.Timelock) {
		var ret int32
		return ret
	}
	return *o.Timelock
}

// GetTimelockOk returns a tuple with the Timelock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreStakingActivityDetailExtra) GetTimelockOk() (*int32, bool) {
	if o == nil || IsNil(o.Timelock) {
		return nil, false
	}
	return o.Timelock, true
}

// HasTimelock returns a boolean if a field has been set.
func (o *CoreStakingActivityDetailExtra) HasTimelock() bool {
	if o != nil && !IsNil(o.Timelock) {
		return true
	}

	return false
}

// SetTimelock gets a reference to the given int32 and assigns it to the Timelock field.
func (o *CoreStakingActivityDetailExtra) SetTimelock(v int32) {
	o.Timelock = &v
}

// GetChangeAddress returns the ChangeAddress field value if set, zero value otherwise.
func (o *CoreStakingActivityDetailExtra) GetChangeAddress() string {
	if o == nil || IsNil(o.ChangeAddress) {
		var ret string
		return ret
	}
	return *o.ChangeAddress
}

// GetChangeAddressOk returns a tuple with the ChangeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreStakingActivityDetailExtra) GetChangeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeAddress) {
		return nil, false
	}
	return o.ChangeAddress, true
}

// HasChangeAddress returns a boolean if a field has been set.
func (o *CoreStakingActivityDetailExtra) HasChangeAddress() bool {
	if o != nil && !IsNil(o.ChangeAddress) {
		return true
	}

	return false
}

// SetChangeAddress gets a reference to the given string and assigns it to the ChangeAddress field.
func (o *CoreStakingActivityDetailExtra) SetChangeAddress(v string) {
	o.ChangeAddress = &v
}

// GetValidatorAddress returns the ValidatorAddress field value if set, zero value otherwise.
func (o *CoreStakingActivityDetailExtra) GetValidatorAddress() string {
	if o == nil || IsNil(o.ValidatorAddress) {
		var ret string
		return ret
	}
	return *o.ValidatorAddress
}

// GetValidatorAddressOk returns a tuple with the ValidatorAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreStakingActivityDetailExtra) GetValidatorAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorAddress) {
		return nil, false
	}
	return o.ValidatorAddress, true
}

// HasValidatorAddress returns a boolean if a field has been set.
func (o *CoreStakingActivityDetailExtra) HasValidatorAddress() bool {
	if o != nil && !IsNil(o.ValidatorAddress) {
		return true
	}

	return false
}

// SetValidatorAddress gets a reference to the given string and assigns it to the ValidatorAddress field.
func (o *CoreStakingActivityDetailExtra) SetValidatorAddress(v string) {
	o.ValidatorAddress = &v
}

// GetRewardAddress returns the RewardAddress field value if set, zero value otherwise.
func (o *CoreStakingActivityDetailExtra) GetRewardAddress() string {
	if o == nil || IsNil(o.RewardAddress) {
		var ret string
		return ret
	}
	return *o.RewardAddress
}

// GetRewardAddressOk returns a tuple with the RewardAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreStakingActivityDetailExtra) GetRewardAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RewardAddress) {
		return nil, false
	}
	return o.RewardAddress, true
}

// HasRewardAddress returns a boolean if a field has been set.
func (o *CoreStakingActivityDetailExtra) HasRewardAddress() bool {
	if o != nil && !IsNil(o.RewardAddress) {
		return true
	}

	return false
}

// SetRewardAddress gets a reference to the given string and assigns it to the RewardAddress field.
func (o *CoreStakingActivityDetailExtra) SetRewardAddress(v string) {
	o.RewardAddress = &v
}

func (o CoreStakingActivityDetailExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreStakingActivityDetailExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	if !IsNil(o.Timelock) {
		toSerialize["timelock"] = o.Timelock
	}
	if !IsNil(o.ChangeAddress) {
		toSerialize["change_address"] = o.ChangeAddress
	}
	if !IsNil(o.ValidatorAddress) {
		toSerialize["validator_address"] = o.ValidatorAddress
	}
	if !IsNil(o.RewardAddress) {
		toSerialize["reward_address"] = o.RewardAddress
	}
	return toSerialize, nil
}

func (o *CoreStakingActivityDetailExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreStakingActivityDetailExtra := _CoreStakingActivityDetailExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreStakingActivityDetailExtra)

	if err != nil {
		return err
	}

	*o = CoreStakingActivityDetailExtra(varCoreStakingActivityDetailExtra)

	return err
}

type NullableCoreStakingActivityDetailExtra struct {
	value *CoreStakingActivityDetailExtra
	isSet bool
}

func (v NullableCoreStakingActivityDetailExtra) Get() *CoreStakingActivityDetailExtra {
	return v.value
}

func (v *NullableCoreStakingActivityDetailExtra) Set(val *CoreStakingActivityDetailExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreStakingActivityDetailExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreStakingActivityDetailExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreStakingActivityDetailExtra(val *CoreStakingActivityDetailExtra) *NullableCoreStakingActivityDetailExtra {
	return &NullableCoreStakingActivityDetailExtra{value: val, isSet: true}
}

func (v NullableCoreStakingActivityDetailExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreStakingActivityDetailExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


