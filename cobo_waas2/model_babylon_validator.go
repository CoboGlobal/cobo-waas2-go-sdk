/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BabylonValidator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BabylonValidator{}

// BabylonValidator struct for BabylonValidator
type BabylonValidator struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The URL of the validator's icon.
	IconUrl *string `json:"icon_url,omitempty"`
	// The validator's name.
	Name string `json:"name"`
	// This property can be ignored.
	Priority *int32 `json:"priority,omitempty"`
	// The public key of the validator.
	PublicKey *string `json:"public_key,omitempty"`
	// The commission rate of the validator.
	CommissionRate *float32 `json:"commission_rate,omitempty"`
	// A list of supported Proof-of-Stake (PoS) chains.
	SupportedPosChains []string `json:"supported_pos_chains,omitempty"`
}

type _BabylonValidator BabylonValidator

// NewBabylonValidator instantiates a new BabylonValidator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonValidator(poolType StakingPoolType, name string) *BabylonValidator {
	this := BabylonValidator{}
	this.PoolType = poolType
	this.Name = name
	return &this
}

// NewBabylonValidatorWithDefaults instantiates a new BabylonValidator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonValidatorWithDefaults() *BabylonValidator {
	this := BabylonValidator{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *BabylonValidator) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *BabylonValidator) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *BabylonValidator) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *BabylonValidator) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *BabylonValidator) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetName returns the Name field value
func (o *BabylonValidator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BabylonValidator) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *BabylonValidator) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *BabylonValidator) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *BabylonValidator) SetPriority(v int32) {
	o.Priority = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *BabylonValidator) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *BabylonValidator) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *BabylonValidator) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetCommissionRate returns the CommissionRate field value if set, zero value otherwise.
func (o *BabylonValidator) GetCommissionRate() float32 {
	if o == nil || IsNil(o.CommissionRate) {
		var ret float32
		return ret
	}
	return *o.CommissionRate
}

// GetCommissionRateOk returns a tuple with the CommissionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetCommissionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.CommissionRate) {
		return nil, false
	}
	return o.CommissionRate, true
}

// HasCommissionRate returns a boolean if a field has been set.
func (o *BabylonValidator) HasCommissionRate() bool {
	if o != nil && !IsNil(o.CommissionRate) {
		return true
	}

	return false
}

// SetCommissionRate gets a reference to the given float32 and assigns it to the CommissionRate field.
func (o *BabylonValidator) SetCommissionRate(v float32) {
	o.CommissionRate = &v
}

// GetSupportedPosChains returns the SupportedPosChains field value if set, zero value otherwise.
func (o *BabylonValidator) GetSupportedPosChains() []string {
	if o == nil || IsNil(o.SupportedPosChains) {
		var ret []string
		return ret
	}
	return o.SupportedPosChains
}

// GetSupportedPosChainsOk returns a tuple with the SupportedPosChains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BabylonValidator) GetSupportedPosChainsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedPosChains) {
		return nil, false
	}
	return o.SupportedPosChains, true
}

// HasSupportedPosChains returns a boolean if a field has been set.
func (o *BabylonValidator) HasSupportedPosChains() bool {
	if o != nil && !IsNil(o.SupportedPosChains) {
		return true
	}

	return false
}

// SetSupportedPosChains gets a reference to the given []string and assigns it to the SupportedPosChains field.
func (o *BabylonValidator) SetSupportedPosChains(v []string) {
	o.SupportedPosChains = v
}

func (o BabylonValidator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BabylonValidator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.CommissionRate) {
		toSerialize["commission_rate"] = o.CommissionRate
	}
	if !IsNil(o.SupportedPosChains) {
		toSerialize["supported_pos_chains"] = o.SupportedPosChains
	}
	return toSerialize, nil
}

func (o *BabylonValidator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBabylonValidator := _BabylonValidator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBabylonValidator)

	if err != nil {
		return err
	}

	*o = BabylonValidator(varBabylonValidator)

	return err
}

type NullableBabylonValidator struct {
	value *BabylonValidator
	isSet bool
}

func (v NullableBabylonValidator) Get() *BabylonValidator {
	return v.value
}

func (v *NullableBabylonValidator) Set(val *BabylonValidator) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonValidator(val *BabylonValidator) *NullableBabylonValidator {
	return &NullableBabylonValidator{value: val, isSet: true}
}

func (v NullableBabylonValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


