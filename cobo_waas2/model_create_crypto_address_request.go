/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCryptoAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCryptoAddressRequest{}

// CreateCryptoAddressRequest struct for CreateCryptoAddressRequest
type CreateCryptoAddressRequest struct {
	// The token ID that identifies the cryptocurrency and its corresponding blockchain.  **Supported values**:   - **USDC**: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - **USDT**: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId string `json:"token_id"`
	// The blockchain address where crypto withdrawals will be sent. Must be a valid address format for the blockchain specified by `token_id`. For example: - For `SOL_USDC`: Provide a Solana address. - For `ETH_USDT`: Provide an Ethereum address. 
	Address string `json:"address"`
	// A label to help identify the address's purpose. 
	Label *string `json:"label,omitempty"`
}

type _CreateCryptoAddressRequest CreateCryptoAddressRequest

// NewCreateCryptoAddressRequest instantiates a new CreateCryptoAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCryptoAddressRequest(tokenId string, address string) *CreateCryptoAddressRequest {
	this := CreateCryptoAddressRequest{}
	this.TokenId = tokenId
	this.Address = address
	return &this
}

// NewCreateCryptoAddressRequestWithDefaults instantiates a new CreateCryptoAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCryptoAddressRequestWithDefaults() *CreateCryptoAddressRequest {
	this := CreateCryptoAddressRequest{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *CreateCryptoAddressRequest) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoAddressRequest) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *CreateCryptoAddressRequest) SetTokenId(v string) {
	o.TokenId = v
}

// GetAddress returns the Address field value
func (o *CreateCryptoAddressRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoAddressRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CreateCryptoAddressRequest) SetAddress(v string) {
	o.Address = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateCryptoAddressRequest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoAddressRequest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateCryptoAddressRequest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateCryptoAddressRequest) SetLabel(v string) {
	o.Label = &v
}

func (o CreateCryptoAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCryptoAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["address"] = o.Address
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

func (o *CreateCryptoAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCryptoAddressRequest := _CreateCryptoAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCryptoAddressRequest)

	if err != nil {
		return err
	}

	*o = CreateCryptoAddressRequest(varCreateCryptoAddressRequest)

	return err
}

type NullableCreateCryptoAddressRequest struct {
	value *CreateCryptoAddressRequest
	isSet bool
}

func (v NullableCreateCryptoAddressRequest) Get() *CreateCryptoAddressRequest {
	return v.value
}

func (v *NullableCreateCryptoAddressRequest) Set(val *CreateCryptoAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCryptoAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCryptoAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCryptoAddressRequest(val *CreateCryptoAddressRequest) *NullableCreateCryptoAddressRequest {
	return &NullableCreateCryptoAddressRequest{value: val, isSet: true}
}

func (v NullableCreateCryptoAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCryptoAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


