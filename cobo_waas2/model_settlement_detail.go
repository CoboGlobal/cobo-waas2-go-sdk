/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the SettlementDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementDetail{}

// SettlementDetail struct for SettlementDetail
type SettlementDetail struct {
	// The fiat currency for the settlement.
	Currency *string `json:"currency,omitempty"`
	// The ID of the cryptocurrency settled.
	TokenId *string `json:"token_id,omitempty"`
	// The ID of the blockchain network on which the settlement occurred.
	ChainId *string `json:"chain_id,omitempty"`
	// The settlement amount.  - If `token_id` is specified, this represents the settlement amount in the specified cryptocurrency.  - If `token_id` is not specified, this represents the settlement amount in the specified fiat currency. 
	Amount *string `json:"amount,omitempty"`
	Status *SettleStatus `json:"status,omitempty"`
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	// An array of transactions associated with this settlement request. Each transaction represents a separate blockchain operation related to the settlement process.
	Transactions []PaymentTransaction `json:"transactions,omitempty"`
}

// NewSettlementDetail instantiates a new SettlementDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlementDetail() *SettlementDetail {
	this := SettlementDetail{}
	return &this
}

// NewSettlementDetailWithDefaults instantiates a new SettlementDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementDetailWithDefaults() *SettlementDetail {
	this := SettlementDetail{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SettlementDetail) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SettlementDetail) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SettlementDetail) SetCurrency(v string) {
	o.Currency = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *SettlementDetail) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *SettlementDetail) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *SettlementDetail) SetTokenId(v string) {
	o.TokenId = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *SettlementDetail) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *SettlementDetail) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *SettlementDetail) SetChainId(v string) {
	o.ChainId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SettlementDetail) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SettlementDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *SettlementDetail) SetAmount(v string) {
	o.Amount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SettlementDetail) GetStatus() SettleStatus {
	if o == nil || IsNil(o.Status) {
		var ret SettleStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetStatusOk() (*SettleStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SettlementDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SettleStatus and assigns it to the Status field.
func (o *SettlementDetail) SetStatus(v SettleStatus) {
	o.Status = &v
}

// GetBankAccount returns the BankAccount field value if set, zero value otherwise.
func (o *SettlementDetail) GetBankAccount() BankAccount {
	if o == nil || IsNil(o.BankAccount) {
		var ret BankAccount
		return ret
	}
	return *o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetBankAccountOk() (*BankAccount, bool) {
	if o == nil || IsNil(o.BankAccount) {
		return nil, false
	}
	return o.BankAccount, true
}

// HasBankAccount returns a boolean if a field has been set.
func (o *SettlementDetail) HasBankAccount() bool {
	if o != nil && !IsNil(o.BankAccount) {
		return true
	}

	return false
}

// SetBankAccount gets a reference to the given BankAccount and assigns it to the BankAccount field.
func (o *SettlementDetail) SetBankAccount(v BankAccount) {
	o.BankAccount = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *SettlementDetail) GetTransactions() []PaymentTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []PaymentTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementDetail) GetTransactionsOk() ([]PaymentTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *SettlementDetail) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []PaymentTransaction and assigns it to the Transactions field.
func (o *SettlementDetail) SetTransactions(v []PaymentTransaction) {
	o.Transactions = v
}

func (o SettlementDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.BankAccount) {
		toSerialize["bank_account"] = o.BankAccount
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableSettlementDetail struct {
	value *SettlementDetail
	isSet bool
}

func (v NullableSettlementDetail) Get() *SettlementDetail {
	return v.value
}

func (v *NullableSettlementDetail) Set(val *SettlementDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlementDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlementDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlementDetail(val *SettlementDetail) *NullableSettlementDetail {
	return &NullableSettlementDetail{value: val, isSet: true}
}

func (v NullableSettlementDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlementDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


