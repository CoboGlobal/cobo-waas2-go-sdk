/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetExchangeRate200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetExchangeRate200Response{}

// GetExchangeRate200Response struct for GetExchangeRate200Response
type GetExchangeRate200Response struct {
	// The token ID, which identifies the cryptocurrency.
	TokenId string `json:"token_id"`
	// The fiat currency.
	Currency string `json:"currency"`
	// The current exchange rate between the specified currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
	Rate string `json:"rate"`
}

type _GetExchangeRate200Response GetExchangeRate200Response

// NewGetExchangeRate200Response instantiates a new GetExchangeRate200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetExchangeRate200Response(tokenId string, currency string, rate string) *GetExchangeRate200Response {
	this := GetExchangeRate200Response{}
	this.TokenId = tokenId
	this.Currency = currency
	this.Rate = rate
	return &this
}

// NewGetExchangeRate200ResponseWithDefaults instantiates a new GetExchangeRate200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetExchangeRate200ResponseWithDefaults() *GetExchangeRate200Response {
	this := GetExchangeRate200Response{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *GetExchangeRate200Response) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *GetExchangeRate200Response) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *GetExchangeRate200Response) SetTokenId(v string) {
	o.TokenId = v
}

// GetCurrency returns the Currency field value
func (o *GetExchangeRate200Response) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *GetExchangeRate200Response) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *GetExchangeRate200Response) SetCurrency(v string) {
	o.Currency = v
}

// GetRate returns the Rate field value
func (o *GetExchangeRate200Response) GetRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *GetExchangeRate200Response) GetRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *GetExchangeRate200Response) SetRate(v string) {
	o.Rate = v
}

func (o GetExchangeRate200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetExchangeRate200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["currency"] = o.Currency
	toSerialize["rate"] = o.Rate
	return toSerialize, nil
}

func (o *GetExchangeRate200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"currency",
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetExchangeRate200Response := _GetExchangeRate200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetExchangeRate200Response)

	if err != nil {
		return err
	}

	*o = GetExchangeRate200Response(varGetExchangeRate200Response)

	return err
}

type NullableGetExchangeRate200Response struct {
	value *GetExchangeRate200Response
	isSet bool
}

func (v NullableGetExchangeRate200Response) Get() *GetExchangeRate200Response {
	return v.value
}

func (v *NullableGetExchangeRate200Response) Set(val *GetExchangeRate200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetExchangeRate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetExchangeRate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetExchangeRate200Response(val *GetExchangeRate200Response) *NullableGetExchangeRate200Response {
	return &NullableGetExchangeRate200Response{value: val, isSet: true}
}

func (v NullableGetExchangeRate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetExchangeRate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


