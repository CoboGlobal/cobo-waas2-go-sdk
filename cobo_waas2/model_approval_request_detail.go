/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApprovalRequestDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRequestDetail{}

// ApprovalRequestDetail The information of an approval request detail.
type ApprovalRequestDetail struct {
	// The system-generated unique ID of the approval request.
	ApprovalId *string `json:"approval_id,omitempty"`
	Initiator ApprovalUser `json:"initiator"`
	ApprovedList []ApprovalEntry `json:"approved_list,omitempty"`
	Status ApprovalStatus `json:"status"`
	// The time when the approval was modified, in Unix timestamp format, measured in milliseconds.
	ModifiedTimestamp *int64 `json:"modified_timestamp,omitempty"`
}

type _ApprovalRequestDetail ApprovalRequestDetail

// NewApprovalRequestDetail instantiates a new ApprovalRequestDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRequestDetail(initiator ApprovalUser, status ApprovalStatus) *ApprovalRequestDetail {
	this := ApprovalRequestDetail{}
	this.Initiator = initiator
	this.Status = status
	return &this
}

// NewApprovalRequestDetailWithDefaults instantiates a new ApprovalRequestDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRequestDetailWithDefaults() *ApprovalRequestDetail {
	this := ApprovalRequestDetail{}
	return &this
}

// GetApprovalId returns the ApprovalId field value if set, zero value otherwise.
func (o *ApprovalRequestDetail) GetApprovalId() string {
	if o == nil || IsNil(o.ApprovalId) {
		var ret string
		return ret
	}
	return *o.ApprovalId
}

// GetApprovalIdOk returns a tuple with the ApprovalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestDetail) GetApprovalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalId) {
		return nil, false
	}
	return o.ApprovalId, true
}

// HasApprovalId returns a boolean if a field has been set.
func (o *ApprovalRequestDetail) HasApprovalId() bool {
	if o != nil && !IsNil(o.ApprovalId) {
		return true
	}

	return false
}

// SetApprovalId gets a reference to the given string and assigns it to the ApprovalId field.
func (o *ApprovalRequestDetail) SetApprovalId(v string) {
	o.ApprovalId = &v
}

// GetInitiator returns the Initiator field value
func (o *ApprovalRequestDetail) GetInitiator() ApprovalUser {
	if o == nil {
		var ret ApprovalUser
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *ApprovalRequestDetail) GetInitiatorOk() (*ApprovalUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *ApprovalRequestDetail) SetInitiator(v ApprovalUser) {
	o.Initiator = v
}

// GetApprovedList returns the ApprovedList field value if set, zero value otherwise.
func (o *ApprovalRequestDetail) GetApprovedList() []ApprovalEntry {
	if o == nil || IsNil(o.ApprovedList) {
		var ret []ApprovalEntry
		return ret
	}
	return o.ApprovedList
}

// GetApprovedListOk returns a tuple with the ApprovedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestDetail) GetApprovedListOk() ([]ApprovalEntry, bool) {
	if o == nil || IsNil(o.ApprovedList) {
		return nil, false
	}
	return o.ApprovedList, true
}

// HasApprovedList returns a boolean if a field has been set.
func (o *ApprovalRequestDetail) HasApprovedList() bool {
	if o != nil && !IsNil(o.ApprovedList) {
		return true
	}

	return false
}

// SetApprovedList gets a reference to the given []ApprovalEntry and assigns it to the ApprovedList field.
func (o *ApprovalRequestDetail) SetApprovedList(v []ApprovalEntry) {
	o.ApprovedList = v
}

// GetStatus returns the Status field value
func (o *ApprovalRequestDetail) GetStatus() ApprovalStatus {
	if o == nil {
		var ret ApprovalStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ApprovalRequestDetail) GetStatusOk() (*ApprovalStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ApprovalRequestDetail) SetStatus(v ApprovalStatus) {
	o.Status = v
}

// GetModifiedTimestamp returns the ModifiedTimestamp field value if set, zero value otherwise.
func (o *ApprovalRequestDetail) GetModifiedTimestamp() int64 {
	if o == nil || IsNil(o.ModifiedTimestamp) {
		var ret int64
		return ret
	}
	return *o.ModifiedTimestamp
}

// GetModifiedTimestampOk returns a tuple with the ModifiedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestDetail) GetModifiedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ModifiedTimestamp) {
		return nil, false
	}
	return o.ModifiedTimestamp, true
}

// HasModifiedTimestamp returns a boolean if a field has been set.
func (o *ApprovalRequestDetail) HasModifiedTimestamp() bool {
	if o != nil && !IsNil(o.ModifiedTimestamp) {
		return true
	}

	return false
}

// SetModifiedTimestamp gets a reference to the given int64 and assigns it to the ModifiedTimestamp field.
func (o *ApprovalRequestDetail) SetModifiedTimestamp(v int64) {
	o.ModifiedTimestamp = &v
}

func (o ApprovalRequestDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRequestDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApprovalId) {
		toSerialize["approval_id"] = o.ApprovalId
	}
	toSerialize["initiator"] = o.Initiator
	if !IsNil(o.ApprovedList) {
		toSerialize["approved_list"] = o.ApprovedList
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.ModifiedTimestamp) {
		toSerialize["modified_timestamp"] = o.ModifiedTimestamp
	}
	return toSerialize, nil
}

func (o *ApprovalRequestDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"initiator",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalRequestDetail := _ApprovalRequestDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApprovalRequestDetail)

	if err != nil {
		return err
	}

	*o = ApprovalRequestDetail(varApprovalRequestDetail)

	return err
}

type NullableApprovalRequestDetail struct {
	value *ApprovalRequestDetail
	isSet bool
}

func (v NullableApprovalRequestDetail) Get() *ApprovalRequestDetail {
	return v.value
}

func (v *NullableApprovalRequestDetail) Set(val *ApprovalRequestDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRequestDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRequestDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRequestDetail(val *ApprovalRequestDetail) *NullableApprovalRequestDetail {
	return &NullableApprovalRequestDetail{value: val, isSet: true}
}

func (v NullableApprovalRequestDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRequestDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


