/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// StakeSourceType The staking source type. Possible values include:   - `Org-Controlled`: An MPC Wallet (Organization-Controlled Wallet). 
type StakeSourceType string

// List of StakeSourceType
const (
	STAKESOURCETYPE_ORG_CONTROLLED StakeSourceType = "Org-Controlled"
)

// All allowed values of StakeSourceType enum
var AllowedStakeSourceTypeEnumValues = []StakeSourceType{
	"Org-Controlled",
}

func (v *StakeSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StakeSourceType(value)
	for _, existing := range AllowedStakeSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = StakeSourceType("unknown")
    return nil
}

// NewStakeSourceTypeFromValue returns a pointer to a valid StakeSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStakeSourceTypeFromValue(v string) (*StakeSourceType, error) {
	ev := StakeSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StakeSourceType: valid values are %v", v, AllowedStakeSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StakeSourceType) IsValid() bool {
	for _, existing := range AllowedStakeSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StakeSourceType value
func (v StakeSourceType) Ptr() *StakeSourceType {
	return &v
}

type NullableStakeSourceType struct {
	value *StakeSourceType
	isSet bool
}

func (v NullableStakeSourceType) Get() *StakeSourceType {
	return v.value
}

func (v *NullableStakeSourceType) Set(val *StakeSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableStakeSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableStakeSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakeSourceType(val *StakeSourceType) *NullableStakeSourceType {
	return &NullableStakeSourceType{value: val, isSet: true}
}

func (v NullableStakeSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakeSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

