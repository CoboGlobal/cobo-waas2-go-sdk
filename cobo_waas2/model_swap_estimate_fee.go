/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SwapEstimateFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapEstimateFee{}

// SwapEstimateFee struct for SwapEstimateFee
type SwapEstimateFee struct {
	// The ID of the wallet to pay.
	WalletId string `json:"wallet_id"`
	// The wallet address. This property is required when the wallet to pay is not a Custodial Wallet (Asset Wallet).
	Address *string `json:"address,omitempty"`
	// The ID of the swap quote.
	QuoteId string `json:"quote_id"`
	FeeType *FeeType `json:"fee_type,omitempty"`
}

type _SwapEstimateFee SwapEstimateFee

// NewSwapEstimateFee instantiates a new SwapEstimateFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapEstimateFee(walletId string, quoteId string) *SwapEstimateFee {
	this := SwapEstimateFee{}
	this.WalletId = walletId
	this.QuoteId = quoteId
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = &feeType
	return &this
}

// NewSwapEstimateFeeWithDefaults instantiates a new SwapEstimateFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapEstimateFeeWithDefaults() *SwapEstimateFee {
	this := SwapEstimateFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = &feeType
	return &this
}

// GetWalletId returns the WalletId field value
func (o *SwapEstimateFee) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *SwapEstimateFee) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *SwapEstimateFee) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SwapEstimateFee) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapEstimateFee) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SwapEstimateFee) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SwapEstimateFee) SetAddress(v string) {
	o.Address = &v
}

// GetQuoteId returns the QuoteId field value
func (o *SwapEstimateFee) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *SwapEstimateFee) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *SwapEstimateFee) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetFeeType returns the FeeType field value if set, zero value otherwise.
func (o *SwapEstimateFee) GetFeeType() FeeType {
	if o == nil || IsNil(o.FeeType) {
		var ret FeeType
		return ret
	}
	return *o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapEstimateFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil || IsNil(o.FeeType) {
		return nil, false
	}
	return o.FeeType, true
}

// HasFeeType returns a boolean if a field has been set.
func (o *SwapEstimateFee) HasFeeType() bool {
	if o != nil && !IsNil(o.FeeType) {
		return true
	}

	return false
}

// SetFeeType gets a reference to the given FeeType and assigns it to the FeeType field.
func (o *SwapEstimateFee) SetFeeType(v FeeType) {
	o.FeeType = &v
}

func (o SwapEstimateFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapEstimateFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["quote_id"] = o.QuoteId
	if !IsNil(o.FeeType) {
		toSerialize["fee_type"] = o.FeeType
	}
	return toSerialize, nil
}

func (o *SwapEstimateFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"quote_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwapEstimateFee := _SwapEstimateFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSwapEstimateFee)

	if err != nil {
		return err
	}

	*o = SwapEstimateFee(varSwapEstimateFee)

	return err
}

type NullableSwapEstimateFee struct {
	value *SwapEstimateFee
	isSet bool
}

func (v NullableSwapEstimateFee) Get() *SwapEstimateFee {
	return v.value
}

func (v *NullableSwapEstimateFee) Set(val *SwapEstimateFee) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapEstimateFee) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapEstimateFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapEstimateFee(val *SwapEstimateFee) *NullableSwapEstimateFee {
	return &NullableSwapEstimateFee{value: val, isSet: true}
}

func (v NullableSwapEstimateFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapEstimateFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


