/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentOrderEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentOrderEventData{}

// PaymentOrderEventData struct for PaymentOrderEventData
type PaymentOrderEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data.
	DataType string `json:"data_type"`
	// The order ID.
	OrderId string `json:"order_id"`
	// The merchant ID.
	MerchantId *string `json:"merchant_id,omitempty"`
	//  The ID of the cryptocurrency used for payment. Supported tokens:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
	TokenId string `json:"token_id"`
	//  The ID of the blockchain network where the payment transaction should be made. Supported chains:  - USDC: `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` - USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` 
	ChainId string `json:"chain_id"`
	// The cryptocurrency amount to be paid for this order.
	PayableAmount string `json:"payable_amount"`
	// The recipient wallet address to be used for the payment transaction.
	ReceiveAddress string `json:"receive_address"`
	// The fiat currency of the order.
	Currency string `json:"currency"`
	// The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).
	OrderAmount string `json:"order_amount"`
	// The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
	FeeAmount string `json:"fee_amount"`
	// The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
	ExchangeRate string `json:"exchange_rate"`
	// The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.
	ExpiredAt *int32 `json:"expired_at,omitempty"`
	// A unique reference code assigned by the merchant to identify this order in their system.
	MerchantOrderCode *string `json:"merchant_order_code,omitempty"`
	// A unique reference code assigned by the developer to identify this order in their system.
	PspOrderCode string `json:"psp_order_code"`
	Status OrderStatus `json:"status"`
	// The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
	ReceivedTokenAmount string `json:"received_token_amount"`
	// The creation time of the order, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The last update time of the order, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// An array of transactions associated with this pay-in order. Each transaction represents a separate blockchain operation related to the pay-in process.
	Transactions []PaymentTransaction `json:"transactions,omitempty"`
	SettlementStatus *SettleStatus `json:"settlement_status,omitempty"`
}

type _PaymentOrderEventData PaymentOrderEventData

// NewPaymentOrderEventData instantiates a new PaymentOrderEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentOrderEventData(dataType string, orderId string, tokenId string, chainId string, payableAmount string, receiveAddress string, currency string, orderAmount string, feeAmount string, exchangeRate string, pspOrderCode string, status OrderStatus, receivedTokenAmount string) *PaymentOrderEventData {
	this := PaymentOrderEventData{}
	this.DataType = dataType
	this.OrderId = orderId
	this.TokenId = tokenId
	this.ChainId = chainId
	this.PayableAmount = payableAmount
	this.ReceiveAddress = receiveAddress
	this.Currency = currency
	this.OrderAmount = orderAmount
	this.FeeAmount = feeAmount
	this.ExchangeRate = exchangeRate
	this.PspOrderCode = pspOrderCode
	this.Status = status
	this.ReceivedTokenAmount = receivedTokenAmount
	return &this
}

// NewPaymentOrderEventDataWithDefaults instantiates a new PaymentOrderEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentOrderEventDataWithDefaults() *PaymentOrderEventData {
	this := PaymentOrderEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *PaymentOrderEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *PaymentOrderEventData) SetDataType(v string) {
	o.DataType = v
}

// GetOrderId returns the OrderId field value
func (o *PaymentOrderEventData) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *PaymentOrderEventData) SetOrderId(v string) {
	o.OrderId = v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *PaymentOrderEventData) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetTokenId returns the TokenId field value
func (o *PaymentOrderEventData) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PaymentOrderEventData) SetTokenId(v string) {
	o.TokenId = v
}

// GetChainId returns the ChainId field value
func (o *PaymentOrderEventData) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *PaymentOrderEventData) SetChainId(v string) {
	o.ChainId = v
}

// GetPayableAmount returns the PayableAmount field value
func (o *PaymentOrderEventData) GetPayableAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayableAmount
}

// GetPayableAmountOk returns a tuple with the PayableAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetPayableAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayableAmount, true
}

// SetPayableAmount sets field value
func (o *PaymentOrderEventData) SetPayableAmount(v string) {
	o.PayableAmount = v
}

// GetReceiveAddress returns the ReceiveAddress field value
func (o *PaymentOrderEventData) GetReceiveAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceiveAddress
}

// GetReceiveAddressOk returns a tuple with the ReceiveAddress field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetReceiveAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiveAddress, true
}

// SetReceiveAddress sets field value
func (o *PaymentOrderEventData) SetReceiveAddress(v string) {
	o.ReceiveAddress = v
}

// GetCurrency returns the Currency field value
func (o *PaymentOrderEventData) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PaymentOrderEventData) SetCurrency(v string) {
	o.Currency = v
}

// GetOrderAmount returns the OrderAmount field value
func (o *PaymentOrderEventData) GetOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmount, true
}

// SetOrderAmount sets field value
func (o *PaymentOrderEventData) SetOrderAmount(v string) {
	o.OrderAmount = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *PaymentOrderEventData) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *PaymentOrderEventData) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetExchangeRate returns the ExchangeRate field value
func (o *PaymentOrderEventData) GetExchangeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetExchangeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRate, true
}

// SetExchangeRate sets field value
func (o *PaymentOrderEventData) SetExchangeRate(v string) {
	o.ExchangeRate = v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetExpiredAt() int32 {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret int32
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetExpiredAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given int32 and assigns it to the ExpiredAt field.
func (o *PaymentOrderEventData) SetExpiredAt(v int32) {
	o.ExpiredAt = &v
}

// GetMerchantOrderCode returns the MerchantOrderCode field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetMerchantOrderCode() string {
	if o == nil || IsNil(o.MerchantOrderCode) {
		var ret string
		return ret
	}
	return *o.MerchantOrderCode
}

// GetMerchantOrderCodeOk returns a tuple with the MerchantOrderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetMerchantOrderCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantOrderCode) {
		return nil, false
	}
	return o.MerchantOrderCode, true
}

// HasMerchantOrderCode returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasMerchantOrderCode() bool {
	if o != nil && !IsNil(o.MerchantOrderCode) {
		return true
	}

	return false
}

// SetMerchantOrderCode gets a reference to the given string and assigns it to the MerchantOrderCode field.
func (o *PaymentOrderEventData) SetMerchantOrderCode(v string) {
	o.MerchantOrderCode = &v
}

// GetPspOrderCode returns the PspOrderCode field value
func (o *PaymentOrderEventData) GetPspOrderCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PspOrderCode
}

// GetPspOrderCodeOk returns a tuple with the PspOrderCode field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetPspOrderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PspOrderCode, true
}

// SetPspOrderCode sets field value
func (o *PaymentOrderEventData) SetPspOrderCode(v string) {
	o.PspOrderCode = v
}

// GetStatus returns the Status field value
func (o *PaymentOrderEventData) GetStatus() OrderStatus {
	if o == nil {
		var ret OrderStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetStatusOk() (*OrderStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentOrderEventData) SetStatus(v OrderStatus) {
	o.Status = v
}

// GetReceivedTokenAmount returns the ReceivedTokenAmount field value
func (o *PaymentOrderEventData) GetReceivedTokenAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceivedTokenAmount
}

// GetReceivedTokenAmountOk returns a tuple with the ReceivedTokenAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetReceivedTokenAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceivedTokenAmount, true
}

// SetReceivedTokenAmount sets field value
func (o *PaymentOrderEventData) SetReceivedTokenAmount(v string) {
	o.ReceivedTokenAmount = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *PaymentOrderEventData) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *PaymentOrderEventData) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetTransactions() []PaymentTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []PaymentTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetTransactionsOk() ([]PaymentTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []PaymentTransaction and assigns it to the Transactions field.
func (o *PaymentOrderEventData) SetTransactions(v []PaymentTransaction) {
	o.Transactions = v
}

// GetSettlementStatus returns the SettlementStatus field value if set, zero value otherwise.
func (o *PaymentOrderEventData) GetSettlementStatus() SettleStatus {
	if o == nil || IsNil(o.SettlementStatus) {
		var ret SettleStatus
		return ret
	}
	return *o.SettlementStatus
}

// GetSettlementStatusOk returns a tuple with the SettlementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOrderEventData) GetSettlementStatusOk() (*SettleStatus, bool) {
	if o == nil || IsNil(o.SettlementStatus) {
		return nil, false
	}
	return o.SettlementStatus, true
}

// HasSettlementStatus returns a boolean if a field has been set.
func (o *PaymentOrderEventData) HasSettlementStatus() bool {
	if o != nil && !IsNil(o.SettlementStatus) {
		return true
	}

	return false
}

// SetSettlementStatus gets a reference to the given SettleStatus and assigns it to the SettlementStatus field.
func (o *PaymentOrderEventData) SetSettlementStatus(v SettleStatus) {
	o.SettlementStatus = &v
}

func (o PaymentOrderEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentOrderEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["order_id"] = o.OrderId
	if !IsNil(o.MerchantId) {
		toSerialize["merchant_id"] = o.MerchantId
	}
	toSerialize["token_id"] = o.TokenId
	toSerialize["chain_id"] = o.ChainId
	toSerialize["payable_amount"] = o.PayableAmount
	toSerialize["receive_address"] = o.ReceiveAddress
	toSerialize["currency"] = o.Currency
	toSerialize["order_amount"] = o.OrderAmount
	toSerialize["fee_amount"] = o.FeeAmount
	toSerialize["exchange_rate"] = o.ExchangeRate
	if !IsNil(o.ExpiredAt) {
		toSerialize["expired_at"] = o.ExpiredAt
	}
	if !IsNil(o.MerchantOrderCode) {
		toSerialize["merchant_order_code"] = o.MerchantOrderCode
	}
	toSerialize["psp_order_code"] = o.PspOrderCode
	toSerialize["status"] = o.Status
	toSerialize["received_token_amount"] = o.ReceivedTokenAmount
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !IsNil(o.SettlementStatus) {
		toSerialize["settlement_status"] = o.SettlementStatus
	}
	return toSerialize, nil
}

func (o *PaymentOrderEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"order_id",
		"token_id",
		"chain_id",
		"payable_amount",
		"receive_address",
		"currency",
		"order_amount",
		"fee_amount",
		"exchange_rate",
		"psp_order_code",
		"status",
		"received_token_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentOrderEventData := _PaymentOrderEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentOrderEventData)

	if err != nil {
		return err
	}

	*o = PaymentOrderEventData(varPaymentOrderEventData)

	return err
}

type NullablePaymentOrderEventData struct {
	value *PaymentOrderEventData
	isSet bool
}

func (v NullablePaymentOrderEventData) Get() *PaymentOrderEventData {
	return v.value
}

func (v *NullablePaymentOrderEventData) Set(val *PaymentOrderEventData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentOrderEventData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentOrderEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentOrderEventData(val *PaymentOrderEventData) *NullablePaymentOrderEventData {
	return &NullablePaymentOrderEventData{value: val, isSet: true}
}

func (v NullablePaymentOrderEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentOrderEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


