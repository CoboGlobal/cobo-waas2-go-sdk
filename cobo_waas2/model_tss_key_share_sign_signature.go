/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TSSKeyShareSignSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TSSKeyShareSignSignature{}

// TSSKeyShareSignSignature struct for TSSKeyShareSignSignature
type TSSKeyShareSignSignature struct {
	// The TSS key share group ID.
	GroupId *string `json:"group_id,omitempty"`
	// The hexadecimal encoded signed message.
	SignedMsg *string `json:"signed_msg,omitempty"`
	// The message hash.
	MsgHash *string `json:"msg_hash,omitempty"`
	// The signature.
	Signature *string `json:"signature,omitempty"`
}

// NewTSSKeyShareSignSignature instantiates a new TSSKeyShareSignSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTSSKeyShareSignSignature() *TSSKeyShareSignSignature {
	this := TSSKeyShareSignSignature{}
	return &this
}

// NewTSSKeyShareSignSignatureWithDefaults instantiates a new TSSKeyShareSignSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTSSKeyShareSignSignatureWithDefaults() *TSSKeyShareSignSignature {
	this := TSSKeyShareSignSignature{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *TSSKeyShareSignSignature) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignSignature) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *TSSKeyShareSignSignature) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *TSSKeyShareSignSignature) SetGroupId(v string) {
	o.GroupId = &v
}

// GetSignedMsg returns the SignedMsg field value if set, zero value otherwise.
func (o *TSSKeyShareSignSignature) GetSignedMsg() string {
	if o == nil || IsNil(o.SignedMsg) {
		var ret string
		return ret
	}
	return *o.SignedMsg
}

// GetSignedMsgOk returns a tuple with the SignedMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignSignature) GetSignedMsgOk() (*string, bool) {
	if o == nil || IsNil(o.SignedMsg) {
		return nil, false
	}
	return o.SignedMsg, true
}

// HasSignedMsg returns a boolean if a field has been set.
func (o *TSSKeyShareSignSignature) HasSignedMsg() bool {
	if o != nil && !IsNil(o.SignedMsg) {
		return true
	}

	return false
}

// SetSignedMsg gets a reference to the given string and assigns it to the SignedMsg field.
func (o *TSSKeyShareSignSignature) SetSignedMsg(v string) {
	o.SignedMsg = &v
}

// GetMsgHash returns the MsgHash field value if set, zero value otherwise.
func (o *TSSKeyShareSignSignature) GetMsgHash() string {
	if o == nil || IsNil(o.MsgHash) {
		var ret string
		return ret
	}
	return *o.MsgHash
}

// GetMsgHashOk returns a tuple with the MsgHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignSignature) GetMsgHashOk() (*string, bool) {
	if o == nil || IsNil(o.MsgHash) {
		return nil, false
	}
	return o.MsgHash, true
}

// HasMsgHash returns a boolean if a field has been set.
func (o *TSSKeyShareSignSignature) HasMsgHash() bool {
	if o != nil && !IsNil(o.MsgHash) {
		return true
	}

	return false
}

// SetMsgHash gets a reference to the given string and assigns it to the MsgHash field.
func (o *TSSKeyShareSignSignature) SetMsgHash(v string) {
	o.MsgHash = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *TSSKeyShareSignSignature) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignSignature) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *TSSKeyShareSignSignature) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *TSSKeyShareSignSignature) SetSignature(v string) {
	o.Signature = &v
}

func (o TSSKeyShareSignSignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TSSKeyShareSignSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.SignedMsg) {
		toSerialize["signed_msg"] = o.SignedMsg
	}
	if !IsNil(o.MsgHash) {
		toSerialize["msg_hash"] = o.MsgHash
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	return toSerialize, nil
}

type NullableTSSKeyShareSignSignature struct {
	value *TSSKeyShareSignSignature
	isSet bool
}

func (v NullableTSSKeyShareSignSignature) Get() *TSSKeyShareSignSignature {
	return v.value
}

func (v *NullableTSSKeyShareSignSignature) Set(val *TSSKeyShareSignSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSKeyShareSignSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSKeyShareSignSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSKeyShareSignSignature(val *TSSKeyShareSignSignature) *NullableTSSKeyShareSignSignature {
	return &NullableTSSKeyShareSignSignature{value: val, isSet: true}
}

func (v NullableTSSKeyShareSignSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSKeyShareSignSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


