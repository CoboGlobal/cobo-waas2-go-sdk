/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationActivityStatus The status of the tokenization activity.
type TokenizationActivityStatus string

// List of TokenizationActivityStatus
const (
	TOKENIZATIONACTIVITYSTATUS_PROCESSING TokenizationActivityStatus = "Processing"
	TOKENIZATIONACTIVITYSTATUS_SUCCESS TokenizationActivityStatus = "Success"
	TOKENIZATIONACTIVITYSTATUS_FAILED TokenizationActivityStatus = "Failed"
)

// All allowed values of TokenizationActivityStatus enum
var AllowedTokenizationActivityStatusEnumValues = []TokenizationActivityStatus{
	"Processing",
	"Success",
	"Failed",
}

func (v *TokenizationActivityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationActivityStatus(value)
	for _, existing := range AllowedTokenizationActivityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationActivityStatus("unknown")
	return nil
}

// NewTokenizationActivityStatusFromValue returns a pointer to a valid TokenizationActivityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationActivityStatusFromValue(v string) (*TokenizationActivityStatus, error) {
	ev := TokenizationActivityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationActivityStatus: valid values are %v", v, AllowedTokenizationActivityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationActivityStatus) IsValid() bool {
	for _, existing := range AllowedTokenizationActivityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationActivityStatus value
func (v TokenizationActivityStatus) Ptr() *TokenizationActivityStatus {
	return &v
}

type NullableTokenizationActivityStatus struct {
	value *TokenizationActivityStatus
	isSet bool
}

func (v NullableTokenizationActivityStatus) Get() *TokenizationActivityStatus {
	return v.value
}

func (v *NullableTokenizationActivityStatus) Set(val *TokenizationActivityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationActivityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationActivityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationActivityStatus(val *TokenizationActivityStatus) *NullableTokenizationActivityStatus {
	return &NullableTokenizationActivityStatus{value: val, isSet: true}
}

func (v NullableTokenizationActivityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationActivityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

