/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionRawMessageSignDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionRawMessageSignDestination{}

// TransactionRawMessageSignDestination The information about the destination `Raw_Message_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.  Switch between the tabs to display the properties for different transaction destinations. 
type TransactionRawMessageSignDestination struct {
	DestinationType TransactionDestinationType `json:"destination_type"`
	// Message hash to be signed, in hexadecimal format.
	MsgHash *string `json:"msg_hash,omitempty"`
}

type _TransactionRawMessageSignDestination TransactionRawMessageSignDestination

// NewTransactionRawMessageSignDestination instantiates a new TransactionRawMessageSignDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionRawMessageSignDestination(destinationType TransactionDestinationType) *TransactionRawMessageSignDestination {
	this := TransactionRawMessageSignDestination{}
	this.DestinationType = destinationType
	return &this
}

// NewTransactionRawMessageSignDestinationWithDefaults instantiates a new TransactionRawMessageSignDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionRawMessageSignDestinationWithDefaults() *TransactionRawMessageSignDestination {
	this := TransactionRawMessageSignDestination{}
	return &this
}

// GetDestinationType returns the DestinationType field value
func (o *TransactionRawMessageSignDestination) GetDestinationType() TransactionDestinationType {
	if o == nil {
		var ret TransactionDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *TransactionRawMessageSignDestination) GetDestinationTypeOk() (*TransactionDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *TransactionRawMessageSignDestination) SetDestinationType(v TransactionDestinationType) {
	o.DestinationType = v
}

// GetMsgHash returns the MsgHash field value if set, zero value otherwise.
func (o *TransactionRawMessageSignDestination) GetMsgHash() string {
	if o == nil || IsNil(o.MsgHash) {
		var ret string
		return ret
	}
	return *o.MsgHash
}

// GetMsgHashOk returns a tuple with the MsgHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionRawMessageSignDestination) GetMsgHashOk() (*string, bool) {
	if o == nil || IsNil(o.MsgHash) {
		return nil, false
	}
	return o.MsgHash, true
}

// HasMsgHash returns a boolean if a field has been set.
func (o *TransactionRawMessageSignDestination) HasMsgHash() bool {
	if o != nil && !IsNil(o.MsgHash) {
		return true
	}

	return false
}

// SetMsgHash gets a reference to the given string and assigns it to the MsgHash field.
func (o *TransactionRawMessageSignDestination) SetMsgHash(v string) {
	o.MsgHash = &v
}

func (o TransactionRawMessageSignDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionRawMessageSignDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_type"] = o.DestinationType
	if !IsNil(o.MsgHash) {
		toSerialize["msg_hash"] = o.MsgHash
	}
	return toSerialize, nil
}

func (o *TransactionRawMessageSignDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionRawMessageSignDestination := _TransactionRawMessageSignDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionRawMessageSignDestination)

	if err != nil {
		return err
	}

	*o = TransactionRawMessageSignDestination(varTransactionRawMessageSignDestination)

	return err
}

type NullableTransactionRawMessageSignDestination struct {
	value *TransactionRawMessageSignDestination
	isSet bool
}

func (v NullableTransactionRawMessageSignDestination) Get() *TransactionRawMessageSignDestination {
	return v.value
}

func (v *NullableTransactionRawMessageSignDestination) Set(val *TransactionRawMessageSignDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionRawMessageSignDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionRawMessageSignDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionRawMessageSignDestination(val *TransactionRawMessageSignDestination) *NullableTransactionRawMessageSignDestination {
	return &NullableTransactionRawMessageSignDestination{value: val, isSet: true}
}

func (v NullableTransactionRawMessageSignDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionRawMessageSignDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


