/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TokenizationSolTokenPermissionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationSolTokenPermissionParams{}

// TokenizationSolTokenPermissionParams Role-based permission settings for the Solana Token-2022 Program. If not provided, all permissions will be granted to the issuing wallet by default.
type TokenizationSolTokenPermissionParams struct {
	// Solana wallet address assigned as the permanent delegate authority. It can perform delegated operations on behalf of token holders.
	PermanentDelegate *string `json:"permanent_delegate,omitempty"`
	// Solana wallet address assigned as the mint authority. It can mint new tokens.
	Minter *string `json:"minter,omitempty"`
	// Solana wallet address assigned as the freeze authority. It can freeze token accounts.
	Freezer *string `json:"freezer,omitempty"`
	// Solana wallet address assigned as the update authority. It can update token metadata.
	Updater *string `json:"updater,omitempty"`
	// Solana wallet address assigned as the pause authority. It can pause or unpause all token activities including transfers, burns, and mints.
	Pauser *string `json:"pauser,omitempty"`
}

// NewTokenizationSolTokenPermissionParams instantiates a new TokenizationSolTokenPermissionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationSolTokenPermissionParams() *TokenizationSolTokenPermissionParams {
	this := TokenizationSolTokenPermissionParams{}
	return &this
}

// NewTokenizationSolTokenPermissionParamsWithDefaults instantiates a new TokenizationSolTokenPermissionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationSolTokenPermissionParamsWithDefaults() *TokenizationSolTokenPermissionParams {
	this := TokenizationSolTokenPermissionParams{}
	return &this
}

// GetPermanentDelegate returns the PermanentDelegate field value if set, zero value otherwise.
func (o *TokenizationSolTokenPermissionParams) GetPermanentDelegate() string {
	if o == nil || IsNil(o.PermanentDelegate) {
		var ret string
		return ret
	}
	return *o.PermanentDelegate
}

// GetPermanentDelegateOk returns a tuple with the PermanentDelegate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolTokenPermissionParams) GetPermanentDelegateOk() (*string, bool) {
	if o == nil || IsNil(o.PermanentDelegate) {
		return nil, false
	}
	return o.PermanentDelegate, true
}

// HasPermanentDelegate returns a boolean if a field has been set.
func (o *TokenizationSolTokenPermissionParams) HasPermanentDelegate() bool {
	if o != nil && !IsNil(o.PermanentDelegate) {
		return true
	}

	return false
}

// SetPermanentDelegate gets a reference to the given string and assigns it to the PermanentDelegate field.
func (o *TokenizationSolTokenPermissionParams) SetPermanentDelegate(v string) {
	o.PermanentDelegate = &v
}

// GetMinter returns the Minter field value if set, zero value otherwise.
func (o *TokenizationSolTokenPermissionParams) GetMinter() string {
	if o == nil || IsNil(o.Minter) {
		var ret string
		return ret
	}
	return *o.Minter
}

// GetMinterOk returns a tuple with the Minter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolTokenPermissionParams) GetMinterOk() (*string, bool) {
	if o == nil || IsNil(o.Minter) {
		return nil, false
	}
	return o.Minter, true
}

// HasMinter returns a boolean if a field has been set.
func (o *TokenizationSolTokenPermissionParams) HasMinter() bool {
	if o != nil && !IsNil(o.Minter) {
		return true
	}

	return false
}

// SetMinter gets a reference to the given string and assigns it to the Minter field.
func (o *TokenizationSolTokenPermissionParams) SetMinter(v string) {
	o.Minter = &v
}

// GetFreezer returns the Freezer field value if set, zero value otherwise.
func (o *TokenizationSolTokenPermissionParams) GetFreezer() string {
	if o == nil || IsNil(o.Freezer) {
		var ret string
		return ret
	}
	return *o.Freezer
}

// GetFreezerOk returns a tuple with the Freezer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolTokenPermissionParams) GetFreezerOk() (*string, bool) {
	if o == nil || IsNil(o.Freezer) {
		return nil, false
	}
	return o.Freezer, true
}

// HasFreezer returns a boolean if a field has been set.
func (o *TokenizationSolTokenPermissionParams) HasFreezer() bool {
	if o != nil && !IsNil(o.Freezer) {
		return true
	}

	return false
}

// SetFreezer gets a reference to the given string and assigns it to the Freezer field.
func (o *TokenizationSolTokenPermissionParams) SetFreezer(v string) {
	o.Freezer = &v
}

// GetUpdater returns the Updater field value if set, zero value otherwise.
func (o *TokenizationSolTokenPermissionParams) GetUpdater() string {
	if o == nil || IsNil(o.Updater) {
		var ret string
		return ret
	}
	return *o.Updater
}

// GetUpdaterOk returns a tuple with the Updater field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolTokenPermissionParams) GetUpdaterOk() (*string, bool) {
	if o == nil || IsNil(o.Updater) {
		return nil, false
	}
	return o.Updater, true
}

// HasUpdater returns a boolean if a field has been set.
func (o *TokenizationSolTokenPermissionParams) HasUpdater() bool {
	if o != nil && !IsNil(o.Updater) {
		return true
	}

	return false
}

// SetUpdater gets a reference to the given string and assigns it to the Updater field.
func (o *TokenizationSolTokenPermissionParams) SetUpdater(v string) {
	o.Updater = &v
}

// GetPauser returns the Pauser field value if set, zero value otherwise.
func (o *TokenizationSolTokenPermissionParams) GetPauser() string {
	if o == nil || IsNil(o.Pauser) {
		var ret string
		return ret
	}
	return *o.Pauser
}

// GetPauserOk returns a tuple with the Pauser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationSolTokenPermissionParams) GetPauserOk() (*string, bool) {
	if o == nil || IsNil(o.Pauser) {
		return nil, false
	}
	return o.Pauser, true
}

// HasPauser returns a boolean if a field has been set.
func (o *TokenizationSolTokenPermissionParams) HasPauser() bool {
	if o != nil && !IsNil(o.Pauser) {
		return true
	}

	return false
}

// SetPauser gets a reference to the given string and assigns it to the Pauser field.
func (o *TokenizationSolTokenPermissionParams) SetPauser(v string) {
	o.Pauser = &v
}

func (o TokenizationSolTokenPermissionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationSolTokenPermissionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PermanentDelegate) {
		toSerialize["permanent_delegate"] = o.PermanentDelegate
	}
	if !IsNil(o.Minter) {
		toSerialize["minter"] = o.Minter
	}
	if !IsNil(o.Freezer) {
		toSerialize["freezer"] = o.Freezer
	}
	if !IsNil(o.Updater) {
		toSerialize["updater"] = o.Updater
	}
	if !IsNil(o.Pauser) {
		toSerialize["pauser"] = o.Pauser
	}
	return toSerialize, nil
}

type NullableTokenizationSolTokenPermissionParams struct {
	value *TokenizationSolTokenPermissionParams
	isSet bool
}

func (v NullableTokenizationSolTokenPermissionParams) Get() *TokenizationSolTokenPermissionParams {
	return v.value
}

func (v *NullableTokenizationSolTokenPermissionParams) Set(val *TokenizationSolTokenPermissionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationSolTokenPermissionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationSolTokenPermissionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationSolTokenPermissionParams(val *TokenizationSolTokenPermissionParams) *NullableTokenizationSolTokenPermissionParams {
	return &NullableTokenizationSolTokenPermissionParams{value: val, isSet: true}
}

func (v NullableTokenizationSolTokenPermissionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationSolTokenPermissionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


