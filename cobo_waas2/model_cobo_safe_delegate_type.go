/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// CoboSafeDelegateType The wallet subtype of the Delegate. Possible values include: - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets). - `User-Controlled`: MPC Wallets (User-Controlled Wallets). 
type CoboSafeDelegateType string

// List of CoboSafeDelegateType
const (
	COBOSAFEDELEGATETYPE_ORG_CONTROLLED CoboSafeDelegateType = "Org-Controlled"
	COBOSAFEDELEGATETYPE_USER_CONTROLLED CoboSafeDelegateType = "User-Controlled"
)

// All allowed values of CoboSafeDelegateType enum
var AllowedCoboSafeDelegateTypeEnumValues = []CoboSafeDelegateType{
	"Org-Controlled",
	"User-Controlled",
}

func (v *CoboSafeDelegateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CoboSafeDelegateType(value)
	for _, existing := range AllowedCoboSafeDelegateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = CoboSafeDelegateType("unknown")
    return nil
}

// NewCoboSafeDelegateTypeFromValue returns a pointer to a valid CoboSafeDelegateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCoboSafeDelegateTypeFromValue(v string) (*CoboSafeDelegateType, error) {
	ev := CoboSafeDelegateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CoboSafeDelegateType: valid values are %v", v, AllowedCoboSafeDelegateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CoboSafeDelegateType) IsValid() bool {
	for _, existing := range AllowedCoboSafeDelegateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CoboSafeDelegateType value
func (v CoboSafeDelegateType) Ptr() *CoboSafeDelegateType {
	return &v
}

type NullableCoboSafeDelegateType struct {
	value *CoboSafeDelegateType
	isSet bool
}

func (v NullableCoboSafeDelegateType) Get() *CoboSafeDelegateType {
	return v.value
}

func (v *NullableCoboSafeDelegateType) Set(val *CoboSafeDelegateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCoboSafeDelegateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCoboSafeDelegateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoboSafeDelegateType(val *CoboSafeDelegateType) *NullableCoboSafeDelegateType {
	return &NullableCoboSafeDelegateType{value: val, isSet: true}
}

func (v NullableCoboSafeDelegateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoboSafeDelegateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

