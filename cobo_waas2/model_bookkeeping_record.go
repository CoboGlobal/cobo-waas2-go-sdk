/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BookkeepingRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookkeepingRecord{}

// BookkeepingRecord The bookkeeping item information.
type BookkeepingRecord struct {
	// The wallet ID.
	WalletId string `json:"wallet_id"`
	WalletType *WalletType `json:"wallet_type,omitempty"`
	// The wallet name.
	WalletName *string `json:"wallet_name,omitempty"`
	// The time when the bookkeeping was created, in Unix timestamp format, measured in milliseconds.
	TransactionTimestamp int64 `json:"transaction_timestamp"`
	// The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	// The bookkeeping type.
	Type string `json:"type"`
	// The amount of the bookkeeping.
	Amount string `json:"amount"`
	// The post-balance of the tx.
	Balance string `json:"balance"`
	// The from address.
	FromAddress *string `json:"from_address,omitempty"`
	// The to address.
	ToAddress *string `json:"to_address,omitempty"`
	// The transaction hash.
	TransactionHash *string `json:"transaction_hash,omitempty"`
}

type _BookkeepingRecord BookkeepingRecord

// NewBookkeepingRecord instantiates a new BookkeepingRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookkeepingRecord(walletId string, transactionTimestamp int64, tokenId string, type_ string, amount string, balance string) *BookkeepingRecord {
	this := BookkeepingRecord{}
	this.WalletId = walletId
	this.TransactionTimestamp = transactionTimestamp
	this.TokenId = tokenId
	this.Type = type_
	this.Amount = amount
	this.Balance = balance
	return &this
}

// NewBookkeepingRecordWithDefaults instantiates a new BookkeepingRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookkeepingRecordWithDefaults() *BookkeepingRecord {
	this := BookkeepingRecord{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *BookkeepingRecord) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *BookkeepingRecord) SetWalletId(v string) {
	o.WalletId = v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *BookkeepingRecord) GetWalletType() WalletType {
	if o == nil || IsNil(o.WalletType) {
		var ret WalletType
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *BookkeepingRecord) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given WalletType and assigns it to the WalletType field.
func (o *BookkeepingRecord) SetWalletType(v WalletType) {
	o.WalletType = &v
}

// GetWalletName returns the WalletName field value if set, zero value otherwise.
func (o *BookkeepingRecord) GetWalletName() string {
	if o == nil || IsNil(o.WalletName) {
		var ret string
		return ret
	}
	return *o.WalletName
}

// GetWalletNameOk returns a tuple with the WalletName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetWalletNameOk() (*string, bool) {
	if o == nil || IsNil(o.WalletName) {
		return nil, false
	}
	return o.WalletName, true
}

// HasWalletName returns a boolean if a field has been set.
func (o *BookkeepingRecord) HasWalletName() bool {
	if o != nil && !IsNil(o.WalletName) {
		return true
	}

	return false
}

// SetWalletName gets a reference to the given string and assigns it to the WalletName field.
func (o *BookkeepingRecord) SetWalletName(v string) {
	o.WalletName = &v
}

// GetTransactionTimestamp returns the TransactionTimestamp field value
func (o *BookkeepingRecord) GetTransactionTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TransactionTimestamp
}

// GetTransactionTimestampOk returns a tuple with the TransactionTimestamp field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetTransactionTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionTimestamp, true
}

// SetTransactionTimestamp sets field value
func (o *BookkeepingRecord) SetTransactionTimestamp(v int64) {
	o.TransactionTimestamp = v
}

// GetTokenId returns the TokenId field value
func (o *BookkeepingRecord) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *BookkeepingRecord) SetTokenId(v string) {
	o.TokenId = v
}

// GetType returns the Type field value
func (o *BookkeepingRecord) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BookkeepingRecord) SetType(v string) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *BookkeepingRecord) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BookkeepingRecord) SetAmount(v string) {
	o.Amount = v
}

// GetBalance returns the Balance field value
func (o *BookkeepingRecord) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *BookkeepingRecord) SetBalance(v string) {
	o.Balance = v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *BookkeepingRecord) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress) {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *BookkeepingRecord) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *BookkeepingRecord) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *BookkeepingRecord) GetToAddress() string {
	if o == nil || IsNil(o.ToAddress) {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetToAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ToAddress) {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *BookkeepingRecord) HasToAddress() bool {
	if o != nil && !IsNil(o.ToAddress) {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *BookkeepingRecord) SetToAddress(v string) {
	o.ToAddress = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *BookkeepingRecord) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookkeepingRecord) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *BookkeepingRecord) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *BookkeepingRecord) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

func (o BookkeepingRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookkeepingRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	if !IsNil(o.WalletName) {
		toSerialize["wallet_name"] = o.WalletName
	}
	toSerialize["transaction_timestamp"] = o.TransactionTimestamp
	toSerialize["token_id"] = o.TokenId
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	toSerialize["balance"] = o.Balance
	if !IsNil(o.FromAddress) {
		toSerialize["from_address"] = o.FromAddress
	}
	if !IsNil(o.ToAddress) {
		toSerialize["to_address"] = o.ToAddress
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	return toSerialize, nil
}

func (o *BookkeepingRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"transaction_timestamp",
		"token_id",
		"type",
		"amount",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookkeepingRecord := _BookkeepingRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookkeepingRecord)

	if err != nil {
		return err
	}

	*o = BookkeepingRecord(varBookkeepingRecord)

	return err
}

type NullableBookkeepingRecord struct {
	value *BookkeepingRecord
	isSet bool
}

func (v NullableBookkeepingRecord) Get() *BookkeepingRecord {
	return v.value
}

func (v *NullableBookkeepingRecord) Set(val *BookkeepingRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBookkeepingRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBookkeepingRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookkeepingRecord(val *BookkeepingRecord) *NullableBookkeepingRecord {
	return &NullableBookkeepingRecord{value: val, isSet: true}
}

func (v NullableBookkeepingRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookkeepingRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


