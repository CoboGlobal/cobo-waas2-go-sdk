/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TokenizationContractCallParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationContractCallParams{}

// TokenizationContractCallParams The information about the contract call.
type TokenizationContractCallParams struct {
	Source *TokenizationTokenOperationSource `json:"source,omitempty"`
	Data *TokenizationContractCallParamsData `json:"data,omitempty"`
}

// NewTokenizationContractCallParams instantiates a new TokenizationContractCallParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationContractCallParams() *TokenizationContractCallParams {
	this := TokenizationContractCallParams{}
	return &this
}

// NewTokenizationContractCallParamsWithDefaults instantiates a new TokenizationContractCallParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationContractCallParamsWithDefaults() *TokenizationContractCallParams {
	this := TokenizationContractCallParams{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TokenizationContractCallParams) GetSource() TokenizationTokenOperationSource {
	if o == nil || IsNil(o.Source) {
		var ret TokenizationTokenOperationSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationContractCallParams) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TokenizationContractCallParams) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given TokenizationTokenOperationSource and assigns it to the Source field.
func (o *TokenizationContractCallParams) SetSource(v TokenizationTokenOperationSource) {
	o.Source = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TokenizationContractCallParams) GetData() TokenizationContractCallParamsData {
	if o == nil || IsNil(o.Data) {
		var ret TokenizationContractCallParamsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationContractCallParams) GetDataOk() (*TokenizationContractCallParamsData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TokenizationContractCallParams) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given TokenizationContractCallParamsData and assigns it to the Data field.
func (o *TokenizationContractCallParams) SetData(v TokenizationContractCallParamsData) {
	o.Data = &v
}

func (o TokenizationContractCallParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationContractCallParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableTokenizationContractCallParams struct {
	value *TokenizationContractCallParams
	isSet bool
}

func (v NullableTokenizationContractCallParams) Get() *TokenizationContractCallParams {
	return v.value
}

func (v *NullableTokenizationContractCallParams) Set(val *TokenizationContractCallParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationContractCallParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationContractCallParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationContractCallParams(val *TokenizationContractCallParams) *NullableTokenizationContractCallParams {
	return &NullableTokenizationContractCallParams{value: val, isSet: true}
}

func (v NullableTokenizationContractCallParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationContractCallParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


