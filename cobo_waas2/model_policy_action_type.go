/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PolicyActionType The approval action type. Possible values include:    - `Reject`: The action rejects the request.   - `Accept`: The action approves the request.   - `Quorum`: The action requires approval from multiple participants. 
type PolicyActionType string

// List of PolicyActionType
const (
	POLICYACTIONTYPE_REJECT PolicyActionType = "Reject"
	POLICYACTIONTYPE_ACCEPT PolicyActionType = "Accept"
	POLICYACTIONTYPE_QUORUM PolicyActionType = "Quorum"
)

// All allowed values of PolicyActionType enum
var AllowedPolicyActionTypeEnumValues = []PolicyActionType{
	"Reject",
	"Accept",
	"Quorum",
}

func (v *PolicyActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyActionType(value)
	for _, existing := range AllowedPolicyActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PolicyActionType("unknown")
	return nil
}

// NewPolicyActionTypeFromValue returns a pointer to a valid PolicyActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyActionTypeFromValue(v string) (*PolicyActionType, error) {
	ev := PolicyActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyActionType: valid values are %v", v, AllowedPolicyActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyActionType) IsValid() bool {
	for _, existing := range AllowedPolicyActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyActionType value
func (v PolicyActionType) Ptr() *PolicyActionType {
	return &v
}

type NullablePolicyActionType struct {
	value *PolicyActionType
	isSet bool
}

func (v NullablePolicyActionType) Get() *PolicyActionType {
	return v.value
}

func (v *NullablePolicyActionType) Set(val *PolicyActionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyActionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyActionType(val *PolicyActionType) *NullablePolicyActionType {
	return &NullablePolicyActionType{value: val, isSet: true}
}

func (v NullablePolicyActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

