/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenListingRequestStatus the model 'TokenListingRequestStatus'
type TokenListingRequestStatus string

// List of TokenListingRequestStatus
const (
	TOKENLISTINGREQUESTSTATUS_SUBMITTED TokenListingRequestStatus = "Submitted"
	TOKENLISTINGREQUESTSTATUS_SUCCEEDED TokenListingRequestStatus = "Succeeded"
	TOKENLISTINGREQUESTSTATUS_FAILED TokenListingRequestStatus = "Failed"
)

// All allowed values of TokenListingRequestStatus enum
var AllowedTokenListingRequestStatusEnumValues = []TokenListingRequestStatus{
	"Submitted",
	"Succeeded",
	"Failed",
}

func (v *TokenListingRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenListingRequestStatus(value)
	for _, existing := range AllowedTokenListingRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenListingRequestStatus("unknown")
	return nil
}

// NewTokenListingRequestStatusFromValue returns a pointer to a valid TokenListingRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenListingRequestStatusFromValue(v string) (*TokenListingRequestStatus, error) {
	ev := TokenListingRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenListingRequestStatus: valid values are %v", v, AllowedTokenListingRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenListingRequestStatus) IsValid() bool {
	for _, existing := range AllowedTokenListingRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenListingRequestStatus value
func (v TokenListingRequestStatus) Ptr() *TokenListingRequestStatus {
	return &v
}

type NullableTokenListingRequestStatus struct {
	value *TokenListingRequestStatus
	isSet bool
}

func (v NullableTokenListingRequestStatus) Get() *TokenListingRequestStatus {
	return v.value
}

func (v *NullableTokenListingRequestStatus) Set(val *TokenListingRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenListingRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenListingRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenListingRequestStatus(val *TokenListingRequestStatus) *NullableTokenListingRequestStatus {
	return &NullableTokenListingRequestStatus{value: val, isSet: true}
}

func (v NullableTokenListingRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenListingRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

