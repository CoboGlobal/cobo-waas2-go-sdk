/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChainsEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainsEventData{}

// ChainsEventData struct for ChainsEventData
type ChainsEventData struct {
	//  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The Chain enabled event data. - `Tokens`: The Token enabled event data.
	DataType string `json:"data_type"`
	// The chains.
	Chains []ChainInfo `json:"chains"`
}

type _ChainsEventData ChainsEventData

// NewChainsEventData instantiates a new ChainsEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainsEventData(dataType string, chains []ChainInfo) *ChainsEventData {
	this := ChainsEventData{}
	this.DataType = dataType
	this.Chains = chains
	return &this
}

// NewChainsEventDataWithDefaults instantiates a new ChainsEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainsEventDataWithDefaults() *ChainsEventData {
	this := ChainsEventData{}
	return &this
}

// GetDataType returns the DataType field value
func (o *ChainsEventData) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *ChainsEventData) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *ChainsEventData) SetDataType(v string) {
	o.DataType = v
}

// GetChains returns the Chains field value
func (o *ChainsEventData) GetChains() []ChainInfo {
	if o == nil {
		var ret []ChainInfo
		return ret
	}

	return o.Chains
}

// GetChainsOk returns a tuple with the Chains field value
// and a boolean to check if the value has been set.
func (o *ChainsEventData) GetChainsOk() ([]ChainInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Chains, true
}

// SetChains sets field value
func (o *ChainsEventData) SetChains(v []ChainInfo) {
	o.Chains = v
}

func (o ChainsEventData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainsEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data_type"] = o.DataType
	toSerialize["chains"] = o.Chains
	return toSerialize, nil
}

func (o *ChainsEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data_type",
		"chains",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChainsEventData := _ChainsEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChainsEventData)

	if err != nil {
		return err
	}

	*o = ChainsEventData(varChainsEventData)

	return err
}

type NullableChainsEventData struct {
	value *ChainsEventData
	isSet bool
}

func (v NullableChainsEventData) Get() *ChainsEventData {
	return v.value
}

func (v *NullableChainsEventData) Set(val *ChainsEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableChainsEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableChainsEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainsEventData(val *ChainsEventData) *NullableChainsEventData {
	return &NullableChainsEventData{value: val, isSet: true}
}

func (v NullableChainsEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainsEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


