/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationEstimateFeeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationEstimateFeeRequest{}

// TokenizationEstimateFeeRequest struct for TokenizationEstimateFeeRequest
type TokenizationEstimateFeeRequest struct {
	OperationParams TokenizationEstimateFeeRequestOperationParams `json:"operation_params"`
}

type _TokenizationEstimateFeeRequest TokenizationEstimateFeeRequest

// NewTokenizationEstimateFeeRequest instantiates a new TokenizationEstimateFeeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationEstimateFeeRequest(operationParams TokenizationEstimateFeeRequestOperationParams) *TokenizationEstimateFeeRequest {
	this := TokenizationEstimateFeeRequest{}
	this.OperationParams = operationParams
	return &this
}

// NewTokenizationEstimateFeeRequestWithDefaults instantiates a new TokenizationEstimateFeeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationEstimateFeeRequestWithDefaults() *TokenizationEstimateFeeRequest {
	this := TokenizationEstimateFeeRequest{}
	return &this
}

// GetOperationParams returns the OperationParams field value
func (o *TokenizationEstimateFeeRequest) GetOperationParams() TokenizationEstimateFeeRequestOperationParams {
	if o == nil {
		var ret TokenizationEstimateFeeRequestOperationParams
		return ret
	}

	return o.OperationParams
}

// GetOperationParamsOk returns a tuple with the OperationParams field value
// and a boolean to check if the value has been set.
func (o *TokenizationEstimateFeeRequest) GetOperationParamsOk() (*TokenizationEstimateFeeRequestOperationParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationParams, true
}

// SetOperationParams sets field value
func (o *TokenizationEstimateFeeRequest) SetOperationParams(v TokenizationEstimateFeeRequestOperationParams) {
	o.OperationParams = v
}

func (o TokenizationEstimateFeeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationEstimateFeeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation_params"] = o.OperationParams
	return toSerialize, nil
}

func (o *TokenizationEstimateFeeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationEstimateFeeRequest := _TokenizationEstimateFeeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationEstimateFeeRequest)

	if err != nil {
		return err
	}

	*o = TokenizationEstimateFeeRequest(varTokenizationEstimateFeeRequest)

	return err
}

type NullableTokenizationEstimateFeeRequest struct {
	value *TokenizationEstimateFeeRequest
	isSet bool
}

func (v NullableTokenizationEstimateFeeRequest) Get() *TokenizationEstimateFeeRequest {
	return v.value
}

func (v *NullableTokenizationEstimateFeeRequest) Set(val *TokenizationEstimateFeeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationEstimateFeeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationEstimateFeeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationEstimateFeeRequest(val *TokenizationEstimateFeeRequest) *NullableTokenizationEstimateFeeRequest {
	return &NullableTokenizationEstimateFeeRequest{value: val, isSet: true}
}

func (v NullableTokenizationEstimateFeeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationEstimateFeeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


