/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentSubscriptionStatus The current status of a subscription action. - `Pending`: The subscription has been created and is awaiting approve. - `WaitingApproval`: The subscription approve transaction is create and is awaiting transaction completed. - `Approved`: The subscription has been approved and is waiting subscript . - `Processing`: The subscription subscript transaction is create and is awaiting transaction completed. - `Active`: The subscription is active. - `InsufficientApproval`: The subscription is insufficient approval. - `Paused`: The subscription is paused. - `Ended`: The subscription is ended. - `Canceled`: The subscription is canceled. - `Failed`: The subscription is failed. 
type PaymentSubscriptionStatus string

// List of PaymentSubscriptionStatus
const (
	PAYMENTSUBSCRIPTIONSTATUS_PENDING PaymentSubscriptionStatus = "Pending"
	PAYMENTSUBSCRIPTIONSTATUS_WAITING_APPROVAL PaymentSubscriptionStatus = "WaitingApproval"
	PAYMENTSUBSCRIPTIONSTATUS_APPROVED PaymentSubscriptionStatus = "Approved"
	PAYMENTSUBSCRIPTIONSTATUS_PROCESSING PaymentSubscriptionStatus = "Processing"
	PAYMENTSUBSCRIPTIONSTATUS_ACTIVE PaymentSubscriptionStatus = "Active"
	PAYMENTSUBSCRIPTIONSTATUS_INSUFFICIENT_APPROVAL PaymentSubscriptionStatus = "InsufficientApproval"
	PAYMENTSUBSCRIPTIONSTATUS_PAUSED PaymentSubscriptionStatus = "Paused"
	PAYMENTSUBSCRIPTIONSTATUS_ENDED PaymentSubscriptionStatus = "Ended"
	PAYMENTSUBSCRIPTIONSTATUS_CANCELED PaymentSubscriptionStatus = "Canceled"
	PAYMENTSUBSCRIPTIONSTATUS_FAILED PaymentSubscriptionStatus = "Failed"
)

// All allowed values of PaymentSubscriptionStatus enum
var AllowedPaymentSubscriptionStatusEnumValues = []PaymentSubscriptionStatus{
	"Pending",
	"WaitingApproval",
	"Approved",
	"Processing",
	"Active",
	"InsufficientApproval",
	"Paused",
	"Ended",
	"Canceled",
	"Failed",
}

func (v *PaymentSubscriptionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentSubscriptionStatus(value)
	for _, existing := range AllowedPaymentSubscriptionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PaymentSubscriptionStatus("unknown")
	return nil
}

// NewPaymentSubscriptionStatusFromValue returns a pointer to a valid PaymentSubscriptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentSubscriptionStatusFromValue(v string) (*PaymentSubscriptionStatus, error) {
	ev := PaymentSubscriptionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentSubscriptionStatus: valid values are %v", v, AllowedPaymentSubscriptionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentSubscriptionStatus) IsValid() bool {
	for _, existing := range AllowedPaymentSubscriptionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentSubscriptionStatus value
func (v PaymentSubscriptionStatus) Ptr() *PaymentSubscriptionStatus {
	return &v
}

type NullablePaymentSubscriptionStatus struct {
	value *PaymentSubscriptionStatus
	isSet bool
}

func (v NullablePaymentSubscriptionStatus) Get() *PaymentSubscriptionStatus {
	return v.value
}

func (v *NullablePaymentSubscriptionStatus) Set(val *PaymentSubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionStatus(val *PaymentSubscriptionStatus) *NullablePaymentSubscriptionStatus {
	return &NullablePaymentSubscriptionStatus{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

