/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationIssueTokenParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationIssueTokenParams{}

// TokenizationIssueTokenParams struct for TokenizationIssueTokenParams
type TokenizationIssueTokenParams struct {
	// The chain ID where the token will be issued.
	ChainId string `json:"chain_id"`
	Source TokenizationTokenOperationSource `json:"source"`
	TokenParams TokenizationIssueTokenParamsTokenParams `json:"token_params"`
}

type _TokenizationIssueTokenParams TokenizationIssueTokenParams

// NewTokenizationIssueTokenParams instantiates a new TokenizationIssueTokenParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationIssueTokenParams(chainId string, source TokenizationTokenOperationSource, tokenParams TokenizationIssueTokenParamsTokenParams) *TokenizationIssueTokenParams {
	this := TokenizationIssueTokenParams{}
	this.ChainId = chainId
	this.Source = source
	this.TokenParams = tokenParams
	return &this
}

// NewTokenizationIssueTokenParamsWithDefaults instantiates a new TokenizationIssueTokenParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationIssueTokenParamsWithDefaults() *TokenizationIssueTokenParams {
	this := TokenizationIssueTokenParams{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *TokenizationIssueTokenParams) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *TokenizationIssueTokenParams) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *TokenizationIssueTokenParams) SetChainId(v string) {
	o.ChainId = v
}

// GetSource returns the Source field value
func (o *TokenizationIssueTokenParams) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationIssueTokenParams) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationIssueTokenParams) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetTokenParams returns the TokenParams field value
func (o *TokenizationIssueTokenParams) GetTokenParams() TokenizationIssueTokenParamsTokenParams {
	if o == nil {
		var ret TokenizationIssueTokenParamsTokenParams
		return ret
	}

	return o.TokenParams
}

// GetTokenParamsOk returns a tuple with the TokenParams field value
// and a boolean to check if the value has been set.
func (o *TokenizationIssueTokenParams) GetTokenParamsOk() (*TokenizationIssueTokenParamsTokenParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenParams, true
}

// SetTokenParams sets field value
func (o *TokenizationIssueTokenParams) SetTokenParams(v TokenizationIssueTokenParamsTokenParams) {
	o.TokenParams = v
}

func (o TokenizationIssueTokenParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationIssueTokenParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain_id"] = o.ChainId
	toSerialize["source"] = o.Source
	toSerialize["token_params"] = o.TokenParams
	return toSerialize, nil
}

func (o *TokenizationIssueTokenParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain_id",
		"source",
		"token_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationIssueTokenParams := _TokenizationIssueTokenParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationIssueTokenParams)

	if err != nil {
		return err
	}

	*o = TokenizationIssueTokenParams(varTokenizationIssueTokenParams)

	return err
}

type NullableTokenizationIssueTokenParams struct {
	value *TokenizationIssueTokenParams
	isSet bool
}

func (v NullableTokenizationIssueTokenParams) Get() *TokenizationIssueTokenParams {
	return v.value
}

func (v *NullableTokenizationIssueTokenParams) Set(val *TokenizationIssueTokenParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationIssueTokenParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationIssueTokenParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationIssueTokenParams(val *TokenizationIssueTokenParams) *NullableTokenizationIssueTokenParams {
	return &NullableTokenizationIssueTokenParams{value: val, isSet: true}
}

func (v NullableTokenizationIssueTokenParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationIssueTokenParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


