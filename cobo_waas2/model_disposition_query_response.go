/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DispositionQueryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DispositionQueryResponse{}

// DispositionQueryResponse The response for a disposition query request.
type DispositionQueryResponse struct {
	// The UUID of the transaction that was disposed.
	TransactionId string `json:"transaction_id"`
	DispositionType DispositionType `json:"disposition_type"`
	DispositionStatus DispositionStatus `json:"disposition_status"`
	// The UUID of the generated disposition transaction (if available).
	DispositionTransactionId *string `json:"disposition_transaction_id,omitempty"`
}

type _DispositionQueryResponse DispositionQueryResponse

// NewDispositionQueryResponse instantiates a new DispositionQueryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDispositionQueryResponse(transactionId string, dispositionType DispositionType, dispositionStatus DispositionStatus) *DispositionQueryResponse {
	this := DispositionQueryResponse{}
	this.TransactionId = transactionId
	this.DispositionType = dispositionType
	this.DispositionStatus = dispositionStatus
	return &this
}

// NewDispositionQueryResponseWithDefaults instantiates a new DispositionQueryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDispositionQueryResponseWithDefaults() *DispositionQueryResponse {
	this := DispositionQueryResponse{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *DispositionQueryResponse) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *DispositionQueryResponse) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *DispositionQueryResponse) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetDispositionType returns the DispositionType field value
func (o *DispositionQueryResponse) GetDispositionType() DispositionType {
	if o == nil {
		var ret DispositionType
		return ret
	}

	return o.DispositionType
}

// GetDispositionTypeOk returns a tuple with the DispositionType field value
// and a boolean to check if the value has been set.
func (o *DispositionQueryResponse) GetDispositionTypeOk() (*DispositionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DispositionType, true
}

// SetDispositionType sets field value
func (o *DispositionQueryResponse) SetDispositionType(v DispositionType) {
	o.DispositionType = v
}

// GetDispositionStatus returns the DispositionStatus field value
func (o *DispositionQueryResponse) GetDispositionStatus() DispositionStatus {
	if o == nil {
		var ret DispositionStatus
		return ret
	}

	return o.DispositionStatus
}

// GetDispositionStatusOk returns a tuple with the DispositionStatus field value
// and a boolean to check if the value has been set.
func (o *DispositionQueryResponse) GetDispositionStatusOk() (*DispositionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DispositionStatus, true
}

// SetDispositionStatus sets field value
func (o *DispositionQueryResponse) SetDispositionStatus(v DispositionStatus) {
	o.DispositionStatus = v
}

// GetDispositionTransactionId returns the DispositionTransactionId field value if set, zero value otherwise.
func (o *DispositionQueryResponse) GetDispositionTransactionId() string {
	if o == nil || IsNil(o.DispositionTransactionId) {
		var ret string
		return ret
	}
	return *o.DispositionTransactionId
}

// GetDispositionTransactionIdOk returns a tuple with the DispositionTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispositionQueryResponse) GetDispositionTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DispositionTransactionId) {
		return nil, false
	}
	return o.DispositionTransactionId, true
}

// HasDispositionTransactionId returns a boolean if a field has been set.
func (o *DispositionQueryResponse) HasDispositionTransactionId() bool {
	if o != nil && !IsNil(o.DispositionTransactionId) {
		return true
	}

	return false
}

// SetDispositionTransactionId gets a reference to the given string and assigns it to the DispositionTransactionId field.
func (o *DispositionQueryResponse) SetDispositionTransactionId(v string) {
	o.DispositionTransactionId = &v
}

func (o DispositionQueryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DispositionQueryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["disposition_type"] = o.DispositionType
	toSerialize["disposition_status"] = o.DispositionStatus
	if !IsNil(o.DispositionTransactionId) {
		toSerialize["disposition_transaction_id"] = o.DispositionTransactionId
	}
	return toSerialize, nil
}

func (o *DispositionQueryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"disposition_type",
		"disposition_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDispositionQueryResponse := _DispositionQueryResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDispositionQueryResponse)

	if err != nil {
		return err
	}

	*o = DispositionQueryResponse(varDispositionQueryResponse)

	return err
}

type NullableDispositionQueryResponse struct {
	value *DispositionQueryResponse
	isSet bool
}

func (v NullableDispositionQueryResponse) Get() *DispositionQueryResponse {
	return v.value
}

func (v *NullableDispositionQueryResponse) Set(val *DispositionQueryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDispositionQueryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDispositionQueryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispositionQueryResponse(val *DispositionQueryResponse) *NullableDispositionQueryResponse {
	return &NullableDispositionQueryResponse{value: val, isSet: true}
}

func (v NullableDispositionQueryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispositionQueryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


