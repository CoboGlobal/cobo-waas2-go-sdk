/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenizationBurnTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizationBurnTokenRequest{}

// TokenizationBurnTokenRequest struct for TokenizationBurnTokenRequest
type TokenizationBurnTokenRequest struct {
	Source TokenizationTokenOperationSource `json:"source"`
	// Details for each token burn, including amount and address to burn from.
	Burns []TokenizationBurnTokenParamsBurnsInner `json:"burns"`
	// The initiator of the tokenization activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.
	AppInitiator *string `json:"app_initiator,omitempty"`
	Fee TransactionRequestFee `json:"fee"`
	// The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
	RequestId *string `json:"request_id,omitempty"`
}

type _TokenizationBurnTokenRequest TokenizationBurnTokenRequest

// NewTokenizationBurnTokenRequest instantiates a new TokenizationBurnTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizationBurnTokenRequest(source TokenizationTokenOperationSource, burns []TokenizationBurnTokenParamsBurnsInner, fee TransactionRequestFee) *TokenizationBurnTokenRequest {
	this := TokenizationBurnTokenRequest{}
	this.Source = source
	this.Burns = burns
	this.Fee = fee
	return &this
}

// NewTokenizationBurnTokenRequestWithDefaults instantiates a new TokenizationBurnTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizationBurnTokenRequestWithDefaults() *TokenizationBurnTokenRequest {
	this := TokenizationBurnTokenRequest{}
	return &this
}

// GetSource returns the Source field value
func (o *TokenizationBurnTokenRequest) GetSource() TokenizationTokenOperationSource {
	if o == nil {
		var ret TokenizationTokenOperationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenRequest) GetSourceOk() (*TokenizationTokenOperationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TokenizationBurnTokenRequest) SetSource(v TokenizationTokenOperationSource) {
	o.Source = v
}

// GetBurns returns the Burns field value
func (o *TokenizationBurnTokenRequest) GetBurns() []TokenizationBurnTokenParamsBurnsInner {
	if o == nil {
		var ret []TokenizationBurnTokenParamsBurnsInner
		return ret
	}

	return o.Burns
}

// GetBurnsOk returns a tuple with the Burns field value
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenRequest) GetBurnsOk() ([]TokenizationBurnTokenParamsBurnsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Burns, true
}

// SetBurns sets field value
func (o *TokenizationBurnTokenRequest) SetBurns(v []TokenizationBurnTokenParamsBurnsInner) {
	o.Burns = v
}

// GetAppInitiator returns the AppInitiator field value if set, zero value otherwise.
func (o *TokenizationBurnTokenRequest) GetAppInitiator() string {
	if o == nil || IsNil(o.AppInitiator) {
		var ret string
		return ret
	}
	return *o.AppInitiator
}

// GetAppInitiatorOk returns a tuple with the AppInitiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenRequest) GetAppInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.AppInitiator) {
		return nil, false
	}
	return o.AppInitiator, true
}

// HasAppInitiator returns a boolean if a field has been set.
func (o *TokenizationBurnTokenRequest) HasAppInitiator() bool {
	if o != nil && !IsNil(o.AppInitiator) {
		return true
	}

	return false
}

// SetAppInitiator gets a reference to the given string and assigns it to the AppInitiator field.
func (o *TokenizationBurnTokenRequest) SetAppInitiator(v string) {
	o.AppInitiator = &v
}

// GetFee returns the Fee field value
func (o *TokenizationBurnTokenRequest) GetFee() TransactionRequestFee {
	if o == nil {
		var ret TransactionRequestFee
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenRequest) GetFeeOk() (*TransactionRequestFee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *TokenizationBurnTokenRequest) SetFee(v TransactionRequestFee) {
	o.Fee = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TokenizationBurnTokenRequest) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizationBurnTokenRequest) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TokenizationBurnTokenRequest) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TokenizationBurnTokenRequest) SetRequestId(v string) {
	o.RequestId = &v
}

func (o TokenizationBurnTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizationBurnTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["burns"] = o.Burns
	if !IsNil(o.AppInitiator) {
		toSerialize["app_initiator"] = o.AppInitiator
	}
	toSerialize["fee"] = o.Fee
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	return toSerialize, nil
}

func (o *TokenizationBurnTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"burns",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizationBurnTokenRequest := _TokenizationBurnTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenizationBurnTokenRequest)

	if err != nil {
		return err
	}

	*o = TokenizationBurnTokenRequest(varTokenizationBurnTokenRequest)

	return err
}

type NullableTokenizationBurnTokenRequest struct {
	value *TokenizationBurnTokenRequest
	isSet bool
}

func (v NullableTokenizationBurnTokenRequest) Get() *TokenizationBurnTokenRequest {
	return v.value
}

func (v *NullableTokenizationBurnTokenRequest) Set(val *TokenizationBurnTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationBurnTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationBurnTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationBurnTokenRequest(val *TokenizationBurnTokenRequest) *NullableTokenizationBurnTokenRequest {
	return &NullableTokenizationBurnTokenRequest{value: val, isSet: true}
}

func (v NullableTokenizationBurnTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationBurnTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


