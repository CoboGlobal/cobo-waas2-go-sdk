/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KytScreeningsTransactionType The transaction type. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction. 
type KytScreeningsTransactionType string

// List of KytScreeningsTransactionType
const (
	KYTSCREENINGSTRANSACTIONTYPE_DEPOSIT KytScreeningsTransactionType = "Deposit"
	KYTSCREENINGSTRANSACTIONTYPE_WITHDRAWAL KytScreeningsTransactionType = "Withdrawal"
)

// All allowed values of KytScreeningsTransactionType enum
var AllowedKytScreeningsTransactionTypeEnumValues = []KytScreeningsTransactionType{
	"Deposit",
	"Withdrawal",
}

func (v *KytScreeningsTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KytScreeningsTransactionType(value)
	for _, existing := range AllowedKytScreeningsTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = KytScreeningsTransactionType("unknown")
	return nil
}

// NewKytScreeningsTransactionTypeFromValue returns a pointer to a valid KytScreeningsTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKytScreeningsTransactionTypeFromValue(v string) (*KytScreeningsTransactionType, error) {
	ev := KytScreeningsTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KytScreeningsTransactionType: valid values are %v", v, AllowedKytScreeningsTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KytScreeningsTransactionType) IsValid() bool {
	for _, existing := range AllowedKytScreeningsTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KytScreeningsTransactionType value
func (v KytScreeningsTransactionType) Ptr() *KytScreeningsTransactionType {
	return &v
}

type NullableKytScreeningsTransactionType struct {
	value *KytScreeningsTransactionType
	isSet bool
}

func (v NullableKytScreeningsTransactionType) Get() *KytScreeningsTransactionType {
	return v.value
}

func (v *NullableKytScreeningsTransactionType) Set(val *KytScreeningsTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableKytScreeningsTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableKytScreeningsTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKytScreeningsTransactionType(val *KytScreeningsTransactionType) *NullableKytScreeningsTransactionType {
	return &NullableKytScreeningsTransactionType{value: val, isSet: true}
}

func (v NullableKytScreeningsTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKytScreeningsTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

