/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KeyShareHolderGroupStatus The status of the key share holder group. Possible values include: - `New`: The key share holder group has been newly created. The status will become `Valid` after you call [Create TSS request](/v2/api-references/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) and specifying this key share holder group as the target key share holder group.  - `Valid`: The key share holder group is valid.  - `Unavailable`: The key share holder group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone. 
type KeyShareHolderGroupStatus string

// List of KeyShareHolderGroupStatus
const (
	KEYSHAREHOLDERGROUPSTATUS_NEW KeyShareHolderGroupStatus = "New"
	KEYSHAREHOLDERGROUPSTATUS_VALID KeyShareHolderGroupStatus = "Valid"
	KEYSHAREHOLDERGROUPSTATUS_UNAVAILABLE KeyShareHolderGroupStatus = "Unavailable"
)

// All allowed values of KeyShareHolderGroupStatus enum
var AllowedKeyShareHolderGroupStatusEnumValues = []KeyShareHolderGroupStatus{
	"New",
	"Valid",
	"Unavailable",
}

func (v *KeyShareHolderGroupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyShareHolderGroupStatus(value)
	for _, existing := range AllowedKeyShareHolderGroupStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = KeyShareHolderGroupStatus("unknown")
    return nil
}

// NewKeyShareHolderGroupStatusFromValue returns a pointer to a valid KeyShareHolderGroupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyShareHolderGroupStatusFromValue(v string) (*KeyShareHolderGroupStatus, error) {
	ev := KeyShareHolderGroupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyShareHolderGroupStatus: valid values are %v", v, AllowedKeyShareHolderGroupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyShareHolderGroupStatus) IsValid() bool {
	for _, existing := range AllowedKeyShareHolderGroupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyShareHolderGroupStatus value
func (v KeyShareHolderGroupStatus) Ptr() *KeyShareHolderGroupStatus {
	return &v
}

type NullableKeyShareHolderGroupStatus struct {
	value *KeyShareHolderGroupStatus
	isSet bool
}

func (v NullableKeyShareHolderGroupStatus) Get() *KeyShareHolderGroupStatus {
	return v.value
}

func (v *NullableKeyShareHolderGroupStatus) Set(val *KeyShareHolderGroupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyShareHolderGroupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyShareHolderGroupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyShareHolderGroupStatus(val *KeyShareHolderGroupStatus) *NullableKeyShareHolderGroupStatus {
	return &NullableKeyShareHolderGroupStatus{value: val, isSet: true}
}

func (v NullableKeyShareHolderGroupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyShareHolderGroupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

