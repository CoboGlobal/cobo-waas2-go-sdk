/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionSOLFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSOLFee{}

// TransactionSOLFee The transaction fee actually charged by the chain that uses the Solana fee model.  In this model, the fee is calculated as: fee = base fee + (compute unit price * compute unit limit) + rent (if applicable). For more details, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  Switch between the tabs to display the properties for different transaction fee models. 
type TransactionSOLFee struct {
	// A fixed fee charged per signature. The default is 5,000 lamports per signature.
	BaseFee *string `json:"base_fee,omitempty"`
	// The rent fee charged by the network to store nonâ€“rent-exempt accounts on-chain. It is deducted periodically until the account maintains the minimum balance required for rent exemption.
	RentAmount *string `json:"rent_amount,omitempty"`
	// The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
	ComputeUnitPrice *string `json:"compute_unit_price,omitempty"`
	// The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
	ComputeUnitLimit *string `json:"compute_unit_limit,omitempty"`
	FeeType FeeType `json:"fee_type"`
	// The token used to pay the transaction fee.
	TokenId *string `json:"token_id,omitempty"`
	// The actually charged transaction fee.
	FeeUsed *string `json:"fee_used,omitempty"`
	// The estimated transaction fee.
	EstimatedFeeUsed *string `json:"estimated_fee_used,omitempty"`
}

type _TransactionSOLFee TransactionSOLFee

// NewTransactionSOLFee instantiates a new TransactionSOLFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSOLFee(feeType FeeType) *TransactionSOLFee {
	this := TransactionSOLFee{}
	this.FeeType = feeType
	return &this
}

// NewTransactionSOLFeeWithDefaults instantiates a new TransactionSOLFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSOLFeeWithDefaults() *TransactionSOLFee {
	this := TransactionSOLFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetBaseFee returns the BaseFee field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetBaseFee() string {
	if o == nil || IsNil(o.BaseFee) {
		var ret string
		return ret
	}
	return *o.BaseFee
}

// GetBaseFeeOk returns a tuple with the BaseFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetBaseFeeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseFee) {
		return nil, false
	}
	return o.BaseFee, true
}

// HasBaseFee returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasBaseFee() bool {
	if o != nil && !IsNil(o.BaseFee) {
		return true
	}

	return false
}

// SetBaseFee gets a reference to the given string and assigns it to the BaseFee field.
func (o *TransactionSOLFee) SetBaseFee(v string) {
	o.BaseFee = &v
}

// GetRentAmount returns the RentAmount field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetRentAmount() string {
	if o == nil || IsNil(o.RentAmount) {
		var ret string
		return ret
	}
	return *o.RentAmount
}

// GetRentAmountOk returns a tuple with the RentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetRentAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RentAmount) {
		return nil, false
	}
	return o.RentAmount, true
}

// HasRentAmount returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasRentAmount() bool {
	if o != nil && !IsNil(o.RentAmount) {
		return true
	}

	return false
}

// SetRentAmount gets a reference to the given string and assigns it to the RentAmount field.
func (o *TransactionSOLFee) SetRentAmount(v string) {
	o.RentAmount = &v
}

// GetComputeUnitPrice returns the ComputeUnitPrice field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetComputeUnitPrice() string {
	if o == nil || IsNil(o.ComputeUnitPrice) {
		var ret string
		return ret
	}
	return *o.ComputeUnitPrice
}

// GetComputeUnitPriceOk returns a tuple with the ComputeUnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetComputeUnitPriceOk() (*string, bool) {
	if o == nil || IsNil(o.ComputeUnitPrice) {
		return nil, false
	}
	return o.ComputeUnitPrice, true
}

// HasComputeUnitPrice returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasComputeUnitPrice() bool {
	if o != nil && !IsNil(o.ComputeUnitPrice) {
		return true
	}

	return false
}

// SetComputeUnitPrice gets a reference to the given string and assigns it to the ComputeUnitPrice field.
func (o *TransactionSOLFee) SetComputeUnitPrice(v string) {
	o.ComputeUnitPrice = &v
}

// GetComputeUnitLimit returns the ComputeUnitLimit field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetComputeUnitLimit() string {
	if o == nil || IsNil(o.ComputeUnitLimit) {
		var ret string
		return ret
	}
	return *o.ComputeUnitLimit
}

// GetComputeUnitLimitOk returns a tuple with the ComputeUnitLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetComputeUnitLimitOk() (*string, bool) {
	if o == nil || IsNil(o.ComputeUnitLimit) {
		return nil, false
	}
	return o.ComputeUnitLimit, true
}

// HasComputeUnitLimit returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasComputeUnitLimit() bool {
	if o != nil && !IsNil(o.ComputeUnitLimit) {
		return true
	}

	return false
}

// SetComputeUnitLimit gets a reference to the given string and assigns it to the ComputeUnitLimit field.
func (o *TransactionSOLFee) SetComputeUnitLimit(v string) {
	o.ComputeUnitLimit = &v
}

// GetFeeType returns the FeeType field value
func (o *TransactionSOLFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *TransactionSOLFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TransactionSOLFee) SetTokenId(v string) {
	o.TokenId = &v
}

// GetFeeUsed returns the FeeUsed field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetFeeUsed() string {
	if o == nil || IsNil(o.FeeUsed) {
		var ret string
		return ret
	}
	return *o.FeeUsed
}

// GetFeeUsedOk returns a tuple with the FeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.FeeUsed) {
		return nil, false
	}
	return o.FeeUsed, true
}

// HasFeeUsed returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasFeeUsed() bool {
	if o != nil && !IsNil(o.FeeUsed) {
		return true
	}

	return false
}

// SetFeeUsed gets a reference to the given string and assigns it to the FeeUsed field.
func (o *TransactionSOLFee) SetFeeUsed(v string) {
	o.FeeUsed = &v
}

// GetEstimatedFeeUsed returns the EstimatedFeeUsed field value if set, zero value otherwise.
func (o *TransactionSOLFee) GetEstimatedFeeUsed() string {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		var ret string
		return ret
	}
	return *o.EstimatedFeeUsed
}

// GetEstimatedFeeUsedOk returns a tuple with the EstimatedFeeUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSOLFee) GetEstimatedFeeUsedOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedFeeUsed) {
		return nil, false
	}
	return o.EstimatedFeeUsed, true
}

// HasEstimatedFeeUsed returns a boolean if a field has been set.
func (o *TransactionSOLFee) HasEstimatedFeeUsed() bool {
	if o != nil && !IsNil(o.EstimatedFeeUsed) {
		return true
	}

	return false
}

// SetEstimatedFeeUsed gets a reference to the given string and assigns it to the EstimatedFeeUsed field.
func (o *TransactionSOLFee) SetEstimatedFeeUsed(v string) {
	o.EstimatedFeeUsed = &v
}

func (o TransactionSOLFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSOLFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseFee) {
		toSerialize["base_fee"] = o.BaseFee
	}
	if !IsNil(o.RentAmount) {
		toSerialize["rent_amount"] = o.RentAmount
	}
	if !IsNil(o.ComputeUnitPrice) {
		toSerialize["compute_unit_price"] = o.ComputeUnitPrice
	}
	if !IsNil(o.ComputeUnitLimit) {
		toSerialize["compute_unit_limit"] = o.ComputeUnitLimit
	}
	toSerialize["fee_type"] = o.FeeType
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !IsNil(o.FeeUsed) {
		toSerialize["fee_used"] = o.FeeUsed
	}
	if !IsNil(o.EstimatedFeeUsed) {
		toSerialize["estimated_fee_used"] = o.EstimatedFeeUsed
	}
	return toSerialize, nil
}

func (o *TransactionSOLFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionSOLFee := _TransactionSOLFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionSOLFee)

	if err != nil {
		return err
	}

	*o = TransactionSOLFee(varTransactionSOLFee)

	return err
}

type NullableTransactionSOLFee struct {
	value *TransactionSOLFee
	isSet bool
}

func (v NullableTransactionSOLFee) Get() *TransactionSOLFee {
	return v.value
}

func (v *NullableTransactionSOLFee) Set(val *TransactionSOLFee) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSOLFee) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSOLFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSOLFee(val *TransactionSOLFee) *NullableTransactionSOLFee {
	return &NullableTransactionSOLFee{value: val, isSet: true}
}

func (v NullableTransactionSOLFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSOLFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


