/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenListing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenListing{}

// TokenListing Detailed information about a token listing request
type TokenListing struct {
	// Unique identifier of the token listing request
	RequestId string `json:"request_id"`
	// chain_id of the blockchain where the token exists
	ChainId string `json:"chain_id"`
	// Contract address of the token
	ContractAddress string `json:"contract_address"`
	WalletType WalletType `json:"wallet_type"`
	WalletSubtype WalletSubtype `json:"wallet_subtype"`
	Token *TokenInfo `json:"token,omitempty"`
	Status TokenListingRequestStatus `json:"status"`
	Source *TokenListingRequestSource `json:"source,omitempty"`
	// Feedback provided by the admin for rejected requests
	Feedback *string `json:"feedback,omitempty"`
	// Timestamp when the request was created (in milliseconds since Unix epoch)
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
	// Timestamp when the request was last updated (in milliseconds since Unix epoch)
	UpdatedTimestamp *int64 `json:"updated_timestamp,omitempty"`
}

type _TokenListing TokenListing

// NewTokenListing instantiates a new TokenListing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenListing(requestId string, chainId string, contractAddress string, walletType WalletType, walletSubtype WalletSubtype, status TokenListingRequestStatus) *TokenListing {
	this := TokenListing{}
	this.RequestId = requestId
	this.ChainId = chainId
	this.ContractAddress = contractAddress
	this.WalletType = walletType
	this.WalletSubtype = walletSubtype
	this.Status = status
	return &this
}

// NewTokenListingWithDefaults instantiates a new TokenListing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenListingWithDefaults() *TokenListing {
	this := TokenListing{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *TokenListing) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *TokenListing) SetRequestId(v string) {
	o.RequestId = v
}

// GetChainId returns the ChainId field value
func (o *TokenListing) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *TokenListing) SetChainId(v string) {
	o.ChainId = v
}

// GetContractAddress returns the ContractAddress field value
func (o *TokenListing) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *TokenListing) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetWalletType returns the WalletType field value
func (o *TokenListing) GetWalletType() WalletType {
	if o == nil {
		var ret WalletType
		return ret
	}

	return o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetWalletTypeOk() (*WalletType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletType, true
}

// SetWalletType sets field value
func (o *TokenListing) SetWalletType(v WalletType) {
	o.WalletType = v
}

// GetWalletSubtype returns the WalletSubtype field value
func (o *TokenListing) GetWalletSubtype() WalletSubtype {
	if o == nil {
		var ret WalletSubtype
		return ret
	}

	return o.WalletSubtype
}

// GetWalletSubtypeOk returns a tuple with the WalletSubtype field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetWalletSubtypeOk() (*WalletSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletSubtype, true
}

// SetWalletSubtype sets field value
func (o *TokenListing) SetWalletSubtype(v WalletSubtype) {
	o.WalletSubtype = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TokenListing) GetToken() TokenInfo {
	if o == nil || IsNil(o.Token) {
		var ret TokenInfo
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenListing) GetTokenOk() (*TokenInfo, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TokenListing) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given TokenInfo and assigns it to the Token field.
func (o *TokenListing) SetToken(v TokenInfo) {
	o.Token = &v
}

// GetStatus returns the Status field value
func (o *TokenListing) GetStatus() TokenListingRequestStatus {
	if o == nil {
		var ret TokenListingRequestStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TokenListing) GetStatusOk() (*TokenListingRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TokenListing) SetStatus(v TokenListingRequestStatus) {
	o.Status = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TokenListing) GetSource() TokenListingRequestSource {
	if o == nil || IsNil(o.Source) {
		var ret TokenListingRequestSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenListing) GetSourceOk() (*TokenListingRequestSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TokenListing) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given TokenListingRequestSource and assigns it to the Source field.
func (o *TokenListing) SetSource(v TokenListingRequestSource) {
	o.Source = &v
}

// GetFeedback returns the Feedback field value if set, zero value otherwise.
func (o *TokenListing) GetFeedback() string {
	if o == nil || IsNil(o.Feedback) {
		var ret string
		return ret
	}
	return *o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenListing) GetFeedbackOk() (*string, bool) {
	if o == nil || IsNil(o.Feedback) {
		return nil, false
	}
	return o.Feedback, true
}

// HasFeedback returns a boolean if a field has been set.
func (o *TokenListing) HasFeedback() bool {
	if o != nil && !IsNil(o.Feedback) {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given string and assigns it to the Feedback field.
func (o *TokenListing) SetFeedback(v string) {
	o.Feedback = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TokenListing) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenListing) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TokenListing) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *TokenListing) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *TokenListing) GetUpdatedTimestamp() int64 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenListing) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *TokenListing) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int64 and assigns it to the UpdatedTimestamp field.
func (o *TokenListing) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = &v
}

func (o TokenListing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenListing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId
	toSerialize["chain_id"] = o.ChainId
	toSerialize["contract_address"] = o.ContractAddress
	toSerialize["wallet_type"] = o.WalletType
	toSerialize["wallet_subtype"] = o.WalletSubtype
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Feedback) {
		toSerialize["feedback"] = o.Feedback
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	return toSerialize, nil
}

func (o *TokenListing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
		"chain_id",
		"contract_address",
		"wallet_type",
		"wallet_subtype",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenListing := _TokenListing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenListing)

	if err != nil {
		return err
	}

	*o = TokenListing(varTokenListing)

	return err
}

type NullableTokenListing struct {
	value *TokenListing
	isSet bool
}

func (v NullableTokenListing) Get() *TokenListing {
	return v.value
}

func (v *NullableTokenListing) Set(val *TokenListing) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenListing) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenListing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenListing(val *TokenListing) *NullableTokenListing {
	return &NullableTokenListing{value: val, isSet: true}
}

func (v NullableTokenListing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenListing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


