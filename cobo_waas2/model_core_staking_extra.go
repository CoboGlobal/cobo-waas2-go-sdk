/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoreStakingExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreStakingExtra{}

// CoreStakingExtra struct for CoreStakingExtra
type CoreStakingExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The Proof-of-Stake (PoS) chain.
	PosChain string `json:"pos_chain"`
	// The staker's Bitcoin address.
	StakerAddress string `json:"staker_address"`
	// The validator's EVM address.
	ValidatorAddress string `json:"validator_address"`
	// The EVM address to receive staking rewards.
	RewardAddress string `json:"reward_address"`
	// The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
	Timelock int32 `json:"timelock"`
}

type _CoreStakingExtra CoreStakingExtra

// NewCoreStakingExtra instantiates a new CoreStakingExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreStakingExtra(poolType StakingPoolType, posChain string, stakerAddress string, validatorAddress string, rewardAddress string, timelock int32) *CoreStakingExtra {
	this := CoreStakingExtra{}
	this.PoolType = poolType
	this.PosChain = posChain
	this.StakerAddress = stakerAddress
	this.ValidatorAddress = validatorAddress
	this.RewardAddress = rewardAddress
	this.Timelock = timelock
	return &this
}

// NewCoreStakingExtraWithDefaults instantiates a new CoreStakingExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreStakingExtraWithDefaults() *CoreStakingExtra {
	this := CoreStakingExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *CoreStakingExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *CoreStakingExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetPosChain returns the PosChain field value
func (o *CoreStakingExtra) GetPosChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PosChain
}

// GetPosChainOk returns a tuple with the PosChain field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetPosChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PosChain, true
}

// SetPosChain sets field value
func (o *CoreStakingExtra) SetPosChain(v string) {
	o.PosChain = v
}

// GetStakerAddress returns the StakerAddress field value
func (o *CoreStakingExtra) GetStakerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakerAddress
}

// GetStakerAddressOk returns a tuple with the StakerAddress field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetStakerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakerAddress, true
}

// SetStakerAddress sets field value
func (o *CoreStakingExtra) SetStakerAddress(v string) {
	o.StakerAddress = v
}

// GetValidatorAddress returns the ValidatorAddress field value
func (o *CoreStakingExtra) GetValidatorAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorAddress
}

// GetValidatorAddressOk returns a tuple with the ValidatorAddress field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetValidatorAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorAddress, true
}

// SetValidatorAddress sets field value
func (o *CoreStakingExtra) SetValidatorAddress(v string) {
	o.ValidatorAddress = v
}

// GetRewardAddress returns the RewardAddress field value
func (o *CoreStakingExtra) GetRewardAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewardAddress
}

// GetRewardAddressOk returns a tuple with the RewardAddress field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetRewardAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewardAddress, true
}

// SetRewardAddress sets field value
func (o *CoreStakingExtra) SetRewardAddress(v string) {
	o.RewardAddress = v
}

// GetTimelock returns the Timelock field value
func (o *CoreStakingExtra) GetTimelock() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timelock
}

// GetTimelockOk returns a tuple with the Timelock field value
// and a boolean to check if the value has been set.
func (o *CoreStakingExtra) GetTimelockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timelock, true
}

// SetTimelock sets field value
func (o *CoreStakingExtra) SetTimelock(v int32) {
	o.Timelock = v
}

func (o CoreStakingExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreStakingExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	toSerialize["pos_chain"] = o.PosChain
	toSerialize["staker_address"] = o.StakerAddress
	toSerialize["validator_address"] = o.ValidatorAddress
	toSerialize["reward_address"] = o.RewardAddress
	toSerialize["timelock"] = o.Timelock
	return toSerialize, nil
}

func (o *CoreStakingExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"pos_chain",
		"staker_address",
		"validator_address",
		"reward_address",
		"timelock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreStakingExtra := _CoreStakingExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoreStakingExtra)

	if err != nil {
		return err
	}

	*o = CoreStakingExtra(varCoreStakingExtra)

	return err
}

type NullableCoreStakingExtra struct {
	value *CoreStakingExtra
	isSet bool
}

func (v NullableCoreStakingExtra) Get() *CoreStakingExtra {
	return v.value
}

func (v *NullableCoreStakingExtra) Set(val *CoreStakingExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreStakingExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreStakingExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreStakingExtra(val *CoreStakingExtra) *NullableCoreStakingExtra {
	return &NullableCoreStakingExtra{value: val, isSet: true}
}

func (v NullableCoreStakingExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreStakingExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


