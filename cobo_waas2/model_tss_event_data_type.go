/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TSSEventDataType  The data type of the event. - `KeyGen`: The key gen event data. - `KeyReshare`: The key reshare event data. - `KeySign`: The key sign event data. - `KeyShareSign`: The key share sign event data.
type TSSEventDataType string

// List of TSSEventDataType
const (
	TSSEVENTDATATYPE_KEY_GEN TSSEventDataType = "KeyGen"
	TSSEVENTDATATYPE_KEY_RESHARE TSSEventDataType = "KeyReshare"
	TSSEVENTDATATYPE_KEY_SIGN TSSEventDataType = "KeySign"
	TSSEVENTDATATYPE_KEY_SHARE_SIGN TSSEventDataType = "KeyShareSign"
)

// All allowed values of TSSEventDataType enum
var AllowedTSSEventDataTypeEnumValues = []TSSEventDataType{
	"KeyGen",
	"KeyReshare",
	"KeySign",
	"KeyShareSign",
}

func (v *TSSEventDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TSSEventDataType(value)
	for _, existing := range AllowedTSSEventDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TSSEventDataType("unknown")
	return nil
}

// NewTSSEventDataTypeFromValue returns a pointer to a valid TSSEventDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTSSEventDataTypeFromValue(v string) (*TSSEventDataType, error) {
	ev := TSSEventDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TSSEventDataType: valid values are %v", v, AllowedTSSEventDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TSSEventDataType) IsValid() bool {
	for _, existing := range AllowedTSSEventDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TSSEventDataType value
func (v TSSEventDataType) Ptr() *TSSEventDataType {
	return &v
}

type NullableTSSEventDataType struct {
	value *TSSEventDataType
	isSet bool
}

func (v NullableTSSEventDataType) Get() *TSSEventDataType {
	return v.value
}

func (v *NullableTSSEventDataType) Set(val *TSSEventDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSEventDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSEventDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSEventDataType(val *TSSEventDataType) *NullableTSSEventDataType {
	return &NullableTSSEventDataType{value: val, isSet: true}
}

func (v NullableTSSEventDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSEventDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

