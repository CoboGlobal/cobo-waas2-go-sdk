/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentWalletBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentWalletBalance{}

// PaymentWalletBalance struct for PaymentWalletBalance
type PaymentWalletBalance struct {
	// The unique identifier of the wallet.
	WalletId string `json:"wallet_id"`
	// The ID of the cryptocurrency.
	TokenId string `json:"token_id"`
	// The payment wallet swept balance.
	SweptBalance *string `json:"swept_balance,omitempty"`
	// The payment wallet available balance.
	AvailableBalance *string `json:"available_balance,omitempty"`
	// The payment wallet total balance.
	TotalBalance *string `json:"total_balance,omitempty"`
	// The payment wallet above sweep threshold balance.
	AboveSweepThresholdBalance *string `json:"above_sweep_threshold_balance,omitempty"`
}

type _PaymentWalletBalance PaymentWalletBalance

// NewPaymentWalletBalance instantiates a new PaymentWalletBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentWalletBalance(walletId string, tokenId string) *PaymentWalletBalance {
	this := PaymentWalletBalance{}
	this.WalletId = walletId
	this.TokenId = tokenId
	return &this
}

// NewPaymentWalletBalanceWithDefaults instantiates a new PaymentWalletBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWalletBalanceWithDefaults() *PaymentWalletBalance {
	this := PaymentWalletBalance{}
	return &this
}

// GetWalletId returns the WalletId field value
func (o *PaymentWalletBalance) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *PaymentWalletBalance) SetWalletId(v string) {
	o.WalletId = v
}

// GetTokenId returns the TokenId field value
func (o *PaymentWalletBalance) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *PaymentWalletBalance) SetTokenId(v string) {
	o.TokenId = v
}

// GetSweptBalance returns the SweptBalance field value if set, zero value otherwise.
func (o *PaymentWalletBalance) GetSweptBalance() string {
	if o == nil || IsNil(o.SweptBalance) {
		var ret string
		return ret
	}
	return *o.SweptBalance
}

// GetSweptBalanceOk returns a tuple with the SweptBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetSweptBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.SweptBalance) {
		return nil, false
	}
	return o.SweptBalance, true
}

// HasSweptBalance returns a boolean if a field has been set.
func (o *PaymentWalletBalance) HasSweptBalance() bool {
	if o != nil && !IsNil(o.SweptBalance) {
		return true
	}

	return false
}

// SetSweptBalance gets a reference to the given string and assigns it to the SweptBalance field.
func (o *PaymentWalletBalance) SetSweptBalance(v string) {
	o.SweptBalance = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *PaymentWalletBalance) GetAvailableBalance() string {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret string
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetAvailableBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *PaymentWalletBalance) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given string and assigns it to the AvailableBalance field.
func (o *PaymentWalletBalance) SetAvailableBalance(v string) {
	o.AvailableBalance = &v
}

// GetTotalBalance returns the TotalBalance field value if set, zero value otherwise.
func (o *PaymentWalletBalance) GetTotalBalance() string {
	if o == nil || IsNil(o.TotalBalance) {
		var ret string
		return ret
	}
	return *o.TotalBalance
}

// GetTotalBalanceOk returns a tuple with the TotalBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetTotalBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalBalance) {
		return nil, false
	}
	return o.TotalBalance, true
}

// HasTotalBalance returns a boolean if a field has been set.
func (o *PaymentWalletBalance) HasTotalBalance() bool {
	if o != nil && !IsNil(o.TotalBalance) {
		return true
	}

	return false
}

// SetTotalBalance gets a reference to the given string and assigns it to the TotalBalance field.
func (o *PaymentWalletBalance) SetTotalBalance(v string) {
	o.TotalBalance = &v
}

// GetAboveSweepThresholdBalance returns the AboveSweepThresholdBalance field value if set, zero value otherwise.
func (o *PaymentWalletBalance) GetAboveSweepThresholdBalance() string {
	if o == nil || IsNil(o.AboveSweepThresholdBalance) {
		var ret string
		return ret
	}
	return *o.AboveSweepThresholdBalance
}

// GetAboveSweepThresholdBalanceOk returns a tuple with the AboveSweepThresholdBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentWalletBalance) GetAboveSweepThresholdBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.AboveSweepThresholdBalance) {
		return nil, false
	}
	return o.AboveSweepThresholdBalance, true
}

// HasAboveSweepThresholdBalance returns a boolean if a field has been set.
func (o *PaymentWalletBalance) HasAboveSweepThresholdBalance() bool {
	if o != nil && !IsNil(o.AboveSweepThresholdBalance) {
		return true
	}

	return false
}

// SetAboveSweepThresholdBalance gets a reference to the given string and assigns it to the AboveSweepThresholdBalance field.
func (o *PaymentWalletBalance) SetAboveSweepThresholdBalance(v string) {
	o.AboveSweepThresholdBalance = &v
}

func (o PaymentWalletBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentWalletBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["token_id"] = o.TokenId
	if !IsNil(o.SweptBalance) {
		toSerialize["swept_balance"] = o.SweptBalance
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	if !IsNil(o.TotalBalance) {
		toSerialize["total_balance"] = o.TotalBalance
	}
	if !IsNil(o.AboveSweepThresholdBalance) {
		toSerialize["above_sweep_threshold_balance"] = o.AboveSweepThresholdBalance
	}
	return toSerialize, nil
}

func (o *PaymentWalletBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_id",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentWalletBalance := _PaymentWalletBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentWalletBalance)

	if err != nil {
		return err
	}

	*o = PaymentWalletBalance(varPaymentWalletBalance)

	return err
}

type NullablePaymentWalletBalance struct {
	value *PaymentWalletBalance
	isSet bool
}

func (v NullablePaymentWalletBalance) Get() *PaymentWalletBalance {
	return v.value
}

func (v *NullablePaymentWalletBalance) Set(val *PaymentWalletBalance) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentWalletBalance) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentWalletBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentWalletBalance(val *PaymentWalletBalance) *NullablePaymentWalletBalance {
	return &NullablePaymentWalletBalance{value: val, isSet: true}
}

func (v NullablePaymentWalletBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentWalletBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


