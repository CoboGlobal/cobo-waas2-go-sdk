/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TSSKeyShareSignExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TSSKeyShareSignExtra{}

// TSSKeyShareSignExtra struct for TSSKeyShareSignExtra
type TSSKeyShareSignExtra struct {
	Org *OrgInfo `json:"org,omitempty"`
	Project *MPCProject `json:"project,omitempty"`
	Vault *MPCVault `json:"vault,omitempty"`
	Wallet *MPCWalletInfo `json:"wallet,omitempty"`
	ValidityKeyShareHolderGroups []KeyShareHolderGroup `json:"validity_key_share_holder_groups,omitempty"`
}

// NewTSSKeyShareSignExtra instantiates a new TSSKeyShareSignExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTSSKeyShareSignExtra() *TSSKeyShareSignExtra {
	this := TSSKeyShareSignExtra{}
	return &this
}

// NewTSSKeyShareSignExtraWithDefaults instantiates a new TSSKeyShareSignExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTSSKeyShareSignExtraWithDefaults() *TSSKeyShareSignExtra {
	this := TSSKeyShareSignExtra{}
	return &this
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *TSSKeyShareSignExtra) GetOrg() OrgInfo {
	if o == nil || IsNil(o.Org) {
		var ret OrgInfo
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignExtra) GetOrgOk() (*OrgInfo, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *TSSKeyShareSignExtra) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given OrgInfo and assigns it to the Org field.
func (o *TSSKeyShareSignExtra) SetOrg(v OrgInfo) {
	o.Org = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *TSSKeyShareSignExtra) GetProject() MPCProject {
	if o == nil || IsNil(o.Project) {
		var ret MPCProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignExtra) GetProjectOk() (*MPCProject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *TSSKeyShareSignExtra) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given MPCProject and assigns it to the Project field.
func (o *TSSKeyShareSignExtra) SetProject(v MPCProject) {
	o.Project = &v
}

// GetVault returns the Vault field value if set, zero value otherwise.
func (o *TSSKeyShareSignExtra) GetVault() MPCVault {
	if o == nil || IsNil(o.Vault) {
		var ret MPCVault
		return ret
	}
	return *o.Vault
}

// GetVaultOk returns a tuple with the Vault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignExtra) GetVaultOk() (*MPCVault, bool) {
	if o == nil || IsNil(o.Vault) {
		return nil, false
	}
	return o.Vault, true
}

// HasVault returns a boolean if a field has been set.
func (o *TSSKeyShareSignExtra) HasVault() bool {
	if o != nil && !IsNil(o.Vault) {
		return true
	}

	return false
}

// SetVault gets a reference to the given MPCVault and assigns it to the Vault field.
func (o *TSSKeyShareSignExtra) SetVault(v MPCVault) {
	o.Vault = &v
}

// GetWallet returns the Wallet field value if set, zero value otherwise.
func (o *TSSKeyShareSignExtra) GetWallet() MPCWalletInfo {
	if o == nil || IsNil(o.Wallet) {
		var ret MPCWalletInfo
		return ret
	}
	return *o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignExtra) GetWalletOk() (*MPCWalletInfo, bool) {
	if o == nil || IsNil(o.Wallet) {
		return nil, false
	}
	return o.Wallet, true
}

// HasWallet returns a boolean if a field has been set.
func (o *TSSKeyShareSignExtra) HasWallet() bool {
	if o != nil && !IsNil(o.Wallet) {
		return true
	}

	return false
}

// SetWallet gets a reference to the given MPCWalletInfo and assigns it to the Wallet field.
func (o *TSSKeyShareSignExtra) SetWallet(v MPCWalletInfo) {
	o.Wallet = &v
}

// GetValidityKeyShareHolderGroups returns the ValidityKeyShareHolderGroups field value if set, zero value otherwise.
func (o *TSSKeyShareSignExtra) GetValidityKeyShareHolderGroups() []KeyShareHolderGroup {
	if o == nil || IsNil(o.ValidityKeyShareHolderGroups) {
		var ret []KeyShareHolderGroup
		return ret
	}
	return o.ValidityKeyShareHolderGroups
}

// GetValidityKeyShareHolderGroupsOk returns a tuple with the ValidityKeyShareHolderGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSKeyShareSignExtra) GetValidityKeyShareHolderGroupsOk() ([]KeyShareHolderGroup, bool) {
	if o == nil || IsNil(o.ValidityKeyShareHolderGroups) {
		return nil, false
	}
	return o.ValidityKeyShareHolderGroups, true
}

// HasValidityKeyShareHolderGroups returns a boolean if a field has been set.
func (o *TSSKeyShareSignExtra) HasValidityKeyShareHolderGroups() bool {
	if o != nil && !IsNil(o.ValidityKeyShareHolderGroups) {
		return true
	}

	return false
}

// SetValidityKeyShareHolderGroups gets a reference to the given []KeyShareHolderGroup and assigns it to the ValidityKeyShareHolderGroups field.
func (o *TSSKeyShareSignExtra) SetValidityKeyShareHolderGroups(v []KeyShareHolderGroup) {
	o.ValidityKeyShareHolderGroups = v
}

func (o TSSKeyShareSignExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TSSKeyShareSignExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Vault) {
		toSerialize["vault"] = o.Vault
	}
	if !IsNil(o.Wallet) {
		toSerialize["wallet"] = o.Wallet
	}
	if !IsNil(o.ValidityKeyShareHolderGroups) {
		toSerialize["validity_key_share_holder_groups"] = o.ValidityKeyShareHolderGroups
	}
	return toSerialize, nil
}

type NullableTSSKeyShareSignExtra struct {
	value *TSSKeyShareSignExtra
	isSet bool
}

func (v NullableTSSKeyShareSignExtra) Get() *TSSKeyShareSignExtra {
	return v.value
}

func (v *NullableTSSKeyShareSignExtra) Set(val *TSSKeyShareSignExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSKeyShareSignExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSKeyShareSignExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSKeyShareSignExtra(val *TSSKeyShareSignExtra) *NullableTSSKeyShareSignExtra {
	return &NullableTSSKeyShareSignExtra{value: val, isSet: true}
}

func (v NullableTSSKeyShareSignExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSKeyShareSignExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


