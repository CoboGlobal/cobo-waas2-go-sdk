/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionStellarContractParam - struct for TransactionStellarContractParam
type TransactionStellarContractParam struct {
	TransactionStellarTrustLineParam *TransactionStellarTrustLineParam
}

// TransactionStellarTrustLineParamAsTransactionStellarContractParam is a convenience function that returns TransactionStellarTrustLineParam wrapped in TransactionStellarContractParam
func TransactionStellarTrustLineParamAsTransactionStellarContractParam(v *TransactionStellarTrustLineParam) TransactionStellarContractParam {
	return TransactionStellarContractParam{
		TransactionStellarTrustLineParam: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionStellarContractParam) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'TrustLine'
	if jsonDict["contract_type"] == "TrustLine" {
		// try to unmarshal JSON data into TransactionStellarTrustLineParam
		err = json.Unmarshal(data, &dst.TransactionStellarTrustLineParam)
		if err == nil {
			return nil // data stored in dst.TransactionStellarTrustLineParam, return on the first match
		} else {
			dst.TransactionStellarTrustLineParam = nil
			return fmt.Errorf("failed to unmarshal TransactionStellarContractParam as TransactionStellarTrustLineParam: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionStellarTrustLineParam'
	if jsonDict["contract_type"] == "TransactionStellarTrustLineParam" {
		// try to unmarshal JSON data into TransactionStellarTrustLineParam
		err = json.Unmarshal(data, &dst.TransactionStellarTrustLineParam)
		if err == nil {
			return nil // data stored in dst.TransactionStellarTrustLineParam, return on the first match
		} else {
			dst.TransactionStellarTrustLineParam = nil
			return fmt.Errorf("failed to unmarshal TransactionStellarContractParam as TransactionStellarTrustLineParam: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionStellarContractParam) MarshalJSON() ([]byte, error) {
	if src.TransactionStellarTrustLineParam != nil {
		return json.Marshal(&src.TransactionStellarTrustLineParam)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionStellarContractParam) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransactionStellarTrustLineParam != nil {
		return obj.TransactionStellarTrustLineParam
	}

	// all schemas are nil
	return nil
}

type NullableTransactionStellarContractParam struct {
	value *TransactionStellarContractParam
	isSet bool
}

func (v NullableTransactionStellarContractParam) Get() *TransactionStellarContractParam {
	return v.value
}

func (v *NullableTransactionStellarContractParam) Set(val *TransactionStellarContractParam) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStellarContractParam) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStellarContractParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStellarContractParam(val *TransactionStellarContractParam) *NullableTransactionStellarContractParam {
	return &NullableTransactionStellarContractParam{value: val, isSet: true}
}

func (v NullableTransactionStellarContractParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStellarContractParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


