/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EthStakingExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthStakingExtra{}

// EthStakingExtra struct for EthStakingExtra
type EthStakingExtra struct {
	PoolType StakingPoolType `json:"pool_type"`
	// The Proof-of-Stake (PoS) chain.
	PosChain string `json:"pos_chain"`
}

type _EthStakingExtra EthStakingExtra

// NewEthStakingExtra instantiates a new EthStakingExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthStakingExtra(poolType StakingPoolType, posChain string) *EthStakingExtra {
	this := EthStakingExtra{}
	this.PoolType = poolType
	this.PosChain = posChain
	return &this
}

// NewEthStakingExtraWithDefaults instantiates a new EthStakingExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthStakingExtraWithDefaults() *EthStakingExtra {
	this := EthStakingExtra{}
	return &this
}

// GetPoolType returns the PoolType field value
func (o *EthStakingExtra) GetPoolType() StakingPoolType {
	if o == nil {
		var ret StakingPoolType
		return ret
	}

	return o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value
// and a boolean to check if the value has been set.
func (o *EthStakingExtra) GetPoolTypeOk() (*StakingPoolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolType, true
}

// SetPoolType sets field value
func (o *EthStakingExtra) SetPoolType(v StakingPoolType) {
	o.PoolType = v
}

// GetPosChain returns the PosChain field value
func (o *EthStakingExtra) GetPosChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PosChain
}

// GetPosChainOk returns a tuple with the PosChain field value
// and a boolean to check if the value has been set.
func (o *EthStakingExtra) GetPosChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PosChain, true
}

// SetPosChain sets field value
func (o *EthStakingExtra) SetPosChain(v string) {
	o.PosChain = v
}

func (o EthStakingExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthStakingExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_type"] = o.PoolType
	toSerialize["pos_chain"] = o.PosChain
	return toSerialize, nil
}

func (o *EthStakingExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_type",
		"pos_chain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthStakingExtra := _EthStakingExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEthStakingExtra)

	if err != nil {
		return err
	}

	*o = EthStakingExtra(varEthStakingExtra)

	return err
}

type NullableEthStakingExtra struct {
	value *EthStakingExtra
	isSet bool
}

func (v NullableEthStakingExtra) Get() *EthStakingExtra {
	return v.value
}

func (v *NullableEthStakingExtra) Set(val *EthStakingExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableEthStakingExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableEthStakingExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthStakingExtra(val *EthStakingExtra) *NullableEthStakingExtra {
	return &NullableEthStakingExtra{value: val, isSet: true}
}

func (v NullableEthStakingExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthStakingExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


