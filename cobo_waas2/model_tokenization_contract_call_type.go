/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationContractCallType The type of contract call.
type TokenizationContractCallType string

// List of TokenizationContractCallType
const (
	TOKENIZATIONCONTRACTCALLTYPE_EVM_CONTRACT TokenizationContractCallType = "EVM_Contract"
	TOKENIZATIONCONTRACTCALLTYPE_SOL_CONTRACT TokenizationContractCallType = "SOL_Contract"
)

// All allowed values of TokenizationContractCallType enum
var AllowedTokenizationContractCallTypeEnumValues = []TokenizationContractCallType{
	"EVM_Contract",
	"SOL_Contract",
}

func (v *TokenizationContractCallType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenizationContractCallType(value)
	for _, existing := range AllowedTokenizationContractCallTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TokenizationContractCallType("unknown")
	return nil
}

// NewTokenizationContractCallTypeFromValue returns a pointer to a valid TokenizationContractCallType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenizationContractCallTypeFromValue(v string) (*TokenizationContractCallType, error) {
	ev := TokenizationContractCallType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenizationContractCallType: valid values are %v", v, AllowedTokenizationContractCallTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenizationContractCallType) IsValid() bool {
	for _, existing := range AllowedTokenizationContractCallTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenizationContractCallType value
func (v TokenizationContractCallType) Ptr() *TokenizationContractCallType {
	return &v
}

type NullableTokenizationContractCallType struct {
	value *TokenizationContractCallType
	isSet bool
}

func (v NullableTokenizationContractCallType) Get() *TokenizationContractCallType {
	return v.value
}

func (v *NullableTokenizationContractCallType) Set(val *TokenizationContractCallType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationContractCallType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationContractCallType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationContractCallType(val *TokenizationContractCallType) *NullableTokenizationContractCallType {
	return &NullableTokenizationContractCallType{value: val, isSet: true}
}

func (v NullableTokenizationContractCallType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationContractCallType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

