/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// KytScreeningsReviewType The result of manual KYT screening review performed by compliance officers.  - `Approval`: Transaction is approved after manual review and can proceed - `Rejection`: Transaction is rejected due to compliance concerns and should be blocked  This field represents the final decision made by human reviewers for transactions that required manual intervention during the KYT screening process. 
type KytScreeningsReviewType string

// List of KytScreeningsReviewType
const (
	KYTSCREENINGSREVIEWTYPE_APPROVAL KytScreeningsReviewType = "Approval"
	KYTSCREENINGSREVIEWTYPE_REJECTION KytScreeningsReviewType = "Rejection"
)

// All allowed values of KytScreeningsReviewType enum
var AllowedKytScreeningsReviewTypeEnumValues = []KytScreeningsReviewType{
	"Approval",
	"Rejection",
}

func (v *KytScreeningsReviewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KytScreeningsReviewType(value)
	for _, existing := range AllowedKytScreeningsReviewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = KytScreeningsReviewType("unknown")
	return nil
}

// NewKytScreeningsReviewTypeFromValue returns a pointer to a valid KytScreeningsReviewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKytScreeningsReviewTypeFromValue(v string) (*KytScreeningsReviewType, error) {
	ev := KytScreeningsReviewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KytScreeningsReviewType: valid values are %v", v, AllowedKytScreeningsReviewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KytScreeningsReviewType) IsValid() bool {
	for _, existing := range AllowedKytScreeningsReviewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KytScreeningsReviewType value
func (v KytScreeningsReviewType) Ptr() *KytScreeningsReviewType {
	return &v
}

type NullableKytScreeningsReviewType struct {
	value *KytScreeningsReviewType
	isSet bool
}

func (v NullableKytScreeningsReviewType) Get() *KytScreeningsReviewType {
	return v.value
}

func (v *NullableKytScreeningsReviewType) Set(val *KytScreeningsReviewType) {
	v.value = val
	v.isSet = true
}

func (v NullableKytScreeningsReviewType) IsSet() bool {
	return v.isSet
}

func (v *NullableKytScreeningsReviewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKytScreeningsReviewType(val *KytScreeningsReviewType) *NullableKytScreeningsReviewType {
	return &NullableKytScreeningsReviewType{value: val, isSet: true}
}

func (v NullableKytScreeningsReviewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKytScreeningsReviewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

