/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// WalletSetup The type of wallet setup for the merchant. Each wallet contains multiple cryptocurrency addresses that serve as the merchant’s receiving addresses.  - `Shared`: (Default) Multiple merchants share the same wallet. The wallet’s addresses may be used to receive payments for multiple merchants simultaneously. - `Separate`: Create a dedicated wallet for the merchant to achieve complete fund isolation. All addresses in this wallet are only used to receive payments for this merchant. - `Default`: The default wallet automatically created by the system for the default merchant (the merchant that shares the same name as your organization). **Do not select this option when creating a merchant.** 
type WalletSetup string

// List of WalletSetup
const (
	WALLETSETUP_DEFAULT WalletSetup = "Default"
	WALLETSETUP_SHARED WalletSetup = "Shared"
	WALLETSETUP_SEPARATE WalletSetup = "Separate"
)

// All allowed values of WalletSetup enum
var AllowedWalletSetupEnumValues = []WalletSetup{
	"Default",
	"Shared",
	"Separate",
}

func (v *WalletSetup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WalletSetup(value)
	for _, existing := range AllowedWalletSetupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = WalletSetup("unknown")
	return nil
}

// NewWalletSetupFromValue returns a pointer to a valid WalletSetup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWalletSetupFromValue(v string) (*WalletSetup, error) {
	ev := WalletSetup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WalletSetup: valid values are %v", v, AllowedWalletSetupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WalletSetup) IsValid() bool {
	for _, existing := range AllowedWalletSetupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WalletSetup value
func (v WalletSetup) Ptr() *WalletSetup {
	return &v
}

type NullableWalletSetup struct {
	value *WalletSetup
	isSet bool
}

func (v NullableWalletSetup) Get() *WalletSetup {
	return v.value
}

func (v *NullableWalletSetup) Set(val *WalletSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletSetup(val *WalletSetup) *NullableWalletSetup {
	return &NullableWalletSetup{value: val, isSet: true}
}

func (v NullableWalletSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

