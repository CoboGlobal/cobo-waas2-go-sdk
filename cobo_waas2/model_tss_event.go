/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TSSEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TSSEvent{}

// TSSEvent The TSS Node event payload.
type TSSEvent struct {
	// The event ID.
	EventId *string `json:"event_id,omitempty"`
	// The time when the event occurred, in Unix timestamp format, measured in milliseconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
	// The event publisher's TSS Node ID.
	NodeId *string `json:"node_id,omitempty"`
	EventType TSSEventType `json:"event_type"`
	Data *TSSEventData `json:"data,omitempty"`
}

type _TSSEvent TSSEvent

// NewTSSEvent instantiates a new TSSEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTSSEvent(eventType TSSEventType) *TSSEvent {
	this := TSSEvent{}
	this.EventType = eventType
	return &this
}

// NewTSSEventWithDefaults instantiates a new TSSEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTSSEventWithDefaults() *TSSEvent {
	this := TSSEvent{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *TSSEvent) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSEvent) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *TSSEvent) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *TSSEvent) SetEventId(v string) {
	o.EventId = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *TSSEvent) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSEvent) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *TSSEvent) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *TSSEvent) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *TSSEvent) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSEvent) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *TSSEvent) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *TSSEvent) SetNodeId(v string) {
	o.NodeId = &v
}

// GetEventType returns the EventType field value
func (o *TSSEvent) GetEventType() TSSEventType {
	if o == nil {
		var ret TSSEventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TSSEvent) GetEventTypeOk() (*TSSEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TSSEvent) SetEventType(v TSSEventType) {
	o.EventType = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TSSEvent) GetData() TSSEventData {
	if o == nil || IsNil(o.Data) {
		var ret TSSEventData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TSSEvent) GetDataOk() (*TSSEventData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TSSEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given TSSEventData and assigns it to the Data field.
func (o *TSSEvent) SetData(v TSSEventData) {
	o.Data = &v
}

func (o TSSEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TSSEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	toSerialize["event_type"] = o.EventType
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *TSSEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTSSEvent := _TSSEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTSSEvent)

	if err != nil {
		return err
	}

	*o = TSSEvent(varTSSEvent)

	return err
}

type NullableTSSEvent struct {
	value *TSSEvent
	isSet bool
}

func (v NullableTSSEvent) Get() *TSSEvent {
	return v.value
}

func (v *NullableTSSEvent) Set(val *TSSEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTSSEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTSSEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTSSEvent(val *TSSEvent) *NullableTSSEvent {
	return &NullableTSSEvent{value: val, isSet: true}
}

func (v NullableTSSEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTSSEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


