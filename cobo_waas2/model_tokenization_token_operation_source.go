/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TokenizationTokenOperationSource - struct for TokenizationTokenOperationSource
type TokenizationTokenOperationSource struct {
	TokenizationMpcOperationSource *TokenizationMpcOperationSource
	TokenizationWeb3OperationSource *TokenizationWeb3OperationSource
}

// TokenizationMpcOperationSourceAsTokenizationTokenOperationSource is a convenience function that returns TokenizationMpcOperationSource wrapped in TokenizationTokenOperationSource
func TokenizationMpcOperationSourceAsTokenizationTokenOperationSource(v *TokenizationMpcOperationSource) TokenizationTokenOperationSource {
	return TokenizationTokenOperationSource{
		TokenizationMpcOperationSource: v,
	}
}

// TokenizationWeb3OperationSourceAsTokenizationTokenOperationSource is a convenience function that returns TokenizationWeb3OperationSource wrapped in TokenizationTokenOperationSource
func TokenizationWeb3OperationSourceAsTokenizationTokenOperationSource(v *TokenizationWeb3OperationSource) TokenizationTokenOperationSource {
	return TokenizationTokenOperationSource{
		TokenizationWeb3OperationSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenizationTokenOperationSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Org-Controlled'
	if jsonDict["source_type"] == "Org-Controlled" {
		// try to unmarshal JSON data into TokenizationMpcOperationSource
		err = json.Unmarshal(data, &dst.TokenizationMpcOperationSource)
		if err == nil {
			return nil // data stored in dst.TokenizationMpcOperationSource, return on the first match
		} else {
			dst.TokenizationMpcOperationSource = nil
			return fmt.Errorf("failed to unmarshal TokenizationTokenOperationSource as TokenizationMpcOperationSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Web3'
	if jsonDict["source_type"] == "Web3" {
		// try to unmarshal JSON data into TokenizationWeb3OperationSource
		err = json.Unmarshal(data, &dst.TokenizationWeb3OperationSource)
		if err == nil {
			return nil // data stored in dst.TokenizationWeb3OperationSource, return on the first match
		} else {
			dst.TokenizationWeb3OperationSource = nil
			return fmt.Errorf("failed to unmarshal TokenizationTokenOperationSource as TokenizationWeb3OperationSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationMpcOperationSource'
	if jsonDict["source_type"] == "TokenizationMpcOperationSource" {
		// try to unmarshal JSON data into TokenizationMpcOperationSource
		err = json.Unmarshal(data, &dst.TokenizationMpcOperationSource)
		if err == nil {
			return nil // data stored in dst.TokenizationMpcOperationSource, return on the first match
		} else {
			dst.TokenizationMpcOperationSource = nil
			return fmt.Errorf("failed to unmarshal TokenizationTokenOperationSource as TokenizationMpcOperationSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TokenizationWeb3OperationSource'
	if jsonDict["source_type"] == "TokenizationWeb3OperationSource" {
		// try to unmarshal JSON data into TokenizationWeb3OperationSource
		err = json.Unmarshal(data, &dst.TokenizationWeb3OperationSource)
		if err == nil {
			return nil // data stored in dst.TokenizationWeb3OperationSource, return on the first match
		} else {
			dst.TokenizationWeb3OperationSource = nil
			return fmt.Errorf("failed to unmarshal TokenizationTokenOperationSource as TokenizationWeb3OperationSource: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenizationTokenOperationSource) MarshalJSON() ([]byte, error) {
	if src.TokenizationMpcOperationSource != nil {
		return json.Marshal(&src.TokenizationMpcOperationSource)
	}

	if src.TokenizationWeb3OperationSource != nil {
		return json.Marshal(&src.TokenizationWeb3OperationSource)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenizationTokenOperationSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokenizationMpcOperationSource != nil {
		return obj.TokenizationMpcOperationSource
	}

	if obj.TokenizationWeb3OperationSource != nil {
		return obj.TokenizationWeb3OperationSource
	}

	// all schemas are nil
	return nil
}

type NullableTokenizationTokenOperationSource struct {
	value *TokenizationTokenOperationSource
	isSet bool
}

func (v NullableTokenizationTokenOperationSource) Get() *TokenizationTokenOperationSource {
	return v.value
}

func (v *NullableTokenizationTokenOperationSource) Set(val *TokenizationTokenOperationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizationTokenOperationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizationTokenOperationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizationTokenOperationSource(val *TokenizationTokenOperationSource) *NullableTokenizationTokenOperationSource {
	return &NullableTokenizationTokenOperationSource{value: val, isSet: true}
}

func (v NullableTokenizationTokenOperationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizationTokenOperationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


