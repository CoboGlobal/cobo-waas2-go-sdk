/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// MessageSignDestination - struct for MessageSignDestination
type MessageSignDestination struct {
	BTCBIP137MessageSignDestination *BTCBIP137MessageSignDestination
	BTCBIP322MessageSignDestination *BTCBIP322MessageSignDestination
	BTCEIP191MessageSignDestination *BTCEIP191MessageSignDestination
	CosmosAdr36MessageSignDestination *CosmosAdr36MessageSignDestination
	EvmEIP191MessageSignDestination *EvmEIP191MessageSignDestination
	EvmEIP712MessageSignDestination *EvmEIP712MessageSignDestination
	RawMessageSignDestination *RawMessageSignDestination
}

// BTCBIP137MessageSignDestinationAsMessageSignDestination is a convenience function that returns BTCBIP137MessageSignDestination wrapped in MessageSignDestination
func BTCBIP137MessageSignDestinationAsMessageSignDestination(v *BTCBIP137MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		BTCBIP137MessageSignDestination: v,
	}
}

// BTCBIP322MessageSignDestinationAsMessageSignDestination is a convenience function that returns BTCBIP322MessageSignDestination wrapped in MessageSignDestination
func BTCBIP322MessageSignDestinationAsMessageSignDestination(v *BTCBIP322MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		BTCBIP322MessageSignDestination: v,
	}
}

// BTCEIP191MessageSignDestinationAsMessageSignDestination is a convenience function that returns BTCEIP191MessageSignDestination wrapped in MessageSignDestination
func BTCEIP191MessageSignDestinationAsMessageSignDestination(v *BTCEIP191MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		BTCEIP191MessageSignDestination: v,
	}
}

// CosmosAdr36MessageSignDestinationAsMessageSignDestination is a convenience function that returns CosmosAdr36MessageSignDestination wrapped in MessageSignDestination
func CosmosAdr36MessageSignDestinationAsMessageSignDestination(v *CosmosAdr36MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		CosmosAdr36MessageSignDestination: v,
	}
}

// EvmEIP191MessageSignDestinationAsMessageSignDestination is a convenience function that returns EvmEIP191MessageSignDestination wrapped in MessageSignDestination
func EvmEIP191MessageSignDestinationAsMessageSignDestination(v *EvmEIP191MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		EvmEIP191MessageSignDestination: v,
	}
}

// EvmEIP712MessageSignDestinationAsMessageSignDestination is a convenience function that returns EvmEIP712MessageSignDestination wrapped in MessageSignDestination
func EvmEIP712MessageSignDestinationAsMessageSignDestination(v *EvmEIP712MessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		EvmEIP712MessageSignDestination: v,
	}
}

// RawMessageSignDestinationAsMessageSignDestination is a convenience function that returns RawMessageSignDestination wrapped in MessageSignDestination
func RawMessageSignDestinationAsMessageSignDestination(v *RawMessageSignDestination) MessageSignDestination {
	return MessageSignDestination{
		RawMessageSignDestination: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageSignDestination) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BTC_BIP_137_Signature'
	if jsonDict["destination_type"] == "BTC_BIP_137_Signature" {
		// try to unmarshal JSON data into BTCBIP137MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCBIP137MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCBIP137MessageSignDestination, return on the first match
		} else {
			dst.BTCBIP137MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCBIP137MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTC_BIP_322_Signature'
	if jsonDict["destination_type"] == "BTC_BIP_322_Signature" {
		// try to unmarshal JSON data into BTCBIP322MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCBIP322MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCBIP322MessageSignDestination, return on the first match
		} else {
			dst.BTCBIP322MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCBIP322MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTC_EIP_191_Signature'
	if jsonDict["destination_type"] == "BTC_EIP_191_Signature" {
		// try to unmarshal JSON data into BTCEIP191MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCEIP191MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCEIP191MessageSignDestination, return on the first match
		} else {
			dst.BTCEIP191MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCEIP191MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'COSMOS_ADR_36_Signature'
	if jsonDict["destination_type"] == "COSMOS_ADR_36_Signature" {
		// try to unmarshal JSON data into CosmosAdr36MessageSignDestination
		err = json.Unmarshal(data, &dst.CosmosAdr36MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.CosmosAdr36MessageSignDestination, return on the first match
		} else {
			dst.CosmosAdr36MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as CosmosAdr36MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EVM_EIP_191_Signature'
	if jsonDict["destination_type"] == "EVM_EIP_191_Signature" {
		// try to unmarshal JSON data into EvmEIP191MessageSignDestination
		err = json.Unmarshal(data, &dst.EvmEIP191MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.EvmEIP191MessageSignDestination, return on the first match
		} else {
			dst.EvmEIP191MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as EvmEIP191MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EVM_EIP_712_Signature'
	if jsonDict["destination_type"] == "EVM_EIP_712_Signature" {
		// try to unmarshal JSON data into EvmEIP712MessageSignDestination
		err = json.Unmarshal(data, &dst.EvmEIP712MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.EvmEIP712MessageSignDestination, return on the first match
		} else {
			dst.EvmEIP712MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as EvmEIP712MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Raw_Message_Signature'
	if jsonDict["destination_type"] == "Raw_Message_Signature" {
		// try to unmarshal JSON data into RawMessageSignDestination
		err = json.Unmarshal(data, &dst.RawMessageSignDestination)
		if err == nil {
			return nil // data stored in dst.RawMessageSignDestination, return on the first match
		} else {
			dst.RawMessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as RawMessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCBIP137MessageSignDestination'
	if jsonDict["destination_type"] == "BTCBIP137MessageSignDestination" {
		// try to unmarshal JSON data into BTCBIP137MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCBIP137MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCBIP137MessageSignDestination, return on the first match
		} else {
			dst.BTCBIP137MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCBIP137MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCBIP322MessageSignDestination'
	if jsonDict["destination_type"] == "BTCBIP322MessageSignDestination" {
		// try to unmarshal JSON data into BTCBIP322MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCBIP322MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCBIP322MessageSignDestination, return on the first match
		} else {
			dst.BTCBIP322MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCBIP322MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BTCEIP191MessageSignDestination'
	if jsonDict["destination_type"] == "BTCEIP191MessageSignDestination" {
		// try to unmarshal JSON data into BTCEIP191MessageSignDestination
		err = json.Unmarshal(data, &dst.BTCEIP191MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.BTCEIP191MessageSignDestination, return on the first match
		} else {
			dst.BTCEIP191MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as BTCEIP191MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CosmosAdr36MessageSignDestination'
	if jsonDict["destination_type"] == "CosmosAdr36MessageSignDestination" {
		// try to unmarshal JSON data into CosmosAdr36MessageSignDestination
		err = json.Unmarshal(data, &dst.CosmosAdr36MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.CosmosAdr36MessageSignDestination, return on the first match
		} else {
			dst.CosmosAdr36MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as CosmosAdr36MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmEIP191MessageSignDestination'
	if jsonDict["destination_type"] == "EvmEIP191MessageSignDestination" {
		// try to unmarshal JSON data into EvmEIP191MessageSignDestination
		err = json.Unmarshal(data, &dst.EvmEIP191MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.EvmEIP191MessageSignDestination, return on the first match
		} else {
			dst.EvmEIP191MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as EvmEIP191MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EvmEIP712MessageSignDestination'
	if jsonDict["destination_type"] == "EvmEIP712MessageSignDestination" {
		// try to unmarshal JSON data into EvmEIP712MessageSignDestination
		err = json.Unmarshal(data, &dst.EvmEIP712MessageSignDestination)
		if err == nil {
			return nil // data stored in dst.EvmEIP712MessageSignDestination, return on the first match
		} else {
			dst.EvmEIP712MessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as EvmEIP712MessageSignDestination: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawMessageSignDestination'
	if jsonDict["destination_type"] == "RawMessageSignDestination" {
		// try to unmarshal JSON data into RawMessageSignDestination
		err = json.Unmarshal(data, &dst.RawMessageSignDestination)
		if err == nil {
			return nil // data stored in dst.RawMessageSignDestination, return on the first match
		} else {
			dst.RawMessageSignDestination = nil
			return fmt.Errorf("failed to unmarshal MessageSignDestination as RawMessageSignDestination: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageSignDestination) MarshalJSON() ([]byte, error) {
	if src.BTCBIP137MessageSignDestination != nil {
		return json.Marshal(&src.BTCBIP137MessageSignDestination)
	}

	if src.BTCBIP322MessageSignDestination != nil {
		return json.Marshal(&src.BTCBIP322MessageSignDestination)
	}

	if src.BTCEIP191MessageSignDestination != nil {
		return json.Marshal(&src.BTCEIP191MessageSignDestination)
	}

	if src.CosmosAdr36MessageSignDestination != nil {
		return json.Marshal(&src.CosmosAdr36MessageSignDestination)
	}

	if src.EvmEIP191MessageSignDestination != nil {
		return json.Marshal(&src.EvmEIP191MessageSignDestination)
	}

	if src.EvmEIP712MessageSignDestination != nil {
		return json.Marshal(&src.EvmEIP712MessageSignDestination)
	}

	if src.RawMessageSignDestination != nil {
		return json.Marshal(&src.RawMessageSignDestination)
	}

	return []byte(`{}`), nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageSignDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BTCBIP137MessageSignDestination != nil {
		return obj.BTCBIP137MessageSignDestination
	}

	if obj.BTCBIP322MessageSignDestination != nil {
		return obj.BTCBIP322MessageSignDestination
	}

	if obj.BTCEIP191MessageSignDestination != nil {
		return obj.BTCEIP191MessageSignDestination
	}

	if obj.CosmosAdr36MessageSignDestination != nil {
		return obj.CosmosAdr36MessageSignDestination
	}

	if obj.EvmEIP191MessageSignDestination != nil {
		return obj.EvmEIP191MessageSignDestination
	}

	if obj.EvmEIP712MessageSignDestination != nil {
		return obj.EvmEIP712MessageSignDestination
	}

	if obj.RawMessageSignDestination != nil {
		return obj.RawMessageSignDestination
	}

	// all schemas are nil
	return nil
}

type NullableMessageSignDestination struct {
	value *MessageSignDestination
	isSet bool
}

func (v NullableMessageSignDestination) Get() *MessageSignDestination {
	return v.value
}

func (v *NullableMessageSignDestination) Set(val *MessageSignDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSignDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSignDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSignDestination(val *MessageSignDestination) *NullableMessageSignDestination {
	return &NullableMessageSignDestination{value: val, isSet: true}
}

func (v NullableMessageSignDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSignDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


