/*
Cobo Wallet as a Service 2.0

API version: 1.1.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// CreateWalletParams - struct for CreateWalletParams
type CreateWalletParams struct {
	CreateCustodialWalletParams *CreateCustodialWalletParams
	CreateExchangeWalletParams *CreateExchangeWalletParams
	CreateMpcWalletParams *CreateMpcWalletParams
}

// CreateCustodialWalletParamsAsCreateWalletParams is a convenience function that returns CreateCustodialWalletParams wrapped in CreateWalletParams
func CreateCustodialWalletParamsAsCreateWalletParams(v *CreateCustodialWalletParams) CreateWalletParams {
	return CreateWalletParams{
		CreateCustodialWalletParams: v,
	}
}

// CreateExchangeWalletParamsAsCreateWalletParams is a convenience function that returns CreateExchangeWalletParams wrapped in CreateWalletParams
func CreateExchangeWalletParamsAsCreateWalletParams(v *CreateExchangeWalletParams) CreateWalletParams {
	return CreateWalletParams{
		CreateExchangeWalletParams: v,
	}
}

// CreateMpcWalletParamsAsCreateWalletParams is a convenience function that returns CreateMpcWalletParams wrapped in CreateWalletParams
func CreateMpcWalletParamsAsCreateWalletParams(v *CreateMpcWalletParams) CreateWalletParams {
	return CreateWalletParams{
		CreateMpcWalletParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateWalletParams) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Custodial'
	if jsonDict["wallet_type"] == "Custodial" {
		// try to unmarshal JSON data into CreateCustodialWalletParams
		err = json.Unmarshal(data, &dst.CreateCustodialWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateCustodialWalletParams, return on the first match
		} else {
			dst.CreateCustodialWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateCustodialWalletParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Exchange'
	if jsonDict["wallet_type"] == "Exchange" {
		// try to unmarshal JSON data into CreateExchangeWalletParams
		err = json.Unmarshal(data, &dst.CreateExchangeWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateExchangeWalletParams, return on the first match
		} else {
			dst.CreateExchangeWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateExchangeWalletParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MPC'
	if jsonDict["wallet_type"] == "MPC" {
		// try to unmarshal JSON data into CreateMpcWalletParams
		err = json.Unmarshal(data, &dst.CreateMpcWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateMpcWalletParams, return on the first match
		} else {
			dst.CreateMpcWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateMpcWalletParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateCustodialWalletParams'
	if jsonDict["wallet_type"] == "CreateCustodialWalletParams" {
		// try to unmarshal JSON data into CreateCustodialWalletParams
		err = json.Unmarshal(data, &dst.CreateCustodialWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateCustodialWalletParams, return on the first match
		} else {
			dst.CreateCustodialWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateCustodialWalletParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateExchangeWalletParams'
	if jsonDict["wallet_type"] == "CreateExchangeWalletParams" {
		// try to unmarshal JSON data into CreateExchangeWalletParams
		err = json.Unmarshal(data, &dst.CreateExchangeWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateExchangeWalletParams, return on the first match
		} else {
			dst.CreateExchangeWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateExchangeWalletParams: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateMpcWalletParams'
	if jsonDict["wallet_type"] == "CreateMpcWalletParams" {
		// try to unmarshal JSON data into CreateMpcWalletParams
		err = json.Unmarshal(data, &dst.CreateMpcWalletParams)
		if err == nil {
			return nil // data stored in dst.CreateMpcWalletParams, return on the first match
		} else {
			dst.CreateMpcWalletParams = nil
			return fmt.Errorf("failed to unmarshal CreateWalletParams as CreateMpcWalletParams: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateWalletParams) MarshalJSON() ([]byte, error) {
	if src.CreateCustodialWalletParams != nil {
		return json.Marshal(&src.CreateCustodialWalletParams)
	}

	if src.CreateExchangeWalletParams != nil {
		return json.Marshal(&src.CreateExchangeWalletParams)
	}

	if src.CreateMpcWalletParams != nil {
		return json.Marshal(&src.CreateMpcWalletParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateWalletParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateCustodialWalletParams != nil {
		return obj.CreateCustodialWalletParams
	}

	if obj.CreateExchangeWalletParams != nil {
		return obj.CreateExchangeWalletParams
	}

	if obj.CreateMpcWalletParams != nil {
		return obj.CreateMpcWalletParams
	}

	// all schemas are nil
	return nil
}

type NullableCreateWalletParams struct {
	value *CreateWalletParams
	isSet bool
}

func (v NullableCreateWalletParams) Get() *CreateWalletParams {
	return v.value
}

func (v *NullableCreateWalletParams) Set(val *CreateWalletParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWalletParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWalletParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWalletParams(val *CreateWalletParams) *NullableCreateWalletParams {
	return &NullableCreateWalletParams{value: val, isSet: true}
}

func (v NullableCreateWalletParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWalletParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


