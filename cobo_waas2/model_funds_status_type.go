/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// FundsStatusType The current status of transaction funds, indicating their disposition state in the compliance system.
type FundsStatusType string

// List of FundsStatusType
const (
	FUNDSSTATUSTYPE_FROZEN FundsStatusType = "Frozen"
	FUNDSSTATUSTYPE_REFUNDING FundsStatusType = "Refunding"
	FUNDSSTATUSTYPE_REFUNDED FundsStatusType = "Refunded"
	FUNDSSTATUSTYPE_REFUND_FAILED FundsStatusType = "RefundFailed"
	FUNDSSTATUSTYPE_UNFREEZING FundsStatusType = "Unfreezing"
	FUNDSSTATUSTYPE_UNFROZEN FundsStatusType = "Unfrozen"
	FUNDSSTATUSTYPE_UNFREEZING_FAILED FundsStatusType = "UnfreezingFailed"
	FUNDSSTATUSTYPE_ISOLATING FundsStatusType = "Isolating"
	FUNDSSTATUSTYPE_ISOLATED FundsStatusType = "Isolated"
	FUNDSSTATUSTYPE_ISOLATION_FAILED FundsStatusType = "IsolationFailed"
	FUNDSSTATUSTYPE_COBO_DISPOSITION FundsStatusType = "CoboDisposition"
	FUNDSSTATUSTYPE_NORMAL FundsStatusType = "Normal"
)

// All allowed values of FundsStatusType enum
var AllowedFundsStatusTypeEnumValues = []FundsStatusType{
	"Frozen",
	"Refunding",
	"Refunded",
	"RefundFailed",
	"Unfreezing",
	"Unfrozen",
	"UnfreezingFailed",
	"Isolating",
	"Isolated",
	"IsolationFailed",
	"CoboDisposition",
	"Normal",
}

func (v *FundsStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FundsStatusType(value)
	for _, existing := range AllowedFundsStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = FundsStatusType("unknown")
	return nil
}

// NewFundsStatusTypeFromValue returns a pointer to a valid FundsStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFundsStatusTypeFromValue(v string) (*FundsStatusType, error) {
	ev := FundsStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FundsStatusType: valid values are %v", v, AllowedFundsStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FundsStatusType) IsValid() bool {
	for _, existing := range AllowedFundsStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FundsStatusType value
func (v FundsStatusType) Ptr() *FundsStatusType {
	return &v
}

type NullableFundsStatusType struct {
	value *FundsStatusType
	isSet bool
}

func (v NullableFundsStatusType) Get() *FundsStatusType {
	return v.value
}

func (v *NullableFundsStatusType) Set(val *FundsStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableFundsStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableFundsStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundsStatusType(val *FundsStatusType) *NullableFundsStatusType {
	return &NullableFundsStatusType{value: val, isSet: true}
}

func (v NullableFundsStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundsStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

