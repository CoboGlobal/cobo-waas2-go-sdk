/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeeStationCheckFeeStationUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeStationCheckFeeStationUsageResponse{}

// FeeStationCheckFeeStationUsageResponse The Fee Station usage evaluation result for the transfer request.
type FeeStationCheckFeeStationUsageResponse struct {
	// The token used to pay the gas fee for this specific transaction. You can retrieve the IDs of all supported tokens by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
	TokenId string `json:"token_id"`
	GasStationType FeeStationGasStationType `json:"gas_station_type"`
	// Indicates whether Fee Station is applied for this transfer request.
	IsFeeStationApplicable bool `json:"is_fee_station_applicable"`
	// If Fee Station is used, indicates whether its balance is sufficient to cover the required gas fee.
	IsBalanceSufficient bool `json:"is_balance_sufficient"`
	// The current token balance available in Fee Station.
	Balance string `json:"balance"`
	// The total gas amount required for this transfer request.
	TotalFeeAmount string `json:"total_fee_amount"`
	// Indicates whether USDT (U) sponsorship is applied when Fee Station balance is insufficient.
	IsSponsorApplicable bool `json:"is_sponsor_applicable"`
	// The amount of gas fee sponsored by USDT (U) when applicable.
	SponsoredFeeAmount string `json:"sponsored_fee_amount"`
}

type _FeeStationCheckFeeStationUsageResponse FeeStationCheckFeeStationUsageResponse

// NewFeeStationCheckFeeStationUsageResponse instantiates a new FeeStationCheckFeeStationUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeStationCheckFeeStationUsageResponse(tokenId string, gasStationType FeeStationGasStationType, isFeeStationApplicable bool, isBalanceSufficient bool, balance string, totalFeeAmount string, isSponsorApplicable bool, sponsoredFeeAmount string) *FeeStationCheckFeeStationUsageResponse {
	this := FeeStationCheckFeeStationUsageResponse{}
	this.TokenId = tokenId
	this.GasStationType = gasStationType
	this.IsFeeStationApplicable = isFeeStationApplicable
	this.IsBalanceSufficient = isBalanceSufficient
	this.Balance = balance
	this.TotalFeeAmount = totalFeeAmount
	this.IsSponsorApplicable = isSponsorApplicable
	this.SponsoredFeeAmount = sponsoredFeeAmount
	return &this
}

// NewFeeStationCheckFeeStationUsageResponseWithDefaults instantiates a new FeeStationCheckFeeStationUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeStationCheckFeeStationUsageResponseWithDefaults() *FeeStationCheckFeeStationUsageResponse {
	this := FeeStationCheckFeeStationUsageResponse{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *FeeStationCheckFeeStationUsageResponse) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetTokenId(v string) {
	o.TokenId = v
}

// GetGasStationType returns the GasStationType field value
func (o *FeeStationCheckFeeStationUsageResponse) GetGasStationType() FeeStationGasStationType {
	if o == nil {
		var ret FeeStationGasStationType
		return ret
	}

	return o.GasStationType
}

// GetGasStationTypeOk returns a tuple with the GasStationType field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetGasStationTypeOk() (*FeeStationGasStationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasStationType, true
}

// SetGasStationType sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetGasStationType(v FeeStationGasStationType) {
	o.GasStationType = v
}

// GetIsFeeStationApplicable returns the IsFeeStationApplicable field value
func (o *FeeStationCheckFeeStationUsageResponse) GetIsFeeStationApplicable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFeeStationApplicable
}

// GetIsFeeStationApplicableOk returns a tuple with the IsFeeStationApplicable field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetIsFeeStationApplicableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFeeStationApplicable, true
}

// SetIsFeeStationApplicable sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetIsFeeStationApplicable(v bool) {
	o.IsFeeStationApplicable = v
}

// GetIsBalanceSufficient returns the IsBalanceSufficient field value
func (o *FeeStationCheckFeeStationUsageResponse) GetIsBalanceSufficient() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBalanceSufficient
}

// GetIsBalanceSufficientOk returns a tuple with the IsBalanceSufficient field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetIsBalanceSufficientOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBalanceSufficient, true
}

// SetIsBalanceSufficient sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetIsBalanceSufficient(v bool) {
	o.IsBalanceSufficient = v
}

// GetBalance returns the Balance field value
func (o *FeeStationCheckFeeStationUsageResponse) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetBalance(v string) {
	o.Balance = v
}

// GetTotalFeeAmount returns the TotalFeeAmount field value
func (o *FeeStationCheckFeeStationUsageResponse) GetTotalFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalFeeAmount
}

// GetTotalFeeAmountOk returns a tuple with the TotalFeeAmount field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetTotalFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFeeAmount, true
}

// SetTotalFeeAmount sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetTotalFeeAmount(v string) {
	o.TotalFeeAmount = v
}

// GetIsSponsorApplicable returns the IsSponsorApplicable field value
func (o *FeeStationCheckFeeStationUsageResponse) GetIsSponsorApplicable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSponsorApplicable
}

// GetIsSponsorApplicableOk returns a tuple with the IsSponsorApplicable field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetIsSponsorApplicableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSponsorApplicable, true
}

// SetIsSponsorApplicable sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetIsSponsorApplicable(v bool) {
	o.IsSponsorApplicable = v
}

// GetSponsoredFeeAmount returns the SponsoredFeeAmount field value
func (o *FeeStationCheckFeeStationUsageResponse) GetSponsoredFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SponsoredFeeAmount
}

// GetSponsoredFeeAmountOk returns a tuple with the SponsoredFeeAmount field value
// and a boolean to check if the value has been set.
func (o *FeeStationCheckFeeStationUsageResponse) GetSponsoredFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SponsoredFeeAmount, true
}

// SetSponsoredFeeAmount sets field value
func (o *FeeStationCheckFeeStationUsageResponse) SetSponsoredFeeAmount(v string) {
	o.SponsoredFeeAmount = v
}

func (o FeeStationCheckFeeStationUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeStationCheckFeeStationUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["gas_station_type"] = o.GasStationType
	toSerialize["is_fee_station_applicable"] = o.IsFeeStationApplicable
	toSerialize["is_balance_sufficient"] = o.IsBalanceSufficient
	toSerialize["balance"] = o.Balance
	toSerialize["total_fee_amount"] = o.TotalFeeAmount
	toSerialize["is_sponsor_applicable"] = o.IsSponsorApplicable
	toSerialize["sponsored_fee_amount"] = o.SponsoredFeeAmount
	return toSerialize, nil
}

func (o *FeeStationCheckFeeStationUsageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"gas_station_type",
		"is_fee_station_applicable",
		"is_balance_sufficient",
		"balance",
		"total_fee_amount",
		"is_sponsor_applicable",
		"sponsored_fee_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeStationCheckFeeStationUsageResponse := _FeeStationCheckFeeStationUsageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeeStationCheckFeeStationUsageResponse)

	if err != nil {
		return err
	}

	*o = FeeStationCheckFeeStationUsageResponse(varFeeStationCheckFeeStationUsageResponse)

	return err
}

type NullableFeeStationCheckFeeStationUsageResponse struct {
	value *FeeStationCheckFeeStationUsageResponse
	isSet bool
}

func (v NullableFeeStationCheckFeeStationUsageResponse) Get() *FeeStationCheckFeeStationUsageResponse {
	return v.value
}

func (v *NullableFeeStationCheckFeeStationUsageResponse) Set(val *FeeStationCheckFeeStationUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeStationCheckFeeStationUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeStationCheckFeeStationUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeStationCheckFeeStationUsageResponse(val *FeeStationCheckFeeStationUsageResponse) *NullableFeeStationCheckFeeStationUsageResponse {
	return &NullableFeeStationCheckFeeStationUsageResponse{value: val, isSet: true}
}

func (v NullableFeeStationCheckFeeStationUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeStationCheckFeeStationUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


