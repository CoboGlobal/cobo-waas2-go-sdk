/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupportedToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedToken{}

// SupportedToken struct for SupportedToken
type SupportedToken struct {
	// Unique identifier of the token
	TokenId string `json:"token_id"`
	// Full name of the token
	Name string `json:"name"`
	// Symbol representation of the token
	Symbol string `json:"symbol"`
	// Number of decimal places for the token
	Decimal int32 `json:"decimal"`
	// Contract address of the token (may be null for native coins)
	TokenAddress NullableString `json:"token_address"`
	// Identifier of the blockchain where the token exists
	ChainId string `json:"chain_id"`
	// Symbol of the underlying blockchain
	ChainSymbol NullableString `json:"chain_symbol"`
	// URL to the blockchain's icon image
	ChainIconUrl NullableString `json:"chain_icon_url,omitempty"`
	// URL to the token's icon image
	TokenIconUrl NullableString `json:"token_icon_url,omitempty"`
	// Whether the token is supported by the off-ramp service.
	CanOffRamp *bool `json:"can_off_ramp,omitempty"`
}

type _SupportedToken SupportedToken

// NewSupportedToken instantiates a new SupportedToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedToken(tokenId string, name string, symbol string, decimal int32, tokenAddress NullableString, chainId string, chainSymbol NullableString) *SupportedToken {
	this := SupportedToken{}
	this.TokenId = tokenId
	this.Name = name
	this.Symbol = symbol
	this.Decimal = decimal
	this.TokenAddress = tokenAddress
	this.ChainId = chainId
	this.ChainSymbol = chainSymbol
	return &this
}

// NewSupportedTokenWithDefaults instantiates a new SupportedToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedTokenWithDefaults() *SupportedToken {
	this := SupportedToken{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *SupportedToken) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *SupportedToken) SetTokenId(v string) {
	o.TokenId = v
}

// GetName returns the Name field value
func (o *SupportedToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SupportedToken) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *SupportedToken) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *SupportedToken) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimal returns the Decimal field value
func (o *SupportedToken) GetDecimal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetDecimalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimal, true
}

// SetDecimal sets field value
func (o *SupportedToken) SetDecimal(v int32) {
	o.Decimal = v
}

// GetTokenAddress returns the TokenAddress field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SupportedToken) GetTokenAddress() string {
	if o == nil || o.TokenAddress.Get() == nil {
		var ret string
		return ret
	}

	return *o.TokenAddress.Get()
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedToken) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenAddress.Get(), o.TokenAddress.IsSet()
}

// SetTokenAddress sets field value
func (o *SupportedToken) SetTokenAddress(v string) {
	o.TokenAddress.Set(&v)
}

// GetChainId returns the ChainId field value
func (o *SupportedToken) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SupportedToken) SetChainId(v string) {
	o.ChainId = v
}

// GetChainSymbol returns the ChainSymbol field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SupportedToken) GetChainSymbol() string {
	if o == nil || o.ChainSymbol.Get() == nil {
		var ret string
		return ret
	}

	return *o.ChainSymbol.Get()
}

// GetChainSymbolOk returns a tuple with the ChainSymbol field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedToken) GetChainSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChainSymbol.Get(), o.ChainSymbol.IsSet()
}

// SetChainSymbol sets field value
func (o *SupportedToken) SetChainSymbol(v string) {
	o.ChainSymbol.Set(&v)
}

// GetChainIconUrl returns the ChainIconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedToken) GetChainIconUrl() string {
	if o == nil || IsNil(o.ChainIconUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ChainIconUrl.Get()
}

// GetChainIconUrlOk returns a tuple with the ChainIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedToken) GetChainIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChainIconUrl.Get(), o.ChainIconUrl.IsSet()
}

// HasChainIconUrl returns a boolean if a field has been set.
func (o *SupportedToken) HasChainIconUrl() bool {
	if o != nil && o.ChainIconUrl.IsSet() {
		return true
	}

	return false
}

// SetChainIconUrl gets a reference to the given NullableString and assigns it to the ChainIconUrl field.
func (o *SupportedToken) SetChainIconUrl(v string) {
	o.ChainIconUrl.Set(&v)
}
// SetChainIconUrlNil sets the value for ChainIconUrl to be an explicit nil
func (o *SupportedToken) SetChainIconUrlNil() {
	o.ChainIconUrl.Set(nil)
}

// UnsetChainIconUrl ensures that no value is present for ChainIconUrl, not even an explicit nil
func (o *SupportedToken) UnsetChainIconUrl() {
	o.ChainIconUrl.Unset()
}

// GetTokenIconUrl returns the TokenIconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedToken) GetTokenIconUrl() string {
	if o == nil || IsNil(o.TokenIconUrl.Get()) {
		var ret string
		return ret
	}
	return *o.TokenIconUrl.Get()
}

// GetTokenIconUrlOk returns a tuple with the TokenIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedToken) GetTokenIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenIconUrl.Get(), o.TokenIconUrl.IsSet()
}

// HasTokenIconUrl returns a boolean if a field has been set.
func (o *SupportedToken) HasTokenIconUrl() bool {
	if o != nil && o.TokenIconUrl.IsSet() {
		return true
	}

	return false
}

// SetTokenIconUrl gets a reference to the given NullableString and assigns it to the TokenIconUrl field.
func (o *SupportedToken) SetTokenIconUrl(v string) {
	o.TokenIconUrl.Set(&v)
}
// SetTokenIconUrlNil sets the value for TokenIconUrl to be an explicit nil
func (o *SupportedToken) SetTokenIconUrlNil() {
	o.TokenIconUrl.Set(nil)
}

// UnsetTokenIconUrl ensures that no value is present for TokenIconUrl, not even an explicit nil
func (o *SupportedToken) UnsetTokenIconUrl() {
	o.TokenIconUrl.Unset()
}

// GetCanOffRamp returns the CanOffRamp field value if set, zero value otherwise.
func (o *SupportedToken) GetCanOffRamp() bool {
	if o == nil || IsNil(o.CanOffRamp) {
		var ret bool
		return ret
	}
	return *o.CanOffRamp
}

// GetCanOffRampOk returns a tuple with the CanOffRamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedToken) GetCanOffRampOk() (*bool, bool) {
	if o == nil || IsNil(o.CanOffRamp) {
		return nil, false
	}
	return o.CanOffRamp, true
}

// HasCanOffRamp returns a boolean if a field has been set.
func (o *SupportedToken) HasCanOffRamp() bool {
	if o != nil && !IsNil(o.CanOffRamp) {
		return true
	}

	return false
}

// SetCanOffRamp gets a reference to the given bool and assigns it to the CanOffRamp field.
func (o *SupportedToken) SetCanOffRamp(v bool) {
	o.CanOffRamp = &v
}

func (o SupportedToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimal"] = o.Decimal
	toSerialize["token_address"] = o.TokenAddress.Get()
	toSerialize["chain_id"] = o.ChainId
	toSerialize["chain_symbol"] = o.ChainSymbol.Get()
	if o.ChainIconUrl.IsSet() {
		toSerialize["chain_icon_url"] = o.ChainIconUrl.Get()
	}
	if o.TokenIconUrl.IsSet() {
		toSerialize["token_icon_url"] = o.TokenIconUrl.Get()
	}
	if !IsNil(o.CanOffRamp) {
		toSerialize["can_off_ramp"] = o.CanOffRamp
	}
	return toSerialize, nil
}

func (o *SupportedToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"name",
		"symbol",
		"decimal",
		"token_address",
		"chain_id",
		"chain_symbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportedToken := _SupportedToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupportedToken)

	if err != nil {
		return err
	}

	*o = SupportedToken(varSupportedToken)

	return err
}

type NullableSupportedToken struct {
	value *SupportedToken
	isSet bool
}

func (v NullableSupportedToken) Get() *SupportedToken {
	return v.value
}

func (v *NullableSupportedToken) Set(val *SupportedToken) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedToken) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedToken(val *SupportedToken) *NullableSupportedToken {
	return &NullableSupportedToken{value: val, isSet: true}
}

func (v NullableSupportedToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


