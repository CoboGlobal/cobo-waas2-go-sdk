/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TravelRuleWithdrawLegalEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TravelRuleWithdrawLegalEntity{}

// TravelRuleWithdrawLegalEntity Required fields for LEGAL entities.
type TravelRuleWithdrawLegalEntity struct {
	SelectedEntityType SelectedEntityType `json:"selected_entity_type"`
	// The legal name of the entity.
	LegalName string `json:"legal_name"`
	// The incorporation date of the entity.
	DateOfIncorporation *string `json:"date_of_incorporation,omitempty"`
	// The place of incorporation of the entity.
	PlaceOfIncorporation *string `json:"place_of_incorporation,omitempty"`
}

type _TravelRuleWithdrawLegalEntity TravelRuleWithdrawLegalEntity

// NewTravelRuleWithdrawLegalEntity instantiates a new TravelRuleWithdrawLegalEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTravelRuleWithdrawLegalEntity(selectedEntityType SelectedEntityType, legalName string) *TravelRuleWithdrawLegalEntity {
	this := TravelRuleWithdrawLegalEntity{}
	this.SelectedEntityType = selectedEntityType
	this.LegalName = legalName
	return &this
}

// NewTravelRuleWithdrawLegalEntityWithDefaults instantiates a new TravelRuleWithdrawLegalEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTravelRuleWithdrawLegalEntityWithDefaults() *TravelRuleWithdrawLegalEntity {
	this := TravelRuleWithdrawLegalEntity{}
	return &this
}

// GetSelectedEntityType returns the SelectedEntityType field value
func (o *TravelRuleWithdrawLegalEntity) GetSelectedEntityType() SelectedEntityType {
	if o == nil {
		var ret SelectedEntityType
		return ret
	}

	return o.SelectedEntityType
}

// GetSelectedEntityTypeOk returns a tuple with the SelectedEntityType field value
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawLegalEntity) GetSelectedEntityTypeOk() (*SelectedEntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectedEntityType, true
}

// SetSelectedEntityType sets field value
func (o *TravelRuleWithdrawLegalEntity) SetSelectedEntityType(v SelectedEntityType) {
	o.SelectedEntityType = v
}

// GetLegalName returns the LegalName field value
func (o *TravelRuleWithdrawLegalEntity) GetLegalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawLegalEntity) GetLegalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegalName, true
}

// SetLegalName sets field value
func (o *TravelRuleWithdrawLegalEntity) SetLegalName(v string) {
	o.LegalName = v
}

// GetDateOfIncorporation returns the DateOfIncorporation field value if set, zero value otherwise.
func (o *TravelRuleWithdrawLegalEntity) GetDateOfIncorporation() string {
	if o == nil || IsNil(o.DateOfIncorporation) {
		var ret string
		return ret
	}
	return *o.DateOfIncorporation
}

// GetDateOfIncorporationOk returns a tuple with the DateOfIncorporation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawLegalEntity) GetDateOfIncorporationOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfIncorporation) {
		return nil, false
	}
	return o.DateOfIncorporation, true
}

// HasDateOfIncorporation returns a boolean if a field has been set.
func (o *TravelRuleWithdrawLegalEntity) HasDateOfIncorporation() bool {
	if o != nil && !IsNil(o.DateOfIncorporation) {
		return true
	}

	return false
}

// SetDateOfIncorporation gets a reference to the given string and assigns it to the DateOfIncorporation field.
func (o *TravelRuleWithdrawLegalEntity) SetDateOfIncorporation(v string) {
	o.DateOfIncorporation = &v
}

// GetPlaceOfIncorporation returns the PlaceOfIncorporation field value if set, zero value otherwise.
func (o *TravelRuleWithdrawLegalEntity) GetPlaceOfIncorporation() string {
	if o == nil || IsNil(o.PlaceOfIncorporation) {
		var ret string
		return ret
	}
	return *o.PlaceOfIncorporation
}

// GetPlaceOfIncorporationOk returns a tuple with the PlaceOfIncorporation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TravelRuleWithdrawLegalEntity) GetPlaceOfIncorporationOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfIncorporation) {
		return nil, false
	}
	return o.PlaceOfIncorporation, true
}

// HasPlaceOfIncorporation returns a boolean if a field has been set.
func (o *TravelRuleWithdrawLegalEntity) HasPlaceOfIncorporation() bool {
	if o != nil && !IsNil(o.PlaceOfIncorporation) {
		return true
	}

	return false
}

// SetPlaceOfIncorporation gets a reference to the given string and assigns it to the PlaceOfIncorporation field.
func (o *TravelRuleWithdrawLegalEntity) SetPlaceOfIncorporation(v string) {
	o.PlaceOfIncorporation = &v
}

func (o TravelRuleWithdrawLegalEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TravelRuleWithdrawLegalEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["selected_entity_type"] = o.SelectedEntityType
	toSerialize["legal_name"] = o.LegalName
	if !IsNil(o.DateOfIncorporation) {
		toSerialize["date_of_incorporation"] = o.DateOfIncorporation
	}
	if !IsNil(o.PlaceOfIncorporation) {
		toSerialize["place_of_incorporation"] = o.PlaceOfIncorporation
	}
	return toSerialize, nil
}

func (o *TravelRuleWithdrawLegalEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selected_entity_type",
		"legal_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTravelRuleWithdrawLegalEntity := _TravelRuleWithdrawLegalEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTravelRuleWithdrawLegalEntity)

	if err != nil {
		return err
	}

	*o = TravelRuleWithdrawLegalEntity(varTravelRuleWithdrawLegalEntity)

	return err
}

type NullableTravelRuleWithdrawLegalEntity struct {
	value *TravelRuleWithdrawLegalEntity
	isSet bool
}

func (v NullableTravelRuleWithdrawLegalEntity) Get() *TravelRuleWithdrawLegalEntity {
	return v.value
}

func (v *NullableTravelRuleWithdrawLegalEntity) Set(val *TravelRuleWithdrawLegalEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTravelRuleWithdrawLegalEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTravelRuleWithdrawLegalEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTravelRuleWithdrawLegalEntity(val *TravelRuleWithdrawLegalEntity) *NullableTravelRuleWithdrawLegalEntity {
	return &NullableTravelRuleWithdrawLegalEntity{value: val, isSet: true}
}

func (v NullableTravelRuleWithdrawLegalEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTravelRuleWithdrawLegalEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


