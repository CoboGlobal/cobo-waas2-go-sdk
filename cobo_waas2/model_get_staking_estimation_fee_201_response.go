/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// GetStakingEstimationFee201Response - struct for GetStakingEstimationFee201Response
type GetStakingEstimationFee201Response struct {
	BabylonStakeEstimatedFee *BabylonStakeEstimatedFee
	EthStakeEstimatedFee *EthStakeEstimatedFee
}

// BabylonStakeEstimatedFeeAsGetStakingEstimationFee201Response is a convenience function that returns BabylonStakeEstimatedFee wrapped in GetStakingEstimationFee201Response
func BabylonStakeEstimatedFeeAsGetStakingEstimationFee201Response(v *BabylonStakeEstimatedFee) GetStakingEstimationFee201Response {
	return GetStakingEstimationFee201Response{
		BabylonStakeEstimatedFee: v,
	}
}

// EthStakeEstimatedFeeAsGetStakingEstimationFee201Response is a convenience function that returns EthStakeEstimatedFee wrapped in GetStakingEstimationFee201Response
func EthStakeEstimatedFeeAsGetStakingEstimationFee201Response(v *EthStakeEstimatedFee) GetStakingEstimationFee201Response {
	return GetStakingEstimationFee201Response{
		EthStakeEstimatedFee: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetStakingEstimationFee201Response) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Babylon'
	if jsonDict["pool_type"] == "Babylon" {
		// try to unmarshal JSON data into BabylonStakeEstimatedFee
		err = json.Unmarshal(data, &dst.BabylonStakeEstimatedFee)
		if err == nil {
			return nil // data stored in dst.BabylonStakeEstimatedFee, return on the first match
		} else {
			dst.BabylonStakeEstimatedFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFee201Response as BabylonStakeEstimatedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ETHBeacon'
	if jsonDict["pool_type"] == "ETHBeacon" {
		// try to unmarshal JSON data into EthStakeEstimatedFee
		err = json.Unmarshal(data, &dst.EthStakeEstimatedFee)
		if err == nil {
			return nil // data stored in dst.EthStakeEstimatedFee, return on the first match
		} else {
			dst.EthStakeEstimatedFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFee201Response as EthStakeEstimatedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BabylonStakeEstimatedFee'
	if jsonDict["pool_type"] == "BabylonStakeEstimatedFee" {
		// try to unmarshal JSON data into BabylonStakeEstimatedFee
		err = json.Unmarshal(data, &dst.BabylonStakeEstimatedFee)
		if err == nil {
			return nil // data stored in dst.BabylonStakeEstimatedFee, return on the first match
		} else {
			dst.BabylonStakeEstimatedFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFee201Response as BabylonStakeEstimatedFee: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EthStakeEstimatedFee'
	if jsonDict["pool_type"] == "EthStakeEstimatedFee" {
		// try to unmarshal JSON data into EthStakeEstimatedFee
		err = json.Unmarshal(data, &dst.EthStakeEstimatedFee)
		if err == nil {
			return nil // data stored in dst.EthStakeEstimatedFee, return on the first match
		} else {
			dst.EthStakeEstimatedFee = nil
			return fmt.Errorf("failed to unmarshal GetStakingEstimationFee201Response as EthStakeEstimatedFee: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetStakingEstimationFee201Response) MarshalJSON() ([]byte, error) {
	if src.BabylonStakeEstimatedFee != nil {
		return json.Marshal(&src.BabylonStakeEstimatedFee)
	}

	if src.EthStakeEstimatedFee != nil {
		return json.Marshal(&src.EthStakeEstimatedFee)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetStakingEstimationFee201Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BabylonStakeEstimatedFee != nil {
		return obj.BabylonStakeEstimatedFee
	}

	if obj.EthStakeEstimatedFee != nil {
		return obj.EthStakeEstimatedFee
	}

	// all schemas are nil
	return nil
}

type NullableGetStakingEstimationFee201Response struct {
	value *GetStakingEstimationFee201Response
	isSet bool
}

func (v NullableGetStakingEstimationFee201Response) Get() *GetStakingEstimationFee201Response {
	return v.value
}

func (v *NullableGetStakingEstimationFee201Response) Set(val *GetStakingEstimationFee201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStakingEstimationFee201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStakingEstimationFee201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStakingEstimationFee201Response(val *GetStakingEstimationFee201Response) *NullableGetStakingEstimationFee201Response {
	return &NullableGetStakingEstimationFee201Response{value: val, isSet: true}
}

func (v NullableGetStakingEstimationFee201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStakingEstimationFee201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


