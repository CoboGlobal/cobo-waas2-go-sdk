/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
)

// checks if the TransactionUtxo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionUtxo{}

// TransactionUtxo The UTXO information.
type TransactionUtxo struct {
	// The transaction hash of UTXO to be consumed in the transaction.
	TxHash *string `json:"tx_hash,omitempty"`
	// The output index of the UTXO.
	VoutN *int32 `json:"vout_n,omitempty"`
}

// NewTransactionUtxo instantiates a new TransactionUtxo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionUtxo() *TransactionUtxo {
	this := TransactionUtxo{}
	return &this
}

// NewTransactionUtxoWithDefaults instantiates a new TransactionUtxo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionUtxoWithDefaults() *TransactionUtxo {
	this := TransactionUtxo{}
	return &this
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *TransactionUtxo) GetTxHash() string {
	if o == nil || IsNil(o.TxHash) {
		var ret string
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionUtxo) GetTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *TransactionUtxo) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given string and assigns it to the TxHash field.
func (o *TransactionUtxo) SetTxHash(v string) {
	o.TxHash = &v
}

// GetVoutN returns the VoutN field value if set, zero value otherwise.
func (o *TransactionUtxo) GetVoutN() int32 {
	if o == nil || IsNil(o.VoutN) {
		var ret int32
		return ret
	}
	return *o.VoutN
}

// GetVoutNOk returns a tuple with the VoutN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionUtxo) GetVoutNOk() (*int32, bool) {
	if o == nil || IsNil(o.VoutN) {
		return nil, false
	}
	return o.VoutN, true
}

// HasVoutN returns a boolean if a field has been set.
func (o *TransactionUtxo) HasVoutN() bool {
	if o != nil && !IsNil(o.VoutN) {
		return true
	}

	return false
}

// SetVoutN gets a reference to the given int32 and assigns it to the VoutN field.
func (o *TransactionUtxo) SetVoutN(v int32) {
	o.VoutN = &v
}

func (o TransactionUtxo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionUtxo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TxHash) {
		toSerialize["tx_hash"] = o.TxHash
	}
	if !IsNil(o.VoutN) {
		toSerialize["vout_n"] = o.VoutN
	}
	return toSerialize, nil
}

type NullableTransactionUtxo struct {
	value *TransactionUtxo
	isSet bool
}

func (v NullableTransactionUtxo) Get() *TransactionUtxo {
	return v.value
}

func (v *NullableTransactionUtxo) Set(val *TransactionUtxo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionUtxo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionUtxo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionUtxo(val *TransactionUtxo) *NullableTransactionUtxo {
	return &NullableTransactionUtxo{value: val, isSet: true}
}

func (v NullableTransactionUtxo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionUtxo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


