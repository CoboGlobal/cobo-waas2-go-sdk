/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// PaymentSubscriptionActionStatus The current status of a subscription action. - `Pending`: The subscription action has been created and is awaiting processing. - `Processing`: The subscription action is being processed. - `Completed`: The subscription action success. - `Failed`: The subscription action could not be completed due to an error. 
type PaymentSubscriptionActionStatus string

// List of PaymentSubscriptionActionStatus
const (
	PAYMENTSUBSCRIPTIONACTIONSTATUS_PENDING PaymentSubscriptionActionStatus = "Pending"
	PAYMENTSUBSCRIPTIONACTIONSTATUS_PROCESSING PaymentSubscriptionActionStatus = "Processing"
	PAYMENTSUBSCRIPTIONACTIONSTATUS_COMPLETED PaymentSubscriptionActionStatus = "Completed"
	PAYMENTSUBSCRIPTIONACTIONSTATUS_FAILED PaymentSubscriptionActionStatus = "Failed"
)

// All allowed values of PaymentSubscriptionActionStatus enum
var AllowedPaymentSubscriptionActionStatusEnumValues = []PaymentSubscriptionActionStatus{
	"Pending",
	"Processing",
	"Completed",
	"Failed",
}

func (v *PaymentSubscriptionActionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentSubscriptionActionStatus(value)
	for _, existing := range AllowedPaymentSubscriptionActionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = PaymentSubscriptionActionStatus("unknown")
	return nil
}

// NewPaymentSubscriptionActionStatusFromValue returns a pointer to a valid PaymentSubscriptionActionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentSubscriptionActionStatusFromValue(v string) (*PaymentSubscriptionActionStatus, error) {
	ev := PaymentSubscriptionActionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentSubscriptionActionStatus: valid values are %v", v, AllowedPaymentSubscriptionActionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentSubscriptionActionStatus) IsValid() bool {
	for _, existing := range AllowedPaymentSubscriptionActionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentSubscriptionActionStatus value
func (v PaymentSubscriptionActionStatus) Ptr() *PaymentSubscriptionActionStatus {
	return &v
}

type NullablePaymentSubscriptionActionStatus struct {
	value *PaymentSubscriptionActionStatus
	isSet bool
}

func (v NullablePaymentSubscriptionActionStatus) Get() *PaymentSubscriptionActionStatus {
	return v.value
}

func (v *NullablePaymentSubscriptionActionStatus) Set(val *PaymentSubscriptionActionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSubscriptionActionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSubscriptionActionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSubscriptionActionStatus(val *PaymentSubscriptionActionStatus) *NullablePaymentSubscriptionActionStatus {
	return &NullablePaymentSubscriptionActionStatus{value: val, isSet: true}
}

func (v NullablePaymentSubscriptionActionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSubscriptionActionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

