/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TransactionStellarContractType The type of the stellar contract type. 
type TransactionStellarContractType string

// List of TransactionStellarContractType
const (
	TRANSACTIONSTELLARCONTRACTTYPE_TRUST_LINE TransactionStellarContractType = "TrustLine"
)

// All allowed values of TransactionStellarContractType enum
var AllowedTransactionStellarContractTypeEnumValues = []TransactionStellarContractType{
	"TrustLine",
}

func (v *TransactionStellarContractType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionStellarContractType(value)
	for _, existing := range AllowedTransactionStellarContractTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
	*v = TransactionStellarContractType("unknown")
	return nil
}

// NewTransactionStellarContractTypeFromValue returns a pointer to a valid TransactionStellarContractType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionStellarContractTypeFromValue(v string) (*TransactionStellarContractType, error) {
	ev := TransactionStellarContractType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionStellarContractType: valid values are %v", v, AllowedTransactionStellarContractTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionStellarContractType) IsValid() bool {
	for _, existing := range AllowedTransactionStellarContractTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionStellarContractType value
func (v TransactionStellarContractType) Ptr() *TransactionStellarContractType {
	return &v
}

type NullableTransactionStellarContractType struct {
	value *TransactionStellarContractType
	isSet bool
}

func (v NullableTransactionStellarContractType) Get() *TransactionStellarContractType {
	return v.value
}

func (v *NullableTransactionStellarContractType) Set(val *TransactionStellarContractType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStellarContractType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStellarContractType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStellarContractType(val *TransactionStellarContractType) *NullableTransactionStellarContractType {
	return &NullableTransactionStellarContractType{value: val, isSet: true}
}

func (v NullableTransactionStellarContractType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStellarContractType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

