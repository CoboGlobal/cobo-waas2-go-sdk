/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PayerAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayerAccount{}

// PayerAccount struct for PayerAccount
type PayerAccount struct {
	// Merchant ID, e.g., \"M1001\"
	MerchantId string `json:"merchant_id"`
	// Unique payer identifier on the Cobo side, auto-generated by the system. 
	PayerId string `json:"payer_id"`
	// Developer fee rate for this token, e.g., \"0.01\" represents 1%
	DeveloperFeeRate string `json:"developer_fee_rate"`
	// The created time of the payer, represented as a UNIX timestamp in seconds.
	CreatedTimestamp *int32 `json:"created_timestamp,omitempty"`
	// The updated time of the payer, represented as a UNIX timestamp in seconds.
	UpdatedTimestamp *int32 `json:"updated_timestamp,omitempty"`
	// An array of accounts associated with this payer.
	Accounts []Account `json:"accounts,omitempty"`
}

type _PayerAccount PayerAccount

// NewPayerAccount instantiates a new PayerAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayerAccount(merchantId string, payerId string, developerFeeRate string) *PayerAccount {
	this := PayerAccount{}
	this.MerchantId = merchantId
	this.PayerId = payerId
	this.DeveloperFeeRate = developerFeeRate
	return &this
}

// NewPayerAccountWithDefaults instantiates a new PayerAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayerAccountWithDefaults() *PayerAccount {
	this := PayerAccount{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *PayerAccount) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *PayerAccount) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetPayerId returns the PayerId field value
func (o *PayerAccount) GetPayerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayerId
}

// GetPayerIdOk returns a tuple with the PayerId field value
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetPayerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayerId, true
}

// SetPayerId sets field value
func (o *PayerAccount) SetPayerId(v string) {
	o.PayerId = v
}

// GetDeveloperFeeRate returns the DeveloperFeeRate field value
func (o *PayerAccount) GetDeveloperFeeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperFeeRate
}

// GetDeveloperFeeRateOk returns a tuple with the DeveloperFeeRate field value
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetDeveloperFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperFeeRate, true
}

// SetDeveloperFeeRate sets field value
func (o *PayerAccount) SetDeveloperFeeRate(v string) {
	o.DeveloperFeeRate = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *PayerAccount) GetCreatedTimestamp() int32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *PayerAccount) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int32 and assigns it to the CreatedTimestamp field.
func (o *PayerAccount) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *PayerAccount) GetUpdatedTimestamp() int32 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int32
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetUpdatedTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *PayerAccount) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int32 and assigns it to the UpdatedTimestamp field.
func (o *PayerAccount) SetUpdatedTimestamp(v int32) {
	o.UpdatedTimestamp = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PayerAccount) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayerAccount) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *PayerAccount) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *PayerAccount) SetAccounts(v []Account) {
	o.Accounts = v
}

func (o PayerAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayerAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchant_id"] = o.MerchantId
	toSerialize["payer_id"] = o.PayerId
	toSerialize["developer_fee_rate"] = o.DeveloperFeeRate
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	return toSerialize, nil
}

func (o *PayerAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchant_id",
		"payer_id",
		"developer_fee_rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayerAccount := _PayerAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayerAccount)

	if err != nil {
		return err
	}

	*o = PayerAccount(varPayerAccount)

	return err
}

type NullablePayerAccount struct {
	value *PayerAccount
	isSet bool
}

func (v NullablePayerAccount) Get() *PayerAccount {
	return v.value
}

func (v *NullablePayerAccount) Set(val *PayerAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePayerAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePayerAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayerAccount(val *PayerAccount) *NullablePayerAccount {
	return &NullablePayerAccount{value: val, isSet: true}
}

func (v NullablePayerAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayerAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


