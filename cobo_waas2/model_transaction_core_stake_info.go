/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionCoreStakeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCoreStakeInfo{}

// TransactionCoreStakeInfo The core stake information.
type TransactionCoreStakeInfo struct {
	ExtraType TransactionExtraType `json:"extra_type"`
	// The origin staking amount.
	StakeAmount *string `json:"stake_amount,omitempty"`
	// The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
	Timelock *int32 `json:"timelock,omitempty"`
	// The change address on the Bitcoin chain. If not provided, the source wallet's address will be used as the change address.
	ChangeAddress *string `json:"change_address,omitempty"`
	// The validator's EVM address.
	ValidatorAddress *string `json:"validator_address,omitempty"`
	// The EVM address to receive staking rewards.
	RewardAddress *string `json:"reward_address,omitempty"`
}

type _TransactionCoreStakeInfo TransactionCoreStakeInfo

// NewTransactionCoreStakeInfo instantiates a new TransactionCoreStakeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCoreStakeInfo(extraType TransactionExtraType) *TransactionCoreStakeInfo {
	this := TransactionCoreStakeInfo{}
	this.ExtraType = extraType
	return &this
}

// NewTransactionCoreStakeInfoWithDefaults instantiates a new TransactionCoreStakeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCoreStakeInfoWithDefaults() *TransactionCoreStakeInfo {
	this := TransactionCoreStakeInfo{}
	return &this
}

// GetExtraType returns the ExtraType field value
func (o *TransactionCoreStakeInfo) GetExtraType() TransactionExtraType {
	if o == nil {
		var ret TransactionExtraType
		return ret
	}

	return o.ExtraType
}

// GetExtraTypeOk returns a tuple with the ExtraType field value
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetExtraTypeOk() (*TransactionExtraType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraType, true
}

// SetExtraType sets field value
func (o *TransactionCoreStakeInfo) SetExtraType(v TransactionExtraType) {
	o.ExtraType = v
}

// GetStakeAmount returns the StakeAmount field value if set, zero value otherwise.
func (o *TransactionCoreStakeInfo) GetStakeAmount() string {
	if o == nil || IsNil(o.StakeAmount) {
		var ret string
		return ret
	}
	return *o.StakeAmount
}

// GetStakeAmountOk returns a tuple with the StakeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetStakeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.StakeAmount) {
		return nil, false
	}
	return o.StakeAmount, true
}

// HasStakeAmount returns a boolean if a field has been set.
func (o *TransactionCoreStakeInfo) HasStakeAmount() bool {
	if o != nil && !IsNil(o.StakeAmount) {
		return true
	}

	return false
}

// SetStakeAmount gets a reference to the given string and assigns it to the StakeAmount field.
func (o *TransactionCoreStakeInfo) SetStakeAmount(v string) {
	o.StakeAmount = &v
}

// GetTimelock returns the Timelock field value if set, zero value otherwise.
func (o *TransactionCoreStakeInfo) GetTimelock() int32 {
	if o == nil || IsNil(o.Timelock) {
		var ret int32
		return ret
	}
	return *o.Timelock
}

// GetTimelockOk returns a tuple with the Timelock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetTimelockOk() (*int32, bool) {
	if o == nil || IsNil(o.Timelock) {
		return nil, false
	}
	return o.Timelock, true
}

// HasTimelock returns a boolean if a field has been set.
func (o *TransactionCoreStakeInfo) HasTimelock() bool {
	if o != nil && !IsNil(o.Timelock) {
		return true
	}

	return false
}

// SetTimelock gets a reference to the given int32 and assigns it to the Timelock field.
func (o *TransactionCoreStakeInfo) SetTimelock(v int32) {
	o.Timelock = &v
}

// GetChangeAddress returns the ChangeAddress field value if set, zero value otherwise.
func (o *TransactionCoreStakeInfo) GetChangeAddress() string {
	if o == nil || IsNil(o.ChangeAddress) {
		var ret string
		return ret
	}
	return *o.ChangeAddress
}

// GetChangeAddressOk returns a tuple with the ChangeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetChangeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeAddress) {
		return nil, false
	}
	return o.ChangeAddress, true
}

// HasChangeAddress returns a boolean if a field has been set.
func (o *TransactionCoreStakeInfo) HasChangeAddress() bool {
	if o != nil && !IsNil(o.ChangeAddress) {
		return true
	}

	return false
}

// SetChangeAddress gets a reference to the given string and assigns it to the ChangeAddress field.
func (o *TransactionCoreStakeInfo) SetChangeAddress(v string) {
	o.ChangeAddress = &v
}

// GetValidatorAddress returns the ValidatorAddress field value if set, zero value otherwise.
func (o *TransactionCoreStakeInfo) GetValidatorAddress() string {
	if o == nil || IsNil(o.ValidatorAddress) {
		var ret string
		return ret
	}
	return *o.ValidatorAddress
}

// GetValidatorAddressOk returns a tuple with the ValidatorAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetValidatorAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorAddress) {
		return nil, false
	}
	return o.ValidatorAddress, true
}

// HasValidatorAddress returns a boolean if a field has been set.
func (o *TransactionCoreStakeInfo) HasValidatorAddress() bool {
	if o != nil && !IsNil(o.ValidatorAddress) {
		return true
	}

	return false
}

// SetValidatorAddress gets a reference to the given string and assigns it to the ValidatorAddress field.
func (o *TransactionCoreStakeInfo) SetValidatorAddress(v string) {
	o.ValidatorAddress = &v
}

// GetRewardAddress returns the RewardAddress field value if set, zero value otherwise.
func (o *TransactionCoreStakeInfo) GetRewardAddress() string {
	if o == nil || IsNil(o.RewardAddress) {
		var ret string
		return ret
	}
	return *o.RewardAddress
}

// GetRewardAddressOk returns a tuple with the RewardAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCoreStakeInfo) GetRewardAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RewardAddress) {
		return nil, false
	}
	return o.RewardAddress, true
}

// HasRewardAddress returns a boolean if a field has been set.
func (o *TransactionCoreStakeInfo) HasRewardAddress() bool {
	if o != nil && !IsNil(o.RewardAddress) {
		return true
	}

	return false
}

// SetRewardAddress gets a reference to the given string and assigns it to the RewardAddress field.
func (o *TransactionCoreStakeInfo) SetRewardAddress(v string) {
	o.RewardAddress = &v
}

func (o TransactionCoreStakeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCoreStakeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extra_type"] = o.ExtraType
	if !IsNil(o.StakeAmount) {
		toSerialize["stake_amount"] = o.StakeAmount
	}
	if !IsNil(o.Timelock) {
		toSerialize["timelock"] = o.Timelock
	}
	if !IsNil(o.ChangeAddress) {
		toSerialize["change_address"] = o.ChangeAddress
	}
	if !IsNil(o.ValidatorAddress) {
		toSerialize["validator_address"] = o.ValidatorAddress
	}
	if !IsNil(o.RewardAddress) {
		toSerialize["reward_address"] = o.RewardAddress
	}
	return toSerialize, nil
}

func (o *TransactionCoreStakeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extra_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionCoreStakeInfo := _TransactionCoreStakeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionCoreStakeInfo)

	if err != nil {
		return err
	}

	*o = TransactionCoreStakeInfo(varTransactionCoreStakeInfo)

	return err
}

type NullableTransactionCoreStakeInfo struct {
	value *TransactionCoreStakeInfo
	isSet bool
}

func (v NullableTransactionCoreStakeInfo) Get() *TransactionCoreStakeInfo {
	return v.value
}

func (v *NullableTransactionCoreStakeInfo) Set(val *TransactionCoreStakeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCoreStakeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCoreStakeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCoreStakeInfo(val *TransactionCoreStakeInfo) *NullableTransactionCoreStakeInfo {
	return &NullableTransactionCoreStakeInfo{value: val, isSet: true}
}

func (v NullableTransactionCoreStakeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCoreStakeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


