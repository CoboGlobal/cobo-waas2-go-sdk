/*
Cobo Wallet as a Service 2.0

Contact: help@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cobo_waas2

import (
	"encoding/json"
	"fmt"
)

// TravelRuleDepositExchangesOrVASPEntityInfo - struct for TravelRuleDepositExchangesOrVASPEntityInfo
type TravelRuleDepositExchangesOrVASPEntityInfo struct {
	TravelRuleDepositLegalEntity *TravelRuleDepositLegalEntity
	TravelRuleDepositNaturalEntity *TravelRuleDepositNaturalEntity
}

// TravelRuleDepositLegalEntityAsTravelRuleDepositExchangesOrVASPEntityInfo is a convenience function that returns TravelRuleDepositLegalEntity wrapped in TravelRuleDepositExchangesOrVASPEntityInfo
func TravelRuleDepositLegalEntityAsTravelRuleDepositExchangesOrVASPEntityInfo(v *TravelRuleDepositLegalEntity) TravelRuleDepositExchangesOrVASPEntityInfo {
	return TravelRuleDepositExchangesOrVASPEntityInfo{
		TravelRuleDepositLegalEntity: v,
	}
}

// TravelRuleDepositNaturalEntityAsTravelRuleDepositExchangesOrVASPEntityInfo is a convenience function that returns TravelRuleDepositNaturalEntity wrapped in TravelRuleDepositExchangesOrVASPEntityInfo
func TravelRuleDepositNaturalEntityAsTravelRuleDepositExchangesOrVASPEntityInfo(v *TravelRuleDepositNaturalEntity) TravelRuleDepositExchangesOrVASPEntityInfo {
	return TravelRuleDepositExchangesOrVASPEntityInfo{
		TravelRuleDepositNaturalEntity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TravelRuleDepositExchangesOrVASPEntityInfo) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'LEGAL'
	if jsonDict["selected_entity_type"] == "LEGAL" {
		// try to unmarshal JSON data into TravelRuleDepositLegalEntity
		err = json.Unmarshal(data, &dst.TravelRuleDepositLegalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleDepositLegalEntity, return on the first match
		} else {
			dst.TravelRuleDepositLegalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleDepositExchangesOrVASPEntityInfo as TravelRuleDepositLegalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NATURAL'
	if jsonDict["selected_entity_type"] == "NATURAL" {
		// try to unmarshal JSON data into TravelRuleDepositNaturalEntity
		err = json.Unmarshal(data, &dst.TravelRuleDepositNaturalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleDepositNaturalEntity, return on the first match
		} else {
			dst.TravelRuleDepositNaturalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleDepositExchangesOrVASPEntityInfo as TravelRuleDepositNaturalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TravelRuleDepositLegalEntity'
	if jsonDict["selected_entity_type"] == "TravelRuleDepositLegalEntity" {
		// try to unmarshal JSON data into TravelRuleDepositLegalEntity
		err = json.Unmarshal(data, &dst.TravelRuleDepositLegalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleDepositLegalEntity, return on the first match
		} else {
			dst.TravelRuleDepositLegalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleDepositExchangesOrVASPEntityInfo as TravelRuleDepositLegalEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TravelRuleDepositNaturalEntity'
	if jsonDict["selected_entity_type"] == "TravelRuleDepositNaturalEntity" {
		// try to unmarshal JSON data into TravelRuleDepositNaturalEntity
		err = json.Unmarshal(data, &dst.TravelRuleDepositNaturalEntity)
		if err == nil {
			return nil // data stored in dst.TravelRuleDepositNaturalEntity, return on the first match
		} else {
			dst.TravelRuleDepositNaturalEntity = nil
			return fmt.Errorf("failed to unmarshal TravelRuleDepositExchangesOrVASPEntityInfo as TravelRuleDepositNaturalEntity: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TravelRuleDepositExchangesOrVASPEntityInfo) MarshalJSON() ([]byte, error) {
	if src.TravelRuleDepositLegalEntity != nil {
		return json.Marshal(&src.TravelRuleDepositLegalEntity)
	}

	if src.TravelRuleDepositNaturalEntity != nil {
		return json.Marshal(&src.TravelRuleDepositNaturalEntity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TravelRuleDepositExchangesOrVASPEntityInfo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TravelRuleDepositLegalEntity != nil {
		return obj.TravelRuleDepositLegalEntity
	}

	if obj.TravelRuleDepositNaturalEntity != nil {
		return obj.TravelRuleDepositNaturalEntity
	}

	// all schemas are nil
	return nil
}

type NullableTravelRuleDepositExchangesOrVASPEntityInfo struct {
	value *TravelRuleDepositExchangesOrVASPEntityInfo
	isSet bool
}

func (v NullableTravelRuleDepositExchangesOrVASPEntityInfo) Get() *TravelRuleDepositExchangesOrVASPEntityInfo {
	return v.value
}

func (v *NullableTravelRuleDepositExchangesOrVASPEntityInfo) Set(val *TravelRuleDepositExchangesOrVASPEntityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTravelRuleDepositExchangesOrVASPEntityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTravelRuleDepositExchangesOrVASPEntityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTravelRuleDepositExchangesOrVASPEntityInfo(val *TravelRuleDepositExchangesOrVASPEntityInfo) *NullableTravelRuleDepositExchangesOrVASPEntityInfo {
	return &NullableTravelRuleDepositExchangesOrVASPEntityInfo{value: val, isSet: true}
}

func (v NullableTravelRuleDepositExchangesOrVASPEntityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTravelRuleDepositExchangesOrVASPEntityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


