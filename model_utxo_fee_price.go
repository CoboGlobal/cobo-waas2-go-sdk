/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UtxoFeePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtxoFeePrice{}

// UtxoFeePrice The legacy fee data for estimate fees or transfer.
type UtxoFeePrice struct {
	// ID of the fee token. Unique in all chains scope.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// The fee rate, unit sat/vB.
	FeeRate string `json:"fee_rate"`
	FeeType FeeType `json:"fee_type"`
}

type _UtxoFeePrice UtxoFeePrice

// NewUtxoFeePrice instantiates a new UtxoFeePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtxoFeePrice(feeRate string, feeType FeeType) *UtxoFeePrice {
	this := UtxoFeePrice{}
	this.FeeRate = feeRate
	this.FeeType = feeType
	return &this
}

// NewUtxoFeePriceWithDefaults instantiates a new UtxoFeePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtxoFeePriceWithDefaults() *UtxoFeePrice {
	this := UtxoFeePrice{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *UtxoFeePrice) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtxoFeePrice) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *UtxoFeePrice) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *UtxoFeePrice) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetFeeRate returns the FeeRate field value
func (o *UtxoFeePrice) GetFeeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeRate
}

// GetFeeRateOk returns a tuple with the FeeRate field value
// and a boolean to check if the value has been set.
func (o *UtxoFeePrice) GetFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeRate, true
}

// SetFeeRate sets field value
func (o *UtxoFeePrice) SetFeeRate(v string) {
	o.FeeRate = v
}

// GetFeeType returns the FeeType field value
func (o *UtxoFeePrice) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *UtxoFeePrice) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *UtxoFeePrice) SetFeeType(v FeeType) {
	o.FeeType = v
}

func (o UtxoFeePrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtxoFeePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	toSerialize["fee_rate"] = o.FeeRate
	toSerialize["fee_type"] = o.FeeType
	return toSerialize, nil
}

func (o *UtxoFeePrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_rate",
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUtxoFeePrice := _UtxoFeePrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUtxoFeePrice)

	if err != nil {
		return err
	}

	*o = UtxoFeePrice(varUtxoFeePrice)

	return err
}

type NullableUtxoFeePrice struct {
	value *UtxoFeePrice
	isSet bool
}

func (v NullableUtxoFeePrice) Get() *UtxoFeePrice {
	return v.value
}

func (v *NullableUtxoFeePrice) Set(val *UtxoFeePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableUtxoFeePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableUtxoFeePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtxoFeePrice(val *UtxoFeePrice) *NullableUtxoFeePrice {
	return &NullableUtxoFeePrice{value: val, isSet: true}
}

func (v NullableUtxoFeePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtxoFeePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


