/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// CreatedWallet - struct for CreatedWallet
type CreatedWallet struct {
	CreateCustodialWallet *CreateCustodialWallet
	CreateExchangeWallet *CreateExchangeWallet
	CreateMpcWallet *CreateMpcWallet
	CreateSmartContractWallet *CreateSmartContractWallet
}

// CreateCustodialWalletAsCreatedWallet is a convenience function that returns CreateCustodialWallet wrapped in CreatedWallet
func CreateCustodialWalletAsCreatedWallet(v *CreateCustodialWallet) CreatedWallet {
	return CreatedWallet{
		CreateCustodialWallet: v,
	}
}

// CreateExchangeWalletAsCreatedWallet is a convenience function that returns CreateExchangeWallet wrapped in CreatedWallet
func CreateExchangeWalletAsCreatedWallet(v *CreateExchangeWallet) CreatedWallet {
	return CreatedWallet{
		CreateExchangeWallet: v,
	}
}

// CreateMpcWalletAsCreatedWallet is a convenience function that returns CreateMpcWallet wrapped in CreatedWallet
func CreateMpcWalletAsCreatedWallet(v *CreateMpcWallet) CreatedWallet {
	return CreatedWallet{
		CreateMpcWallet: v,
	}
}

// CreateSmartContractWalletAsCreatedWallet is a convenience function that returns CreateSmartContractWallet wrapped in CreatedWallet
func CreateSmartContractWalletAsCreatedWallet(v *CreateSmartContractWallet) CreatedWallet {
	return CreatedWallet{
		CreateSmartContractWallet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreatedWallet) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Custodial'
	if jsonDict["type"] == "Custodial" {
		// try to unmarshal JSON data into CreateCustodialWallet
		err = json.Unmarshal(data, &dst.CreateCustodialWallet)
		if err == nil {
			return nil // data stored in dst.CreateCustodialWallet, return on the first match
		} else {
			dst.CreateCustodialWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateCustodialWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Exchange'
	if jsonDict["type"] == "Exchange" {
		// try to unmarshal JSON data into CreateExchangeWallet
		err = json.Unmarshal(data, &dst.CreateExchangeWallet)
		if err == nil {
			return nil // data stored in dst.CreateExchangeWallet, return on the first match
		} else {
			dst.CreateExchangeWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateExchangeWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MPC'
	if jsonDict["type"] == "MPC" {
		// try to unmarshal JSON data into CreateMpcWallet
		err = json.Unmarshal(data, &dst.CreateMpcWallet)
		if err == nil {
			return nil // data stored in dst.CreateMpcWallet, return on the first match
		} else {
			dst.CreateMpcWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateMpcWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SmartContract'
	if jsonDict["type"] == "SmartContract" {
		// try to unmarshal JSON data into CreateSmartContractWallet
		err = json.Unmarshal(data, &dst.CreateSmartContractWallet)
		if err == nil {
			return nil // data stored in dst.CreateSmartContractWallet, return on the first match
		} else {
			dst.CreateSmartContractWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateSmartContractWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateCustodialWallet'
	if jsonDict["type"] == "CreateCustodialWallet" {
		// try to unmarshal JSON data into CreateCustodialWallet
		err = json.Unmarshal(data, &dst.CreateCustodialWallet)
		if err == nil {
			return nil // data stored in dst.CreateCustodialWallet, return on the first match
		} else {
			dst.CreateCustodialWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateCustodialWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateExchangeWallet'
	if jsonDict["type"] == "CreateExchangeWallet" {
		// try to unmarshal JSON data into CreateExchangeWallet
		err = json.Unmarshal(data, &dst.CreateExchangeWallet)
		if err == nil {
			return nil // data stored in dst.CreateExchangeWallet, return on the first match
		} else {
			dst.CreateExchangeWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateExchangeWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateMpcWallet'
	if jsonDict["type"] == "CreateMpcWallet" {
		// try to unmarshal JSON data into CreateMpcWallet
		err = json.Unmarshal(data, &dst.CreateMpcWallet)
		if err == nil {
			return nil // data stored in dst.CreateMpcWallet, return on the first match
		} else {
			dst.CreateMpcWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateMpcWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateSmartContractWallet'
	if jsonDict["type"] == "CreateSmartContractWallet" {
		// try to unmarshal JSON data into CreateSmartContractWallet
		err = json.Unmarshal(data, &dst.CreateSmartContractWallet)
		if err == nil {
			return nil // data stored in dst.CreateSmartContractWallet, return on the first match
		} else {
			dst.CreateSmartContractWallet = nil
			return fmt.Errorf("failed to unmarshal CreatedWallet as CreateSmartContractWallet: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreatedWallet) MarshalJSON() ([]byte, error) {
	if src.CreateCustodialWallet != nil {
		return json.Marshal(&src.CreateCustodialWallet)
	}

	if src.CreateExchangeWallet != nil {
		return json.Marshal(&src.CreateExchangeWallet)
	}

	if src.CreateMpcWallet != nil {
		return json.Marshal(&src.CreateMpcWallet)
	}

	if src.CreateSmartContractWallet != nil {
		return json.Marshal(&src.CreateSmartContractWallet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreatedWallet) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateCustodialWallet != nil {
		return obj.CreateCustodialWallet
	}

	if obj.CreateExchangeWallet != nil {
		return obj.CreateExchangeWallet
	}

	if obj.CreateMpcWallet != nil {
		return obj.CreateMpcWallet
	}

	if obj.CreateSmartContractWallet != nil {
		return obj.CreateSmartContractWallet
	}

	// all schemas are nil
	return nil
}

type NullableCreatedWallet struct {
	value *CreatedWallet
	isSet bool
}

func (v NullableCreatedWallet) Get() *CreatedWallet {
	return v.value
}

func (v *NullableCreatedWallet) Set(val *CreatedWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatedWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatedWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatedWallet(val *CreatedWallet) *NullableCreatedWallet {
	return &NullableCreatedWallet{value: val, isSet: true}
}

func (v NullableCreatedWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatedWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


