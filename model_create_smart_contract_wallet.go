/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// CreateSmartContractWallet - struct for CreateSmartContractWallet
type CreateSmartContractWallet struct {
	CreateSafeWallet *CreateSafeWallet
}

// CreateSafeWalletAsCreateSmartContractWallet is a convenience function that returns CreateSafeWallet wrapped in CreateSmartContractWallet
func CreateSafeWalletAsCreateSmartContractWallet(v *CreateSafeWallet) CreateSmartContractWallet {
	return CreateSmartContractWallet{
		CreateSafeWallet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSmartContractWallet) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Safe'
	if jsonDict["smart_contract_wallet_type"] == "Safe" {
		// try to unmarshal JSON data into CreateSafeWallet
		err = json.Unmarshal(data, &dst.CreateSafeWallet)
		if err == nil {
			return nil // data stored in dst.CreateSafeWallet, return on the first match
		} else {
			dst.CreateSafeWallet = nil
			return fmt.Errorf("failed to unmarshal CreateSmartContractWallet as CreateSafeWallet: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateSafeWallet'
	if jsonDict["smart_contract_wallet_type"] == "CreateSafeWallet" {
		// try to unmarshal JSON data into CreateSafeWallet
		err = json.Unmarshal(data, &dst.CreateSafeWallet)
		if err == nil {
			return nil // data stored in dst.CreateSafeWallet, return on the first match
		} else {
			dst.CreateSafeWallet = nil
			return fmt.Errorf("failed to unmarshal CreateSmartContractWallet as CreateSafeWallet: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSmartContractWallet) MarshalJSON() ([]byte, error) {
	if src.CreateSafeWallet != nil {
		return json.Marshal(&src.CreateSafeWallet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSmartContractWallet) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateSafeWallet != nil {
		return obj.CreateSafeWallet
	}

	// all schemas are nil
	return nil
}

type NullableCreateSmartContractWallet struct {
	value *CreateSmartContractWallet
	isSet bool
}

func (v NullableCreateSmartContractWallet) Get() *CreateSmartContractWallet {
	return v.value
}

func (v *NullableCreateSmartContractWallet) Set(val *CreateSmartContractWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSmartContractWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSmartContractWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSmartContractWallet(val *CreateSmartContractWallet) *NullableCreateSmartContractWallet {
	return &NullableCreateSmartContractWallet{value: val, isSet: true}
}

func (v NullableCreateSmartContractWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSmartContractWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


