/*
Cobo Wallet as a Service 2.0

Testing DevelopersWebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CoboWaas2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/CoboGlobal/cobo-waas2-go-api"
)

func Test_CoboWaas2_DevelopersWebhooksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEvent(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEventLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEventLogs(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListWebhookEventDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListWebhookEventDefinitions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService RetryWebhookEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.RetryWebhookEvent(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
