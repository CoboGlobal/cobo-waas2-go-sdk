/*
Cobo Wallet as a Service 2.0

Testing DevelopersWebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CoboWaas2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	CoboWaas2 "github.com/CoboGlobal/cobo-waas2-go-api"
	"github.com/CoboGlobal/cobo-waas2-go-api/crypto"
)

func Test_CoboWaas2_DevelopersWebhooksAPIService(t *testing.T) {

	configuration := CoboWaas2.NewConfiguration()
	apiClient := CoboWaas2.NewAPIClient(configuration)
	ctx := context.WithValue(context.Background(), CoboWaas2.ContextServerHost, "https://api[.xxxx].cobo.com/v2")
	ctx = context.WithValue(ctx, CoboWaas2.ContextPortalSigner, crypto.Ed25519Signer{
		Secret: "<YOUR_API_PRIV_KEY_IN_HEX>",
	})

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEvent(ctx, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService GetWebhookEventLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.GetWebhookEventLogs(ctx, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService ListEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.ListEvents(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevelopersWebhooksAPIService RetryWebhookEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.DevelopersWebhooksAPI.RetryWebhookEvent(ctx, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
