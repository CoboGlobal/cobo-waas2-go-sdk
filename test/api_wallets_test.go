/*
Cobo Wallet as a Service 2.0

Testing WalletsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CoboWaas2

import (
	"context"
	CoboWaas2 "github.com/CoboGlobal/cobo-waas2-go-api"
	"github.com/CoboGlobal/cobo-waas2-go-api/crypto"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_CoboWaas2_WalletsAPIService(t *testing.T) {

	configuration := CoboWaas2.NewConfiguration()
	apiClient := CoboWaas2.NewAPIClient(configuration)
	ctx := context.WithValue(context.Background(), CoboWaas2.ContextServerHost, "https://api.sandbox.cobo.com/v2")
	ctx = context.WithValue(ctx, CoboWaas2.ContextPortalSigner, crypto.Ed25519Signer{
		Secret: "c203fccc02a2269ec486d9c32ff74b5ba6ab0cdb461ee1fb0dfc616109115c06",
	})

	t.Run("Test WalletsAPIService AddWalletAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.AddWalletAddress(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService CreateWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.CreateWallet(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService DeleteWalletById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		httpRes, err := apiClient.WalletsAPI.DeleteWalletById(ctx, walletId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetAddressValidity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetAddressValidity(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetChains", func(t *testing.T) {

		//t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetChains(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetEnabledChains", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetEnabledChains(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetEnabledTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetEnabledTokens(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetMaxTransferableValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.GetMaxTransferableValue(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetSpendableList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.GetSpendableList(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetSupportedChains", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetSupportedChains(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetSupportedTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetSupportedTokens(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.GetTokens(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetWalletAddressTokenBalances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string
		var addressId string

		resp, httpRes, err := apiClient.WalletsAPI.GetWalletAddressTokenBalances(ctx, walletId, addressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetWalletById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.GetWalletById(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService GetWalletTokenBalances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.GetWalletTokenBalances(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService ListAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.ListAddresses(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService ListWallets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WalletsAPI.ListWallets(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService LockSpendableList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.LockSpendableList(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsAPIService UpdateWalletById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsAPI.UpdateWalletById(ctx, walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
