/*
Cobo Wallet as a Service 2.0

Testing WalletsMPCWalletAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CoboWaas2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/CoboGlobal/cobo-waas2-go-api"
)

func Test_CoboWaas2_WalletsMPCWalletAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WalletsMPCWalletAPIService CancelTssRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string
		var tssRequestId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.CancelTssRequest(context.Background(), vaultId, tssRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService CreateKeyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.CreateKeyGroup(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService CreateMpcProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.CreateMpcProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService CreateMpcVault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.CreateMpcVault(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService CreateTssRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.CreateTssRequest(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService DeleteKeyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string
		var keyGroupId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.DeleteKeyGroup(context.Background(), vaultId, keyGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService GetKeyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string
		var keyGroupId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.GetKeyGroup(context.Background(), vaultId, keyGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService GetMpcProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.GetMpcProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService GetMpcVault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.GetMpcVault(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService GetTssRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string
		var tssRequestId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.GetTssRequest(context.Background(), vaultId, tssRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ListCoboKeyHolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ListCoboKeyHolder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ListKeyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ListKeyGroup(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ListMpcProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ListMpcProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ListMpcVault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ListMpcVault(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ListTssRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ListTssRequest(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService ModifyMpcVault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.ModifyMpcVault(context.Background(), vaultId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService UpdateKeyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vaultId string
		var keyGroupId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.UpdateKeyGroup(context.Background(), vaultId, keyGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsMPCWalletAPIService UpdateMpcProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.WalletsMPCWalletAPI.UpdateMpcProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
