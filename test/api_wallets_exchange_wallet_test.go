/*
Cobo Wallet as a Service 2.0

Testing WalletsExchangeWalletAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CoboWaas2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/CoboGlobal/cobo-waas2-go-api"
)

func Test_CoboWaas2_WalletsExchangeWalletAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WalletsExchangeWalletAPIService GetExchangeSupportedAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeId ExchangeId

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.GetExchangeSupportedAssets(context.Background(), exchangeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService GetExchangeSupportedChains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeId ExchangeId

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.GetExchangeSupportedChains(context.Background(), exchangeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService GetExchangeWalletAssetBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.GetExchangeWalletAssetBalances(context.Background(), walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService LinkSubAccountsByWalletId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.LinkSubAccountsByWalletId(context.Background(), walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService ListExchanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.ListExchanges(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService ListSubAccountsByApikey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeId ExchangeId

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.ListSubAccountsByApikey(context.Background(), exchangeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WalletsExchangeWalletAPIService ListSubAccountsByWalletId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var walletId string

		resp, httpRes, err := apiClient.WalletsExchangeWalletAPI.ListSubAccountsByWalletId(context.Background(), walletId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
