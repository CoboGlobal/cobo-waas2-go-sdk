/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebhookEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookEvent{}

// WebhookEvent The data for webhook event.
type WebhookEvent struct {
	// The unique identifier of the event.
	Id string `json:"id"`
	// The URL of the webhook endpoint.
	Url string `json:"url"`
	// The timestamp at which the object was created, represented as an integer value, typically in milliseconds since the epoch.
	CreatedTimestamp int32 `json:"created_timestamp"`
	Type WebhookEventType `json:"type"`
	// The data of the webhook event in json format.
	Data map[string]interface{} `json:"data"`
	Status WebhookEventStatus `json:"status"`
	// The timestamp indicating the next scheduled retry for this event. This field is only present when the event status is set to `Retrying`. The timestamp is represented as an integer value, typically in milliseconds since the epoch. 
	NextRetryTimestamp *int32 `json:"next_retry_timestamp,omitempty"`
	// The number of retries left. This field is only present when the event status is `Retrying`.
	RetriesLeft *int32 `json:"retries_left,omitempty"`
}

type _WebhookEvent WebhookEvent

// NewWebhookEvent instantiates a new WebhookEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookEvent(id string, url string, createdTimestamp int32, type_ WebhookEventType, data map[string]interface{}, status WebhookEventStatus) *WebhookEvent {
	this := WebhookEvent{}
	this.Id = id
	this.Url = url
	this.CreatedTimestamp = createdTimestamp
	this.Type = type_
	this.Data = data
	this.Status = status
	return &this
}

// NewWebhookEventWithDefaults instantiates a new WebhookEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookEventWithDefaults() *WebhookEvent {
	this := WebhookEvent{}
	return &this
}

// GetId returns the Id field value
func (o *WebhookEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookEvent) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *WebhookEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookEvent) SetUrl(v string) {
	o.Url = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *WebhookEvent) GetCreatedTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetCreatedTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *WebhookEvent) SetCreatedTimestamp(v int32) {
	o.CreatedTimestamp = v
}

// GetType returns the Type field value
func (o *WebhookEvent) GetType() WebhookEventType {
	if o == nil {
		var ret WebhookEventType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetTypeOk() (*WebhookEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookEvent) SetType(v WebhookEventType) {
	o.Type = v
}

// GetData returns the Data field value
func (o *WebhookEvent) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WebhookEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *WebhookEvent) GetStatus() WebhookEventStatus {
	if o == nil {
		var ret WebhookEventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetStatusOk() (*WebhookEventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WebhookEvent) SetStatus(v WebhookEventStatus) {
	o.Status = v
}

// GetNextRetryTimestamp returns the NextRetryTimestamp field value if set, zero value otherwise.
func (o *WebhookEvent) GetNextRetryTimestamp() int32 {
	if o == nil || IsNil(o.NextRetryTimestamp) {
		var ret int32
		return ret
	}
	return *o.NextRetryTimestamp
}

// GetNextRetryTimestampOk returns a tuple with the NextRetryTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetNextRetryTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.NextRetryTimestamp) {
		return nil, false
	}
	return o.NextRetryTimestamp, true
}

// HasNextRetryTimestamp returns a boolean if a field has been set.
func (o *WebhookEvent) HasNextRetryTimestamp() bool {
	if o != nil && !IsNil(o.NextRetryTimestamp) {
		return true
	}

	return false
}

// SetNextRetryTimestamp gets a reference to the given int32 and assigns it to the NextRetryTimestamp field.
func (o *WebhookEvent) SetNextRetryTimestamp(v int32) {
	o.NextRetryTimestamp = &v
}

// GetRetriesLeft returns the RetriesLeft field value if set, zero value otherwise.
func (o *WebhookEvent) GetRetriesLeft() int32 {
	if o == nil || IsNil(o.RetriesLeft) {
		var ret int32
		return ret
	}
	return *o.RetriesLeft
}

// GetRetriesLeftOk returns a tuple with the RetriesLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetRetriesLeftOk() (*int32, bool) {
	if o == nil || IsNil(o.RetriesLeft) {
		return nil, false
	}
	return o.RetriesLeft, true
}

// HasRetriesLeft returns a boolean if a field has been set.
func (o *WebhookEvent) HasRetriesLeft() bool {
	if o != nil && !IsNil(o.RetriesLeft) {
		return true
	}

	return false
}

// SetRetriesLeft gets a reference to the given int32 and assigns it to the RetriesLeft field.
func (o *WebhookEvent) SetRetriesLeft(v int32) {
	o.RetriesLeft = &v
}

func (o WebhookEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["created_timestamp"] = o.CreatedTimestamp
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	if !IsNil(o.NextRetryTimestamp) {
		toSerialize["next_retry_timestamp"] = o.NextRetryTimestamp
	}
	if !IsNil(o.RetriesLeft) {
		toSerialize["retries_left"] = o.RetriesLeft
	}
	return toSerialize, nil
}

func (o *WebhookEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"created_timestamp",
		"type",
		"data",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookEvent := _WebhookEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhookEvent)

	if err != nil {
		return err
	}

	*o = WebhookEvent(varWebhookEvent)

	return err
}

type NullableWebhookEvent struct {
	value *WebhookEvent
	isSet bool
}

func (v NullableWebhookEvent) Get() *WebhookEvent {
	return v.value
}

func (v *NullableWebhookEvent) Set(val *WebhookEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEvent(val *WebhookEvent) *NullableWebhookEvent {
	return &NullableWebhookEvent{value: val, isSet: true}
}

func (v NullableWebhookEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


