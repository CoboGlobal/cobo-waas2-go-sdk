/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmLegacyTransactionFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmLegacyTransactionFee{}

// EvmLegacyTransactionFee The transaction fee is calculated by multiplying the gas price (fee price) by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). The gas units used must be smaller than the gas limit. 
type EvmLegacyTransactionFee struct {
	// The gas price, in gwei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
	GasPrice string `json:"gas_price"`
	// The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
	GasLimit string `json:"gas_limit"`
	FeeType FeeType `json:"fee_type"`
	// The token ID of the transaction fee.
	TokenId string `json:"token_id"`
}

type _EvmLegacyTransactionFee EvmLegacyTransactionFee

// NewEvmLegacyTransactionFee instantiates a new EvmLegacyTransactionFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmLegacyTransactionFee(gasPrice string, gasLimit string, feeType FeeType, tokenId string) *EvmLegacyTransactionFee {
	this := EvmLegacyTransactionFee{}
	this.GasPrice = gasPrice
	this.GasLimit = gasLimit
	this.FeeType = feeType
	this.TokenId = tokenId
	return &this
}

// NewEvmLegacyTransactionFeeWithDefaults instantiates a new EvmLegacyTransactionFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmLegacyTransactionFeeWithDefaults() *EvmLegacyTransactionFee {
	this := EvmLegacyTransactionFee{}
	var gasLimit string = "21000"
	this.GasLimit = gasLimit
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetGasPrice returns the GasPrice field value
func (o *EvmLegacyTransactionFee) GetGasPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *EvmLegacyTransactionFee) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *EvmLegacyTransactionFee) SetGasPrice(v string) {
	o.GasPrice = v
}

// GetGasLimit returns the GasLimit field value
func (o *EvmLegacyTransactionFee) GetGasLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *EvmLegacyTransactionFee) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *EvmLegacyTransactionFee) SetGasLimit(v string) {
	o.GasLimit = v
}

// GetFeeType returns the FeeType field value
func (o *EvmLegacyTransactionFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *EvmLegacyTransactionFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *EvmLegacyTransactionFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

// GetTokenId returns the TokenId field value
func (o *EvmLegacyTransactionFee) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *EvmLegacyTransactionFee) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *EvmLegacyTransactionFee) SetTokenId(v string) {
	o.TokenId = v
}

func (o EvmLegacyTransactionFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmLegacyTransactionFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gas_price"] = o.GasPrice
	toSerialize["gas_limit"] = o.GasLimit
	toSerialize["fee_type"] = o.FeeType
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *EvmLegacyTransactionFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gas_price",
		"gas_limit",
		"fee_type",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmLegacyTransactionFee := _EvmLegacyTransactionFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmLegacyTransactionFee)

	if err != nil {
		return err
	}

	*o = EvmLegacyTransactionFee(varEvmLegacyTransactionFee)

	return err
}

type NullableEvmLegacyTransactionFee struct {
	value *EvmLegacyTransactionFee
	isSet bool
}

func (v NullableEvmLegacyTransactionFee) Get() *EvmLegacyTransactionFee {
	return v.value
}

func (v *NullableEvmLegacyTransactionFee) Set(val *EvmLegacyTransactionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmLegacyTransactionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmLegacyTransactionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmLegacyTransactionFee(val *EvmLegacyTransactionFee) *NullableEvmLegacyTransactionFee {
	return &NullableEvmLegacyTransactionFee{value: val, isSet: true}
}

func (v NullableEvmLegacyTransactionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmLegacyTransactionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


