/*
Cobo Wallet as a Service 2.0

Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// WalletSubtype the model 'WalletSubtype'
type WalletSubtype string

// List of WalletSubtype
const (
	WALLETSUBTYPE_ASSET WalletSubtype = "Asset"
	WALLETSUBTYPE_WEB3 WalletSubtype = "Web3"
	WALLETSUBTYPE_MAIN WalletSubtype = "Main"
	WALLETSUBTYPE_SUB WalletSubtype = "Sub"
	WALLETSUBTYPE_ORG_CONTROLLED WalletSubtype = "Org-Controlled"
	WALLETSUBTYPE_USER_CONTROLLED WalletSubtype = "User-Controlled"
	WALLETSUBTYPE_SAFEWALLET WalletSubtype = "Safe{Wallet}"
)

// All allowed values of WalletSubtype enum
var AllowedWalletSubtypeEnumValues = []WalletSubtype{
	"Asset",
	"Web3",
	"Main",
	"Sub",
	"Org-Controlled",
	"User-Controlled",
	"Safe{Wallet}",
}

func (v *WalletSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WalletSubtype(value)
	for _, existing := range AllowedWalletSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WalletSubtype", value)
}

// NewWalletSubtypeFromValue returns a pointer to a valid WalletSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWalletSubtypeFromValue(v string) (*WalletSubtype, error) {
	ev := WalletSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WalletSubtype: valid values are %v", v, AllowedWalletSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WalletSubtype) IsValid() bool {
	for _, existing := range AllowedWalletSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WalletSubtype value
func (v WalletSubtype) Ptr() *WalletSubtype {
	return &v
}

type NullableWalletSubtype struct {
	value *WalletSubtype
	isSet bool
}

func (v NullableWalletSubtype) Get() *WalletSubtype {
	return v.value
}

func (v *NullableWalletSubtype) Set(val *WalletSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletSubtype(val *WalletSubtype) *NullableWalletSubtype {
	return &NullableWalletSubtype{value: val, isSet: true}
}

func (v NullableWalletSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

