/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// KeyHolderStatus the model 'KeyHolderStatus'
type KeyHolderStatus string

// List of KeyHolderStatus
const (
	KEYHOLDERSTATUS_VALID KeyHolderStatus = "Valid"
	KEYHOLDERSTATUS_NOT_CONFIGURED KeyHolderStatus = "NotConfigured"
	KEYHOLDERSTATUS_NOT_ACTIVATED KeyHolderStatus = "NotActivated"
	KEYHOLDERSTATUS_CHANGED KeyHolderStatus = "Changed"
)

// All allowed values of KeyHolderStatus enum
var AllowedKeyHolderStatusEnumValues = []KeyHolderStatus{
	"Valid",
	"NotConfigured",
	"NotActivated",
	"Changed",
}

func (v *KeyHolderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyHolderStatus(value)
	for _, existing := range AllowedKeyHolderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyHolderStatus", value)
}

// NewKeyHolderStatusFromValue returns a pointer to a valid KeyHolderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyHolderStatusFromValue(v string) (*KeyHolderStatus, error) {
	ev := KeyHolderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyHolderStatus: valid values are %v", v, AllowedKeyHolderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyHolderStatus) IsValid() bool {
	for _, existing := range AllowedKeyHolderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyHolderStatus value
func (v KeyHolderStatus) Ptr() *KeyHolderStatus {
	return &v
}

type NullableKeyHolderStatus struct {
	value *KeyHolderStatus
	isSet bool
}

func (v NullableKeyHolderStatus) Get() *KeyHolderStatus {
	return v.value
}

func (v *NullableKeyHolderStatus) Set(val *KeyHolderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyHolderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyHolderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyHolderStatus(val *KeyHolderStatus) *NullableKeyHolderStatus {
	return &NullableKeyHolderStatus{value: val, isSet: true}
}

func (v NullableKeyHolderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyHolderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

