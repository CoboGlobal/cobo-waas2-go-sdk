/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BaseTransactionAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransactionAddress{}

// BaseTransactionAddress The data for transaction source information.
type BaseTransactionAddress struct {
	Type TransactionAddressType `json:"type"`
	// Address
	Address *string `json:"address,omitempty"`
	// Address memo
	Memo *string `json:"memo,omitempty"`
}

type _BaseTransactionAddress BaseTransactionAddress

// NewBaseTransactionAddress instantiates a new BaseTransactionAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransactionAddress(type_ TransactionAddressType) *BaseTransactionAddress {
	this := BaseTransactionAddress{}
	this.Type = type_
	return &this
}

// NewBaseTransactionAddressWithDefaults instantiates a new BaseTransactionAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransactionAddressWithDefaults() *BaseTransactionAddress {
	this := BaseTransactionAddress{}
	return &this
}

// GetType returns the Type field value
func (o *BaseTransactionAddress) GetType() TransactionAddressType {
	if o == nil {
		var ret TransactionAddressType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseTransactionAddress) GetTypeOk() (*TransactionAddressType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseTransactionAddress) SetType(v TransactionAddressType) {
	o.Type = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *BaseTransactionAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransactionAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *BaseTransactionAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *BaseTransactionAddress) SetAddress(v string) {
	o.Address = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *BaseTransactionAddress) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransactionAddress) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *BaseTransactionAddress) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *BaseTransactionAddress) SetMemo(v string) {
	o.Memo = &v
}

func (o BaseTransactionAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransactionAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	return toSerialize, nil
}

func (o *BaseTransactionAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseTransactionAddress := _BaseTransactionAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseTransactionAddress)

	if err != nil {
		return err
	}

	*o = BaseTransactionAddress(varBaseTransactionAddress)

	return err
}

type NullableBaseTransactionAddress struct {
	value *BaseTransactionAddress
	isSet bool
}

func (v NullableBaseTransactionAddress) Get() *BaseTransactionAddress {
	return v.value
}

func (v *NullableBaseTransactionAddress) Set(val *BaseTransactionAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransactionAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransactionAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransactionAddress(val *BaseTransactionAddress) *NullableBaseTransactionAddress {
	return &NullableBaseTransactionAddress{value: val, isSet: true}
}

func (v NullableBaseTransactionAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransactionAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


