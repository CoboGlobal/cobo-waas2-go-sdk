/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MPCWalletTransactionAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MPCWalletTransactionAddress{}

// MPCWalletTransactionAddress struct for MPCWalletTransactionAddress
type MPCWalletTransactionAddress struct {
	Type TransactionAddressType `json:"type"`
	// Address
	Address *string `json:"address,omitempty"`
	// Address memo
	Memo *string `json:"memo,omitempty"`
	// Unique id of the wallet.
	WalletId string `json:"wallet_id"`
	MpcUsedKeyGroup *MpcSigningGroup `json:"mpc_used_key_group,omitempty"`
}

type _MPCWalletTransactionAddress MPCWalletTransactionAddress

// NewMPCWalletTransactionAddress instantiates a new MPCWalletTransactionAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMPCWalletTransactionAddress(type_ TransactionAddressType, walletId string) *MPCWalletTransactionAddress {
	this := MPCWalletTransactionAddress{}
	this.Type = type_
	this.WalletId = walletId
	return &this
}

// NewMPCWalletTransactionAddressWithDefaults instantiates a new MPCWalletTransactionAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMPCWalletTransactionAddressWithDefaults() *MPCWalletTransactionAddress {
	this := MPCWalletTransactionAddress{}
	return &this
}

// GetType returns the Type field value
func (o *MPCWalletTransactionAddress) GetType() TransactionAddressType {
	if o == nil {
		var ret TransactionAddressType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MPCWalletTransactionAddress) GetTypeOk() (*TransactionAddressType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MPCWalletTransactionAddress) SetType(v TransactionAddressType) {
	o.Type = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MPCWalletTransactionAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCWalletTransactionAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MPCWalletTransactionAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MPCWalletTransactionAddress) SetAddress(v string) {
	o.Address = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *MPCWalletTransactionAddress) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCWalletTransactionAddress) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *MPCWalletTransactionAddress) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *MPCWalletTransactionAddress) SetMemo(v string) {
	o.Memo = &v
}

// GetWalletId returns the WalletId field value
func (o *MPCWalletTransactionAddress) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *MPCWalletTransactionAddress) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *MPCWalletTransactionAddress) SetWalletId(v string) {
	o.WalletId = v
}

// GetMpcUsedKeyGroup returns the MpcUsedKeyGroup field value if set, zero value otherwise.
func (o *MPCWalletTransactionAddress) GetMpcUsedKeyGroup() MpcSigningGroup {
	if o == nil || IsNil(o.MpcUsedKeyGroup) {
		var ret MpcSigningGroup
		return ret
	}
	return *o.MpcUsedKeyGroup
}

// GetMpcUsedKeyGroupOk returns a tuple with the MpcUsedKeyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MPCWalletTransactionAddress) GetMpcUsedKeyGroupOk() (*MpcSigningGroup, bool) {
	if o == nil || IsNil(o.MpcUsedKeyGroup) {
		return nil, false
	}
	return o.MpcUsedKeyGroup, true
}

// HasMpcUsedKeyGroup returns a boolean if a field has been set.
func (o *MPCWalletTransactionAddress) HasMpcUsedKeyGroup() bool {
	if o != nil && !IsNil(o.MpcUsedKeyGroup) {
		return true
	}

	return false
}

// SetMpcUsedKeyGroup gets a reference to the given MpcSigningGroup and assigns it to the MpcUsedKeyGroup field.
func (o *MPCWalletTransactionAddress) SetMpcUsedKeyGroup(v MpcSigningGroup) {
	o.MpcUsedKeyGroup = &v
}

func (o MPCWalletTransactionAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MPCWalletTransactionAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	toSerialize["wallet_id"] = o.WalletId
	if !IsNil(o.MpcUsedKeyGroup) {
		toSerialize["mpc_used_key_group"] = o.MpcUsedKeyGroup
	}
	return toSerialize, nil
}

func (o *MPCWalletTransactionAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"wallet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMPCWalletTransactionAddress := _MPCWalletTransactionAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMPCWalletTransactionAddress)

	if err != nil {
		return err
	}

	*o = MPCWalletTransactionAddress(varMPCWalletTransactionAddress)

	return err
}

type NullableMPCWalletTransactionAddress struct {
	value *MPCWalletTransactionAddress
	isSet bool
}

func (v NullableMPCWalletTransactionAddress) Get() *MPCWalletTransactionAddress {
	return v.value
}

func (v *NullableMPCWalletTransactionAddress) Set(val *MPCWalletTransactionAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableMPCWalletTransactionAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableMPCWalletTransactionAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMPCWalletTransactionAddress(val *MPCWalletTransactionAddress) *NullableMPCWalletTransactionAddress {
	return &NullableMPCWalletTransactionAddress{value: val, isSet: true}
}

func (v NullableMPCWalletTransactionAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMPCWalletTransactionAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


