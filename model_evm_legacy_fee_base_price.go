/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvmLegacyFeeBasePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmLegacyFeeBasePrice{}

// EvmLegacyFeeBasePrice The legacy fee price for estimate fees or transfer.
type EvmLegacyFeeBasePrice struct {
	// ID of the fee token. Unique in all chains scope.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// The Price of Gas, unit GWei.
	GasPrice string `json:"gas_price"`
}

type _EvmLegacyFeeBasePrice EvmLegacyFeeBasePrice

// NewEvmLegacyFeeBasePrice instantiates a new EvmLegacyFeeBasePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmLegacyFeeBasePrice(gasPrice string) *EvmLegacyFeeBasePrice {
	this := EvmLegacyFeeBasePrice{}
	this.GasPrice = gasPrice
	return &this
}

// NewEvmLegacyFeeBasePriceWithDefaults instantiates a new EvmLegacyFeeBasePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmLegacyFeeBasePriceWithDefaults() *EvmLegacyFeeBasePrice {
	this := EvmLegacyFeeBasePrice{}
	return &this
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *EvmLegacyFeeBasePrice) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmLegacyFeeBasePrice) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *EvmLegacyFeeBasePrice) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *EvmLegacyFeeBasePrice) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetGasPrice returns the GasPrice field value
func (o *EvmLegacyFeeBasePrice) GetGasPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *EvmLegacyFeeBasePrice) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *EvmLegacyFeeBasePrice) SetGasPrice(v string) {
	o.GasPrice = v
}

func (o EvmLegacyFeeBasePrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmLegacyFeeBasePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	toSerialize["gas_price"] = o.GasPrice
	return toSerialize, nil
}

func (o *EvmLegacyFeeBasePrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gas_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvmLegacyFeeBasePrice := _EvmLegacyFeeBasePrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvmLegacyFeeBasePrice)

	if err != nil {
		return err
	}

	*o = EvmLegacyFeeBasePrice(varEvmLegacyFeeBasePrice)

	return err
}

type NullableEvmLegacyFeeBasePrice struct {
	value *EvmLegacyFeeBasePrice
	isSet bool
}

func (v NullableEvmLegacyFeeBasePrice) Get() *EvmLegacyFeeBasePrice {
	return v.value
}

func (v *NullableEvmLegacyFeeBasePrice) Set(val *EvmLegacyFeeBasePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmLegacyFeeBasePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmLegacyFeeBasePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmLegacyFeeBasePrice(val *EvmLegacyFeeBasePrice) *NullableEvmLegacyFeeBasePrice {
	return &NullableEvmLegacyFeeBasePrice{value: val, isSet: true}
}

func (v NullableEvmLegacyFeeBasePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmLegacyFeeBasePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


