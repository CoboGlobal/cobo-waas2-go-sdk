/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"fmt"
)

// SmartContractWalletType What kind of smart contract does this wallet use
type SmartContractWalletType string

// List of SmartContractWalletType
const (
	SMARTCONTRACTWALLETTYPE_SAFE_WALLET SmartContractWalletType = "SafeWallet"
)

// All allowed values of SmartContractWalletType enum
var AllowedSmartContractWalletTypeEnumValues = []SmartContractWalletType{
	"SafeWallet",
}

func (v *SmartContractWalletType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmartContractWalletType(value)
	for _, existing := range AllowedSmartContractWalletTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmartContractWalletType", value)
}

// NewSmartContractWalletTypeFromValue returns a pointer to a valid SmartContractWalletType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmartContractWalletTypeFromValue(v string) (*SmartContractWalletType, error) {
	ev := SmartContractWalletType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmartContractWalletType: valid values are %v", v, AllowedSmartContractWalletTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmartContractWalletType) IsValid() bool {
	for _, existing := range AllowedSmartContractWalletTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmartContractWalletType value
func (v SmartContractWalletType) Ptr() *SmartContractWalletType {
	return &v
}

type NullableSmartContractWalletType struct {
	value *SmartContractWalletType
	isSet bool
}

func (v NullableSmartContractWalletType) Get() *SmartContractWalletType {
	return v.value
}

func (v *NullableSmartContractWalletType) Set(val *SmartContractWalletType) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractWalletType) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractWalletType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractWalletType(val *SmartContractWalletType) *NullableSmartContractWalletType {
	return &NullableSmartContractWalletType{value: val, isSet: true}
}

func (v NullableSmartContractWalletType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractWalletType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

