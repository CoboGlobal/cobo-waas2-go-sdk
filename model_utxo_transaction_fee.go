/*
Cobo Wallet as a Service 2.0

API version: 1.0.0
Contact: support@cobo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package CoboWaas2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UtxoTransactionFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtxoTransactionFee{}

// UtxoTransactionFee The transaction fee for UTXO-based chains. The estimated fee is calculated by multiplying the fee rate by the transaction size: (fee rate * transaction size). 
type UtxoTransactionFee struct {
	// The token ID of the transaction fee.
	FeeTokenId *string `json:"fee_token_id,omitempty"`
	// The fee rate, in sats/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
	FeeRate string `json:"fee_rate"`
	// The maximum fee amount in fee_coin.
	MaxFeeAmount *string `json:"max_fee_amount,omitempty"`
	FeeType FeeType `json:"fee_type"`
}

type _UtxoTransactionFee UtxoTransactionFee

// NewUtxoTransactionFee instantiates a new UtxoTransactionFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtxoTransactionFee(feeRate string, feeType FeeType) *UtxoTransactionFee {
	this := UtxoTransactionFee{}
	this.FeeRate = feeRate
	this.FeeType = feeType
	return &this
}

// NewUtxoTransactionFeeWithDefaults instantiates a new UtxoTransactionFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtxoTransactionFeeWithDefaults() *UtxoTransactionFee {
	this := UtxoTransactionFee{}
	var feeType FeeType = FEETYPE_EVM_EIP_1559
	this.FeeType = feeType
	return &this
}

// GetFeeTokenId returns the FeeTokenId field value if set, zero value otherwise.
func (o *UtxoTransactionFee) GetFeeTokenId() string {
	if o == nil || IsNil(o.FeeTokenId) {
		var ret string
		return ret
	}
	return *o.FeeTokenId
}

// GetFeeTokenIdOk returns a tuple with the FeeTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtxoTransactionFee) GetFeeTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeTokenId) {
		return nil, false
	}
	return o.FeeTokenId, true
}

// HasFeeTokenId returns a boolean if a field has been set.
func (o *UtxoTransactionFee) HasFeeTokenId() bool {
	if o != nil && !IsNil(o.FeeTokenId) {
		return true
	}

	return false
}

// SetFeeTokenId gets a reference to the given string and assigns it to the FeeTokenId field.
func (o *UtxoTransactionFee) SetFeeTokenId(v string) {
	o.FeeTokenId = &v
}

// GetFeeRate returns the FeeRate field value
func (o *UtxoTransactionFee) GetFeeRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeRate
}

// GetFeeRateOk returns a tuple with the FeeRate field value
// and a boolean to check if the value has been set.
func (o *UtxoTransactionFee) GetFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeRate, true
}

// SetFeeRate sets field value
func (o *UtxoTransactionFee) SetFeeRate(v string) {
	o.FeeRate = v
}

// GetMaxFeeAmount returns the MaxFeeAmount field value if set, zero value otherwise.
func (o *UtxoTransactionFee) GetMaxFeeAmount() string {
	if o == nil || IsNil(o.MaxFeeAmount) {
		var ret string
		return ret
	}
	return *o.MaxFeeAmount
}

// GetMaxFeeAmountOk returns a tuple with the MaxFeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtxoTransactionFee) GetMaxFeeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFeeAmount) {
		return nil, false
	}
	return o.MaxFeeAmount, true
}

// HasMaxFeeAmount returns a boolean if a field has been set.
func (o *UtxoTransactionFee) HasMaxFeeAmount() bool {
	if o != nil && !IsNil(o.MaxFeeAmount) {
		return true
	}

	return false
}

// SetMaxFeeAmount gets a reference to the given string and assigns it to the MaxFeeAmount field.
func (o *UtxoTransactionFee) SetMaxFeeAmount(v string) {
	o.MaxFeeAmount = &v
}

// GetFeeType returns the FeeType field value
func (o *UtxoTransactionFee) GetFeeType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *UtxoTransactionFee) GetFeeTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *UtxoTransactionFee) SetFeeType(v FeeType) {
	o.FeeType = v
}

func (o UtxoTransactionFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtxoTransactionFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeTokenId) {
		toSerialize["fee_token_id"] = o.FeeTokenId
	}
	toSerialize["fee_rate"] = o.FeeRate
	if !IsNil(o.MaxFeeAmount) {
		toSerialize["max_fee_amount"] = o.MaxFeeAmount
	}
	toSerialize["fee_type"] = o.FeeType
	return toSerialize, nil
}

func (o *UtxoTransactionFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_rate",
		"fee_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUtxoTransactionFee := _UtxoTransactionFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUtxoTransactionFee)

	if err != nil {
		return err
	}

	*o = UtxoTransactionFee(varUtxoTransactionFee)

	return err
}

type NullableUtxoTransactionFee struct {
	value *UtxoTransactionFee
	isSet bool
}

func (v NullableUtxoTransactionFee) Get() *UtxoTransactionFee {
	return v.value
}

func (v *NullableUtxoTransactionFee) Set(val *UtxoTransactionFee) {
	v.value = val
	v.isSet = true
}

func (v NullableUtxoTransactionFee) IsSet() bool {
	return v.isSet
}

func (v *NullableUtxoTransactionFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtxoTransactionFee(val *UtxoTransactionFee) *NullableUtxoTransactionFee {
	return &NullableUtxoTransactionFee{value: val, isSet: true}
}

func (v NullableUtxoTransactionFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtxoTransactionFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


